
/****** Object:  Trigger [dbo].[TR_CPTGC_INS_UPD]    Script Date: 21/07/2021 18:25:43 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER TRIGGER [dbo].[TR_CPTGC_INS_UPD] ON [dbo].[CUSTOMER_PAYMENT_MEANS_RECHARGES]
AFTER INSERT, UPDATE
AS
BEGIN
	SET NOCOUNT ON;	

	DECLARE @OPERATION_DATE DATETIME;
	DECLARE @BASE_DATE DATETIME;
	DECLARE @CPTGC_ID NUMERIC(18,0);
	DECLARE @TRANS_STATUS INT;
	DECLARE @LOCAL_BATCH_TIME VARCHAR(10);
	DECLARE @LOCAL_TIMEZONE VARCHAR(100);
	DECLARE @UTC_DATE DATETIME;
	DECLARE @STATUS_DATE DATETIME;
	DECLARE @OPERATION_TOTAL_AMOUNT NUMERIC(18,0);
	DECLARE @GATEWAY_FIXED_FEE NUMERIC(18,0);
	DECLARE @GATEWAY_PERC_FEE NUMERIC(18,5);
	DECLARE @GATEWAY_MIN_FEE NUMERIC(18,0);
	DECLARE @GATEWAY_FEE NUMERIC(18,0);

	SELECT	@CPTGC_ID = i.CUSPMR_CPTGC_ID,								-- Gateway
			@TRANS_STATUS = i.CUSPMR_TRANS_STATUS,						-- Operation status
			@LOCAL_BATCH_TIME = c.CPTGC_LOCAL_BATCH_TIME,				-- Local batch time
			@LOCAL_TIMEZONE = c.CPTGC_TIMEZONE,							-- Local timezone
			@UTC_DATE = i.CUSPMR_UTC_DATE,								-- Operation date UTC
			@STATUS_DATE = i.CUSPMR_STATUS_DATE,						-- Operation status date UTC
			@OPERATION_TOTAL_AMOUNT = i.CUSPMR_TOTAL_AMOUNT_CHARGED,	-- Total amount charged
			@GATEWAY_FIXED_FEE = COALESCE(c.CPTGC_FIXED_FEE,0),			-- Fixed fee per gateway
			@GATEWAY_PERC_FEE = COALESCE(c.CPTGC_PERC_FEE,0),			-- Variable fee per gateway
			@GATEWAY_MIN_FEE = COALESCE(c.CPTGC_MIN_FEE,0),				-- Minimum fee per gateway
			@GATEWAY_FEE =	CASE WHEN (COALESCE(c.CPTGC_FIXED_FEE,0) + (COALESCE(c.CPTGC_PERC_FEE,0) * i.CUSPMR_TOTAL_AMOUNT_CHARGED)/100.00) > COALESCE(c.CPTGC_MIN_FEE,0) THEN
								-- Computed fee per gateway = fixed fee + variable fee aplied to total amount
								COALESCE(c.CPTGC_FIXED_FEE,0) + (COALESCE(c.CPTGC_PERC_FEE,0) * i.CUSPMR_TOTAL_AMOUNT_CHARGED)/100.00
							ELSE
								-- Computed fee per gateway = minimum
								COALESCE(c.CPTGC_MIN_FEE,0)
							END						
	FROM INSERTED i 
	INNER JOIN CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG c ON i.CUSPMR_CPTGC_ID = c.CPTGC_ID;
	
	/***********************************************************************************/
	/* OPERATION WILL BE DISCARDED IF GATEWAY BATCH TIME AND TIMEZONE ARE NOT INFORMED */
	/***********************************************************************************/
	IF (@LOCAL_BATCH_TIME IS NOT NULL AND @LOCAL_TIMEZONE IS NOT NULL AND LTRIM(RTRIM(@LOCAL_BATCH_TIME)) != '' AND LTRIM(RTRIM(@LOCAL_TIMEZONE)) != '')
	BEGIN		
		/************************************************/
		/* IDENTIFY OPERATION TYPE (RECHARGE OR REFUND) */
		/************************************************/

		DECLARE @OPERATION_TYPE VARCHAR(10)
		IF EXISTS (SELECT * FROM DELETED) -- UPDATE -> CAN BE RECHARGE OR REFUND
		BEGIN
			DECLARE @PREVIOUS_TRANS_STATUS INT;
			SELECT @PREVIOUS_TRANS_STATUS = d.CUSPMR_TRANS_STATUS FROM deleted d;

			IF @TRANS_STATUS = 4 AND @PREVIOUS_TRANS_STATUS <> 4 -- STATUS UPDATED TO 4 (RECHARGE)
			BEGIN
				SET @OPERATION_TYPE = 'RECHARGE';
			END
			ELSE IF @TRANS_STATUS = 10 AND @PREVIOUS_TRANS_STATUS <> 10 -- STATUS UPDATED TO 10 (REFUND)
			BEGIN
				SET @OPERATION_TYPE = 'REFUND';
			END		
			SET @OPERATION_DATE = @STATUS_DATE; -- IN UPDATES, WE GET STATUS DATE AS OPERATION DATE
		END
		ELSE -- INSERT -> ALWAYS RECHARGE
		BEGIN 
			IF @TRANS_STATUS = 4 OR @TRANS_STATUS = 8 -- INSERT WITH STATUS = 4 (RECHARGE) STATUS = 8 (GATEWAY CHANGE)
			BEGIN
				SET @OPERATION_TYPE = 'RECHARGE';
				SET @OPERATION_DATE = @UTC_DATE; -- IN INSERTS, WE GET UTC DATE AS OPERATION DATE
			END
		END
	
		/********************************************/
		/* IDENTIFY OPERATION DATE USING BATCH TIME */
		/********************************************/
		
		-- OPERATION DATE (UTC) IS CONVERTED TO LOCAL TIME, USING TIMEZONE FROM CPTGC
		DECLARE @OPERATION_DATE_LOCAL_TIME DATETIME = (SELECT [dbo].[UDF_ConvertUtcToLocalByTimezoneIdentifier] (@LOCAL_TIMEZONE, @OPERATION_DATE));

		-- BASE DATE IS OPERATION DATE WITHOUT TIME
		SET @BASE_DATE = (SELECT REPLACE(CONVERT(VARCHAR(10), @OPERATION_DATE_LOCAL_TIME, 111), '/', '-'));
		
		DECLARE @DAY_TODAY DATETIME = @BASE_DATE + ' 00:00:00';
		DECLARE @DAY_TOMORROW DATETIME = (SELECT DATEADD(dd, 1, @DAY_TODAY));
		DECLARE @DAY_YESTERDAY DATETIME = (SELECT DATEADD(dd, -1, @DAY_TODAY));

		-- FINAL_DATE IS BATCH TIME FOR OPERATION BASE_DATE
		DECLARE @FINAL_DATE DATETIME = @BASE_DATE + ' ' + @LOCAL_BATCH_TIME;
		-- CHECK DATE IS MIDDAY FOR OPERATION BASE_DATE
		DECLARE @CHECK_DATE DATETIME = @BASE_DATE + ' ' + '12:00:00';
		
		DECLARE @SELECTED_DATE DATETIME;		
		IF (@OPERATION_DATE >= @FINAL_DATE AND @FINAL_DATE >= @CHECK_DATE)
		BEGIN
			-- EXAMPLE: OPERATION_DATE = 2019-10-01 23:30:00 AND FINAL_DATE = 2019-10-01 23:00:00 THEN SELECTED DATE = 2019-10-02 00:00:00
			SET @SELECTED_DATE = @DAY_TOMORROW -- OPERATION WILL BE STORED IN NEXT DAY
		END
		ELSE IF (@OPERATION_DATE < @FINAL_DATE AND @FINAL_DATE < @CHECK_DATE)
		BEGIN
			-- EXAMPLE: OPERATION_DATE = 2019-10-02 01:00:00 AND FINAL_DATE = 2019-10-02 02:00:00 THEN SELECTED DATE = 2019-10-01 00:00:00
			SET @SELECTED_DATE = @DAY_YESTERDAY -- OPERATION WILL BE STORED IN PREVIOUS DAY
		END
		ELSE
		BEGIN
			-- EXAMPLE 1: OPERATION_DATE = 2019-10-01 16:00:00 AND FINAL_DATE = 2019-10-01 02:00:00 THEN SELECTED DATE = 2019-10-01 00:00:00
			-- EXAMPLE 2: OPERATION_DATE = 2019-10-01 16:00:00 AND FINAL_DATE = 2019-10-01 23:00:00 THEN SELECTED DATE = 2019-10-01 00:00:00
			SET @SELECTED_DATE = @DAY_TODAY -- OPERATION WILL BE STORED IN CURRENT DAY
		END		

		IF (@OPERATION_TYPE = 'RECHARGE')
		BEGIN
			IF (SELECT COUNT(*) FROM GATEWAY_BENEFIT b WHERE b.GTWB_CPTGC_ID = @CPTGC_ID AND b.GTWB_DATE = @SELECTED_DATE) = 1
			BEGIN
				/*****************************/
				/* IF DAY EXISTS FOR GATEWAY */
				/*****************************/
				UPDATE GTWB 
				SET GTWB.GTWB_BACKOFFICE_PAYMENTS		=	GTWB_BACKOFFICE_PAYMENTS			+	1,
					GTWB.GTWB_BACKOFFICE_BASE			=	GTWB.GTWB_BACKOFFICE_BASE			+	i.CUSPMR_AMOUNT,
					GTWB.GTWB_BACKOFFICE_GROSS			=	GTWB.GTWB_BACKOFFICE_GROSS			+	i.CUSPMR_TOTAL_AMOUNT_CHARGED,
					GTWB.GTWB_BACKOFFICE_FEE_INTEGRA	=	GTWB.GTWB_BACKOFFICE_FEE_INTEGRA	+	(i.CUSPMR_PARTIAL_FIXED_FEE + i.CUSPMR_PARTIAL_PERC_FEE),
					GTWB.GTWB_BACKOFFICE_FEE_GATEWAY	=	GTWB.GTWB_BACKOFFICE_FEE_GATEWAY	+	@GATEWAY_FEE
				FROM GATEWAY_BENEFIT GTWB
				INNER JOIN INSERTED i
				ON GTWB.GTWB_CPTGC_ID = i.CUSPMR_CPTGC_ID
				AND GTWB.GTWB_DATE = @SELECTED_DATE
			END
			ELSE 
			BEGIN
				/*****************/
				/* IF DAY IS NEW */
				/*****************/
				INSERT INTO GATEWAY_BENEFIT (
					GTWB_CPTGC_ID, 
					GTWB_DATE, 
					GTWB_BACKOFFICE_PAYMENTS, 
					GTWB_BACKOFFICE_BASE, 
					GTWB_BACKOFFICE_GROSS, 
					GTWB_BACKOFFICE_FEE_INTEGRA,
					GTWB_BACKOFFICE_FEE_GATEWAY
				)
				SELECT 
					i.CUSPMR_CPTGC_ID, 
					@SELECTED_DATE, 
					1, 
					i.CUSPMR_AMOUNT, 
					i.CUSPMR_TOTAL_AMOUNT_CHARGED, 
					(i.CUSPMR_PARTIAL_FIXED_FEE + i.CUSPMR_PARTIAL_PERC_FEE),
					@GATEWAY_FEE
				FROM INSERTED i
			END
		END
		ELSE IF @OPERATION_TYPE = 'REFUND'
		BEGIN		
			IF (SELECT COUNT(*) FROM GATEWAY_BENEFIT b WHERE b.GTWB_CPTGC_ID = @CPTGC_ID AND b.GTWB_DATE = @SELECTED_DATE) = 1
			BEGIN
				/*****************************/
				/* IF DAY EXISTS FOR GATEWAY */
				/*****************************/
				UPDATE GTWB 
				SET GTWB.GTWB_BACKOFFICE_REFUNDS		=	GTWB_BACKOFFICE_REFUNDS	+ 1,
					GTWB.GTWB_BACKOFFICE_BASE			=	CASE WHEN i.CUSPMR_REFUND_AMOUNT IS NULL THEN 
																GTWB.GTWB_BACKOFFICE_BASE - i.CUSPMR_AMOUNT
															ELSE
																GTWB.GTWB_BACKOFFICE_BASE - i.CUSPMR_REFUND_AMOUNT
															END,
					GTWB.GTWB_BACKOFFICE_GROSS			=	CASE WHEN i.CUSPMR_REFUND_AMOUNT IS NULL THEN 
																GTWB.GTWB_BACKOFFICE_GROSS - i.CUSPMR_TOTAL_AMOUNT_CHARGED
															ELSE
																GTWB.GTWB_BACKOFFICE_GROSS - i.CUSPMR_REFUND_AMOUNT
															END,
					GTWB.GTWB_BACKOFFICE_FEE_INTEGRA	=	CASE WHEN i.CUSPMR_REFUND_AMOUNT IS NULL THEN
																GTWB.GTWB_BACKOFFICE_FEE_INTEGRA - (i.CUSPMR_PARTIAL_FIXED_FEE + i.CUSPMR_PARTIAL_PERC_FEE)
															ELSE
																CASE WHEN i.CUSPMR_REFUND_OPE_ID IS NOT NULL THEN
																	GTWB.GTWB_BACKOFFICE_FEE_INTEGRA - (h.OPE_PARTIAL_FIXED_FEE + h.OPE_PARTIAL_PERC_FEE)
																END
															END
				FROM GATEWAY_BENEFIT GTWB
				INNER JOIN INSERTED i
				ON GTWB.GTWB_CPTGC_ID = i.CUSPMR_CPTGC_ID
				AND GTWB.GTWB_DATE = @SELECTED_DATE
				LEFT JOIN OPERATIONS h
				ON i.CUSPMR_REFUND_OPE_ID = h.OPE_ID
			END
			ELSE
			BEGIN
				/*****************/
				/* IF DAY IS NEW */
				/*****************/
				INSERT INTO GATEWAY_BENEFIT (
					GTWB_CPTGC_ID, 
					GTWB_DATE, 
					GTWB_BACKOFFICE_REFUNDS, 
					GTWB_BACKOFFICE_BASE, 
					GTWB_BACKOFFICE_GROSS, 
					GTWB_BACKOFFICE_FEE_INTEGRA,
					GTWB_BACKOFFICE_FEE_GATEWAY
				)
				SELECT 
					i.CUSPMR_CPTGC_ID, 
					@SELECTED_DATE, 
					1, 
					CASE WHEN i.CUSPMR_REFUND_AMOUNT IS NULL THEN 
						-1 * i.CUSPMR_AMOUNT
					ELSE
						-1 * i.CUSPMR_REFUND_AMOUNT
					END,
					CASE WHEN i.CUSPMR_REFUND_AMOUNT IS NULL THEN 
						-1 * i.CUSPMR_TOTAL_AMOUNT_CHARGED
					ELSE
						-1 * i.CUSPMR_REFUND_AMOUNT
					END, 
					CASE WHEN i.CUSPMR_REFUND_AMOUNT IS NULL THEN
						-1 * (i.CUSPMR_PARTIAL_FIXED_FEE + i.CUSPMR_PARTIAL_PERC_FEE)
					ELSE
						CASE WHEN i.CUSPMR_REFUND_OPE_ID IS NOT NULL THEN
							-1 * (h.OPE_PARTIAL_FIXED_FEE + h.OPE_PARTIAL_PERC_FEE)
						ELSE
							0
						END
					END,
					0 -- A VALUE IS SET BECAUSE THIS COLUMN IS USED IN OTHER CALCULATED COLUMNS
				FROM INSERTED i
				LEFT JOIN OPERATIONS h
				ON i.CUSPMR_REFUND_OPE_ID = h.OPE_ID
			END
		END
	END
END
