ALTER PROCEDURE [dbo].[Update_DB_OPERATIONS_MINUTE]
	@FromMinute AS Datetime
AS	
BEGIN

	IF (@FromMinute IS NULL)
	BEGIN
		SET @FromMinute = (SELECT MAX([MINUTE_UTC])
		FROM DB_OPERATIONS_MINUTE
		where [MINUTE_UTC] < GETUTCDATE())

		IF (@FromMinute IS NOT NULL)
		BEGIN
			SET @FromMinute = DATEADD(HOUR, -1, @FromMinute)
		END		
	END

	IF (@FromMinute IS NULL)
	BEGIN
		SET @FromMinute = (SELECT MIN(CASE WHEN OPE_TYPE = 1 OR OPE_TYPE = 2 OR OPE_TYPE = 3 THEN OPE_UTC_INIDATE ELSE OPE_UTC_DATE END)
		FROM ALL_OPERATIONS_EXT_DB
		WHERE OPE_TYPE IN (1,2,3,4, 5))
	END
	
	DELETE FROM DB_OPERATIONS_MINUTE	
	WHERE CASE WHEN [MINUTE_UTC] IS NULL THEN [MINUTE] ELSE [MINUTE_UTC] END >= @FromMinute
	

	INSERT INTO DB_OPERATIONS_MINUTE
	SELECT dateadd(minute, datediff(minute, 0, CASE WHEN OPE_TYPE = 1 OR OPE_TYPE = 2 OR OPE_TYPE = 3 THEN OPE_INIDATE 
												    WHEN OPE_TYPE IN (5, 12) AND TRANS_STATUS = 7 THEN DATEADD(hour, -DATEDIFF(hour, OPE_DATE, OPE_UTC_DATE), STATUS_DATE) 
													ELSE OPE_DATE END), 0) AS MINUTE, 
		ISNULL(OPE_INS_ID,0), ISNULL(GRP_ID,0), OPE_AMOUNT_CUR_ISO_CODE,
	   count(distinct(CASE OPE_TYPE WHEN 1 THEN ope_id ELSE NULL END)) PARKINGS_COUNT,
	   count(distinct(CASE OPE_TYPE WHEN 2 THEN ope_id ELSE NULL END)) EXTENSIONS_COUNT,
	   count(distinct(CASE OPE_TYPE WHEN 3 THEN ope_id ELSE NULL END)) REFUNDS_COUNT,
	   count(distinct(CASE WHEN OPE_TYPE = 4 AND OPE_USR_ID IS NOT NULL THEN ope_id ELSE NULL END)) TICKETPAYMENTS_COUNT,	   
	   count(distinct(CASE OPE_TYPE WHEN 5 THEN ope_id ELSE NULL END)) RECHARGES_COUNT,
	   sum(CASE OPE_TYPE WHEN 1 THEN -OPE_AMOUNT ELSE 0 END) PARKINGS_AMOUNT,
	   sum(CASE OPE_TYPE WHEN 2 THEN -OPE_AMOUNT ELSE 0 END) EXTENSIONS_AMOUNT,
	   sum(CASE OPE_TYPE WHEN 3 THEN OPE_AMOUNT ELSE 0 END) REFUNDS_AMOUNT,
	   sum(CASE OPE_TYPE WHEN 5 THEN OPE_AMOUNT ELSE 0 END) RECHARGES_AMOUNT,
	   sum(CASE OPE_TYPE WHEN 1 THEN OPE_TIME ELSE 0 END) PARKINGS_TIME,
	   sum(CASE OPE_TYPE WHEN 2 THEN OPE_TIME ELSE 0 END) EXTENSIONS_TIME,
	   sum(CASE OPE_TYPE WHEN 3 THEN OPE_TIME ELSE 0 END) REFUNDS_TIME,	   
	   MAX(dateadd(minute, datediff(minute, 0, CASE WHEN OPE_TYPE = 1 OR OPE_TYPE = 2 OR OPE_TYPE = 3 THEN OPE_UTC_INIDATE ELSE OPE_UTC_DATE END), 0)),
	   count(distinct(CASE WHEN OPE_TYPE = 4 AND OPE_USR_ID IS NULL THEN ope_id ELSE NULL END)) TICKETPAYMENTS_NON_USERS_COUNT
	   
	FROM ALL_OPERATIONS_EXT_DB
	WHERE --OPE_TYPE IN (1,2,3,4, 5) AND 
		  OPE_TYPE IN (1,2,3,4,5,12,6) AND
		  CASE WHEN OPE_TYPE = 1 OR OPE_TYPE = 2 OR OPE_TYPE = 3 THEN OPE_UTC_INIDATE 
		       WHEN OPE_TYPE IN (5, 12) AND TRANS_STATUS = 7 THEN STATUS_DATE
			   ELSE OPE_UTC_DATE END >= @FromMinute AND
		  CASE WHEN OPE_TYPE = 1 OR OPE_TYPE = 2 OR OPE_TYPE = 3 THEN OPE_UTC_INIDATE 
			   WHEN OPE_TYPE IN (5, 12) AND TRANS_STATUS = 7 THEN STATUS_DATE
			   ELSE OPE_UTC_DATE END <= GETUTCDATE()
	GROUP BY dateadd(minute, datediff(minute, 0, CASE WHEN OPE_TYPE = 1 OR OPE_TYPE = 2 OR OPE_TYPE = 3 THEN OPE_INIDATE 
													  WHEN OPE_TYPE IN (5, 12) AND TRANS_STATUS = 7 THEN DATEADD(hour, -DATEDIFF(hour, OPE_DATE, OPE_UTC_DATE), STATUS_DATE) 
													  ELSE OPE_DATE END), 0), 			 
			 OPE_INS_ID, GRP_ID, OPE_AMOUNT_CUR_ISO_CODE	

END






GO
