/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.USERS_NOTIFICATIONS
	DROP CONSTRAINT FK_USERS_NOTIFICATIONS_USERS_PUSH_ID
GO
ALTER TABLE dbo.USERS_PUSH_ID SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.USERS_NOTIFICATIONS
	DROP CONSTRAINT FK_USERS_TOAST_NOTIFICATIONS_USERS
GO
ALTER TABLE dbo.USERS SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.USERS_NOTIFICATIONS
	DROP CONSTRAINT DF_USERS_TOAST_NOTIFICATIONS_UTNO_STATUS
GO
CREATE TABLE dbo.Tmp_USERS_NOTIFICATIONS
	(
	UNO_ID numeric(18, 0) NOT NULL IDENTITY (1, 1),
	UNO_USR_ID numeric(18, 0) NOT NULL,
	UNO_WP_TEXT1 varchar(512) NULL,
	UNO_WP_TEXT2 varchar(512) NULL,
	UNO_WP_PARAM varchar(512) NULL,
	UNO_WP_COUNT int NULL,
	UNO_WP_TILE_TITLE varchar(512) NULL,
	UNO_WP_BACKGROUND_IMAGE varchar(512) NULL,
	UNO_WP_RAW_DATA varchar(4096) NULL,
	UNO_ANDROID_RAW_DATA varchar(4096) NULL,
	UNO_iOS_RAW_DATA varchar(4096) NULL,
	UNO_STARTDATETIME datetime NULL,
	UNO_LIMITDATETIME datetime NULL,
	UNO_STATUS int NOT NULL,
	UNO_UPID_ID numeric(18, 0) NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_USERS_NOTIFICATIONS SET (LOCK_ESCALATION = TABLE)
GO
DECLARE @v sql_variant 
SET @v = N'Table to store user notifications (push)'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_USERS_NOTIFICATIONS', NULL, NULL
GO
DECLARE @v sql_variant 
SET @v = N'Identificator'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_USERS_NOTIFICATIONS', N'COLUMN', N'UNO_ID'
GO
DECLARE @v sql_variant 
SET @v = N'User ID'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_USERS_NOTIFICATIONS', N'COLUMN', N'UNO_USR_ID'
GO
DECLARE @v sql_variant 
SET @v = N'Toast WPText 1'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_USERS_NOTIFICATIONS', N'COLUMN', N'UNO_WP_TEXT1'
GO
DECLARE @v sql_variant 
SET @v = N'Toast WP Text 2'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_USERS_NOTIFICATIONS', N'COLUMN', N'UNO_WP_TEXT2'
GO
DECLARE @v sql_variant 
SET @v = N'Toast WP_Param'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_USERS_NOTIFICATIONS', N'COLUMN', N'UNO_WP_PARAM'
GO
DECLARE @v sql_variant 
SET @v = N'Count for WP Tile notifications'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_USERS_NOTIFICATIONS', N'COLUMN', N'UNO_WP_COUNT'
GO
DECLARE @v sql_variant 
SET @v = N'Title for WP tile notifications'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_USERS_NOTIFICATIONS', N'COLUMN', N'UNO_WP_TILE_TITLE'
GO
DECLARE @v sql_variant 
SET @v = N'Background for WP tile notifications'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_USERS_NOTIFICATIONS', N'COLUMN', N'UNO_WP_BACKGROUND_IMAGE'
GO
DECLARE @v sql_variant 
SET @v = N'Windows Phone Raw Data'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_USERS_NOTIFICATIONS', N'COLUMN', N'UNO_WP_RAW_DATA'
GO
DECLARE @v sql_variant 
SET @v = N'Android Raw Data'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_USERS_NOTIFICATIONS', N'COLUMN', N'UNO_ANDROID_RAW_DATA'
GO
DECLARE @v sql_variant 
SET @v = N'iOS Raw Data'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_USERS_NOTIFICATIONS', N'COLUMN', N'UNO_iOS_RAW_DATA'
GO
DECLARE @v sql_variant 
SET @v = N'Start Date where the notification can be send'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_USERS_NOTIFICATIONS', N'COLUMN', N'UNO_STARTDATETIME'
GO
DECLARE @v sql_variant 
SET @v = N'DateTime limit to send notification. After this has no sense'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_USERS_NOTIFICATIONS', N'COLUMN', N'UNO_LIMITDATETIME'
GO
DECLARE @v sql_variant 
SET @v = N'10: Inserted: 20: Generated; 30: Sending ; 40: Finished Partially: 50: Finished Completely'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_USERS_NOTIFICATIONS', N'COLUMN', N'UNO_STATUS'
GO
DECLARE @v sql_variant 
SET @v = N'Push ID to assign'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_USERS_NOTIFICATIONS', N'COLUMN', N'UNO_UPID_ID'
GO
ALTER TABLE dbo.Tmp_USERS_NOTIFICATIONS ADD CONSTRAINT
	DF_USERS_TOAST_NOTIFICATIONS_UTNO_STATUS DEFAULT ((10)) FOR UNO_STATUS
GO
SET IDENTITY_INSERT dbo.Tmp_USERS_NOTIFICATIONS ON
GO
IF EXISTS(SELECT * FROM dbo.USERS_NOTIFICATIONS)
	 EXEC('INSERT INTO dbo.Tmp_USERS_NOTIFICATIONS (UNO_ID, UNO_USR_ID, UNO_WP_TEXT1, UNO_WP_TEXT2, UNO_WP_PARAM, UNO_WP_COUNT, UNO_WP_TILE_TITLE, UNO_WP_BACKGROUND_IMAGE, UNO_WP_RAW_DATA, UNO_ANDROID_RAW_DATA, UNO_iOS_RAW_DATA, UNO_STARTDATETIME, UNO_LIMITDATETIME, UNO_STATUS, UNO_UPID_ID)
		SELECT UNO_ID, UNO_USR_ID, UNO_WP_TEXT1, UNO_WP_TEXT2, UNO_WP_PARAM, UNO_WP_COUNT, UNO_WP_TILE_TITLE, UNO_WP_BACKGROUND_IMAGE, UNO_WP_RAW_DATA, UNO_ANDROID_RAW_DATA, UNO_iOS_RAW_DATA, UNO_STARTDATETIME, UNO_LIMITDATETIME, UNO_STATUS, UNO_UPID_ID FROM dbo.USERS_NOTIFICATIONS WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_USERS_NOTIFICATIONS OFF
GO
ALTER TABLE dbo.USERS_SECURITY_OPERATIONS
	DROP CONSTRAINT FK_USERS_SECURITY_OPERATIONS_USERS_NOTIFICATIONS
GO
ALTER TABLE dbo.USERS_WARNINGS
	DROP CONSTRAINT FK_USER_NOTIFICATIONS_USER_WARNINGS
GO
ALTER TABLE dbo.PUSHID_NOTIFICATIONS
	DROP CONSTRAINT FK_PUSHID_TOAST_NOTIFICATIONS_USERS_TOAST_NOTIFICATIONS
GO
DROP TABLE dbo.USERS_NOTIFICATIONS
GO
EXECUTE sp_rename N'dbo.Tmp_USERS_NOTIFICATIONS', N'USERS_NOTIFICATIONS', 'OBJECT' 
GO
ALTER TABLE dbo.USERS_NOTIFICATIONS ADD CONSTRAINT
	PK_USERS_TOAST_NOTIFICATIONS PRIMARY KEY CLUSTERED 
	(
	UNO_ID
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.USERS_NOTIFICATIONS ADD CONSTRAINT
	FK_USERS_TOAST_NOTIFICATIONS_USERS FOREIGN KEY
	(
	UNO_USR_ID
	) REFERENCES dbo.USERS
	(
	USR_ID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.USERS_NOTIFICATIONS ADD CONSTRAINT
	FK_USERS_NOTIFICATIONS_USERS_PUSH_ID FOREIGN KEY
	(
	UNO_UPID_ID
	) REFERENCES dbo.USERS_PUSH_ID
	(
	UPID_ID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.PUSHID_NOTIFICATIONS ADD CONSTRAINT
	FK_PUSHID_TOAST_NOTIFICATIONS_USERS_TOAST_NOTIFICATIONS FOREIGN KEY
	(
	PNO_UTNO_ID
	) REFERENCES dbo.USERS_NOTIFICATIONS
	(
	UNO_ID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.PUSHID_NOTIFICATIONS SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.USERS_WARNINGS ADD CONSTRAINT
	FK_USER_NOTIFICATIONS_USER_WARNINGS FOREIGN KEY
	(
	UWA_UNO_ID
	) REFERENCES dbo.USERS_NOTIFICATIONS
	(
	UNO_ID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.USERS_WARNINGS SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.USERS_SECURITY_OPERATIONS ADD CONSTRAINT
	FK_USERS_SECURITY_OPERATIONS_USERS_NOTIFICATIONS FOREIGN KEY
	(
	USOP_UNO_ID
	) REFERENCES dbo.USERS_NOTIFICATIONS
	(
	UNO_ID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.USERS_SECURITY_OPERATIONS SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

BEGIN TRANSACTION
GO
ALTER TABLE dbo.PUSHID_NOTIFICATIONS
	DROP CONSTRAINT FK_PUSHID_TOAST_NOTIFICATIONS_USERS_TOAST_NOTIFICATIONS
GO
ALTER TABLE dbo.USERS_NOTIFICATIONS SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.PUSHID_NOTIFICATIONS
	DROP CONSTRAINT DF_PUSHID_TOAST_NOTIFICATIONS_UTNO_STATUS
GO
ALTER TABLE dbo.PUSHID_NOTIFICATIONS
	DROP CONSTRAINT DF_PUSHID_TOAST_NOTIFICATIONS_PTNO_RETRIES
GO
CREATE TABLE dbo.Tmp_PUSHID_NOTIFICATIONS
	(
	PNO_ID numeric(18, 0) NOT NULL IDENTITY (1, 1),
	PNO_UTNO_ID numeric(18, 0) NOT NULL,
	PNO_OS int NOT NULL,
	PNO_PUSHID varchar(512) NOT NULL,
	PNO_WP_TEXT1 varchar(512) NULL,
	PNO_WP_TEXT2 varchar(512) NULL,
	PNO_WP_PARAM varchar(512) NULL,
	PNO_WP_COUNT int NULL,
	PNO_WP_TILE_TITLE varchar(512) NULL,
	PNO_WP_BACKGROUND_IMAGE varchar(512) NULL,
	PNO_WP_RAW_DATA varchar(4096) NULL,
	PNO_ANDROID_RAW_DATA varchar(4096) NULL,
	PNO_iOS_RAW_DATA varchar(4096) NULL,
	PNO_LIMITDATETIME datetime NULL,
	PNO_STATUS int NOT NULL,
	PNO_RETRIES int NOT NULL,
	PNO_LAST_RETRY_DATETIME datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_PUSHID_NOTIFICATIONS SET (LOCK_ESCALATION = TABLE)
GO
DECLARE @v sql_variant 
SET @v = N'Table to store Pushid notifications'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_PUSHID_NOTIFICATIONS', NULL, NULL
GO
DECLARE @v sql_variant 
SET @v = N'Identificator'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_PUSHID_NOTIFICATIONS', N'COLUMN', N'PNO_ID'
GO
DECLARE @v sql_variant 
SET @v = N'User Toast Identificator'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_PUSHID_NOTIFICATIONS', N'COLUMN', N'PNO_UTNO_ID'
GO
DECLARE @v sql_variant 
SET @v = N'1: Android; 2: Windows Phone; 3: iOS; 4:Blackberry'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_PUSHID_NOTIFICATIONS', N'COLUMN', N'PNO_OS'
GO
DECLARE @v sql_variant 
SET @v = N'PushID'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_PUSHID_NOTIFICATIONS', N'COLUMN', N'PNO_PUSHID'
GO
DECLARE @v sql_variant 
SET @v = N'Toast WPText 1'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_PUSHID_NOTIFICATIONS', N'COLUMN', N'PNO_WP_TEXT1'
GO
DECLARE @v sql_variant 
SET @v = N'Toast WP Text 2'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_PUSHID_NOTIFICATIONS', N'COLUMN', N'PNO_WP_TEXT2'
GO
DECLARE @v sql_variant 
SET @v = N'Toast WP_Param'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_PUSHID_NOTIFICATIONS', N'COLUMN', N'PNO_WP_PARAM'
GO
DECLARE @v sql_variant 
SET @v = N'Count for WP Tile notifications'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_PUSHID_NOTIFICATIONS', N'COLUMN', N'PNO_WP_COUNT'
GO
DECLARE @v sql_variant 
SET @v = N'Title for WP tile notifications'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_PUSHID_NOTIFICATIONS', N'COLUMN', N'PNO_WP_TILE_TITLE'
GO
DECLARE @v sql_variant 
SET @v = N'Background for WP tile notifications'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_PUSHID_NOTIFICATIONS', N'COLUMN', N'PNO_WP_BACKGROUND_IMAGE'
GO
DECLARE @v sql_variant 
SET @v = N'Windows Phone Raw Data'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_PUSHID_NOTIFICATIONS', N'COLUMN', N'PNO_WP_RAW_DATA'
GO
DECLARE @v sql_variant 
SET @v = N'Android Raw Data'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_PUSHID_NOTIFICATIONS', N'COLUMN', N'PNO_ANDROID_RAW_DATA'
GO
DECLARE @v sql_variant 
SET @v = N'iOS Raw Data'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_PUSHID_NOTIFICATIONS', N'COLUMN', N'PNO_iOS_RAW_DATA'
GO
DECLARE @v sql_variant 
SET @v = N'DateTime limit to send notification. After this has no sense'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_PUSHID_NOTIFICATIONS', N'COLUMN', N'PNO_LIMITDATETIME'
GO
DECLARE @v sql_variant 
SET @v = N'10: Inserted; 20: Sent: 30: Answer OK; 40: Queued; 50: Device Disconnected; 60: Answer KO; 70 Waiting next retry; 80: failed'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_PUSHID_NOTIFICATIONS', N'COLUMN', N'PNO_STATUS'
GO
DECLARE @v sql_variant 
SET @v = N'Number of sending retries'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_PUSHID_NOTIFICATIONS', N'COLUMN', N'PNO_RETRIES'
GO
DECLARE @v sql_variant 
SET @v = N'Datetime of last retry'
EXECUTE sp_addextendedproperty N'MS_Description', @v, N'SCHEMA', N'dbo', N'TABLE', N'Tmp_PUSHID_NOTIFICATIONS', N'COLUMN', N'PNO_LAST_RETRY_DATETIME'
GO
ALTER TABLE dbo.Tmp_PUSHID_NOTIFICATIONS ADD CONSTRAINT
	DF_PUSHID_TOAST_NOTIFICATIONS_UTNO_STATUS DEFAULT ((10)) FOR PNO_STATUS
GO
ALTER TABLE dbo.Tmp_PUSHID_NOTIFICATIONS ADD CONSTRAINT
	DF_PUSHID_TOAST_NOTIFICATIONS_PTNO_RETRIES DEFAULT ((0)) FOR PNO_RETRIES
GO
SET IDENTITY_INSERT dbo.Tmp_PUSHID_NOTIFICATIONS ON
GO
IF EXISTS(SELECT * FROM dbo.PUSHID_NOTIFICATIONS)
	 EXEC('INSERT INTO dbo.Tmp_PUSHID_NOTIFICATIONS (PNO_ID, PNO_UTNO_ID, PNO_OS, PNO_PUSHID, PNO_WP_TEXT1, PNO_WP_TEXT2, PNO_WP_PARAM, PNO_WP_COUNT, PNO_WP_TILE_TITLE, PNO_WP_BACKGROUND_IMAGE, PNO_WP_RAW_DATA, PNO_ANDROID_RAW_DATA, PNO_iOS_RAW_DATA, PNO_LIMITDATETIME, PNO_STATUS, PNO_RETRIES, PNO_LAST_RETRY_DATETIME)
		SELECT PNO_ID, PNO_UTNO_ID, PNO_OS, PNO_PUSHID, PNO_WP_TEXT1, PNO_WP_TEXT2, PNO_WP_PARAM, PNO_WP_COUNT, PNO_WP_TILE_TITLE, PNO_WP_BACKGROUND_IMAGE, PNO_WP_RAW_DATA, PNO_ANDROID_RAW_DATA, PNO_iOS_RAW_DATA, PNO_LIMITDATETIME, PNO_STATUS, PNO_RETRIES, PNO_LAST_RETRY_DATETIME FROM dbo.PUSHID_NOTIFICATIONS WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_PUSHID_NOTIFICATIONS OFF
GO
DROP TABLE dbo.PUSHID_NOTIFICATIONS
GO
EXECUTE sp_rename N'dbo.Tmp_PUSHID_NOTIFICATIONS', N'PUSHID_NOTIFICATIONS', 'OBJECT' 
GO
ALTER TABLE dbo.PUSHID_NOTIFICATIONS ADD CONSTRAINT
	PK_PUSHID_TOAST_NOTIFICATIONS PRIMARY KEY CLUSTERED 
	(
	PNO_ID
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.PUSHID_NOTIFICATIONS ADD CONSTRAINT
	FK_PUSHID_TOAST_NOTIFICATIONS_USERS_TOAST_NOTIFICATIONS FOREIGN KEY
	(
	PNO_UTNO_ID
	) REFERENCES dbo.USERS_NOTIFICATIONS
	(
	UNO_ID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
