using integraMobile.Domain;
using integraMobile.Domain.Abstract;
using integraMobile.ExternalWS;
using integraMobile.Infrastructure;
using integraMobile.Infrastructure.Logging.Tools;
using integraMobile.WS.Entity;
using integraMobile.WS.Jwt;
using integraMobile.WS.Request;
using integraMobile.WS.Resources;
using integraMobile.WS.Response;
using integraMobile.WS.Tools;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Ninject;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net.NetworkInformation;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Web;
using System.Web.Security;
using System.Web.Services;
using System.Xml;
using System.Xml.Linq;

namespace integraMobile.WS
{
    /// <summary>
    /// Summary description for WebService1
    /// </summary>
    [WebService(Namespace = "http://tempuri.org/")]
    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
    [System.ComponentModel.ToolboxItem(false)]
    // To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line. 
    // [System.Web.Script.Services.ScriptService]
    public partial class integraMobileWS : Ninject.Web.WebServiceBase
    {


        #region Properties

        //Log4net Wrapper class
        private static readonly CLogWrapper m_Log = new CLogWrapper(typeof(integraMobileWS));
        private class ConfirmLockInfo
        {
            public DateTime m_dtCreationUTCDate = DateTime.UtcNow;
        }

        static string _ipsString = "";
        static string _hMacKey = null;
        static byte[] _normKey = null;
        static string _xmlTagName = "ipark";
        static Dictionary<string, ConfirmLockInfo> m_oConfirmLockDictionary = new Dictionary<string, ConfirmLockInfo>();
        static readonly object m_oUserLock = new object();
        private const long BIG_PRIME_NUMBER = 2147483647;
        private const long BIG_PRIME_NUMBER2 = 624159837;
        protected const long BIG_PRIME_NUMBER_PAYMENT_GATEWAY = 472189635;
        protected const int COUNTRY_ID_ARGENTINA = 10;


        private const string IN_SUFIX = "_in";
        private const string OUT_SUFIX = "_out";
        private const int MAX_SECONDS_CONFIRMING = 30;
        private const int MEXICO_COUNTRY_ID = 135;
        public const string TEXT_I_PARK_OUT = "{\"ipark_out\":";

        private const string TAG_SIGNUP_GUID = "signup_guid";
        private const string TAG_COUNTRIES_REDIRECTIONS = "countriesredirections";
        private const string TAG_RESULT_OK_VALUE_1 = "<r>1</r>";
        private const string TAG_RESULT = "r";

        private const int CMaxGeometryRegistries = 1000;

        private const int DEFAULT_WS_TIMEOUT = 5000; //ms       
        private static ulong _VERSION_999_99_9 = AppUtilities.AppVersion("999.99.9");
        private static ulong _VERSION_1_4 = AppUtilities.AppVersion("1.4");
        private static ulong _VERSION_1_5 = AppUtilities.AppVersion("1.5");
        private static ulong _VERSION_1_6 = AppUtilities.AppVersion("1.6");
        private static ulong _VERSION_2_0 = AppUtilities.AppVersion("2.0");
        private static ulong _VERSION_2_1 = AppUtilities.AppVersion("2.1");
        private static ulong _VERSION_2_3 = AppUtilities.AppVersion("2.3");
        private static ulong _VERSION_2_4 = AppUtilities.AppVersion("2.4");
        private static ulong _VERSION_2_6 = AppUtilities.AppVersion("2.6");
        private static ulong _VERSION_2_7_1 = AppUtilities.AppVersion("2.7.1");
        private static ulong _VERSION_2_7_2 = AppUtilities.AppVersion("2.7.2");
        private static ulong _VERSION_2_8 = AppUtilities.AppVersion("2.8");
        private static ulong _VERSION_2_10 = AppUtilities.AppVersion("2.10");
        private static ulong _VERSION_2_11 = AppUtilities.AppVersion("2.11");
        private static ulong _VERSION_3_0 = AppUtilities.AppVersion("3.0");
        private static ulong _VERSION_3_1 = AppUtilities.AppVersion("3.1");
        private static ulong _VERSION_3_3 = AppUtilities.AppVersion("3.3");
        private static ulong _VERSION_3_4 = AppUtilities.AppVersion("3.4");
        private static ulong _VERSION_3_5 = AppUtilities.AppVersion("3.5");
        private static ulong _VERSION_3_6 = AppUtilities.AppVersion("3.6");
        private static ulong _VERSION_3_6_5 = AppUtilities.AppVersion("3.6.5");
        private static ulong _VERSION_3_7_1 = AppUtilities.AppVersion("3.7.1");
        private static ulong _VERSION_3_8 = AppUtilities.AppVersion("3.8");

        private static ulong _IOS_VERSION_14_6 = AppUtilities.AppVersion("14.6");
        
        #endregion

        #region Enum


        private enum rechargeMethods
        {
            Undefined = -1,
            Default_Payment_Method = 0,
            Barcode_QR = 1,
            Coupon = 2
        }


        private enum OperationListType
        {
            Current = 1,
            Historical = 2,
            CurrentShopKeeper = 3,
            HistoricalShopKeeper = 4,
            All = 5
        }

        private enum UserSignUpType
        {
            EndsInWeb = 0,
            QuickMobile = 1,
            FullMobile = 2
        }

        private enum UserWarningType
        {
            Push = 0,
            Login = 1,
            Park = 2,
            UnPark = 3,
            Fine = 4
        }






        string[] UserDeviceLangs = { "es-ES", "en-US", "fr-FR", "ca-ES", "es-MX", "eu-ES", "it-IT", "es-AR" };

        /*

        private string[] CanadaAndUSAProvinces= new string [] { "AL",
                                                                "AR",
                                                                "CT",
                                                                "FL",
                                                                "ID",
                                                                "IA",
                                                                "LA",
                                                                "MA",
                                                                "MS",
                                                                "NE",
                                                                "NJ",
                                                                "NC",
                                                                "OK",
                                                                "RI",
                                                                "TN",
                                                                "VT",
                                                                "WV",
                                                                "AK",
                                                                "CA",
                                                                "DC",
                                                                "GA",
                                                                "IL",
                                                                "KS",
                                                                "ME",
                                                                "MI",
                                                                "MO",
                                                                "NV",
                                                                "NM",
                                                                "ND",
                                                                "OR",
                                                                "SC",
                                                                "TX",
                                                                "VA",
                                                                "WI",
                                                                "AZ",
                                                                "CO",
                                                                "DE",
                                                                "HI",
                                                                "IN",
                                                                "KY",
                                                                "MD",
                                                                "MN",
                                                                "MT",
                                                                "NH",
                                                                "NY",
                                                                "OH",
                                                                "PA",
                                                                "SD",
                                                                "UT",
                                                                "WA",
                                                                "WY",
                                                                "AB",
                                                                "LB",
                                                                "NB",
                                                                "NS",
                                                                "NW",
                                                                "PE",
                                                                "SK",
                                                                "BC",
                                                                "MB",
                                                                "NF",
                                                                "NU",
                                                                "ON",
                                                                "QC",
                                                                "YU"};*/

        static integraMobileWS()
        {
            InitializeStatic();
        }

        [Inject]
        public ICustomersRepository customersRepository { get; set; }
        [Inject]
        public IInfraestructureRepository infraestructureRepository { get; set; }
        [Inject]
        public IGeograficAndTariffsRepository geograficAndTariffsRepository { get; set; }
        [Inject]
        public IBackOfficeRepository backOfficeRepository { get; set; }




        #endregion

        #region integraMobile.WS Web Methods

        [WebMethod]
        public bool CreateOrUpdateMembership(string strUserName, string strUserEmail, string strPassword)
        {
            bool bRes = true;
            try
            {
                Logger_AddLogMessage(string.Format("CreateOrUpdateMembership: UserName={0};Email={1};Password={2}", strUserName, strUserEmail, strPassword), LogLevels.logINFO);

                FormAuthMemberShip.MembershipService.DeleteUser(strUserName);


                MembershipCreateStatus createStatus = FormAuthMemberShip.MembershipService.CreateUser(strUserName, strPassword, strUserEmail);
                if (createStatus != MembershipCreateStatus.Success)
                {
                    FormAuthMemberShip.MembershipService.DeleteUser(strUserName);
                    Logger_AddLogMessage(string.Format("CreateOrUpdateMembership: UserName={0};Email={1};Password={2} ERROR", strUserName, strUserEmail, strPassword), LogLevels.logERROR);
                    bRes = false;
                }
                else
                {
                    Logger_AddLogMessage(string.Format("CreateOrUpdateMembership: UserName={0};Email={1};Password={2} SUCCESS", strUserName, strUserEmail, strPassword), LogLevels.logINFO);
                }
            }
            catch (Exception e)
            {
                bRes = false;
                Logger_AddLogException(e, string.Format("CreateOrUpdateMembership: UserName={0};Email={1};Password={2} EXCEPTION", strUserName, strUserEmail, strPassword), LogLevels.logERROR);

            }



            return bRes;
        }

        /*
         *  QueryLogin
         *  
        <ipark_in>
            <u>login or NULL if the user is anonymous</u >
	        <pasw>password</ pasw >
            <cityID>city id </cityID>
            <OSID> 1: Android; 2: Windows Phone; 3: iOS; 4:Blackberry </OSID>
            <gps>
            <lat>gps latitude</lat>
            <long>gps longitud</long>
            </gps>
            <lang> language of the OS </lang> 
            <cmodel>MD235Y</ cmodel >			-- Cell Phone Model
            <SessionID>DNTH1BU9DTC0</ SessionID >		-- Cell Phone Serial Number
            <cosvers>6.0.1(10A523) < cosvers >		-- Cell Phne OS Version
            <ah>authentication hash</ah>
        </ ipark _in>
         * 
         * 
        <ipark_out>
	        <r>Result of the method</r>
            <bal>current balance of the user in cents</bal>
            <cur>currency EUR/USD</cur>
            <cityID>125</cityID>
            <cityVERS>5</cityVERS>
            <tarVERS>6</tarVERS>       
            <userMSG> Messages for the user
	            <usertick>	-- only tickets payable in the PBP app
		            <f>fine number</f>
			            <d>date in format hh24missddMMYY</d>
		            <lp>AAAA111<lp>
			            <q>quantity paid in Cents for the fine</q>
	            </ usertick>
            </userMSG>
            <userDATA>
	            <userlp>
	                <nlp>2</nlp>
                    <lp1>AAAA111</lp1>
                    <lp1>BBBB222</lp1>
                 </userlp>
                <paymeth> type of payment selected by the user </paymeth>
                <ccpan>credit call pan</ccpan >
                <userpark> for every plate of the user, we would return alive operations
                    <p>plate</p>
                    <g>parking zone</g>
                    <ad>tariff type selected: NULL, ROTATION, RESIDENTS, VIPS</ad>
	                    <d>date in format hh24missddMMYY</d>
                    <q>Amount of money paid in Cents</q>
                    <t>Time in minutes obtained paying <q> cents</t>
                </userpark>
                <userpreferences>
	                <lup> last used plate </lup>
                    <mup> most used plate </mup>
                    <luz> last used zone </luz> (in case there is no GPS)
	                <muz> most used zone </muz> (in case there is no GPS)
                </userpreferences>

                This could be used to notify a user that parked in a meter or call center his alive operation.	
            </ userDATA >	-- Data of the user

        </ipark_out>
         * 
         * 
        Result of the method:
        a.	2: Login successful.
        b.	-10: Invalid authentication hash
        c.	-11: Invalid Authentication.
        d.	-12: Maximum number of trials reached.         
        e.	-19 Invalid Input Parameter 
        f.	-20 Missing Input Parameter 

         *
         */
        [WebMethod]
        public string QueryLogin(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("QueryLogin: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["pasw"] == null) ||
                        (parametersIn["OSID"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            string strUsername = parametersIn["u"].ToString();
                            if (FormAuthMemberShip.MembershipService.ValidateUser(ref strUsername,
                                                                                  parametersIn["pasw"].ToString()))
                            {

                                USER oUser = null;

                                if (customersRepository.GetUserData(ref oUser, strUsername))
                                {

                                    if (oUser != null)
                                    {
                                        if (oUser.USR_ACTIVATED == 0)
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_User_Is_Not_Activated);
                                            Logger_AddLogMessage(string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                        decimal? dInsId = null;

                                        parametersOut = new SortedList();
                                        parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                                        string sAppVersion = "";
                                        try
                                        {
                                            if (parametersIn["appvers"] != null)
                                                sAppVersion = parametersIn["appvers"].ToString();
                                            else
                                                sAppVersion = parametersIn["vers"].ToString();
                                        }
                                        catch
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                            Logger_AddLogMessage(string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                        if (!CheckVersionFormat(sAppVersion))
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                            Logger_AddLogMessage(string.Format("QueryLogin::Error: Invalid app version format: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }


                                        MobileOS oMobileOS = MobileOS.Android;
                                        try
                                        {
                                            int iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                            oMobileOS = (MobileOS)iOSID;
                                        }
                                        catch
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                            Logger_AddLogMessage(string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                        decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();
                                        if (parametersIn["appcode"] != null)
                                        {
                                            try
                                            {
                                                string sAppCode = parametersIn["appcode"].ToString();
                                                dSourceApp = geograficAndTariffsRepository.GetSourceApp(sAppCode);
                                            }
                                            catch { }
                                        }

                                        string strAppCode = geograficAndTariffsRepository.GetSourceAppCode(dSourceApp);

                                        string strCulture = "";


                                        if (parametersIn["lang"] != null)
                                        {
                                            try
                                            {
                                                int iLangIndex = Convert.ToInt32(parametersIn["lang"].ToString());
                                                if (iLangIndex <= UserDeviceLangs.Length)
                                                {
                                                    strCulture = UserDeviceLangs[iLangIndex - 1];
                                                }
                                            }
                                            catch
                                            { }


                                        }

                                        if (oUser.USR_SIGNUP_SOAPP_ID != dSourceApp)
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthentication);
                                            Logger_AddLogMessage(string.Format("QueryLogin::Error (User Signup in other Application): xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;

                                        }


                                        rt = GetQueryLoginData(ref oUser, parametersIn, AppUtilities.AppVersion(sAppVersion), strCulture, null, out dInsId, ref parametersOut);
                                        if (rt != ResultType.Result_OK)
                                        {
                                            parametersOut["r"] = Convert.ToInt32(rt);
                                            string strInsXML = "";
                                            string strInsGeomXML = "";

                                            if (rt == ResultType.Result_Error_Invalid_City || rt == ResultType.Result_Error_Incompatible_City_With_UserCurrency)
                                            {

                                                if ((parametersIn["InsVersion"] != null) &&
                                                    (parametersIn["InsGeomVersion"] != null))
                                                {


                                                    long lCurrVersion = -1;


                                                    try
                                                    {
                                                        lCurrVersion = Convert.ToInt64(parametersIn["InsVersion"].ToString());
                                                        strInsXML = GetInstallationsSync(lCurrVersion);
                                                        parametersOut["InsSync"] = strInsXML;
                                                    }
                                                    catch { }


                                                    lCurrVersion = -1;

                                                    try
                                                    {
                                                        lCurrVersion = Convert.ToInt64(parametersIn["InsGeomVersion"].ToString());
                                                        strInsGeomXML = GetInstallationsGeometrySync(lCurrVersion, oMobileOS, sAppVersion);
                                                        parametersOut["InsGeomSync"] = strInsGeomXML;

                                                    }
                                                    catch { }
                                                }


                                            }


                                            xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "InsSync", "InsGeomSync", "ccpaymentsdata" });
                                            Logger_AddLogMessage(string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                        string strSessionID = "";
                                        int? iUTCOffset = null;
                                        



                                        if ((parametersIn["date"] != null) && (parametersIn["utc_date"] != null))
                                        {

                                            DateTime dt;
                                            DateTime dtUTC;

                                            try
                                            {
                                                dt = DateTime.ParseExact(parametersIn["date"].ToString(), "HHmmssddMMyy",
                                                  CultureInfo.InvariantCulture);
                                                dtUTC = DateTime.ParseExact(parametersIn["utc_date"].ToString(), "HHmmssddMMyy",
                                                  CultureInfo.InvariantCulture);

                                                iUTCOffset = Convert.ToInt32((dtUTC - dt).TotalMinutes + 0.5);

                                            }
                                            catch
                                            {
                                                iUTCOffset = 0;
                                            }


                                        }
                                        else
                                        {

                                            if (parametersIn["utc_offset"] != null)
                                            {
                                                try
                                                {
                                                    iUTCOffset = Convert.ToInt32(parametersIn["utc_offset"].ToString());
                                                }
                                                catch { }
                                            }
                                            else
                                            {
                                                iUTCOffset = 0;
                                            }
                                        }



                                        /*string sAppVersion = "";
                                        try
                                        {
                                            if (parametersIn["appvers"] != null)
                                                sAppVersion = parametersIn["appvers"].ToString();
                                            else
                                                sAppVersion = parametersIn["vers"].ToString();
                                        }
                                        catch
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                            Logger_AddLogMessage(string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                        if (!CheckVersionFormat(sAppVersion))
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                            Logger_AddLogMessage(string.Format("QueryLogin::Error: Invalid app version format: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }*/

                                        string sCheckVersionFrom = ConfigurationManager.AppSettings["CheckVersionFrom_" + oMobileOS.ToString()] ?? "";
                                        string sCheckVersionUpdateMandatory = ConfigurationManager.AppSettings["CheckVersionUpdateMandatory_" + oMobileOS.ToString()] ?? "";
                                        string sCheckVersionUpdateNotMandatory = ConfigurationManager.AppSettings["CheckVersionUpdateNotMandatory_" + oMobileOS.ToString()] ?? "";
                                        if (!string.IsNullOrEmpty(sCheckVersionFrom) &&
                                            (!string.IsNullOrEmpty(sCheckVersionUpdateMandatory) || !string.IsNullOrEmpty(sCheckVersionUpdateNotMandatory)))
                                        {
                                            if (VersionGreatherEqual(sAppVersion, sCheckVersionFrom))
                                            {
                                                if (VersionMinor(sAppVersion, sCheckVersionUpdateMandatory))
                                                    rt = ResultType.Result_Error_InvalidAppVersion_UpdateMandatory;
                                                else if (VersionMinor(sAppVersion, sCheckVersionUpdateNotMandatory))
                                                    rt = ResultType.Result_Error_InvalidAppVersion_UpdateNotMandatory;
                                            }
                                        }

                                        if (rt == ResultType.Result_OK || rt == ResultType.Result_Error_InvalidAppVersion_UpdateNotMandatory)
                                        {
                                            ResultType rt2 = StartSession(ref oUser, dInsId.Value, parametersIn, out strSessionID, iUTCOffset, strCulture);
                                            if (rt2 != ResultType.Result_OK)
                                            {
                                                xmlOut = GenerateXMLErrorResult(rt2);
                                                Logger_AddLogMessage(string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                return xmlOut;
                                            }
                                        }

                                        parametersOut["r"] = Convert.ToInt32(rt).ToString();

                                        parametersOut["SessionID"] = strSessionID;

                                        string sLicenseTermsVersion = "";
                                        string sLicenseTermsUrl = "";
                                        string sConditionsUrl = "";
                                        string strXmlVersionLiterals = String.Empty;

                                       

                                        if (AppUtilities.AppVersion(sAppVersion) >= _VERSION_2_8)
                                        {

                                            IEnumerable<stVersionsLiterals> ostVersionsLiterals = customersRepository.DisplayQuestions(oUser, strCulture, dSourceApp, out sLicenseTermsVersion, out sLicenseTermsUrl, out sConditionsUrl);

                                            if (!GenerateXMLVersionsLiterals(ostVersionsLiterals, ref strXmlVersionLiterals))
                                            {
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                Logger_AddLogMessage(string.Format("QueryLogin::GenerateXMLVersionsLiterals::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                return xmlOut;
                                            }
                                            parametersOut["questions"] = strXmlVersionLiterals;

                                            parametersOut["legalterms"] = (customersRepository.NeedDisplayLicenseTerms(oUser, strCulture, out sLicenseTermsVersion, out sLicenseTermsUrl, out sConditionsUrl) ? "1" : "0");
                                            parametersOut["legaltermsver"] = sLicenseTermsVersion;
                                            parametersOut["url1"] = sLicenseTermsUrl;
                                            parametersOut["url2"] = sConditionsUrl;
                                        }
                                        else
                                        {

                                            parametersOut["legalterms"] = (customersRepository.NeedDisplayLicenseTerms(oUser, strCulture, out sLicenseTermsVersion, out sLicenseTermsUrl, out sConditionsUrl) ? "1" : "0");
                                            parametersOut["legaltermsver"] = sLicenseTermsVersion;
                                            parametersOut["url1"] = sLicenseTermsUrl;
                                            parametersOut["url2"] = sConditionsUrl;

                                            parametersOut["urlmarket"] = ConfigurationManager.AppSettings[string.Format("UrlMarket_{0}_{1}", oMobileOS.ToString(),strAppCode)] ?? "";
                                            parametersOut["urlmarketmsg"] = ConfigurationManager.AppSettings[string.Format("UrlMarketMsg_{0}_{1}_{2}_{3}",
                                                                                                                           (rt == ResultType.Result_Error_InvalidAppVersion_UpdateMandatory ? "Mandatory" : "NotMandatory"),
                                                                                                                           oMobileOS.ToString(),
                                                                                                                           strAppCode,
                                                                                                                           strCulture)] ?? "";
                                            if (rt == ResultType.Result_Error_InvalidAppVersion_UpdateMandatory)
                                            {
                                                parametersOut["urlmarketvers"] = sCheckVersionUpdateMandatory ?? "";
                                            }
                                            else if (rt == ResultType.Result_Error_InvalidAppVersion_UpdateNotMandatory)
                                            {
                                                parametersOut["urlmarketvers"] = sCheckVersionUpdateNotMandatory ?? "";
                                            }
                                        }

                                        parametersOut["OPEUSERID"] = oUser.USR_ID.ToString();
                                        parametersOut["BALCUR"] = oUser.USR_CUR_ID.ToString();

                                        USER_AVERAGE_BALANCE oUserAverageBalance = oUser.USER_AVERAGE_BALANCEs.FirstOrDefault();
                                        if (oUserAverageBalance != null)
                                            parametersOut["BALAVER"] = oUserAverageBalance.USRB_AVERAGE_BALANCE.ToString();

                                        //parametersOut["PAYMODE"] = Convert.ToInt32(ConfigurationManager.AppSettings["TollPaymentMode"] ?? "0");
                                        parametersOut["PAYSTATUS"] = (oUser.USR_BALANCE >= 0 ? 0 : 1);
                                        if (oUser.USR_BALANCE < 0)
                                            parametersOut["PAYBALDUE"] = oUser.USR_BALANCE;

                                        xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "cities", "questions" });

                                        if (xmlOut.Length == 0)
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        }
                                        else
                                        {
                                            Logger_AddLogMessage(string.Format("QueryLogin: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                        }

                                        oUser = null;
                                    }
                                    else
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_User);
                                        Logger_AddLogMessage(string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    }
                                }
                                else
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_User);
                                    Logger_AddLogMessage(string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }

                            }
                            else
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthentication);
                                Logger_AddLogMessage(string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", xmlIn, xmlOut), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }
            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }
            return xmlOut;
        }





        [WebMethod]
        public string QueryLoginJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("QueryLoginJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryLogin(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;
                Logger_AddLogMessage(string.Format("QueryLoginJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryLoginJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }



        [WebMethod]
        public string QueryLoginCity(string xmlIn)
        {
            string xmlOut = "";
            Stopwatch watch = null;
            string strUsername = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                watch = Stopwatch.StartNew();
                SortedList parametersIn = null;
                string strHash = "";
                string strHashString = "";

                string sURLCountriesRedirections = string.Empty;

                bool bContainsCountryRedirection = (xmlIn.Contains(TAG_COUNTRIES_REDIRECTIONS) ? true : false);

                if (bContainsCountryRedirection)
                {
                    sURLCountriesRedirections = FindNodeXMLValue(xmlIn, TAG_COUNTRIES_REDIRECTIONS);
                    xmlIn = RemoveNodeXML(xmlIn, TAG_COUNTRIES_REDIRECTIONS);
                }

                Logger_AddLogMessage(string.Format("QueryLoginCity: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) || (parametersIn["pasw"] == null && parametersIn["token"] == null) || (parametersIn["OSID"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else if (parametersIn["token"] != null && parametersIn["u"] != null && parametersIn["pasw"] == null)
                        {
                            if (JwtTokenHelper.ValidateToken(parametersIn["token"].ToString(), parametersIn["u"].ToString()))
                            {
                                xmlOut = QueryLoginCityProcess(xmlIn, parametersIn, sURLCountriesRedirections, true, watch);
                            }
                            else 
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthentication);
                                Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                        }
                        else
                        {
                            
                            strUsername = parametersIn["u"].ToString();
                            //Verificamos si existe en la Base da datos principal el usuario (que exista el email y no visible (enable=1))
                            int cityId = int.Parse(parametersIn["cityID"].ToString());
                            COUNTRIES_REDIRECTION oCountriesRedirections = FindCountriesRedirections(cityId, -1);

                            if (oCountriesRedirections != null && !bContainsCountryRedirection)
                            {
                                try
                                {
                                    Logger_AddLogMessage(string.Format("QueryLoginCity: ExternalIntegraMobileWS: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);
                                    ExternalIntegraMobileWS.integraMobileWS oExternalIntegraMobileWS = StarExternalIntegraMobileWS(oCountriesRedirections);
                                    if (oExternalIntegraMobileWS != null)
                                    {
                                        xmlIn = AddNodeXML(xmlIn, TAG_COUNTRIES_REDIRECTIONS, oCountriesRedirections.COURE_COUNTRY_REDIRECTION_WS_URL);
                                        xmlOut = oExternalIntegraMobileWS.QueryLoginCity(xmlIn);
                                    }

                                }
                                catch (Exception)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryLoginCity::ExternalIntegraMobileWS::Error:  CountriesRedirections={0}, xmlIn={1}, xmlOut={2}", oCountriesRedirections.COURE_COUNTRY_REDIRECTION_WS_URL, PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }
                            }
                            else if (oCountriesRedirections == null)
                            {
                                // xmlOut = QueryLoginCityProcess(xmlIn, parametersIn, sURLCountriesRedirections);
                                if (ExistUserInTheMainServer(strUsername))
                                {
                                    if (FormAuthMemberShip.MembershipService.ValidateUser(ref strUsername, parametersIn["pasw"].ToString()))
                                    {
                                        if (watch != null)
                                        {
                                            Logger_AddLogMessage(string.Format("QueryLoginCity:Before QueryLoginCityProcess: usuario:{0} / Tiempo de ejecución: {1}", strUsername, watch.ElapsedMilliseconds), LogLevels.logINFO);
                                        }

                                        xmlOut = QueryLoginCityProcess(xmlIn, parametersIn, sURLCountriesRedirections, true, watch);
                                    }
                                    else
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthentication);
                                        Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    }
                                }
                                else
                                {
                                    //Cargamos la lista de paises con sus redirecciones (Es un distinct por URL)
                                    List<COUNTRIES_REDIRECTION> oCountriesRedirectionsList = infraestructureRepository.GetCountriesRedirections();
                                    if (oCountriesRedirectionsList != null)
                                    {
                                        VerifyLoginExistsResponse oVerifyLoginExistsResponse = null;
                                        XmlDocument docInExternal = null;
                                        bool bUserExist = false;
                                        string ws_url = "";
                                        foreach (COUNTRIES_REDIRECTION countryRedirection in oCountriesRedirectionsList)
                                        {
                                            //Iniciamos el ExternalIntegraMobileWS con las credenciales del pais
                                            ExternalIntegraMobileWS.integraMobileWS oExternalIntegraMobileWS = StarExternalIntegraMobileWS(countryRedirection);
                                            if (oExternalIntegraMobileWS != null)
                                            {
                                                VerifyLoginExistsRequest oVerifyLoginExistsRequest = new VerifyLoginExistsRequest(strUsername, parametersIn["pasw"].ToString());
                                                String sJsonInExternal = ToJsonRequest(oVerifyLoginExistsRequest);

                                                docInExternal = (XmlDocument)JsonConvert.DeserializeXmlNode(sJsonInExternal);
                                                Logger_AddLogMessage(string.Format("ExternalIntegraMobileWS.VerifyLoginExistsJSON: xmlIn={0}", PrettyXml(docInExternal.InnerXml)), LogLevels.logINFO);

                                                //Se realiza la llamada para verificar si existe el Usuario  y en caso afirmativo verifica el password.
                                                string sJsonOutExternal = oExternalIntegraMobileWS.VerifyLoginExistsJSON(sJsonInExternal);
                                                sJsonOutExternal = RemeveTagIparkOut(sJsonOutExternal);
                                                oVerifyLoginExistsResponse = JsonConvert.DeserializeObject<VerifyLoginExistsResponse>(sJsonOutExternal);
                                                if (oVerifyLoginExistsResponse.r == ResultType.Result_OK)
                                                {
                                                    ws_url = countryRedirection.COURE_COUNTRY_REDIRECTION_WS_URL;
                                                    bUserExist = true;
                                                    break;
                                                }
                                                else if (oVerifyLoginExistsResponse.r == ResultType.Result_Error_InvalidAuthentication)
                                                {
                                                    bUserExist = true;
                                                    break;
                                                }
                                                else if (oVerifyLoginExistsResponse.r == ResultType.Result_Error_User_Not_Logged)
                                                {
                                                    bUserExist = false;
                                                }
                                            }
                                        }
                                        if (oVerifyLoginExistsResponse != null)
                                        {
                                            SortedList parametersOut = new SortedList();
                                            if (oVerifyLoginExistsResponse.r == ResultType.Result_OK && bUserExist)
                                            {
                                                parametersOut["InsVersion"] = oVerifyLoginExistsResponse.InsVersion;
                                                parametersOut["InsGeomVersion"] = oVerifyLoginExistsResponse.InsGeomVersion;
                                                parametersOut["bckwsurl"] = ws_url;
                                                parametersOut["usr_cur_id"] = oVerifyLoginExistsResponse.usr_cur_id;
                                                parametersOut["usr_cou_id"] = oVerifyLoginExistsResponse.usr_cou_id;
                                                parametersOut["r"] = (int)ResultType.Result_Error_Incompatible_City_With_UserCurrency;
                                                xmlOut = GenerateXMLOuput(parametersOut);

                                                Logger_AddLogMessage(string.Format("ExternalIntegraMobileWS.VerifyLoginExistsJSON:::INFO: xmlIn={0}, xmlOut={1}", PrettyXml(docInExternal.InnerXml), PrettyXml(xmlOut)), LogLevels.logINFO);
                                            }
                                            else if (oVerifyLoginExistsResponse.r == ResultType.Result_Error_InvalidAuthentication && bUserExist)
                                            {
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthentication);
                                                Logger_AddLogMessage(string.Format("ExternalIntegraMobileWS.VerifyLoginExistsJSON:::INFO: xmlIn={0}, xmlOut={1}", PrettyXml(docInExternal.InnerXml), PrettyXml(xmlOut)), LogLevels.logINFO);
                                            }
                                            else if ((oVerifyLoginExistsResponse.r != ResultType.Result_OK && oVerifyLoginExistsResponse.r != ResultType.Result_Error_InvalidAuthentication) && !bUserExist)
                                            {
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthentication);
                                                Logger_AddLogMessage(string.Format("ExternalIntegraMobileWS.VerifyLoginExistsJSON::INFO: xmlIn={0}, xmlOut={1}", PrettyXml(docInExternal.InnerXml), PrettyXml(xmlOut)), LogLevels.logINFO);
                                            }
                                            else
                                            {
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthentication);
                                                Logger_AddLogMessage(string.Format("ExternalIntegraMobileWS.VerifyLoginExistsJSON::INFO: xmlIn={0}, xmlOut={1}", PrettyXml(docInExternal.InnerXml), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthentication);
                                        Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    }
                                }
                            }



                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", xmlIn, xmlOut), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }
            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }


            if (watch != null)
            {
                Logger_AddLogMessage(string.Format("QueryLoginCity:End: usuario:{0} / Tiempo de ejecución: {1}", strUsername, watch.ElapsedMilliseconds), LogLevels.logINFO);
            }
            return xmlOut;
        }




        [WebMethod]
        public string QueryLoginCityJSON(string jsonIn)
        {
            string jsonOut = "";
            Stopwatch watch = null;

            try
            {
                watch = Stopwatch.StartNew();
                //Logger_AddLogMessage(string.Format("QueryLoginCityJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryLoginCity(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                Logger_AddLogMessage(string.Format("QueryLoginCityJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryLoginCityJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            if (watch != null)
            {
                Logger_AddLogMessage(string.Format("QueryLoginCityJSON: Tiempo de ejecución: {0}", watch.ElapsedMilliseconds), LogLevels.logINFO);
            }

            return jsonOut;
        }

        [WebMethod]
        public string QueryLoginCityInternal(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("QueryLoginCityInternal: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["OSID"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryLoginCityInternal::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("QueryLoginCityInternal::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            xmlOut = QueryLoginCityProcess(xmlIn, parametersIn, string.Empty, false);
                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryLoginCityInternal::Error: xmlIn={0}, xmlOut={1}", xmlIn, xmlOut), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }
            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryLoginCityInternal::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

            }

            return xmlOut;
        }

        [WebMethod]
        public string QueryLoginCityInternalJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("QueryLoginCityJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryLoginCityInternal(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;
                Logger_AddLogMessage(string.Format("QueryLoginCityInternalJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryLoginCityInternalJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string ValidateUser(string xmlIn)
        {
            string xmlOut = "";
            Stopwatch watch = null;
            string strUsername = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                watch = Stopwatch.StartNew();
                SortedList parametersIn = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ValidateUser: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["pasw"] == null) ||
                        (parametersIn["OSID"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ValidateUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ValidateUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            strUsername = parametersIn["u"].ToString();
                            //Verificamos si existe en la Base da datos principal el usuario (que exista el email y no visible (enable=1))
                            COUNTRIES_REDIRECTION oCountriesRedirections = null;
                            if (parametersIn["cityID"] != null && !string.IsNullOrEmpty(parametersIn["cityID"].ToString())) 
                            {
                                int cityId = int.Parse(parametersIn["cityID"].ToString());
                                oCountriesRedirections = FindCountriesRedirections(cityId, -1);
                            }

                            if (oCountriesRedirections != null)
                            {
                                try
                                {
                                    Logger_AddLogMessage(string.Format("ValidateUser: ExternalIntegraMobileWS: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);
                                    ExternalIntegraMobileWS.integraMobileWS oExternalIntegraMobileWS = StarExternalIntegraMobileWS(oCountriesRedirections);
                                    if (oExternalIntegraMobileWS != null)
                                    {
                                        VerifyLoginExistsRequest oVerifyLoginExistsRequest = new VerifyLoginExistsRequest(strUsername, parametersIn["pasw"].ToString());
                                        String sJsonInExternal = ToJsonRequest(oVerifyLoginExistsRequest);

                                        var docInExternal = (XmlDocument)JsonConvert.DeserializeXmlNode(sJsonInExternal);
                                        Logger_AddLogMessage(string.Format("ExternalIntegraMobileWS.VerifyLoginExistsJSON: xmlIn={0}", PrettyXml(docInExternal.InnerXml)), LogLevels.logINFO);

                                        //Se realiza la llamada para verificar si existe el Usuario  y en caso afirmativo verifica el password.
                                        string sJsonOutExternal = oExternalIntegraMobileWS.VerifyLoginExistsJSON(sJsonInExternal);
                                        xmlOut = oExternalIntegraMobileWS.VerifyLoginExists(sJsonOutExternal);
                                        sJsonOutExternal = RemeveTagIparkOut(sJsonOutExternal);
                                        var oVerifyLoginExistsResponse = JsonConvert.DeserializeObject<VerifyLoginExistsResponse>(xmlOut);
                                        if (oVerifyLoginExistsResponse.r == ResultType.Result_OK) 
                                        {
                                            SortedList parametersOut = new SortedList();
                                            parametersOut["token"] = JwtTokenHelper.GenerateToken(strUsername);
                                            parametersOut["url"] = oExternalIntegraMobileWS.Url;
                                            parametersOut["r"] = (int)ResultType.Result_OK;
                                            xmlOut = GenerateXMLOuput(parametersOut);
                                        }
                                    }

                                }
                                catch (Exception)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("ValidateUser::ExternalIntegraMobileWS::Error:  CountriesRedirections={0}, xmlIn={1}, xmlOut={2}", oCountriesRedirections.COURE_COUNTRY_REDIRECTION_WS_URL, PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }
                            }
                            else if (oCountriesRedirections == null)
                            {
                                if (ExistUserInTheMainServer(strUsername))
                                {
                                    if (FormAuthMemberShip.MembershipService.ValidateUser(ref strUsername, parametersIn["pasw"].ToString()))
                                    {
                                        if (watch != null)
                                        {
                                            Logger_AddLogMessage(string.Format("ValidateUser:Before QueryLoginCityProcess: usuario:{0} / Tiempo de ejecución: {1}", strUsername, watch.ElapsedMilliseconds), LogLevels.logINFO);
                                        }
                                        SortedList parametersOut = new SortedList();
                                        parametersOut["r"] = (int)ResultType.Result_OK;
                                        parametersOut["token"] = JwtTokenHelper.GenerateToken(strUsername);
                                        xmlOut = GenerateXMLOuput(parametersOut);
                                    }
                                    else
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthentication);
                                        Logger_AddLogMessage(string.Format("ValidateUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    }
                                }
                                else
                                {
                                    //Cargamos la lista de paises con sus redirecciones (Es un distinct por URL)
                                    List<COUNTRIES_REDIRECTION> oCountriesRedirectionsList = infraestructureRepository.GetCountriesRedirections();
                                    if (oCountriesRedirectionsList != null)
                                    {
                                        VerifyLoginExistsResponse oVerifyLoginExistsResponse = null;
                                        string url = string.Empty;
                                        XmlDocument docInExternal = null;
                                        bool bUserExist = false;
                                        foreach (COUNTRIES_REDIRECTION countryRedirection in oCountriesRedirectionsList)
                                        {
                                            //Iniciamos el ExternalIntegraMobileWS con las credenciales del pais
                                            ExternalIntegraMobileWS.integraMobileWS oExternalIntegraMobileWS = StarExternalIntegraMobileWS(countryRedirection);
                                            if (oExternalIntegraMobileWS != null)
                                            {
                                                VerifyLoginExistsRequest oVerifyLoginExistsRequest = new VerifyLoginExistsRequest(strUsername, parametersIn["pasw"].ToString());
                                                String sJsonInExternal = ToJsonRequest(oVerifyLoginExistsRequest);

                                                docInExternal = (XmlDocument)JsonConvert.DeserializeXmlNode(sJsonInExternal);
                                                Logger_AddLogMessage(string.Format("ExternalIntegraMobileWS.VerifyLoginExistsJSON: xmlIn={0}", PrettyXml(docInExternal.InnerXml)), LogLevels.logINFO);

                                                //Se realiza la llamada para verificar si existe el Usuario  y en caso afirmativo verifica el password.
                                                string sJsonOutExternal = oExternalIntegraMobileWS.VerifyLoginExistsJSON(sJsonInExternal);
                                                sJsonOutExternal = RemeveTagIparkOut(sJsonOutExternal);
                                                oVerifyLoginExistsResponse = JsonConvert.DeserializeObject<VerifyLoginExistsResponse>(sJsonOutExternal);
                                                if (oVerifyLoginExistsResponse.r == ResultType.Result_OK)
                                                {
                                                    bUserExist = true;
                                                    url = countryRedirection.COURE_COUNTRY_REDIRECTION_WS_URL;
                                                    break;
                                                }
                                                else if (oVerifyLoginExistsResponse.r == ResultType.Result_Error_InvalidAuthentication)
                                                {
                                                    bUserExist = true;
                                                    break;
                                                }
                                                else if (oVerifyLoginExistsResponse.r == ResultType.Result_Error_User_Not_Logged)
                                                {
                                                    bUserExist = false;
                                                }
                                            }
                                        }
                                        if (oVerifyLoginExistsResponse != null)
                                        {
                                            SortedList parametersOut = new SortedList();
                                            if (oVerifyLoginExistsResponse.r == ResultType.Result_OK && bUserExist)
                                            {
                                                parametersOut["token"] = JwtTokenHelper.GenerateToken(strUsername);
                                                parametersOut["url"] = url; 
                                                parametersOut["r"] = (int)ResultType.Result_OK;
                                                xmlOut = GenerateXMLOuput(parametersOut);

                                                Logger_AddLogMessage(string.Format("ExternalIntegraMobileWS.VerifyLoginExistsJSON:::INFO: xmlIn={0}, xmlOut={1}", PrettyXml(docInExternal.InnerXml), PrettyXml(xmlOut)), LogLevels.logINFO);
                                            }
                                            else if (oVerifyLoginExistsResponse.r == ResultType.Result_Error_InvalidAuthentication && bUserExist)
                                            {
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthentication);
                                                Logger_AddLogMessage(string.Format("ExternalIntegraMobileWS.VerifyLoginExistsJSON:::INFO: xmlIn={0}, xmlOut={1}", PrettyXml(docInExternal.InnerXml), PrettyXml(xmlOut)), LogLevels.logINFO);
                                            }
                                            else if ((oVerifyLoginExistsResponse.r != ResultType.Result_OK && oVerifyLoginExistsResponse.r != ResultType.Result_Error_InvalidAuthentication) && !bUserExist)
                                            {
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthentication);
                                                Logger_AddLogMessage(string.Format("ExternalIntegraMobileWS.VerifyLoginExistsJSON::INFO: xmlIn={0}, xmlOut={1}", PrettyXml(docInExternal.InnerXml), PrettyXml(xmlOut)), LogLevels.logINFO);
                                            }
                                            else
                                            {
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthentication);
                                                Logger_AddLogMessage(string.Format("ExternalIntegraMobileWS.VerifyLoginExistsJSON::INFO: xmlIn={0}, xmlOut={1}", PrettyXml(docInExternal.InnerXml), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthentication);
                                        Logger_AddLogMessage(string.Format("ValidateUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    }
                                }
                            }



                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ValidateUser::Error: xmlIn={0}, xmlOut={1}", xmlIn, xmlOut), LogLevels.logERROR);
                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }
            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ValidateUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            if (watch != null)
            {
                Logger_AddLogMessage(string.Format("ValidateUser:End: usuario:{0} / Tiempo de ejecución: {1}", strUsername, watch.ElapsedMilliseconds), LogLevels.logINFO);
            }
            return xmlOut;
        }

        [WebMethod]
        public string ValidateUserJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ValidateUser(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;
                Logger_AddLogMessage(string.Format("ValidateUserJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ValidateUserJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        private string QueryLoginCityProcess(string xmlIn, SortedList parametersIn, string countriesRedirections, bool bReturnInsGeomMovs = true, Stopwatch watch = null)
        {
            string xmlOut = "";

            SortedList parametersOut = null;


            ResultType rt = ResultType.Result_OK;

            USER oUser = null;

            string strUsername = parametersIn["u"].ToString();
            if (customersRepository.GetUserData(ref oUser, strUsername))
            {

                if (oUser != null)
                {
                    if (oUser.USR_ACTIVATED == 0)
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_User_Is_Not_Activated);
                        Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        return xmlOut;
                    }

                    decimal? dInsId = null;

                    parametersOut = new SortedList();

                    parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                    string strInsXML = "";
                    string strInsGeomXML = "";

                    string sAppVersion = "";
                    try
                    {
                        if (parametersIn["appvers"] != null)
                            sAppVersion = parametersIn["appvers"].ToString();
                        else
                            sAppVersion = parametersIn["vers"].ToString();
                    }
                    catch
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        return xmlOut;
                    }
                    if (!CheckVersionFormat(sAppVersion))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryLoginCity::Error: Invalid app version format: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        return xmlOut;
                    }

                    if (watch != null)
                    {
                        Logger_AddLogMessage(string.Format("QueryLoginCity:BeforeLoginData: usuario:{0} / Tiempo de ejecución: {1}", strUsername, watch.ElapsedMilliseconds), LogLevels.logINFO);
                    }


                    decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();
                    if (parametersIn["appcode"] != null)
                    {
                        try
                        {
                            string sAppCode = parametersIn["appcode"].ToString();
                            dSourceApp = geograficAndTariffsRepository.GetSourceApp(sAppCode);
                        }
                        catch { }
                    }

                    string strAppCode = geograficAndTariffsRepository.GetSourceAppCode(dSourceApp);

                    string strCulture = "";


                    if (parametersIn["lang"] != null)
                    {
                        try
                        {
                            int iLangIndex = Convert.ToInt32(parametersIn["lang"].ToString());
                            if (iLangIndex <= UserDeviceLangs.Length)
                            {
                                strCulture = UserDeviceLangs[iLangIndex - 1];
                            }
                        }
                        catch
                        { }
                    }

                    if (oUser.USR_SIGNUP_SOAPP_ID != dSourceApp)
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthentication);
                        Logger_AddLogMessage(string.Format("QueryLogin::Error (User Signup in other Application): xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        return xmlOut;
                    }

                    rt = GetQueryLoginData(ref oUser, parametersIn, AppUtilities.AppVersion(sAppVersion), strCulture, watch, out dInsId, ref parametersOut);


                    if (watch != null)
                    {
                        Logger_AddLogMessage(string.Format("QueryLoginCity:AfterLoginData: usuario:{0} / Tiempo de ejecución: {1}", strUsername, watch.ElapsedMilliseconds), LogLevels.logINFO);
                    }

                    MobileOS oMobileOS = MobileOS.Android;
                    try
                    {
                        int iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                        oMobileOS = (MobileOS)iOSID;
                    }
                    catch
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        return xmlOut;
                    }

                    if (rt != ResultType.Result_OK)
                    {
                        parametersOut["r"] = Convert.ToInt32(rt);


                        if (rt == ResultType.Result_Error_Invalid_City || rt == ResultType.Result_Error_Incompatible_City_With_UserCurrency)
                        {

                            if ((parametersIn["InsVersion"] != null) &&
                                (parametersIn["InsGeomVersion"] != null) && bReturnInsGeomMovs)
                            {


                                long lCurrVersion = -1;


                                try
                                {
                                    lCurrVersion = Convert.ToInt64(parametersIn["InsVersion"].ToString());
                                    strInsXML = GetInstallationsSync(lCurrVersion);
                                    parametersOut["InsSync"] = strInsXML;
                                }
                                catch { }


                                lCurrVersion = -1;

                                try
                                {
                                    lCurrVersion = Convert.ToInt64(parametersIn["InsGeomVersion"].ToString());
                                    strInsGeomXML = GetInstallationsGeometrySync(lCurrVersion, oMobileOS, sAppVersion);
                                    parametersOut["InsGeomSync"] = strInsGeomXML;

                                }
                                catch { }
                            }


                        }

                        xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "cities", "InsSync", "InsGeomSync", "ccpaymentsdata" });

                        Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        return xmlOut;
                    }

                    string strSessionID = "";
                    int? iUTCOffset = null;
                    



                    if ((parametersIn["date"] != null) && (parametersIn["utc_date"] != null))
                    {

                        DateTime dt;
                        DateTime dtUTC;

                        try
                        {
                            dt = DateTime.ParseExact(parametersIn["date"].ToString(), "HHmmssddMMyy",
                              CultureInfo.InvariantCulture);
                            dtUTC = DateTime.ParseExact(parametersIn["utc_date"].ToString(), "HHmmssddMMyy",
                              CultureInfo.InvariantCulture);

                            iUTCOffset = Convert.ToInt32((dtUTC - dt).TotalMinutes + 0.5);

                        }
                        catch
                        {
                            iUTCOffset = 0;
                        }


                    }
                    else
                    {

                        if (parametersIn["utc_offset"] != null)
                        {
                            try
                            {
                                iUTCOffset = Convert.ToInt32(parametersIn["utc_offset"].ToString());
                            }
                            catch { }
                        }
                        else
                        {
                            iUTCOffset = 0;
                        }
                    }


                    /*string sAppVersion = "";
                    try
                    {
                        if (parametersIn["appvers"] != null)
                            sAppVersion = parametersIn["appvers"].ToString();
                        else
                            sAppVersion = parametersIn["vers"].ToString();
                    }
                    catch
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        return xmlOut;
                    }
                    if (!CheckVersionFormat(sAppVersion))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryLoginCity::Error: Invalid app version format: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        return xmlOut;
                    }*/

                    INSTALLATION oInstallation = null;
                    DateTime? dtinstDateTime = null;
                    decimal? dLatitude = null;
                    decimal? dLongitude = null;


                    if (watch != null)
                    {
                        Logger_AddLogMessage(string.Format("QueryLoginCity:AfterCheckParameters: usuario:{0} / Tiempo de ejecución: {1}", strUsername, watch.ElapsedMilliseconds), LogLevels.logINFO);
                    }

                    if (!geograficAndTariffsRepository.getInstallation(dInsId,
                                                                 dLatitude,
                                                                 dLongitude,
                                                                 ref oInstallation,
                                                                 ref dtinstDateTime))
                    {
                        oInstallation = null;
                    }

                    string sCheckVersionFrom = ConfigurationManager.AppSettings["CheckVersionFrom_" + oMobileOS.ToString()] ?? "";
                    string sCheckVersionUpdateMandatory = ConfigurationManager.AppSettings["CheckVersionUpdateMandatory_" + oMobileOS.ToString()] ?? "";
                    string sCheckVersionUpdateNotMandatory = ConfigurationManager.AppSettings["CheckVersionUpdateNotMandatory_" + oMobileOS.ToString()] ?? "";
                    if (oInstallation != null)
                    {
                        if (oMobileOS == MobileOS.Android && !string.IsNullOrEmpty(oInstallation.INS_APP_MANDATORY_ANDROID_VERSION))
                            sCheckVersionUpdateMandatory = oInstallation.INS_APP_MANDATORY_ANDROID_VERSION;
                        else if (oMobileOS == MobileOS.iOS && !string.IsNullOrEmpty(oInstallation.INS_APP_MANDATORY_IOS_VERSION))
                            sCheckVersionUpdateMandatory = oInstallation.INS_APP_MANDATORY_IOS_VERSION;

                        if (oMobileOS == MobileOS.Android && !string.IsNullOrEmpty(oInstallation.INS_APP_NOT_MANDATORY_ANDROID_VERSION))
                            sCheckVersionUpdateNotMandatory = oInstallation.INS_APP_NOT_MANDATORY_ANDROID_VERSION;
                        else if (oMobileOS == MobileOS.iOS && !string.IsNullOrEmpty(oInstallation.INS_APP_NOT_MANDATORY_IOS_VERSION))
                            sCheckVersionUpdateNotMandatory = oInstallation.INS_APP_NOT_MANDATORY_IOS_VERSION;
                    }
                    if (!string.IsNullOrEmpty(sCheckVersionFrom) &&
                        (!string.IsNullOrEmpty(sCheckVersionUpdateMandatory) || !string.IsNullOrEmpty(sCheckVersionUpdateNotMandatory)))
                    {
                        if (VersionGreatherEqual(sAppVersion, sCheckVersionFrom))
                        {
                            if (VersionMinor(sAppVersion, sCheckVersionUpdateMandatory))
                                rt = ResultType.Result_Error_InvalidAppVersion_UpdateMandatory;
                            else if (VersionMinor(sAppVersion, sCheckVersionUpdateNotMandatory))
                                rt = ResultType.Result_Error_InvalidAppVersion_UpdateNotMandatory;
                        }
                    }

                    ulong ulAppVersion = AppUtilities.AppVersion(sAppVersion);

                    if (ulAppVersion >= _VERSION_999_99_9)
                    {

                        if ((parametersIn["cityVERSION"] == null) ||
                            (parametersIn["tarVERSION"] == null))
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                            Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            return xmlOut;

                        }
                    }


                    if (rt == ResultType.Result_OK || rt == ResultType.Result_Error_InvalidAppVersion_UpdateNotMandatory)
                    {
                        ResultType rt2 = StartSession(ref oUser, dInsId.Value, parametersIn, out strSessionID, iUTCOffset, strCulture);
                        if (rt2 != ResultType.Result_OK)
                        {
                            xmlOut = GenerateXMLErrorResult(rt2);
                            Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            return xmlOut;
                        }
                    }

                    parametersOut["r"] = Convert.ToInt32(rt).ToString();

                    parametersOut["SessionID"] = strSessionID;

                    string sLicenseTermsVersion = "";
                    string sLicenseTermsUrl = "";
                    string sConditionsUrl = "";
                    string strXmlVersionLiterals = String.Empty;

                   

                    if (AppUtilities.AppVersion(sAppVersion) >= _VERSION_2_8)
                    {
                        IEnumerable<stVersionsLiterals> ostVersionsLiterals = customersRepository.DisplayQuestions(oUser, strCulture, dSourceApp, out sLicenseTermsVersion, out sLicenseTermsUrl, out sConditionsUrl);

                        if (!GenerateXMLVersionsLiterals(ostVersionsLiterals, ref strXmlVersionLiterals))
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                            Logger_AddLogMessage(string.Format("QueryLoginCityProcess::GenerateXMLVersionsLiterals::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            return xmlOut;
                        }
                        parametersOut["questions"] = strXmlVersionLiterals;
                        parametersOut["legalterms"] = (customersRepository.NeedDisplayLicenseTerms(oUser, strCulture, out sLicenseTermsVersion, out sLicenseTermsUrl, out sConditionsUrl) ? "1" : "0");
                        parametersOut["legaltermsver"] = sLicenseTermsVersion;
                        parametersOut["url1"] = sLicenseTermsUrl;
                        parametersOut["url2"] = sConditionsUrl;
                    }
                    else
                    {
                        parametersOut["legalterms"] = (customersRepository.NeedDisplayLicenseTerms(oUser, strCulture, out sLicenseTermsVersion, out sLicenseTermsUrl, out sConditionsUrl) ? "1" : "0");
                        parametersOut["legaltermsver"] = sLicenseTermsVersion;
                        parametersOut["url1"] = sLicenseTermsUrl;
                        parametersOut["url2"] = sConditionsUrl;
                    }

                    parametersOut["urlmarket"] = ConfigurationManager.AppSettings[string.Format("UrlMarket_{0}_{1}", oMobileOS.ToString(), strAppCode)] ?? "";
                    parametersOut["urlmarketmsg"] = ConfigurationManager.AppSettings[string.Format("UrlMarketMsg_{0}_{1}_{2}_{3}",
                                                                                                   (rt == ResultType.Result_Error_InvalidAppVersion_UpdateMandatory ? "Mandatory" : "NotMandatory"),
                                                                                                   oMobileOS.ToString(),
                                                                                                   strAppCode,
                                                                                                   strCulture)] ?? "";
                    if (rt == ResultType.Result_Error_InvalidAppVersion_UpdateMandatory)
                    {
                        parametersOut["urlmarketvers"] = sCheckVersionUpdateMandatory ?? "";
                    }
                    else if (rt == ResultType.Result_Error_InvalidAppVersion_UpdateNotMandatory)
                    {
                        parametersOut["urlmarketvers"] = sCheckVersionUpdateNotMandatory ?? "";
                    }

                    parametersOut["OPEUSERID"] = oUser.USR_ID.ToString();
                    parametersOut["BALCUR"] = oUser.USR_CUR_ID.ToString();

                    USER_AVERAGE_BALANCE oUserAverageBalance = oUser.USER_AVERAGE_BALANCEs.FirstOrDefault();
                    if (oUserAverageBalance != null)
                        parametersOut["BALAVER"] = oUserAverageBalance.USRB_AVERAGE_BALANCE.ToString();

                    //parametersOut["PAYMODE"] = Convert.ToInt32(ConfigurationManager.AppSettings["TollPaymentMode"] ?? "0");
                    parametersOut["PAYSTATUS"] = (oUser.USR_BALANCE >= 0 ? 0 : 1);
                    if (oUser.USR_BALANCE < 0)
                        parametersOut["PAYBALDUE"] = oUser.USR_BALANCE;



                    /*INSTALLATION oInstallation = null;
                    DateTime? dtinstDateTime = null;
                    decimal? dLatitude = null;
                    decimal? dLongitude = null;

                    if (!geograficAndTariffsRepository.getInstallation(dInsId,
                                                                 dLatitude,
                                                                 dLongitude,
                                                                 ref oInstallation,
                                                                 ref dtinstDateTime))*/
                    if (oInstallation == null)
                    {

                        parametersOut = new SortedList();
                        parametersOut["r"] = Convert.ToInt32(ResultType.Result_Error_Invalid_City).ToString();


                        if ((parametersIn["InsVersion"] != null) &&
                            (parametersIn["InsGeomVersion"] != null) && bReturnInsGeomMovs)
                        {


                            long lCurrVersion = -1;


                            try
                            {
                                lCurrVersion = Convert.ToInt64(parametersIn["InsVersion"].ToString());
                                strInsXML = GetInstallationsSync(lCurrVersion);
                                parametersOut["InsSync"] = strInsXML;
                            }
                            catch { }


                            lCurrVersion = -1;

                            try
                            {
                                lCurrVersion = Convert.ToInt64(parametersIn["InsGeomVersion"].ToString());
                                strInsGeomXML = GetInstallationsGeometrySync(lCurrVersion, oMobileOS, sAppVersion);
                                parametersOut["InsGeomSync"] = strInsGeomXML;

                            }
                            catch { }
                        }

                        xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "InsSync", "InsGeomSync" });

                        Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        return xmlOut;
                    }

                    IEnumerable<stZone> zones;
                    string strXmlGroupHierarchy = "";
                    string strXmlOffstreetGroupHierarchy = "";
                    string strXmlGISInfo = "";
                    string strXmlOffstreetGISInfo = "";
                    StringBuilder sbXmlGroupHierarchy = new StringBuilder();
                    StringBuilder sbXmlOffstreetGroupHierarchy = new StringBuilder();
                    StringBuilder sbXmlGISInfo = new StringBuilder();
                    StringBuilder sbXmlOffstreetGISInfo = new StringBuilder();

                    IEnumerable<stTariff> tariffs;
                    string strXmlTariffs = "";
                    string strXmlCityOpt = "";

                    //parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                    IEnumerable<stCityPolygon> oInstallationsPolygons;
                    string strInstallationsPolygonsXML = string.Empty;

                    if (ulAppVersion < _VERSION_999_99_9)
                    {

                        if (watch != null)
                        {
                            Logger_AddLogMessage(string.Format("QueryLoginCity:BeforeHierarchy: usuario:{0} / Tiempo de ejecución: {1}", strUsername, watch.ElapsedMilliseconds), LogLevels.logINFO);
                        }

                        zones = geograficAndTariffsRepository.getInstallationGroupHierarchy(oInstallation.INS_ID, new List<GroupType>() { GroupType.OnStreetZone, GroupType.OnStreetLot }, Convert.ToInt32(parametersIn["lang"]), (oMobileOS == MobileOS.iOS || oMobileOS == MobileOS.Android));


                        if (!GenerateXMLGroupHierarchy(zones, ulAppVersion, ref sbXmlGroupHierarchy, ref sbXmlGISInfo))
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                            Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            return xmlOut;
                        }

                        strXmlGroupHierarchy = sbXmlGroupHierarchy.ToString();
                        strXmlGISInfo = sbXmlGISInfo.ToString();

                        zones = geograficAndTariffsRepository.getInstallationGroupHierarchy(oInstallation.INS_ID, new List<GroupType>() { GroupType.OffStreet }, Convert.ToInt32(parametersIn[ConstantsEntity.PARAMETER_LANG]), false);
                        if (!GenerateXMLGroupHierarchy(zones, ulAppVersion, ref sbXmlOffstreetGroupHierarchy, ref sbXmlOffstreetGISInfo))
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                            Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            return xmlOut;
                        }

                        strXmlOffstreetGroupHierarchy = sbXmlOffstreetGroupHierarchy.ToString();
                        strXmlOffstreetGISInfo = sbXmlOffstreetGISInfo.ToString();

                        if (watch != null)
                        {
                            Logger_AddLogMessage(string.Format("QueryLoginCity:BeforeTariffs: usuario:{0} / Tiempo de ejecución: {1}", strUsername, watch.ElapsedMilliseconds), LogLevels.logINFO);
                        }

                        tariffs = geograficAndTariffsRepository.getInstallationTariffs(oInstallation.INS_ID, Convert.ToDecimal(parametersIn[ConstantsEntity.PARAMETER_LANG]));
                        //Filter allow rates in lower versions 9.99 for iOS and Android.
                        if (oMobileOS.Equals(MobileOS.Android) || oMobileOS.Equals(MobileOS.iOS))
                        {
                            tariffs = tariffs.Where(x => x.tariffType.Equals(TariffType.RegularTariff));
                        }
                        tariffs = tariffs.Where(tariff => (tariff.ulMinVersion == 0 || tariff.ulMinVersion <= ulAppVersion) &&
                                                          (tariff.ulMaxVersion == 0 || tariff.ulMaxVersion > ulAppVersion));
                        List<LiteralTariffLanguage> oListLiteralsTariffByLanguage = customersRepository.GetLiteralsTariffByLanguage(Convert.ToDecimal(parametersIn[ConstantsEntity.PARAMETER_LANG]), tariffs);


                        TypeTypeServicesEnum oTypeTypeServicesEnum = TypeTypeServicesEnum.None;
                        bool bServicePlateDUM = false;
                        bool bServicePlatePMR = false;
                        if (ulAppVersion >= _VERSION_3_4)
                        {
                            oTypeTypeServicesEnum = ExistServiceType(oUser, string.Empty, oInstallation.INS_ID, dtinstDateTime, ref bServicePlateDUM, ref bServicePlatePMR, xmlIn, ref xmlOut);
                            if (!string.IsNullOrEmpty(xmlOut))
                                return xmlOut;
                        }

                        if (watch != null)
                        {
                            Logger_AddLogMessage(string.Format("QueryLoginCity:BeforeGenerateXMLTariffs: usuario:{0} / Tiempo de ejecución: {1}", strUsername, watch.ElapsedMilliseconds), LogLevels.logINFO);
                        }

                        if (!GenerateXMLTariffs(tariffs, oListLiteralsTariffByLanguage, ulAppVersion, /*bServicePlateDUM, bServicePlatePMR,*/ oTypeTypeServicesEnum, ref strXmlTariffs))
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                            Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            return xmlOut;
                        }

                        if (watch != null)
                        {
                            Logger_AddLogMessage(string.Format("QueryLoginCity:BeforeGenerateCityOptXML: usuario:{0} / Tiempo de ejecución: {1}", strUsername, watch.ElapsedMilliseconds), LogLevels.logINFO);
                        }


                        if (!GenerateCityOptXML(oInstallation, oUser, ulAppVersion, strCulture, ref strXmlCityOpt, watch))
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                            Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            return xmlOut;
                        }

                        if (watch != null)
                        {
                            Logger_AddLogMessage(string.Format("QueryLoginCity:AfterGenerateCityOptXML: usuario:{0} / Tiempo de ejecución: {1}", strUsername, watch.ElapsedMilliseconds), LogLevels.logINFO);
                        }

                        oInstallationsPolygons = geograficAndTariffsRepository.getInstallationPolygons(oInstallation.INS_ID, Convert.ToInt32(parametersIn["lang"]));

                        if (!GenerateInstallationsPolygonsXML(oInstallationsPolygons, ref strInstallationsPolygonsXML))
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                            Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            return xmlOut;
                        }

                        if (watch != null)
                        {
                            Logger_AddLogMessage(string.Format("QueryLoginCity:AfterXMLPoligons: usuario:{0} / Tiempo de ejecución: {1}", strUsername, watch.ElapsedMilliseconds), LogLevels.logINFO);
                        }

                        parametersOut["citypolygons"] = strInstallationsPolygonsXML;

                        decimal? dShareMessage = Tools.Helpers.ValidateStringToDecimal(SettingsApp.ShareMessage);
                        if (dShareMessage.HasValue)
                        {
                            string sSharemessage = infraestructureRepository.GetLiteral(dShareMessage.Value, strCulture);
                            if (!String.IsNullOrEmpty(sSharemessage))
                            {
                                parametersOut["sharemessage"] = sSharemessage;
                            }
                        }

                        if ((parametersIn["InsVersion"] != null) &&
                            (parametersIn["InsGeomVersion"] != null) && bReturnInsGeomMovs)
                        {


                            long lCurrVersion = -1;

                            try
                            {
                                lCurrVersion = Convert.ToInt64(parametersIn["InsVersion"].ToString());
                                strInsXML = GetInstallationsSync(lCurrVersion);
                                parametersOut["InsSync"] = strInsXML;
                            }
                            catch { }


                            lCurrVersion = -1;

                            try
                            {
                                lCurrVersion = Convert.ToInt64(parametersIn["InsGeomVersion"].ToString());
                                strInsGeomXML = GetInstallationsGeometrySync(lCurrVersion, oMobileOS, sAppVersion);
                                parametersOut["InsGeomSync"] = strInsGeomXML;

                            }
                            catch { }
                        }

                    }
                    else
                    {
                        long lCurrVersion = -1;
                        if (parametersIn["tarVERSION"] != null)
                        {
                            try
                            {
                                lCurrVersion = Convert.ToInt64(parametersIn["tarVERSION"].ToString());
                            }
                            catch { }
                        }

                        if (lCurrVersion < oInstallation.INS_TAR_VERSION)
                        {

                            zones = geograficAndTariffsRepository.getInstallationGroupHierarchy2(oInstallation.INS_ID, new List<GroupType>() { GroupType.OnStreetZone, GroupType.OnStreetLot }, (oMobileOS == MobileOS.iOS || oMobileOS == MobileOS.Android));


                            if (!GenerateXMLGroupHierarchy2(zones, ulAppVersion, ref sbXmlGroupHierarchy, ref sbXmlGISInfo))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            strXmlGroupHierarchy = sbXmlGroupHierarchy.ToString();
                            strXmlGISInfo = sbXmlGISInfo.ToString();

                            zones = geograficAndTariffsRepository.getInstallationGroupHierarchy2(oInstallation.INS_ID, new List<GroupType>() { GroupType.OffStreet }, false);
                            if (!GenerateXMLGroupHierarchy2(zones, ulAppVersion, ref sbXmlOffstreetGroupHierarchy, ref sbXmlOffstreetGISInfo))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            strXmlOffstreetGroupHierarchy = sbXmlOffstreetGroupHierarchy.ToString();
                            strXmlOffstreetGISInfo = sbXmlOffstreetGISInfo.ToString();

                            tariffs = geograficAndTariffsRepository.getInstallationTariffs2(oInstallation.INS_ID, Convert.ToDecimal(parametersIn[ConstantsEntity.PARAMETER_LANG]));

                            if (!GenerateXMLTariffs2(tariffs, ulAppVersion, ref strXmlTariffs))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            List<LiteralTariffLanguage> oListLiteralsTariffByLanguage = customersRepository.GetLiteralsTariffByLanguage(Convert.ToDecimal(parametersIn["lang"]), tariffs);
                        }



                        lCurrVersion = -1;
                        if (parametersIn["cityVERSION"] != null)
                        {
                            try
                            {
                                lCurrVersion = Convert.ToInt64(parametersIn["cityVERSION"].ToString());
                            }
                            catch { }
                        }

                        if (lCurrVersion < oInstallation.INS_VERSION)
                        {
                            if (!GenerateCityOptXML(oInstallation, oUser, ulAppVersion, strCulture, ref strXmlCityOpt))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                        }

                        parametersOut["cityVERSION"] = oInstallation.INS_VERSION;
                        parametersOut["tarVERSION"] = oInstallation.INS_TAR_VERSION;
                        //parametersOut["city_fine_number_lit"] = oInstallation.INS_;


                        if ((parametersIn["InsVersion"] != null) &&
                            (parametersIn["InsGeomVersion"] != null) && bReturnInsGeomMovs)
                        {


                            lCurrVersion = -1;

                            try
                            {
                                lCurrVersion = Convert.ToInt64(parametersIn["InsVersion"].ToString());
                                strInsXML = GetInstallationsSync(lCurrVersion);
                                parametersOut["InsSync"] = strInsXML;
                            }
                            catch { }


                            lCurrVersion = -1;

                            try
                            {
                                lCurrVersion = Convert.ToInt64(parametersIn["InsGeomVersion"].ToString());
                                strInsGeomXML = GetInstallationsGeometrySync(lCurrVersion, oMobileOS, sAppVersion);
                                parametersOut["InsGeomSync"] = strInsGeomXML;

                            }
                            catch { }
                        }

                    }

                    //***********************************************************
                    //***********************************************************
                    //***********************************************************
                    if (ulAppVersion >= _VERSION_3_4)
                    {
                        string strXmlCityServiceList = string.Empty;
                        StringBuilder sbXmlCityServiceList = new StringBuilder();

                        if (!GenerateXMLCityServiceList(oInstallation, ref sbXmlCityServiceList, Convert.ToDecimal(parametersIn[ConstantsEntity.PARAMETER_LANG]), dtinstDateTime))
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                            Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            return xmlOut;
                        }
                        strXmlCityServiceList = sbXmlCityServiceList.ToString();
                        parametersOut["CityServiceList"] = strXmlCityServiceList;
                    }
                    if (ulAppVersion >= _VERSION_3_5)
                    {
                        string sColor = GetNumDaysColourList();
                        if (!string.IsNullOrEmpty(sColor))
                        {
                            parametersOut["num_days_colour_list"] = sColor;
                        }

                    }

                    if (watch != null)
                    {
                        Logger_AddLogMessage(string.Format("QueryLoginCity:Before final assignations: usuario:{0} / Tiempo de ejecución: {1}", strUsername, watch.ElapsedMilliseconds), LogLevels.logINFO);
                    }

                    parametersOut["ZoneTar"] = strXmlGroupHierarchy;

                    parametersOut["ZoneTarOffstreet"] = strXmlOffstreetGroupHierarchy;

                    parametersOut["InfoTAR"] = strXmlTariffs;

                    parametersOut["ZoneGIS"] = strXmlGISInfo;

                    parametersOut["ZoneOffstreetGIS"] = strXmlOffstreetGISInfo;

                    parametersOut["CityOpt"] = strXmlCityOpt;

                    decimal? dFavGroupId = null;
                    int iQueryDays = Convert.ToInt32(ConfigurationManager.AppSettings["UserFavouriteGroupQueryDays"] ?? "0");
                    DateTime xBeginDateUTC = DateTime.UtcNow.AddDays(-iQueryDays);
                    DateTime xEndDateUTC = DateTime.UtcNow;
                    customersRepository.GetFavouriteGroupFromUser(ref oUser, dInsId, xBeginDateUTC, xEndDateUTC, out dFavGroupId);
                    parametersOut["favzone"] = (dFavGroupId.HasValue ? ((int)dFavGroupId).ToString() : "");

                    if (!string.IsNullOrEmpty(countriesRedirections))
                    {
                        int iwsurl = countriesRedirections.IndexOf('/', countriesRedirections.Length - 1);
                        string ws_url = string.Empty;
                        if (iwsurl != -1)
                        {
                            ws_url = countriesRedirections;
                        }
                        else
                        {
                            ws_url = countriesRedirections + "/";
                        }
                        parametersOut["bckwsurl"] = ws_url;
                    }



                    CampaingSchemaSeven(oUser, oInstallation, dLatitude, dLongitude, parametersIn);

                    try
                    {
                        IEnumerable<USERS_WARNING> oUsersWarnings = customersRepository.GetUsersWarnings(oUser.USR_ID, (int)UserWarningType.Login);
                        string xmlUserWarning = GenerateXMLUsersWarnings(oUsersWarnings);
                        parametersOut["user_warnings"] = xmlUserWarning;
                    }
                    catch
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                        Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        return xmlOut;
                    }

                    xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "cities", "ZoneTar", "ZoneTarOffstreet", "InfoTAR", "ZoneGIS", "ZoneOffstreetGIS", "InsSync", "InsGeomSync", "questions", "citypolygons", "user_warnings", "num_days_colour_list", "ccpaymentsdata" });

                    if (xmlOut.Length == 0)
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                        Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        //Logger_AddLogMessage(string.Format("QueryLoginCity: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                    }

                    oUser = null;
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_User);
                    Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
            }
            else
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_User);
                Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            if (parametersOut != null)
            {
                parametersOut.Clear();
                parametersOut = null;
            }

            return xmlOut;
        }

        /*
         *  QueryCity
         *  
        <ipark_in>
            <user>455GHP</ user >
            <cityID>125</cityID>
            <cityVERSION>5</cityVERSION>
            <tarVERSION>6</ tarVERSION>* 
            <ah>authentication hash</ah>
        </ ipark _in>
         * 
         * 
        <ipark_out>
	        <r>Result of the method</r>
        <ZoneTar>
        <numzon>2</ numzon >
        <z1 id = “111”> 
        <lit> number of literal </lit>
		        <desc> zone description: “Montreal”,..</desc>
		        <sz1 id = “1111”>
        <lit> number of literal </lit>
			        <desc> “Downtown Montreal: Rotation”,..</desc>
        </sz1>
		        <sz2 id = “1112”>
        <lit> number of literal </lit>
			        <desc> “Periphery Montreal”,..</desc>
        </sz2>
        </z1>

        <z2 id = “112”> 
        <lit> number of literal </lit>
		        <desc> zone description: “Montreal”,..</desc>
        </z2>
        ……
        </ZoneTar >	-- Information with the available tariffs in the city
        <InfoTAR>
        <ad id=”1”>
	        <szs> zones or subzones where the tariff applies: “1111, 2111,…”</szs>
        <sel> tariff can be selected by the user </sel>
	        <lit> number of literal </lit>
	        <desc> tariff description “ROTATION” </desc>
        </ad>
        <ad id=”2”>
        <szs> zone or subzone where the tariff applies: “1112”</szs>
        <sel> tariff can be selected by the user </sel>
	        <lit> number of literal </lit>
	        <desc> tariff description “PERIPHERY” </desc>
        </ad>
        <ad id=”3”>
	        <szs> zone or subzone where the tariff applies: “112”</szs>
        <sel> tariff can be selected by the user </sel>
	        <lit> number of literal </lit>
	        <desc> tariff description “LONG OCCUPANCY” </desc>
        </ad>
        <ad id=”4”>
        <szs> zone or subzone where the tariff applies: “112”</szs>
        <sel> tariff can be selected by the user </sel>
	        <lit> number of literal </lit>
	        <desc> tariff description “RESIDENT” </desc>
        </ad>

        </ InfoTAR >
        <ZoneGIS> format to be defined </ ZoneGIS >	-- Information with the available zones in the city



        </ipark_out>
         * 
         * 
        Result of the method:
            a.	2: Information Retrieved Successfully.
            b.	-9: Error retrieving information. Information Temporary unavailable 
             c.	-19 Invalid Input Parameter 
            d.	-20 Missing Input Parameter 
* 
         *
         */
        [WebMethod]
        public string QueryCity(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("QueryCity: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["cityID"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("QueryCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";

                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            decimal? dInstallationId = null;

                            try
                            {
                                decimal dTryInstallationId = Convert.ToDecimal(parametersIn["cityID"].ToString());
                                dInstallationId = dTryInstallationId;
                            }
                            catch
                            {
                                dInstallationId = null;
                            }

                            string sLicenseTermsVersion = "";
                            try
                            {
                                sLicenseTermsVersion = parametersIn["legaltermsver"].ToString();
                            }
                            catch
                            {
                                sLicenseTermsVersion = "";
                            }

                            INSTALLATION oInstallation = null;
                            DateTime? dtinstDateTime = null;
                            decimal? dLatitude = null;
                            decimal? dLongitude = null;
                            string strInsGeomXML = "";
                            string strInsXML = "";


                            MobileOS oMobileOS = MobileOS.Android;
                            try
                            {
                                int iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                oMobileOS = (MobileOS)iOSID;
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            if (!geograficAndTariffsRepository.getInstallation(dInstallationId,
                                                                         dLatitude,
                                                                         dLongitude,
                                                                         ref oInstallation,
                                                                         ref dtinstDateTime))
                            {
                                parametersOut = new SortedList();
                                parametersOut["r"] = Convert.ToInt32(ResultType.Result_Error_Invalid_City).ToString();


                                if ((parametersIn["InsVersion"] != null) &&
                                    (parametersIn["InsGeomVersion"] != null))
                                {


                                    long lCurrVersion = -1;


                                    try
                                    {
                                        lCurrVersion = Convert.ToInt64(parametersIn["InsVersion"].ToString());
                                        strInsXML = GetInstallationsSync(lCurrVersion);
                                        parametersOut["InsSync"] = strInsXML;
                                    }
                                    catch { }


                                    lCurrVersion = -1;

                                    try
                                    {
                                        lCurrVersion = Convert.ToInt64(parametersIn["InsGeomVersion"].ToString());
                                        strInsGeomXML = GetInstallationsGeometrySync(lCurrVersion, oMobileOS, strAppVersion);
                                        parametersOut["InsGeomSync"] = strInsGeomXML;

                                    }
                                    catch { }
                                }

                                xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "InsSync", "InsGeomSync" });

                                Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            IEnumerable<stZone> zones;
                            string strXmlGroupHierarchy = "";
                            string strXmlOffstreetGroupHierarchy = "";
                            string strXmlGISInfo = "";
                            string strXmlOffstreetGISInfo = "";
                            StringBuilder sbXmlGroupHierarchy = new StringBuilder();
                            StringBuilder sbXmlOffstreetGroupHierarchy = new StringBuilder();
                            StringBuilder sbXmlGISInfo = new StringBuilder();
                            StringBuilder sbXmlOffstreetGISInfo = new StringBuilder();

                            IEnumerable<stTariff> tariffs;
                            string strXmlTariffs = "";
                            string strXmlCityOpt = "";

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();



                            ulong ulAppVersion = AppUtilities.AppVersion(strAppVersion);
                            if (ulAppVersion < _VERSION_999_99_9)
                            {

                                zones = geograficAndTariffsRepository.getInstallationGroupHierarchy(oInstallation.INS_ID, new List<GroupType>() { GroupType.OnStreetZone, GroupType.OnStreetLot }, Convert.ToInt32(parametersIn["lang"]), (oMobileOS == MobileOS.iOS || oMobileOS == MobileOS.Android));


                                if (!GenerateXMLGroupHierarchy(zones, ulAppVersion, ref sbXmlGroupHierarchy, ref sbXmlGISInfo))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                                strXmlGroupHierarchy = sbXmlGroupHierarchy.ToString();
                                strXmlGISInfo = sbXmlGISInfo.ToString();

                                zones = geograficAndTariffsRepository.getInstallationGroupHierarchy(oInstallation.INS_ID, new List<GroupType>() { GroupType.OffStreet }, Convert.ToInt32(parametersIn["lang"]), false);
                                if (!GenerateXMLGroupHierarchy(zones, ulAppVersion, ref sbXmlOffstreetGroupHierarchy, ref sbXmlOffstreetGISInfo))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                                strXmlOffstreetGroupHierarchy = sbXmlOffstreetGroupHierarchy.ToString();
                                strXmlOffstreetGISInfo = sbXmlOffstreetGISInfo.ToString();



                                tariffs = geograficAndTariffsRepository.getInstallationTariffs(oInstallation.INS_ID, Convert.ToDecimal(parametersIn[ConstantsEntity.PARAMETER_LANG]));

                                tariffs = tariffs.Where(tariff => (tariff.ulMinVersion == 0 || tariff.ulMinVersion <= ulAppVersion) &&
                                                                  (tariff.ulMaxVersion == 0 || tariff.ulMaxVersion > ulAppVersion));
                                //query city comprobar servicio de matricula
                                TypeTypeServicesEnum oTypeTypeServicesEnum = TypeTypeServicesEnum.None;
                                bool bServicePlateDUM = false;
                                bool bServicePlatePMR = false;
                                if (ulAppVersion >= _VERSION_3_4)
                                {
                                    oTypeTypeServicesEnum = ExistServiceType(oUser, string.Empty, oInstallation.INS_ID, dtinstDateTime, ref bServicePlateDUM, ref bServicePlatePMR, xmlIn, ref xmlOut);
                                    if (!string.IsNullOrEmpty(xmlOut))
                                        return xmlOut;
                                }
                                if (!GenerateXMLTariffs(tariffs, null, ulAppVersion, /*bServicePlateDUM, bServicePlatePMR,*/ oTypeTypeServicesEnum, ref strXmlTariffs))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }


                                if (!GenerateCityOptXML(oInstallation, oUser, ulAppVersion, strCulture, ref strXmlCityOpt))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                            }
                            else
                            {
                                if (ulAppVersion >= _VERSION_999_99_9)
                                {

                                    if ((parametersIn["cityVERSION"] == null) ||
                                        (parametersIn["tarVERSION"] == null))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("QueryCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;

                                    }
                                }

                                long lCurrVersion = -1;
                                if (parametersIn["tarVERSION"] != null)
                                {
                                    try
                                    {
                                        lCurrVersion = Convert.ToInt64(parametersIn["tarVERSION"].ToString());
                                    }
                                    catch { }
                                }

                                if (lCurrVersion < oInstallation.INS_TAR_VERSION)
                                {

                                    zones = geograficAndTariffsRepository.getInstallationGroupHierarchy2(oInstallation.INS_ID, new List<GroupType>() { GroupType.OnStreetZone, GroupType.OnStreetLot }, (oMobileOS == MobileOS.iOS || oMobileOS == MobileOS.Android));


                                    if (!GenerateXMLGroupHierarchy2(zones, ulAppVersion, ref sbXmlGroupHierarchy, ref sbXmlGISInfo))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                    strXmlGroupHierarchy = sbXmlGroupHierarchy.ToString();
                                    strXmlGISInfo = sbXmlGISInfo.ToString();

                                    zones = geograficAndTariffsRepository.getInstallationGroupHierarchy2(oInstallation.INS_ID, new List<GroupType>() { GroupType.OffStreet }, false);
                                    if (!GenerateXMLGroupHierarchy2(zones, ulAppVersion, ref sbXmlOffstreetGroupHierarchy, ref sbXmlOffstreetGISInfo))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                    strXmlOffstreetGroupHierarchy = sbXmlOffstreetGroupHierarchy.ToString();
                                    strXmlOffstreetGISInfo = sbXmlOffstreetGISInfo.ToString();

                                    tariffs = geograficAndTariffsRepository.getInstallationTariffs2(oInstallation.INS_ID, Convert.ToDecimal(parametersIn[ConstantsEntity.PARAMETER_LANG]));

                                    if (!GenerateXMLTariffs2(tariffs, ulAppVersion, ref strXmlTariffs))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }

                                lCurrVersion = -1;
                                if (parametersIn["cityVERSION"] != null)
                                {
                                    try
                                    {
                                        lCurrVersion = Convert.ToInt64(parametersIn["cityVERSION"].ToString());
                                    }
                                    catch { }
                                }

                                if (lCurrVersion < oInstallation.INS_VERSION)
                                {
                                    if (!GenerateCityOptXML(oInstallation, oUser, ulAppVersion, strCulture, ref strXmlCityOpt))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }

                                parametersOut["cityVERSION"] = oInstallation.INS_VERSION;
                                parametersOut["tarVERSION"] = oInstallation.INS_TAR_VERSION;


                                if ((parametersIn["InsVersion"] != null) &&
                                    (parametersIn["InsGeomVersion"] != null))
                                {


                                    lCurrVersion = -1;

                                    try
                                    {
                                        lCurrVersion = Convert.ToInt64(parametersIn["InsVersion"].ToString());
                                        strInsXML = GetInstallationsSync(lCurrVersion);
                                        parametersOut["InsSync"] = strInsXML;
                                    }
                                    catch { }


                                    lCurrVersion = -1;

                                    try
                                    {

                                        lCurrVersion = Convert.ToInt64(parametersIn["InsGeomVersion"].ToString());
                                        strInsGeomXML = GetInstallationsGeometrySync(lCurrVersion, oMobileOS, strAppVersion);
                                        parametersOut["InsGeomSync"] = strInsGeomXML;

                                    }
                                    catch { }
                                }


                            }


                            if (AppUtilities.AppVersion(strAppVersion) >= _VERSION_2_8)
                            {
                                List<stVersionsLiterals> ostVersionsLiteralsList = new List<stVersionsLiterals>();
                                for (Int32 i = 0; i <= parametersIn.Count; i++)
                                {
                                    if (parametersIn.ContainsKey("questions_question_" + i + "_idversion"))
                                    {
                                        stVersionsLiterals ostVersionsLiterals = new stVersionsLiterals();
                                        ostVersionsLiterals.IdUser = oUser.USR_ID;
                                        ostVersionsLiterals.IdVersion = Convert.ToDecimal(parametersIn["questions_question_" + i + "_idversion"]); ;
                                        ostVersionsLiterals.Approved = Convert.ToDecimal(parametersIn["questions_question_" + i + "_value"]); ;
                                        ostVersionsLiteralsList.Add(ostVersionsLiterals);
                                    }
                                }
                                if (ostVersionsLiteralsList.Count > 0)
                                {
                                    foreach (stVersionsLiterals oVL in ostVersionsLiteralsList)
                                    {
                                        if (!customersRepository.UpdateUserQuestions(oVL))
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("UpdateUserQuestions::Error updating user license terms: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                    }
                                }
                            }
                            else
                            {

                                if (!string.IsNullOrEmpty(sLicenseTermsVersion))
                                {
                                    if (!customersRepository.UpdateUserLicenseTerms(oUser, sLicenseTermsVersion))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("QueryCity::Error updating user license terms: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }
                            }


                            parametersOut["ZoneTar"] = strXmlGroupHierarchy;

                            parametersOut["ZoneTarOffstreet"] = strXmlOffstreetGroupHierarchy;

                            parametersOut["InfoTAR"] = strXmlTariffs;

                            parametersOut["ZoneGIS"] = strXmlGISInfo;

                            parametersOut["ZoneOffstreetGIS"] = strXmlOffstreetGISInfo;

                            parametersOut["CityOpt"] = strXmlCityOpt;

                            decimal? dFavGroupId = null;
                            int iQueryDays = Convert.ToInt32(ConfigurationManager.AppSettings["UserFavouriteGroupQueryDays"] ?? "0");
                            DateTime xBeginDateUTC = DateTime.UtcNow.AddDays(-iQueryDays);
                            DateTime xEndDateUTC = DateTime.UtcNow;
                            customersRepository.GetFavouriteGroupFromUser(ref oUser, dInstallationId, xBeginDateUTC, xEndDateUTC, out dFavGroupId);
                            parametersOut["favzone"] = (dFavGroupId.HasValue ? ((int)dFavGroupId).ToString() : "");

                            xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "ZoneTar", "ZoneTarOffstreet", "InfoTAR", "ZoneGIS", "ZoneOffstreetGIS", "InsSync", "InsGeomSync" });

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("QueryCity: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }

                            oUser = null;

                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }


            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

            }

            return xmlOut;
        }

        [WebMethod]
        public string QueryCityJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("QueryCityJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryCity(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("QueryCityJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryCityJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }



        [WebMethod]
        public string UpdateLicenseTerms(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("UpdateLicenseTerms: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("UpdateLicenseTerms::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("UpdateLicenseTerms::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";

                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("UpdateLicenseTerms::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }



                            if (AppUtilities.AppVersion(strAppVersion) >= _VERSION_2_8)
                            {
                                List<stVersionsLiterals> ostVersionsLiteralsList = new List<stVersionsLiterals>();
                                for (Int32 i = 0; i <= parametersIn.Count; i++)
                                {
                                    if (parametersIn.ContainsKey("questions_question_" + i + "_idversion"))
                                    {
                                        stVersionsLiterals ostVersionsLiterals = new stVersionsLiterals();
                                        ostVersionsLiterals.IdUser = oUser.USR_ID;
                                        ostVersionsLiterals.IdVersion = Convert.ToDecimal(parametersIn["questions_question_" + i + "_idversion"]); ;
                                        ostVersionsLiterals.Approved = Convert.ToDecimal(parametersIn["questions_question_" + i + "_value"]); ;
                                        ostVersionsLiteralsList.Add(ostVersionsLiterals);
                                    }
                                }
                                if (ostVersionsLiteralsList.Count > 0)
                                {
                                    foreach (stVersionsLiterals oVL in ostVersionsLiteralsList)
                                    {
                                        if (!customersRepository.UpdateUserQuestions(oVL))
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("UpdateLicenseTerms::UpdateUserQuestions::Error updating user license terms: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                string sLicenseTermsVersion = "";
                                try
                                {
                                    sLicenseTermsVersion = parametersIn["legaltermsver"].ToString();
                                }
                                catch
                                {
                                    sLicenseTermsVersion = "";
                                }
                                if (!string.IsNullOrEmpty(sLicenseTermsVersion))
                                {
                                    if (!customersRepository.UpdateUserLicenseTerms(oUser, sLicenseTermsVersion))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("UpdateLicenseTerms::Error updating user license terms: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }
                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("UpdateLicenseTerms::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("UpdateLicenseTerms: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }

                            oUser = null;

                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("UpdateLicenseTerms::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }


            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("UpdateLicenseTerms::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

            }

            return xmlOut;
        }

        [WebMethod]
        public string UpdateLicenseTermsJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("UpdateLicenseTermsJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = UpdateLicenseTerms(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("UpdateLicenseTermsJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("UpdateLicenseTermsJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }







        /*
         *  QueryRecharge
         *  
        <ipark_in>
            <typeid>0</ typeid >
            <code>1256456485</ code >	-- read code from the QR or Barcode or inserted /    amount of cents to recharge
            <ah>authentication hash</ah>

        </ ipark _in>
         * 
         * 
        <ipark_out>
            <r>Result of the method</r>
            <rechargeid>123135486 </ rechargeid >		-- Unique identifier provided from the backoffice associated to the operation
            <newbal> new balance in cens </ newbal >
            <coupval> coup value in cens</ coupval >

        </ipark_out>
         *         
        typeid:
            0 default payment method
            1 BarCode or QR
            2 Coupon Number
        <typeid>  == 0 <code>1000</ code >, it means 1000 cens
        <typeid>  == 1 or 2  <code>1256456485</ code > it means the barcode or the code inserted by the user
         *
        Result of the method:
        a.	2: Operation successful
        b.	-13: Invalid code
        c.	-14: Expired code
        d.	-15: Already Used code

         *
         */
        [WebMethod]
        public string QueryRecharge(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("QueryRecharge: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["typeid"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();

                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion, ref dSourceApp);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            rechargeMethods iTypeId = rechargeMethods.Undefined;
                            try
                            {
                                iTypeId = (rechargeMethods)Convert.ToInt32(parametersIn["typeid"].ToString());
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }




                            INSTALLATION oInstallation = null;
                            DateTime? dtinstDateTime = null;
                            decimal? dLatitudeInst = null;
                            decimal? dLongitudeInst = null;

                            if (!geograficAndTariffsRepository.getInstallation(dInsId.Value,
                                                                            dLatitudeInst,
                                                                            dLongitudeInst,
                                                                            ref oInstallation,
                                                                            ref dtinstDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_City);
                                Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }



                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();


                            switch (iTypeId)
                            {
                                case rechargeMethods.Default_Payment_Method:

                                    if ((parametersIn["quantity"] == null) && (parametersIn["q"] == null))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }


                                    int iQuantity = 0;
                                    try
                                    {
                                        if (parametersIn["quantity"] != null)
                                        {
                                            iQuantity = Convert.ToInt32(parametersIn["quantity"].ToString());
                                        }
                                        else if (parametersIn["q"] != null)
                                        {
                                            iQuantity = Convert.ToInt32(parametersIn["q"].ToString());
                                        }
                                    }
                                    catch
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    int iAmountToBeAddedToBalance = iQuantity;

                                    decimal dShopKeeperBon = oInstallation.INS_SHOPKEEPER_RECHARGE_BONIFICATION_PERC.HasValue ? oInstallation.INS_SHOPKEEPER_RECHARGE_BONIFICATION_PERC.Value : 0;

                                    if ((dShopKeeperBon > 0) && (oUser.USR_SHOPKEEPER_STATUS.HasValue) && (oUser.USR_SHOPKEEPER_STATUS == (int)ShopKeeperStatus.ShopKeeperUser))
                                    {
                                        decimal dbonQuantity = Math.Round(Convert.ToDecimal(iQuantity) * dShopKeeperBon, MidpointRounding.AwayFromZero);

                                        iAmountToBeAddedToBalance = Convert.ToInt32(dbonQuantity) + iQuantity;
                                    }

                                    if ((oUser.CUSTOMER_PAYMENT_MEAN != null) &&
                                        (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_ENABLED == 1) &&
                                        (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_VALID == 1))
                                    {
                                        /*decimal dVAT = infraestructureRepository.GetVATPerc();

                                        decimal dFeeVal = 0;
                                        decimal dFeePerc = 0;

                                        customersRepository.GetPaymentMeanFees(ref oUser, out dFeeVal, out dFeePerc);                                        
                                        parametersOut["vat"] = dVAT.ToString(CultureInfo.InvariantCulture);
                                        parametersOut["feeval"] = dFeeVal.ToString(CultureInfo.InvariantCulture);
                                        parametersOut["feeper"] = dFeePerc.ToString(CultureInfo.InvariantCulture);*/

                                        int iNewBalance = iAmountToBeAddedToBalance + oUser.USR_BALANCE;
                                        parametersOut["newbal"] = iNewBalance;

                                        int iQFEE = 0;
                                        decimal dQFEE = 0;
                                        decimal dQFEECC = 0;
                                        int iQVAT = 0;
                                        int iQTotal = 0;
                                        int iQSubTotal = 0;

                                        decimal dVAT1;
                                        decimal dVAT2;
                                        int iPartialVAT1;
                                        decimal dPercFEE;
                                        decimal dPercFEETopped;
                                        int iPartialPercFEE;
                                        decimal dFixedFEE;
                                        int iPartialFixedFEE;
                                        int iPartialPercFEEVAT;
                                        int iPartialFixedFEEVAT;

                                        int? iPaymentTypeId = null;
                                        int? iPaymentSubtypeId = null;
                                        if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                                        {
                                            iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                                            iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;

                                            if (!customersRepository.GetFinantialParamsPaymentType(oUser, "", iPaymentTypeId.Value, iPaymentSubtypeId.Value, ChargeOperationsType.BalanceRecharge,
                                                                                        out dVAT1, out dVAT2, out dPercFEE, out dPercFEETopped, out dFixedFEE))
                                            {
                                                rt = ResultType.Result_Error_Generic;
                                                Logger_AddLogMessage(string.Format("QueryRecharge::Error: Error getting finantial parameters. Result = {0}", rt.ToString()), LogLevels.logERROR);
                                            }

                                            iQTotal = customersRepository.CalculateFEE(iQuantity, dVAT1, dVAT2, dPercFEE, dPercFEETopped, dFixedFEE,
                                                                                       out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE,
                                                                                       out iPartialPercFEEVAT, out iPartialFixedFEEVAT);
                                            dQFEECC = Math.Round(iQuantity * dPercFEE, MidpointRounding.AwayFromZero);
                                            if (dPercFEETopped > 0 && dQFEECC > dPercFEETopped) dQFEECC = dPercFEETopped;
                                            dQFEECC += dFixedFEE;
                                        }

                                        if (!customersRepository.GetFinantialParams(oUser, "", iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.BalanceRecharge,
                                                                                    out dVAT1, out dVAT2, out dPercFEE, out dPercFEETopped, out dFixedFEE))
                                        {
                                            rt = ResultType.Result_Error_Generic;
                                            Logger_AddLogMessage(string.Format("QueryRecharge::Error: Error getting finantial parameters. Result = {0}", rt.ToString()), LogLevels.logERROR);
                                        }

                                        iQTotal = customersRepository.CalculateFEE(iQuantity, dVAT1, dVAT2, dPercFEE, dPercFEETopped, dFixedFEE,
                                                                                   out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE,
                                                                                   out iPartialPercFEEVAT, out iPartialFixedFEEVAT);


                                        dQFEE = Math.Round(iQuantity * dPercFEE, MidpointRounding.AwayFromZero);
                                        if (dPercFEETopped > 0 && dQFEE > dPercFEETopped) dQFEE = dPercFEETopped;
                                        dQFEE += dFixedFEE;
                                        dQFEE -= dQFEECC;

                                        iQFEE = Convert.ToInt32(Math.Round(dQFEE, MidpointRounding.AwayFromZero));
                                        int iQFEECC = Convert.ToInt32(Math.Round(dQFEECC, MidpointRounding.AwayFromZero));

                                        iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                        iQSubTotal = iQuantity + iQFEE;

                                        parametersOut["layout"] = "0";
                                        OPERATOR oOperator = customersRepository.GetDefaultOperator();
                                        if (oOperator != null) parametersOut["layout"] = oOperator.OPR_FEE_LAYOUT;

                                        parametersOut["IsServFeeToBeAdded"] = (iQFEE != 0 ? "TRUE" : "FALSE");
                                        parametersOut["ServFee"] = iQFEE;
                                        parametersOut["ServFeeLbl"] = infraestructureRepository.GetLiteral(oOperator.OPR_SERVICE_FEE_LIT_ID ?? 0, strCulture);
                                        parametersOut["IsCCFeeToBeAdded"] = (iQFEECC != 0 ? "TRUE" : "FALSE");
                                        parametersOut["CCFee"] = iQFEECC;
                                        parametersOut["CCFeeLbl"] = infraestructureRepository.GetLiteral(oOperator.OPR_SERVICE_FEECC_LIT_ID ?? 0, strCulture);
                                        parametersOut["IsTAXToBeAdded"] = (iQVAT != 0 ? "TRUE" : "FALSE");
                                        parametersOut["TAX"] = iQVAT;
                                        parametersOut["TAXLbl"] = infraestructureRepository.GetLiteral(oOperator.OPR_SERVICE_VAT_LIT_ID ?? 0, strCulture);
                                        parametersOut["Subtotal"] = iQSubTotal;
                                        parametersOut["SubtotalLbl"] = infraestructureRepository.GetLiteral(oOperator.OPR_SERVICE_SUBTOTAL_LIT_ID ?? 0, strCulture);
                                        parametersOut["TOTAL"] = iQTotal;
                                        parametersOut["TOLTALLbl"] = infraestructureRepository.GetLiteral(oOperator.OPR_SERVICE_TOTAL_LIT_ID ?? 0, strCulture);
                                        parametersOut["AmountToBeRecharged"] = iAmountToBeAddedToBalance;
                                        parametersOut["AmountToBeRechargedLBL"] = infraestructureRepository.GetLiteral(oOperator.OPR_AMOUNT_TO_BE_RECHARGED_LIT_ID ?? 0, strCulture);
                                        parametersOut["BonificationAmount"] = -(iAmountToBeAddedToBalance - iQuantity);
                                        parametersOut["BonificationAmountLBL"] = infraestructureRepository.GetLiteral(oOperator.OPR_RECHARGE_BONIFICATION_LIT_ID ?? 0, strCulture);
                                        parametersOut["BaseAmount"] = iQuantity;
                                        parametersOut["BaseAmountLBL"] = infraestructureRepository.GetLiteral(oOperator.OPR_RECHARGE_BASE_CHARGE_AMOUNT_LIT_ID ?? 0, strCulture);

                                    }
                                    else
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Payment_Mean);
                                        Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }


                                    break;

                                case rechargeMethods.Barcode_QR:
                                case rechargeMethods.Coupon:

                                    if ((parametersIn["code"] == null) ||
                                        (parametersIn["code"].ToString().Length == 0))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                                    }


                                    var session = oUser.MOBILE_SESSIONs.Where(r => r.MOSE_SESSIONID == parametersIn["SessionID"].ToString()
                                                                && r.MOSE_USR_ID == oUser.USR_ID).First();

                                    RECHARGE_COUPON oCoupon = null;

                                    if ((!customersRepository.GetRechargeCouponCode(out oCoupon, oUser.USR_COU_ID, parametersIn["code"].ToString())) ||
                                        (oCoupon == null))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Recharge_Code);
                                        Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    switch ((RechargeCouponsStatus)oCoupon.RCOUP_COUPS_ID)
                                    {
                                        case RechargeCouponsStatus.PendingActivation:
                                        case RechargeCouponsStatus.Cancelled:
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Recharge_Code);
                                            Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        case RechargeCouponsStatus.Used:
                                        case RechargeCouponsStatus.Locked:
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_AlreadyUsed_Recharge_Code);
                                            Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        case RechargeCouponsStatus.Actived:

                                            DateTime dtCurrentTime = DateTime.Now;
                                            DateTime dtUTCCurrentTime = dtCurrentTime.ToUniversalTime();

                                            if (dtUTCCurrentTime < oCoupon.RCOUP_START_DATE)
                                            {
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Recharge_Code);
                                                Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                return xmlOut;
                                            }
                                            else if (dtUTCCurrentTime > oCoupon.RCOUP_EXP_DATE)
                                            {
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Expired_Recharge_Code);
                                                Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                return xmlOut;
                                            }
                                            else
                                            {
                                                if (oCoupon.RCOUP_TYPE == (int)RechargeCouponsType.Campaign)
                                                {
                                                    List<CAMPAING> oCampaings = null;

                                                    if (customersRepository.GetCouponCampaign(parametersIn["code"].ToString(), oUser.USR_COU_ID, dSourceApp, out oCampaings))
                                                    {
                                                        if (oCampaings.Count() > 0)
                                                        {
                                                            ResultType rtCampaign = ResultType.Result_OK;

                                                            foreach (var oCampaing in oCampaings)
                                                            {
                                                                switch ((CampaingShema)oCampaing.CAMP_SCHEMA)
                                                                {
                                                                    case CampaingShema.CampaignCoupon:
                                                                        {
                                                                            rtCampaign = ApplyCampaingSchemaThree(parametersIn["code"].ToString(), dtinstDateTime.Value, oUser, session, oCampaing);
                                                                            if (rtCampaign == ResultType.Result_OK)
                                                                            {
                                                                                oCoupon = oCampaing.RECHARGE_COUPON;
                                                                            }
                                                                        }
                                                                        break;

                                                                    case CampaingShema.CampaingCouponShopKeepers:
                                                                        {
                                                                            RECHARGE_COUPON oTempCoupon = null;
                                                                            customersRepository.GetCouponFromCampaignSchemaFive(parametersIn["code"].ToString(), oCampaing, out oTempCoupon);
                                                                            if (oTempCoupon == null)
                                                                            {
                                                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                                                Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                                                return xmlOut;
                                                                            }

                                                                            rtCampaign = ApplyCampaingSchemaFive(oCoupon, dInsId.Value, dtinstDateTime.Value, oUser, oCampaing);
                                                                            if (rtCampaign == ResultType.Result_OK)
                                                                            {
                                                                                oCoupon = oTempCoupon;
                                                                            }
                                                                        }
                                                                        break;

                                                                    default:
                                                                        {
                                                                            //No existe el esquema de la Campaña
                                                                            rtCampaign = ResultType.Result_Error_CloseCampaign;
                                                                            Logger_AddLogMessage(string.Format("QueryRecharge::VerifyCampaign::Campaing=nullError: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                                                                        }
                                                                        break;
                                                                }

                                                                if (rtCampaign == ResultType.Result_OK)
                                                                {
                                                                    break;
                                                                }
                                                            }

                                                            if (rtCampaign != ResultType.Result_OK)
                                                            {
                                                                xmlOut = GenerateXMLErrorResult(rtCampaign);
                                                                rt = rtCampaign;
                                                                return xmlOut;
                                                            }
                                                            else
                                                            {
                                                                if (rtCampaign == ResultType.Result_OK)
                                                                {

                                                                    string strRechargeID = "";
                                                                    if (!customersRepository.GetRechargeCouponRechargeID(ref oUser, session.MOSE_ID, oCoupon.RCOUP_ID, out strRechargeID))
                                                                    {
                                                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                                        Logger_AddLogMessage(string.Format("QueryRecharge::GetRechargeCouponRechargeID::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                                        return xmlOut;
                                                                    }
                                                                    parametersOut["rechargeid"] = strRechargeID;
                                                                    parametersOut["coupval"] = oCoupon.RCOUP_VALUE;
                                                                    parametersOut["newbal"] = oUser.USR_BALANCE + oCoupon.RCOUP_VALUE;
                                                                    break;
                                                                }
                                                            }

                                                        }
                                                        else
                                                        {
                                                            //No hay campaña o esta cerrada
                                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_CloseCampaign);
                                                            Logger_AddLogMessage(string.Format("QueryRecharge::VerifyCampaign::Campaing=nullError: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                            return xmlOut;
                                                        }


                                                    }
                                                    else
                                                    {
                                                        //No hay campaña 
                                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_CloseCampaign);
                                                        Logger_AddLogMessage(string.Format("QueryRecharge::VerifyCampaign::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                        return xmlOut;
                                                    }
                                                }
                                                else
                                                {
                                                    if (oCoupon.RCOUP_TYPE == (int)RechargeCouponsType.Loyalty)
                                                    {

                                                        if (customersRepository.UserHasAlreadyUsedLoyaltyCoupon(ref oUser))
                                                        {
                                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Only_One_Loyalty_Recharge_Code_Can_Be_Used);
                                                            Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                            return xmlOut;

                                                        }
                                                    }


                                                    if (!string.IsNullOrEmpty(oCoupon.RCOUP_EMAIL) && oCoupon.RCOUP_EMAIL.Trim().ToUpper() != oUser.USR_EMAIL.ToUpper())
                                                    {
                                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Name_Recharge_Code_Only_Can_Be_Used_By_Addressed_Email);
                                                        Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                        return xmlOut;
                                                    }

                                                    string strRechargeID = "";
                                                    int iNewBalance = 0;
                                                    if (!customersRepository.GetRechargeCouponRechargeID(ref oUser,
                                                        session.MOSE_ID,
                                                        oCoupon.RCOUP_ID,
                                                        out strRechargeID))
                                                    {
                                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                        Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                        return xmlOut;
                                                    }

                                                    parametersOut["rechargeid"] = strRechargeID;

                                                    if (infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)) != oCoupon.CURRENCy.CUR_ISO_CODE)
                                                    {
                                                        double dConvertedValue = CCurrencyConvertor.ConvertCurrency(Convert.ToDouble(oCoupon.RCOUP_VALUE),
                                                                                  oCoupon.CURRENCy.CUR_ISO_CODE,
                                                                                  infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)));
                                                        if (dConvertedValue < 0)
                                                        {
                                                            Logger_AddLogMessage(string.Format("QueryRecharge::Error Converting {0} {1} to {2} ", Convert.ToDouble(oCoupon.RCOUP_VALUE), oCoupon.CURRENCy.CUR_ISO_CODE, infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))), LogLevels.logERROR);
                                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                            Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                            return xmlOut;
                                                        }

                                                        double dChangeFee = Convert.ToDouble(infraestructureRepository.GetChangeFeePerc()) * dConvertedValue / 100;
                                                        int iCoupval = Convert.ToInt32(dConvertedValue - dChangeFee + 0.5);
                                                        iNewBalance = oUser.USR_BALANCE + iCoupval;

                                                        parametersOut["coupval"] = iCoupval;

                                                    }
                                                    else
                                                    {
                                                        iNewBalance = oUser.USR_BALANCE + Convert.ToInt32(oCoupon.RCOUP_VALUE);
                                                        parametersOut["coupval"] = oCoupon.RCOUP_VALUE;
                                                    }

                                                    parametersOut["newbal"] = iNewBalance;

                                                }
                                            }
                                            break;

                                        default:
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                    }
                                    break;
                                default:
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                            }

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("QueryRecharge: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }

                            oUser = null;
                        }
                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }

        [WebMethod]
        public string QueryRechargeJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("QueryRechargeJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryRecharge(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("QueryRechargeJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryRechargeJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }

        /*
         *  ConfirmRecharge
         *  
        <ipark_in>
            <rechargeid>123135486 </ rechargeid >  -- provided in the QueryRecharge method
            <ah>authentication hash</ah>
        </ ipark _in>
         * 
         * 
        <ipark_out>
	      	<r>Result of the method</r>
            <newbal> new balance in cens </ newbal >
            <coupval> coup value en eurocens</ coupval 
        </ipark_out>
         * 
         * 
        Result of the method:
        a.	2: Operation successful
        b.	-13: Invalid code
        c.	-14: Expired code
        d.	-15: Already Used code
       
         *
         */
        [WebMethod]
        public string ConfirmRecharge(string xmlIn)
        {
            string xmlOut = "";
            string strLockDictionaryString = "";

            SortedList parametersIn2 = null;            
            string strHash2 = "";
            string strHashString2 = "";
            FindInputParameters(xmlIn, out parametersIn2, out strHash2, out strHashString2);
            string strCalculatedHash2 = CalculateHash(strHashString2, strHash2);
            Logger_AddLogMessage(string.Format("ConfirmRecharge: HashString={0};Hash={1};CalculatedHash={2}", strHashString2, strHash2, strCalculatedHash2), LogLevels.logINFO);

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ConfirmRecharge: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            strLockDictionaryString = parametersIn["u"].ToString();
                            if (ExistConfirmLockInformation(strLockDictionaryString))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_ConfirmOperationAlreadyExecuting);
                                Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            else
                            {

                                USER oUser = null;
                                string strAppVersion = "";
                                decimal? dInsID = null;
                                decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();

                                rt = GetUserData(ref oUser, parametersIn, out dInsID, out strAppVersion, ref dSourceApp);

                                if (rt != ResultType.Result_OK)
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(rt);
                                    Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                decimal? dLatitude = null;
                                decimal? dLongitude = null;
                                GetLatLon(parametersIn, out dLatitude, out dLongitude);


                                decimal? dInstallationId = null;
                                INSTALLATION oInstallation = null;
                                try
                                {
                                    decimal dTryInstallationId = Convert.ToDecimal(parametersIn["cityID"].ToString());
                                    dInstallationId = dTryInstallationId;
                                }
                                catch
                                {
                                    dInstallationId = null;
                                }

                                if (!dInstallationId.HasValue)
                                    dInstallationId = dInsID;

                                DateTime? dtinstDateTime = null;
                                if (dInstallationId.HasValue)
                                {

                                    decimal? dInsLatitude = null;
                                    decimal? dInsLongitude = null;

                                    if (!geograficAndTariffsRepository.getInstallation(dInstallationId,
                                                                                       dInsLatitude,
                                                                                       dInsLongitude,
                                                                                       ref oInstallation,
                                                                                       ref dtinstDateTime))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_City);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }
                                else
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_City);
                                    Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }


                                parametersOut = new SortedList();
                                parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                                var session = oUser.MOBILE_SESSIONs.Where(r => r.MOSE_SESSIONID == parametersIn["SessionID"].ToString()
                                                                  && r.MOSE_USR_ID == oUser.USR_ID).First();

                                int? iRechargeType = null;
                                if (parametersIn["t"] != null)
                                {
                                    try
                                    {
                                        iRechargeType = Convert.ToInt32(parametersIn["t"]);
                                    }
                                    catch (Exception)
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }

                                if (!iRechargeType.HasValue)
                                {
                                    if ((parametersIn["rechargeid"] != null) && (parametersIn["rechargeid"].ToString().Length > 0))
                                        iRechargeType = (int)PaymentMeanRechargeType.Coupon; //QR
                                    else if ((parametersIn["PagateliaSessionID"] != null) && (parametersIn["PagateliaSessionID"].ToString().Length > 0))
                                        iRechargeType = (int)PaymentMeanRechargeType.Pagatelia; //Pagatelia
                                    else if ((parametersIn["q"] != null) || (parametersIn["quantity"] != null))
                                        iRechargeType = (int)PaymentMeanRechargeType.Payment;
                                    else
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }
                                else
                                {


                                    if ((iRechargeType.Value == (int)PaymentMeanRechargeType.Payment && parametersIn["q"] == null && parametersIn["quantity"] == null) ||
                                        ((iRechargeType.Value == (int)PaymentMeanRechargeType.Coupon || iRechargeType.Value == (int)PaymentMeanRechargeType.BarCode) && (parametersIn["rechargeid"] == null || parametersIn["rechargeid"].ToString().Length == 0)) ||
                                        (iRechargeType.Value == (int)PaymentMeanRechargeType.Pagatelia && (parametersIn["PagateliaSessionID"] == null || parametersIn["PagateliaSessionID"].ToString().Length == 0)) ||
                                        (iRechargeType.Value == (int)PaymentMeanRechargeType.Spotycoins && parametersIn["q"] == null && parametersIn["quantity"] == null) ||
                                        (iRechargeType.Value == (int)PaymentMeanRechargeType.Paypal && (AppUtilities.AppVersion(strAppVersion) < _VERSION_3_8) 
                                                            &&(iRechargeType.Value == (int)PaymentMeanRechargeType.Paypal && ((string.IsNullOrEmpty((parametersIn["Paypal_id"] ?? "").ToString())) 
                                                                                                                            || (string.IsNullOrEmpty((parametersIn["Paypal_authorization_id"] ?? "").ToString())))))||                                                                                                                            
                                        (iRechargeType.Value == (int)PaymentMeanRechargeType.Paypal && (AppUtilities.AppVersion(strAppVersion) >= _VERSION_3_8) 
                                                            && (iRechargeType.Value == (int)PaymentMeanRechargeType.Paypal && ((string.IsNullOrEmpty((parametersIn["paypal_token"] ?? "").ToString()))
                                                                                                                            || (string.IsNullOrEmpty((parametersIn["paypal_paymentId"] ?? "").ToString()))
                                                                                                                            || (string.IsNullOrEmpty((parametersIn["paypal_PayerID"] ?? "").ToString())))))||
                                        (iRechargeType.Value == (int)PaymentMeanRechargeType.Cash && parametersIn["q"] == null && parametersIn["quantity"] == null) ||
                                        (iRechargeType.Value == (int)PaymentMeanRechargeType.Oxxo && ((parametersIn["q"] == null && parametersIn["quantity"] == null) /*|| parametersIn["oxxo_token"] == null || parametersIn["oxxo_ticket"] == null || parametersIn["oxxo_folio"] == null || parametersIn["oxxo_admindate"] == null || parametersIn["oxxo_store"] == null*/)) ||
                                        (iRechargeType.Value < (int)PaymentMeanRechargeType.Payment || iRechargeType.Value > (int)PaymentMeanRechargeType.Oxxo))
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }

                                if (iRechargeType.Value == (int)PaymentMeanRechargeType.Coupon || iRechargeType.Value == (int)PaymentMeanRechargeType.BarCode) // coupon (QR or barcode)
                                {

                                    RECHARGE_COUPON oCoupon = null;


                                    if ((!customersRepository.GetRechargeCouponFromRechargeID(ref oUser,
                                                                                            session.MOSE_ID,
                                                                                            parametersIn["rechargeid"].ToString(),
                                                                                            out oCoupon)) || (oCoupon == null))
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    switch ((RechargeCouponsStatus)oCoupon.RCOUP_COUPS_ID)
                                    {
                                        case RechargeCouponsStatus.PendingActivation:
                                        case RechargeCouponsStatus.Cancelled:
                                            DeleteConfirmLockInformation(strLockDictionaryString);
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Recharge_Code);
                                            Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        case RechargeCouponsStatus.Used:
                                        case RechargeCouponsStatus.Locked:
                                            DeleteConfirmLockInformation(strLockDictionaryString);
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_AlreadyUsed_Recharge_Code);
                                            Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        case RechargeCouponsStatus.Actived:
                                            {

                                                if (oCoupon.RCOUP_TYPE == (int)RechargeCouponsType.Campaign)
                                                {
                                                    CAMPAING oCampaing = null;

                                                    if (customersRepository.GetCouponCampaign(oCoupon, oUser.USR_COU_ID, dSourceApp, out oCampaing))
                                                    {
                                                        if (oCampaing != null)
                                                        {
                                                            ResultType rtCampaign = ResultType.Result_OK;
                                                            int iCoupVal = Convert.ToInt32(oCoupon.RCOUP_VALUE);


                                                            switch ((CampaingShema)oCampaing.CAMP_SCHEMA)
                                                            {
                                                                case CampaingShema.CampaignCoupon:
                                                                    {

                                                                        rtCampaign = ApplyCampaingSchemaThree(oCoupon.RCOUP_CODE, dtinstDateTime.Value, oUser, session, oCampaing);

                                                                        if (rtCampaign == ResultType.Result_OK)
                                                                        {
                                                                            CUSTOMER_PAYMENT_MEANS_RECHARGE oRecharge = null;
                                                                            if (!customersRepository.RechargeUserBalanceWithCoupon(ref oUser,
                                                                                                                    session.MOSE_OS.Value,
                                                                                                                    iCoupVal,
                                                                                                                    oUser.USR_CUR_ID,
                                                                                                                    parametersIn["rechargeid"].ToString(),
                                                                                                                    ref oCoupon,
                                                                                                                    dLatitude, dLongitude, strAppVersion, dSourceApp, out oRecharge))
                                                                            {
                                                                                DeleteConfirmLockInformation(strLockDictionaryString);
                                                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                                                Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                                                return xmlOut;
                                                                            }

                                                                            DateTime? dtUTCDateTime = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(dInstallationId.Value, dtinstDateTime.Value);
                                                                            SaveCampaingSchemaThree(oCampaing, oUser, session, oRecharge, oCoupon, dtinstDateTime.Value, dtUTCDateTime.Value);

                                                                            parametersOut["newbal"] = oUser.USR_BALANCE;

                                                                        }

                                                                    }
                                                                    break;

                                                                case CampaingShema.CampaingCouponShopKeepers:
                                                                    {

                                                                        rtCampaign = ApplyCampaingSchemaFive(oCoupon, dInstallationId.Value, dtinstDateTime.Value, oUser, oCampaing);

                                                                        if (rtCampaign == ResultType.Result_OK)
                                                                        {
                                                                            CUSTOMER_PAYMENT_MEANS_RECHARGE oRecharge = null;
                                                                            if (!customersRepository.RechargeUserBalanceWithCoupon(ref oUser,
                                                                                                                    session.MOSE_OS.Value,
                                                                                                                    iCoupVal,
                                                                                                                    oUser.USR_CUR_ID,
                                                                                                                    parametersIn["rechargeid"].ToString(),
                                                                                                                    ref oCoupon,
                                                                                                                    dLatitude, dLongitude, strAppVersion, dSourceApp, out oRecharge))
                                                                            {
                                                                                DeleteConfirmLockInformation(strLockDictionaryString);
                                                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                                                Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                                                return xmlOut;
                                                                            }

                                                                            DateTime? dtUTCDateTime = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(dInstallationId.Value, dtinstDateTime.Value);
                                                                            SaveCampaingSchemaFive(oCampaing, oUser, session, oRecharge, oCoupon, dtinstDateTime.Value, dtUTCDateTime.Value);

                                                                            parametersOut["newbal"] = oUser.USR_BALANCE;

                                                                        }

                                                                    }
                                                                    break;

                                                                default:
                                                                    {
                                                                        //No existe el esquema de la Campaña
                                                                        rtCampaign = ResultType.Result_Error_CloseCampaign;
                                                                        Logger_AddLogMessage(string.Format("QueryRecharge::VerifyCampaign::Campaing=nullError: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                                                                    }
                                                                    break;
                                                            }


                                                            if (rtCampaign != ResultType.Result_OK)
                                                            {
                                                                xmlOut = GenerateXMLErrorResult(rtCampaign);
                                                                rt = rtCampaign;
                                                                return xmlOut;
                                                            }

                                                        }
                                                        else
                                                        {
                                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                            Logger_AddLogMessage(string.Format("QueryRecharge::VerifyCampaign::Campaing=nullError: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                            return xmlOut;
                                                        }


                                                    }
                                                    else
                                                    {
                                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                        Logger_AddLogMessage(string.Format("QueryRecharge::VerifyCampaign::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                        return xmlOut;
                                                    }

                                                }
                                                else
                                                {
                                                    int iCoupVal = Convert.ToInt32(oCoupon.RCOUP_VALUE);


                                                    if (infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)) != oCoupon.CURRENCy.CUR_ISO_CODE)
                                                    {
                                                        double dConvertedValue = CCurrencyConvertor.ConvertCurrency(Convert.ToDouble(oCoupon.RCOUP_VALUE),
                                                                                oCoupon.CURRENCy.CUR_ISO_CODE,
                                                                                infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)));
                                                        if (dConvertedValue < 0)
                                                        {
                                                            DeleteConfirmLockInformation(strLockDictionaryString);
                                                            Logger_AddLogMessage(string.Format("ConfirmRecharge::Error Converting {0} {1} to {2} ", Convert.ToDouble(oCoupon.RCOUP_VALUE), oCoupon.CURRENCy.CUR_ISO_CODE, infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))), LogLevels.logERROR);
                                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                            Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                            return xmlOut;
                                                        }

                                                        double dChangeFee = Convert.ToDouble(infraestructureRepository.GetChangeFeePerc()) * dConvertedValue / 100;


                                                        iCoupVal = Convert.ToInt32(dConvertedValue - dChangeFee + 0.5);

                                                    }


                                                    CUSTOMER_PAYMENT_MEANS_RECHARGE oRecharge = null;
                                                    if (!customersRepository.RechargeUserBalanceWithCoupon(ref oUser,
                                                                                            session.MOSE_OS.Value,
                                                                                            iCoupVal,
                                                                                            oUser.USR_CUR_ID,
                                                                                            parametersIn["rechargeid"].ToString(),
                                                                                            ref oCoupon,
                                                                                            dLatitude, dLongitude, strAppVersion, dSourceApp, out oRecharge))
                                                    {
                                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                        return xmlOut;
                                                    }
                                                }

                                                parametersOut["newbal"] = oUser.USR_BALANCE;

                                                break;
                                            }

                                        default:
                                            DeleteConfirmLockInformation(strLockDictionaryString);
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;

                                    }

                                }
                                else if (iRechargeType.Value == (int)PaymentMeanRechargeType.Pagatelia) // Pagatelia
                                {
                                    int iQuantity = 0;
                                    try
                                    {

                                        if (parametersIn["q"] != null)
                                        {
                                            iQuantity = Convert.ToInt32(parametersIn["q"].ToString());
                                        }
                                        else if (parametersIn["quantity"] != null)
                                        {
                                            iQuantity = Convert.ToInt32(parametersIn["quantity"].ToString());
                                        }
                                    }
                                    catch
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    // External ws 3rdPAGConfirmRecharge
                                    decimal? dPagateliaNewBalance;
                                    ThirdPartyPagatelia oThirdPartyPagatelia = new ThirdPartyPagatelia();

                                    rt = oThirdPartyPagatelia.ConfirmRecharge(oUser.USR_PAGATELIA_LAST_USER, parametersIn["PagateliaSessionID"].ToString(), Convert.ToDecimal(iQuantity) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))), dLatitude, dLongitude, Convert.ToInt32(session.MOSE_ID).ToString(), out dPagateliaNewBalance);
                                    if (rt != ResultType.Result_OK)
                                    {
                                        xmlOut = GenerateXMLErrorResult(rt);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    int? iPagateliaNewBalance = null;
                                    if (dPagateliaNewBalance.HasValue) iPagateliaNewBalance = Convert.ToInt32(Math.Round(dPagateliaNewBalance.Value * 100, MidpointRounding.AwayFromZero));

                                    if (!customersRepository.RechargeUserBalanceWithPagatelia(ref oUser,
                                                                            session.MOSE_OS.Value,
                                                                            iQuantity,
                                                                            oUser.USR_CUR_ID,
                                                                            parametersIn["PagateliaSessionID"].ToString(),
                                                                            iPagateliaNewBalance,
                                                                            dLatitude, dLongitude, strAppVersion, dSourceApp))
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    parametersOut["newbal"] = oUser.USR_BALANCE;

                                    if (iPagateliaNewBalance.HasValue) parametersOut["new_pagatelia_balance"] = iPagateliaNewBalance;

                                }
                                else if (iRechargeType.Value == (int)PaymentMeanRechargeType.Spotycoins) // Spotycoins
                                {
                                    int iQuantity = 0;
                                    try
                                    {

                                        if (parametersIn["q"] != null)
                                        {
                                            iQuantity = Convert.ToInt32(parametersIn["q"].ToString());
                                        }
                                        else if (parametersIn["quantity"] != null)
                                        {
                                            iQuantity = Convert.ToInt32(parametersIn["quantity"].ToString());
                                        }
                                    }
                                    catch
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    if (!customersRepository.RechargeUserBalanceWithSpotycoins(ref oUser,
                                                                            session.MOSE_OS.Value,
                                                                            iQuantity,
                                                                            oUser.USR_CUR_ID,
                                                                            dLatitude, dLongitude, strAppVersion, dSourceApp))
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    parametersOut["newbal"] = oUser.USR_BALANCE;

                                }
                                else if (iRechargeType.Value == (int)PaymentMeanRechargeType.Paypal)
                                {
                                    int iQuantity = 0;
                                    try
                                    {

                                        if (parametersIn["q"] != null)
                                        {
                                            iQuantity = Convert.ToInt32(parametersIn["q"].ToString());
                                        }
                                        else if (parametersIn["quantity"] != null)
                                        {
                                            iQuantity = Convert.ToInt32(parametersIn["quantity"].ToString());
                                        }
                                    }
                                    catch
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }


                                    int iAmountToBeAddedToBalance = iQuantity;

                                    decimal dShopKeeperBon = oInstallation.INS_SHOPKEEPER_RECHARGE_BONIFICATION_PERC.HasValue ? oInstallation.INS_SHOPKEEPER_RECHARGE_BONIFICATION_PERC.Value : 0;

                                    if ((dShopKeeperBon > 0) && (oUser.USR_SHOPKEEPER_STATUS.HasValue) && (oUser.USR_SHOPKEEPER_STATUS == (int)ShopKeeperStatus.ShopKeeperUser))
                                    {
                                        decimal dbonQuantity = Math.Round(Convert.ToDecimal(iQuantity) * dShopKeeperBon, MidpointRounding.AwayFromZero);

                                        iAmountToBeAddedToBalance = Convert.ToInt32(dbonQuantity) + iQuantity;
                                    }


                                    decimal? dRechargeId = null;


                                    if (AppUtilities.AppVersion(strAppVersion) >= _VERSION_3_8)
                                    {


                                        rt = PerformPaypalRecharge(ref oUser, session.MOSE_OS.Value, iQuantity, iAmountToBeAddedToBalance, dLatitude, dLongitude, strAppVersion,
                                                                    PaymentMeanRechargeCreationType.pmrctRegularRecharge,
                                                                    parametersIn["paypal_token"].ToString(),
                                                                    parametersIn["paypal_paymentId"].ToString(),
                                                                    parametersIn["paypal_PayerID"].ToString(),
                                                                    dSourceApp,
                                                                    out dRechargeId);
                                    }
                                    else
                                    {


                                        rt = PerformPaypalRecharge(ref oUser, session.MOSE_OS.Value, iQuantity, iAmountToBeAddedToBalance, dLatitude, dLongitude, strAppVersion,
                                                         PaymentMeanRechargeCreationType.pmrctRegularRecharge,
                                                         parametersIn["Paypal_id"].ToString(),
                                                         parametersIn["Paypal_authorization_id"].ToString(),
                                                         parametersIn["Paypal_create_time"].ToString(),
                                                         parametersIn["Paypal_intent"].ToString(),
                                                         parametersIn["Paypal_state"].ToString(),
                                                         dSourceApp,
                                                         out dRechargeId);
                                    }

                                    if (rt != ResultType.Result_OK)
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(rt);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                    try
                                    {
                                        if (dRechargeId != null)
                                        {
                                            CUSTOMER_PAYMENT_MEANS_RECHARGE oRecharge = null;
                                            if (customersRepository.GetRechargeData(ref oUser, dRechargeId.Value, out oRecharge))
                                            {
                                                if ((PaymentSuscryptionType)oRecharge.CUSPMR_SUSCRIPTION_TYPE == PaymentSuscryptionType.pstPrepay)
                                                {
                                                    string culture = oUser.USR_CULTURE_LANG;
                                                    CultureInfo ci = new CultureInfo(culture);
                                                    Thread.CurrentThread.CurrentUICulture = ci;
                                                    Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);
                                                    integraMobile.WS.Properties.Resource.Culture = ci;


                                                    iQuantity = oRecharge.CUSPMR_AMOUNT;
                                                    decimal dPercVAT1 = oRecharge.CUSPMR_PERC_VAT1 ?? 0;
                                                    decimal dPercVAT2 = oRecharge.CUSPMR_PERC_VAT2 ?? 0;
                                                    decimal dPercFEE = oRecharge.CUSPMR_PERC_FEE ?? 0;
                                                    int iPercFEETopped = (int)(oRecharge.CUSPMR_PERC_FEE_TOPPED ?? 0);
                                                    int iFixedFEE = (int)(oRecharge.CUSPMR_FIXED_FEE ?? 0);

                                                    int iPartialVAT1;
                                                    int iPartialPercFEE;
                                                    int iPartialFixedFEE;
                                                    int iPartialPercFEEVAT;
                                                    int iPartialFixedFEEVAT;

                                                    int iTotalQuantity = customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                                                    int iQFEE = Convert.ToInt32(Math.Round(iQuantity * dPercFEE, MidpointRounding.AwayFromZero));
                                                    if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                                    iQFEE += iFixedFEE;
                                                    int iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                                    int iQSubTotal = iQuantity + iQFEE;

                                                    int iLayout = 0;
                                                    if (iQFEE != 0 || iQVAT != 0)
                                                    {
                                                        OPERATOR oOperator = customersRepository.GetDefaultOperator();
                                                        if (oOperator != null) iLayout = oOperator.OPR_FEE_LAYOUT;
                                                    }


                                                    string sLayoutSubtotal = "";
                                                    string sLayoutTotal = "";

                                                    string sCurIsoCode = infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID));
                                                    string strSourceAppEmailPrefix = GetEmailSourceAppEmailPrefix(dSourceApp);

                                                    if (iLayout == 2)
                                                    {
                                                        sLayoutSubtotal = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "Email_LayoutSubtotal"),
                                                                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQSubTotal) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)),
                                                                                        (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00#}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                                        (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00#}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQVAT) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)));
                                                    }
                                                    else if (iLayout == 1)
                                                    {
                                                        sLayoutTotal = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "Email_LayoutTotal"),
                                                                                     string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQuantity) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)),
                                                                                     string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQFEE) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)),
                                                                                     (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00#}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                                     (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00#}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                                     string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQVAT) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)));
                                                    }

                                                    string strRechargeEmailSubject = ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "ConfirmNoAutomaticRecharge_EmailHeader");
                                                    /*
                                                        ID: {0}<br>
                                                     *  Fecha de recarga: {1:HH:mm:ss dd/MM/yyyy}<br>
                                                     *  Cantidad Recargada: {2} 
                                                     */
                                                    string strRechargeEmailBody = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "ConfirmRecharge_EmailBody"),
                                                        oRecharge.CUSPMR_ID,
                                                        oRecharge.CUSPMR_DATE,
                                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}",
                                                        Convert.ToDouble(oRecharge.CUSPMR_TOTAL_AMOUNT_CHARGED) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode),
                                                                                      infraestructureRepository.GetCurrencySymbolOrIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID))),
                                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))) + "} {1}",
                                                        Convert.ToDouble(oUser.USR_BALANCE) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))),
                                                                            infraestructureRepository.GetCurrencySymbolOrIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))),
                                                        ConfigurationManager.AppSettings["EmailSignatureURL"],
                                                        ConfigurationManager.AppSettings["EmailSignatureGraphic"],
                                                        sLayoutSubtotal, sLayoutTotal,
                                                        GetEmailFooter(ref oUser, dSourceApp));


                                                    SendEmail(ref oUser, strRechargeEmailSubject, strRechargeEmailBody, dSourceApp);

                                                }
                                            }
                                        }
                                    }
                                    catch { }

                                    parametersOut["newbal"] = oUser.USR_BALANCE;

                                }
                                else if (iRechargeType.Value == (int)PaymentMeanRechargeType.Cash) // Cash
                                {
                                    int iQuantity = 0;
                                    try
                                    {

                                        if (parametersIn["q"] != null)
                                        {
                                            iQuantity = Convert.ToInt32(parametersIn["q"].ToString());
                                        }
                                        else if (parametersIn["quantity"] != null)
                                        {
                                            iQuantity = Convert.ToInt32(parametersIn["quantity"].ToString());
                                        }
                                    }
                                    catch
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }


                                    int iAmountToBeAddedToBalance = iQuantity;

                                    decimal dShopKeeperBon = oInstallation.INS_SHOPKEEPER_RECHARGE_BONIFICATION_PERC.HasValue ? oInstallation.INS_SHOPKEEPER_RECHARGE_BONIFICATION_PERC.Value : 0;

                                    if ((dShopKeeperBon > 0) && (oUser.USR_SHOPKEEPER_STATUS.HasValue) && (oUser.USR_SHOPKEEPER_STATUS == (int)ShopKeeperStatus.ShopKeeperUser))
                                    {
                                        decimal dbonQuantity = Math.Round(Convert.ToDecimal(iQuantity) * dShopKeeperBon, MidpointRounding.AwayFromZero);

                                        iAmountToBeAddedToBalance = Convert.ToInt32(dbonQuantity) + iQuantity;
                                    }


                                    decimal? dFinanDistOperatorId = null;
                                    FINAN_DIST_OPERATOR oFinanDistOperator = null;
                                    try
                                    {
                                        decimal dTryOperatorId = Convert.ToDecimal(parametersIn["operatorID"].ToString());
                                        dFinanDistOperatorId = dTryOperatorId;
                                    }
                                    catch
                                    {
                                        dFinanDistOperatorId = null;
                                    }
                                    if (dFinanDistOperatorId.HasValue)
                                    {
                                        if (!geograficAndTariffsRepository.GetFinanDistOperator(dFinanDistOperatorId.Value,
                                                                                                ref oFinanDistOperator))
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                            Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                    }
                                    else
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    string sBackOfficeUsr = null;
                                    try
                                    {
                                        sBackOfficeUsr = parametersIn["backofficeUsr"].ToString();
                                    }
                                    catch (Exception) { }


                                    string sBackOfficeUsrEmail = "";
                                    try
                                    {
                                        sBackOfficeUsrEmail = parametersIn["backofficeUsrEmail"].ToString();
                                    }
                                    catch (Exception) { }


                                    decimal? dRechargeId = null;

                                    rt = PerformCashRecharge(ref oUser, session.MOSE_OS.Value, iQuantity, iAmountToBeAddedToBalance, dLatitude, dLongitude, strAppVersion,
                                                             PaymentMeanRechargeCreationType.pmrctRegularRecharge, dInstallationId, dFinanDistOperatorId, sBackOfficeUsr, dSourceApp, out dRechargeId);
                                    if (rt != ResultType.Result_OK)
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(rt);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                    try
                                    {
                                        if (dRechargeId != null)
                                        {
                                            CUSTOMER_PAYMENT_MEANS_RECHARGE oRecharge = null;
                                            if (customersRepository.GetRechargeData(ref oUser, dRechargeId.Value, out oRecharge))
                                            {
                                                if ((PaymentSuscryptionType)oRecharge.CUSPMR_SUSCRIPTION_TYPE == PaymentSuscryptionType.pstPrepay)
                                                {
                                                    string culture = oUser.USR_CULTURE_LANG;
                                                    CultureInfo ci = new CultureInfo(culture);
                                                    Thread.CurrentThread.CurrentUICulture = ci;
                                                    Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);
                                                    integraMobile.WS.Properties.Resource.Culture = ci;


                                                    iQuantity = oRecharge.CUSPMR_AMOUNT;
                                                    decimal dPercVAT1 = oRecharge.CUSPMR_PERC_VAT1 ?? 0;
                                                    decimal dPercVAT2 = oRecharge.CUSPMR_PERC_VAT2 ?? 0;
                                                    decimal dPercFEE = oRecharge.CUSPMR_PERC_FEE ?? 0;
                                                    int iPercFEETopped = (int)(oRecharge.CUSPMR_PERC_FEE_TOPPED ?? 0);
                                                    int iFixedFEE = (int)(oRecharge.CUSPMR_FIXED_FEE ?? 0);

                                                    int iPartialVAT1;
                                                    int iPartialPercFEE;
                                                    int iPartialFixedFEE;
                                                    int iPartialPercFEEVAT;
                                                    int iPartialFixedFEEVAT;

                                                    int iTotalQuantity = customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                                                    int iQFEE = Convert.ToInt32(Math.Round(iQuantity * dPercFEE, MidpointRounding.AwayFromZero));
                                                    if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                                    iQFEE += iFixedFEE;
                                                    int iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                                    int iQSubTotal = iQuantity + iQFEE;

                                                    int iLayout = 0;
                                                    if (iQFEE != 0 || iQVAT != 0)
                                                    {
                                                        OPERATOR oOperator = customersRepository.GetDefaultOperator();
                                                        if (oOperator != null) iLayout = oOperator.OPR_FEE_LAYOUT;
                                                    }


                                                    string sLayoutSubtotal = "";
                                                    string sLayoutTotal = "";

                                                    string sCurIsoCode = infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID));
                                                    string strSourceAppEmailPrefix = GetEmailSourceAppEmailPrefix(dSourceApp);


                                                    if (iLayout == 2)
                                                    {
                                                        sLayoutSubtotal = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "Email_LayoutSubtotal"),
                                                                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQSubTotal) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)),
                                                                                        (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00#}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                                        (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00#}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQVAT) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)));
                                                    }
                                                    else if (iLayout == 1)
                                                    {
                                                        sLayoutTotal = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "Email_LayoutTotal"),
                                                                                     string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQuantity) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)),
                                                                                     string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQFEE) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)),
                                                                                     (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00#}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                                     (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00#}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                                     string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQVAT) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)));
                                                    }

                                                    string strRechargeEmailSubject = ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "ConfirmNoAutomaticRecharge_EmailHeader");
                                                    /*
                                                        ID: {0}<br>
                                                     *  Fecha de recarga: {1:HH:mm:ss dd/MM/yyyy}<br>
                                                     *  Cantidad Recargada: {2} 
                                                     */
                                                    string strRechargeEmailBody = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "ConfirmRecharge_EmailBody"),
                                                        oRecharge.CUSPMR_ID,
                                                        oRecharge.CUSPMR_DATE,
                                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(oRecharge.CUSPMR_TOTAL_AMOUNT_CHARGED) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode),
                                                                                      infraestructureRepository.GetCurrencySymbolOrIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID))),
                                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))) + "} {1}",
                                                        Convert.ToDouble(oUser.USR_BALANCE) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))),
                                                                            infraestructureRepository.GetCurrencySymbolOrIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))),
                                                        ConfigurationManager.AppSettings["EmailSignatureURL"],
                                                        ConfigurationManager.AppSettings["EmailSignatureGraphic"],
                                                        sLayoutSubtotal, sLayoutTotal,
                                                        GetEmailFooter(ref oUser, dSourceApp));


                                                    SendEmail(ref oUser, strRechargeEmailSubject, strRechargeEmailBody, dSourceApp);

                                                    Logger_AddLogMessage(string.Format("ConfirmRecharge::Error:sBackOfficeUsrEmail={0}", sBackOfficeUsrEmail), LogLevels.logINFO);

                                                    if (!string.IsNullOrEmpty(sBackOfficeUsrEmail))
                                                    {
                                                        infraestructureRepository.SendEmailTo(sBackOfficeUsrEmail, string.Format("{0} -> ({1})", strRechargeEmailSubject, oUser.USR_EMAIL), strRechargeEmailBody, dSourceApp);
                                                    }



                                                }
                                            }
                                        }
                                    }
                                    catch { }

                                    parametersOut["newbal"] = oUser.USR_BALANCE;

                                }
                                else if (iRechargeType.Value == (int)PaymentMeanRechargeType.Oxxo) // OXXO
                                {
                                    int iQuantity = 0;
                                    try
                                    {

                                        if (parametersIn["q"] != null)
                                        {
                                            iQuantity = Convert.ToInt32(parametersIn["q"].ToString());
                                        }
                                        else if (parametersIn["quantity"] != null)
                                        {
                                            iQuantity = Convert.ToInt32(parametersIn["quantity"].ToString());
                                        }
                                    }
                                    catch
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    /*string sOxxoToken = parametersIn["oxxo_token"].ToString();
                                    int? iOxxoCashMachine = null;
                                    if (parametersIn["oxxo_cashmachine"] != null) 
                                    {
                                        iOxxoCashMachine = Convert.ToInt32(parametersIn["oxxo_cashmachine"].ToString());
                                    }
                                    string sOxxoEntryMode = null;
                                    if (parametersIn["oxxo_entrymode"] != null) 
                                        sOxxoEntryMode = parametersIn["oxxo_entrymode"].ToString();

                                    decimal dOxxoTicket = 0;
                                    try
                                    {
                                        dOxxoTicket = Convert.ToDecimal(parametersIn["oxxo_ticket"].ToString());
                                    }
                                    catch
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    decimal dOxxoFolio = 0;
                                    try
                                    {
                                        dOxxoFolio = Convert.ToDecimal(parametersIn["oxxo_folio"].ToString());
                                    }
                                    catch
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    DateTime dtOxxoAdminDate;
                                    try
                                    {
                                        dtOxxoAdminDate = DateTime.ParseExact(parametersIn["oxxo_admindate"].ToString(), "yyyyMMdd", CultureInfo.InvariantCulture);
                                    }
                                    catch
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;

                                    }

                                    string sOxxoStore = parametersIn["oxxo_store"].ToString();
                                    string sOxxoPartial = "T";
                                    if (parametersIn["oxxo_partial"] != null)
                                        sOxxoPartial = parametersIn["oxxo_partial"].ToString();
                                    */
                                    decimal? dRechargeId = null;
                                    DateTime? dtExpirationDate;
                                    string strBarcode = "";
                                    string strOxxoReference = "";
                                    string strPayuURL = "";

                                    rt = PerformOxxoRecharge(ref oUser, session.MOSE_OS.Value, iQuantity, dLatitude, dLongitude, strAppVersion,
                                                             PaymentMeanRechargeCreationType.pmrctRegularRecharge, dSourceApp, out dRechargeId,
                                                             out dtExpirationDate, out strBarcode, out strOxxoReference, out strPayuURL);
                                    if (rt != ResultType.Result_OK)
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(rt);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }


                                    parametersOut["newbal"] = oUser.USR_BALANCE;
                                    if (dRechargeId.HasValue)
                                    {

                                        parametersOut["rechargeId"] = dRechargeId.Value;
                                        parametersOut["oxxoBarcode"] = strBarcode;
                                        parametersOut["oxxoReference"] = strOxxoReference;
                                        parametersOut["oxxoURL"] = strPayuURL;
                                        parametersOut["oxxoExpDate"] = dtExpirationDate.Value.ToString("HHmmssddMMyy");
                                    }

                                }
                                else if (iRechargeType.Value == (int)PaymentMeanRechargeType.Payment)
                                {

                                    int iQuantity = 0;
                                    try
                                    {

                                        if (parametersIn["q"] != null)
                                        {
                                            iQuantity = Convert.ToInt32(parametersIn["q"].ToString());
                                        }
                                        else if (parametersIn["quantity"] != null)
                                        {
                                            iQuantity = Convert.ToInt32(parametersIn["quantity"].ToString());
                                        }
                                    }
                                    catch
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    CUSTOMER_PAYMENT_MEAN oUserPaymentMean = customersRepository.GetUserPaymentMean(ref oUser, (INSTALLATION)null);

                                    decimal? dRechargeId = null;

                                    int iAmountToBeAddedToBalance = iQuantity;

                                    decimal dShopKeeperBon = oInstallation.INS_SHOPKEEPER_RECHARGE_BONIFICATION_PERC.HasValue ? oInstallation.INS_SHOPKEEPER_RECHARGE_BONIFICATION_PERC.Value : 0;

                                    if ((dShopKeeperBon > 0) && (oUser.USR_SHOPKEEPER_STATUS.HasValue) && (oUser.USR_SHOPKEEPER_STATUS == (int)ShopKeeperStatus.ShopKeeperUser))
                                    {
                                        decimal dbonQuantity = Math.Round(Convert.ToDecimal(iQuantity) * dShopKeeperBon, MidpointRounding.AwayFromZero);

                                        iAmountToBeAddedToBalance = Convert.ToInt32(dbonQuantity) + iQuantity;
                                    }

                                    string str3DSURL = null;
                                    string strMD = parametersIn["moneris_md"] != null ? parametersIn["moneris_md"].ToString() : "";
                                    string strCAVV = parametersIn["moneris_cavv"] != null ? parametersIn["moneris_cavv"].ToString() : "";
                                    string strECI = parametersIn["moneris_eci"] != null ? parametersIn["moneris_eci"].ToString() : "";

                                    string strBSRedsys3DSTransID = parametersIn["bsredsys_3ds_trans_id"] != null ? parametersIn["bsredsys_3ds_trans_id"].ToString() : "";
                                    string strBSRedsys3DSPares = parametersIn["bsredsys_3ds_pares"] != null ? parametersIn["bsredsys_3ds_pares"].ToString() : "";
                                    string strBSRedsys3DSCres = parametersIn["bsredsys_3ds_cres"] != null ? parametersIn["bsredsys_3ds_cres"].ToString() : "";
                                    string strBSRedsys3DSMethodData = parametersIn["bsredsys_3ds_methoddata"] != null ? parametersIn["bsredsys_3ds_methoddata"].ToString() : "";

                                    string strMercadoPagoToken = parametersIn["mercadopago_token"] != null ? parametersIn["mercadopago_token"].ToString() : "";

   
                                    string strMPProTransactionId = parametersIn["mercadopago_transaction_id"] != null ? parametersIn["mercadopago_transaction_id"].ToString() : "";
                                    string strMPProReference = parametersIn["mercadopago_reference"] != null ? parametersIn["mercadopago_reference"].ToString() : "";
                                    string strMPProCardHash = parametersIn["mercadopago_card_hash"] != null ? parametersIn["mercadopago_card_hash"].ToString() : "";
                                    string strMPProCardReference = parametersIn["mercadopago_card_reference"] != null ? parametersIn["mercadopago_card_reference"].ToString() : "";
                                    string strMPProCardScheme = parametersIn["mercadopago_card_scheme"] != null ? parametersIn["mercadopago_card_scheme"].ToString() : "";
                                    string strMPProGatewayDate = parametersIn["mercadopago_date_time_local_fmt"] != null ? parametersIn["mercadopago_date_time_local_fmt"].ToString() : "";
                                    string strMPProMaskedCardNumber = parametersIn["mercadopago_masked_card_number"] != null ? parametersIn["mercadopago_masked_card_number"].ToString() : "";
                                    string strMPProExpMonth = parametersIn["mercadopago_expires_end_month"] != null ? parametersIn["mercadopago_expires_end_month"].ToString() : "";
                                    string strMPProExpYear = parametersIn["mercadopago_expires_end_year"] != null ? parametersIn["mercadopago_expires_end_year"].ToString() : "";
                                    string strMPProCardType = parametersIn["mercadopago_card_type"] != null ? parametersIn["mercadopago_card_type"].ToString() : "";
                                    string strMPProDocumentID = parametersIn["mercadopago_document_id"] != null ? parametersIn["mercadopago_document_id"].ToString() : "";
                                    string strMPProDocumentType = parametersIn["mercadopago_document_type"] != null ? parametersIn["mercadopago_document_type"].ToString() : "";
                                    string strMPProInstallaments = parametersIn["mercadopago_installaments"] != null ? parametersIn["mercadopago_installaments"].ToString() : "";
                                    string strMPProCVVLength = parametersIn["mercadopago_cvv_length"] != null ? parametersIn["mercadopago_cvv_length"].ToString() : "";
                                    string strMPProDescription = geograficAndTariffsRepository.GetSourceAppDescription(dSourceApp);


                                    long lEllapsedTime = 0;
                                    rt = PerformPrepayRecharge(ref oUser, oUserPaymentMean, session.MOSE_OS.Value, false, iQuantity, iAmountToBeAddedToBalance, false, dLatitude, dLongitude, strAppVersion,
                                                                PaymentMeanRechargeCreationType.pmrctRegularRecharge, strMD, strCAVV, strECI,
                                                                strBSRedsys3DSTransID, strBSRedsys3DSPares, strBSRedsys3DSCres, strBSRedsys3DSMethodData, strMercadoPagoToken,
                                                                strMPProDescription,
                                                                strMPProTransactionId,
                                                                strMPProReference,
                                                                strMPProCardHash,
                                                                strMPProCardReference,
                                                                strMPProCardScheme,
                                                                strMPProGatewayDate,
                                                                strMPProMaskedCardNumber,
                                                                strMPProExpMonth,
                                                                strMPProExpYear,
                                                                strMPProCardType,
                                                                strMPProDocumentID,
                                                                strMPProDocumentType,
                                                                strMPProInstallaments,
                                                                strMPProCVVLength,
                                                                dSourceApp, true, CardPayment_Mode.Charge, out dRechargeId, out str3DSURL,out lEllapsedTime);

                                    if (rt != ResultType.Result_OK)
                                    {
                                        if (rt == ResultType.Result_3DS_Validation_Needed)
                                        {
                                            DeleteConfirmLockInformation(strLockDictionaryString);
                                            parametersOut["r"] = Convert.ToInt32(rt).ToString();
                                            parametersOut["ThreeDSURL"] = str3DSURL;
                                            parametersOut["cc_provider"] = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_PROVIDER;

                                            xmlOut = GenerateXMLOuput(parametersOut);

                                            if (xmlOut.Length == 0)
                                            {
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            }
                                            else
                                            {
                                                Logger_AddLogMessage(string.Format("ConfirmRecharge: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                            }

                                            oUser = null;
                                            return xmlOut;

                                        }
                                        else
                                        {

                                            DeleteConfirmLockInformation(strLockDictionaryString);
                                            xmlOut = GenerateXMLErrorResult(rt);
                                            Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                    }

                                    try
                                    {
                                        if (dRechargeId != null)
                                        {
                                            customersRepository.ConfirmRecharge(ref oUser, dRechargeId.Value);

                                            CUSTOMER_PAYMENT_MEANS_RECHARGE oRecharge = null;
                                            if (customersRepository.GetRechargeData(ref oUser, dRechargeId.Value, out oRecharge))
                                            {
                                                if ((PaymentSuscryptionType)oRecharge.CUSPMR_SUSCRIPTION_TYPE == PaymentSuscryptionType.pstPrepay)
                                                {
                                                    string culture = oUser.USR_CULTURE_LANG;
                                                    CultureInfo ci = new CultureInfo(culture);
                                                    Thread.CurrentThread.CurrentUICulture = ci;
                                                    Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);
                                                    integraMobile.WS.Properties.Resource.Culture = ci;


                                                    iQuantity = oRecharge.CUSPMR_AMOUNT;
                                                    decimal dPercVAT1 = oRecharge.CUSPMR_PERC_VAT1 ?? 0;
                                                    decimal dPercVAT2 = oRecharge.CUSPMR_PERC_VAT2 ?? 0;
                                                    decimal dPercFEE = oRecharge.CUSPMR_PERC_FEE ?? 0;
                                                    int iPercFEETopped = (int)(oRecharge.CUSPMR_PERC_FEE_TOPPED ?? 0);
                                                    int iFixedFEE = (int)(oRecharge.CUSPMR_FIXED_FEE ?? 0);

                                                    int iPartialVAT1;
                                                    int iPartialPercFEE;
                                                    int iPartialFixedFEE;
                                                    int iPartialPercFEEVAT;
                                                    int iPartialFixedFEEVAT;

                                                    int iTotalQuantity = customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                                                    int iQFEE = Convert.ToInt32(Math.Round(iQuantity * dPercFEE, MidpointRounding.AwayFromZero));
                                                    if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                                    iQFEE += iFixedFEE;
                                                    int iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                                    int iQSubTotal = iQuantity + iQFEE;

                                                    int iLayout = 0;
                                                    if (iQFEE != 0 || iQVAT != 0)
                                                    {
                                                        OPERATOR oOperator = customersRepository.GetDefaultOperator();
                                                        if (oOperator != null) iLayout = oOperator.OPR_FEE_LAYOUT;
                                                    }


                                                    string sLayoutSubtotal = "";
                                                    string sLayoutTotal = "";

                                                    string sCurIsoCode = infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID));
                                                    string strSourceAppEmailPrefix = GetEmailSourceAppEmailPrefix(dSourceApp);

                                                    if (iLayout == 2)
                                                    {
                                                        sLayoutSubtotal = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "Email_LayoutSubtotal"),
                                                                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQSubTotal) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)),
                                                                                        (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00#}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                                        (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00#}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQVAT) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)));
                                                    }
                                                    else if (iLayout == 1)
                                                    {
                                                        sLayoutTotal = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "Email_LayoutTotal"),
                                                                                     string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQuantity) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)),
                                                                                     string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQFEE) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)),
                                                                                     (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00#}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                                     (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00#}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                                     string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQVAT) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)));
                                                    }

                                                    string strRechargeEmailSubject = ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "ConfirmNoAutomaticRecharge_EmailHeader");
                                                    /*
                                                        ID: {0}<br>
                                                     *  Fecha de recarga: {1:HH:mm:ss dd/MM/yyyy}<br>
                                                     *  Cantidad Recargada: {2} 
                                                     */
                                                    string strRechargeEmailBody = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "ConfirmRecharge_EmailBody"),
                                                        oRecharge.CUSPMR_ID,
                                                        oRecharge.CUSPMR_DATE,
                                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(oRecharge.CUSPMR_TOTAL_AMOUNT_CHARGED) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode),
                                                                                      infraestructureRepository.GetCurrencySymbolOrIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID))),
                                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))) + "} {1}", Convert.ToDouble(oUser.USR_BALANCE) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))),
                                                                            infraestructureRepository.GetCurrencySymbolOrIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))),
                                                        ConfigurationManager.AppSettings["EmailSignatureURL"],
                                                        ConfigurationManager.AppSettings["EmailSignatureGraphic"],
                                                        sLayoutSubtotal, sLayoutTotal,
                                                        GetEmailFooter(ref oUser, dSourceApp));


                                                    SendEmail(ref oUser, strRechargeEmailSubject, strRechargeEmailBody, dSourceApp);

                                                }
                                            }
                                        }
                                    }
                                    catch { }


                                    parametersOut["newbal"] = oUser.USR_BALANCE;


                                    //We try to modify the automatic recharge data

                                    try
                                    {
                                        if (parametersIn["autrech"] != null)
                                        {
                                            int iMobileSetting = Convert.ToInt32(parametersIn["autrech"].ToString());

                                            if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                                            {
                                                int iAutoAmountBelow = -1;
                                                int iAutoAmountToRecharge = -1;
                                                parametersOut["autrech"] = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE;

                                                try
                                                {
                                                    iAutoAmountToRecharge = Convert.ToInt32(parametersIn["autamo"].ToString());
                                                }
                                                catch
                                                {

                                                }

                                                try
                                                {
                                                    iAutoAmountBelow = Convert.ToInt32(parametersIn["autbelow"].ToString());
                                                }
                                                catch
                                                {

                                                }

                                                if ((oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_ENABLED == 1) && (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_VALID == 1))
                                                {
                                                    if ((PaymentMeanType)oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID == PaymentMeanType.pmtDebitCreditCard)
                                                    {
                                                        if ((oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == 1) &&
                                                            (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == iMobileSetting))
                                                        {
                                                            //we need to check if the quantities are correct

                                                            if ((iAutoAmountBelow != -1) && (iAutoAmountToRecharge != -1) &&
                                                                ((oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AMOUNT_TO_RECHARGE != iAutoAmountToRecharge) ||
                                                                    (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_RECHARGE_WHEN_AMOUNT_IS_LESS != iAutoAmountBelow)))
                                                            {
                                                                //Change quantities
                                                                customersRepository.UpdateUserPaymentMean(ref oUser, null, iMobileSetting, iAutoAmountToRecharge, iAutoAmountBelow, "", dSourceApp);
                                                                parametersOut["autrech"] = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE;
                                                            }
                                                        }
                                                        else if ((oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == 0) &&
                                                            (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == iMobileSetting))
                                                        {
                                                            //Nothing to do
                                                            parametersOut["autrech"] = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE;
                                                        }
                                                        else if ((oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == 1) &&
                                                            (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE != iMobileSetting))
                                                        {
                                                            //Need to reset automatic recharge
                                                            customersRepository.UpdateUserPaymentMean(ref oUser, null, iMobileSetting, null, null, "", dSourceApp);
                                                            parametersOut["autrech"] = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE;

                                                        }
                                                        else if ((oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == 0) &&
                                                            (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE != iMobileSetting))
                                                        {
                                                            //Need to set automatic recharge with the quantities
                                                            if ((iAutoAmountBelow != -1) && (iAutoAmountToRecharge != -1))
                                                            {
                                                                //Change quantities
                                                                customersRepository.UpdateUserPaymentMean(ref oUser, null, iMobileSetting, iAutoAmountToRecharge, iAutoAmountBelow, "", dSourceApp);
                                                                parametersOut["autrech"] = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE;

                                                            }

                                                        }

                                                    }
                                                    else if ((PaymentMeanType)oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID == PaymentMeanType.pmtPaypal)
                                                    { //Is Paypal so change is not pos. 
                                                        //only we allow the change of quantities when automatic mode is on

                                                        if ((oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == 1) &&
                                                            (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == iMobileSetting))
                                                        {
                                                            //we need to check if the quantities are correct

                                                            if ((iAutoAmountBelow != -1) && (iAutoAmountToRecharge != -1) &&
                                                                ((oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AMOUNT_TO_RECHARGE != iAutoAmountToRecharge) ||
                                                                    (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_RECHARGE_WHEN_AMOUNT_IS_LESS != iAutoAmountBelow)))
                                                            {
                                                                //Change quantities
                                                                customersRepository.UpdateUserPaymentMean(ref oUser, null, iMobileSetting, iAutoAmountToRecharge, iAutoAmountBelow,
                                                                    oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_PAYPAL_ID, dSourceApp);
                                                                parametersOut["autrech"] = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        parametersOut["autrech"] = -1;
                                                    }
                                                }
                                                else
                                                { //Payment mean not enabled or not valid
                                                    parametersOut["autrech"] = -1;
                                                }
                                            }
                                            else
                                            { //There is not payment assigned
                                                parametersOut["autrech"] = -1;
                                            }
                                        }
                                    }
                                    catch (Exception e)
                                    {
                                        Logger_AddLogException(e, string.Format("ConfirmRecharge::Error managing autorecharge fields"), LogLevels.logERROR);
                                    }



                                }
                                else
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                xmlOut = GenerateXMLOuput(parametersOut);

                                if (xmlOut.Length == 0)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }
                                else
                                {
                                    Logger_AddLogMessage(string.Format("ConfirmRecharge: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                }

                                oUser = null;
                            }
                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }


            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            DeleteConfirmLockInformation(strLockDictionaryString);
            return xmlOut;
        }

        [WebMethod]
        public string ConfirmRechargeJSON(string jsonIn)
        {
            string jsonOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            jsonOut = TestRedirection(jsonIn, sMethodName, true);
            if (!string.IsNullOrEmpty(jsonOut))
            {
                return jsonOut;
            }

            try
            {
                //Logger_AddLogMessage(string.Format("ConfirmRechargeJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ConfirmRecharge(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ConfirmRechargeJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ConfirmRechargeJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }



        [WebMethod]
        public string TransferBalance(string xmlIn)
        {
            string xmlOut = "";
            string strLockDictionaryString = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("TransferBalance: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["emailrecipient"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("TransferBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("TransferBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            strLockDictionaryString = parametersIn["u"].ToString();
                            if (ExistConfirmLockInformation(strLockDictionaryString))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_ConfirmOperationAlreadyExecuting);
                                Logger_AddLogMessage(string.Format("TransferBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            else
                            {
                                int iQuantity;
                                try
                                {
                                    iQuantity = Int32.Parse(parametersIn["amountrecipient"].ToString(), CultureInfo.InvariantCulture);
                                }
                                catch
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("TransferBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }

                                USER oSrcUser = null;
                                string strAppVersion = "";
                                decimal? dInsId = null;
                                decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();


                                rt = GetUserData(ref oSrcUser, parametersIn, out dInsId, out strAppVersion, ref dSourceApp);

                                if (rt != ResultType.Result_OK)
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(rt);
                                    Logger_AddLogMessage(string.Format("TransferBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                decimal? dLatitude = null;
                                decimal? dLongitude = null;
                                GetLatLon(parametersIn, out dLatitude, out dLongitude);


                                INSTALLATION oInstallation = null;
                                DateTime? dtinstDateTime = null;
                                decimal? dLatitudeInst = null;
                                decimal? dLongitudeInst = null;

                                if (!geograficAndTariffsRepository.getInstallation(dInsId.Value,
                                                                             dLatitudeInst,
                                                                             dLongitudeInst,
                                                                             ref oInstallation,
                                                                             ref dtinstDateTime))
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_City);
                                    Logger_AddLogMessage(string.Format("TransferBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }



                                if (parametersIn["pass"] != null)
                                {
                                    rt = ResultType.Result_Error_InvalidAuthentication;
                                    string currentPassword = "";
                                    if (FormAuthMemberShip.MembershipService.GetPassword(oSrcUser.USR_USERNAME, ref currentPassword))
                                    {
                                        if (currentPassword == parametersIn["pass"].ToString())
                                            rt = ResultType.Result_OK;
                                    }
                                }

                                if (rt != ResultType.Result_OK)
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(rt);
                                    Logger_AddLogMessage(string.Format("TransferBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                if (oSrcUser.USR_EMAIL.ToLower() == parametersIn["emailrecipient"].ToString().ToLower())
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidUserReceiverEmail);
                                    Logger_AddLogMessage(string.Format("TransferBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                USER oDstUser = null;
                                if (!customersRepository.GetUserDataByEmail(ref oDstUser, parametersIn["emailrecipient"].ToString()))
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidUserReceiverEmail);
                                    Logger_AddLogMessage(string.Format("TransferBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                bool bIsShopKeeperOperation = false;
                                if (parametersIn.ContainsKey("isshopkeeperoperation"))
                                {
                                    bIsShopKeeperOperation = Convert.ToInt32(parametersIn["isshopkeeperoperation"].ToString()) == 1;
                                }

                                parametersOut = new SortedList();
                                parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                                int iCurrencyDstQuantity = 0;
                                decimal dTransferID = -1;
                                int? iBalanceAfterRecharge = null;
                                DateTime? dtUTCInsertionDate = null;

                                var session = oSrcUser.MOBILE_SESSIONs.Where(r => r.MOSE_SESSIONID == parametersIn["SessionID"].ToString()
                                                                                  && r.MOSE_USR_ID == oSrcUser.USR_ID).First();

                                double dChangeToApply = 1.0;

                                if (oSrcUser.CURRENCy.CUR_ISO_CODE != oDstUser.CURRENCy.CUR_ISO_CODE)
                                {
                                    dChangeToApply = GetChangeToApplyFromUserCurToUserCur(oSrcUser, oDstUser);
                                    if (dChangeToApply < 0)
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("TransferBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }

                                rt = PerformTransferBalance(dChangeToApply, iQuantity, ref oSrcUser, ref oDstUser, session.MOSE_OS.Value, session.MOSE_ID,
                                                            strAppVersion, bIsShopKeeperOperation, dSourceApp, ref oInstallation,
                                                            ref parametersOut,
                                                            out iCurrencyDstQuantity, out dTransferID, out dtUTCInsertionDate, out iBalanceAfterRecharge);

                                if (rt != ResultType.Result_OK)
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(rt);
                                    Logger_AddLogMessage(string.Format("TransferBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                parametersOut["newbal"] = oSrcUser.USR_BALANCE;


                                xmlOut = GenerateXMLOuput(parametersOut);

                                if (xmlOut.Length == 0)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("TransferBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }
                                else
                                {
                                    Logger_AddLogMessage(string.Format("TransferBalance: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                }

                                oSrcUser = null;
                                oDstUser = null;
                            }
                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("TransferBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }


            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("TransferBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            DeleteConfirmLockInformation(strLockDictionaryString);
            return xmlOut;
        }


        [WebMethod]
        public string TransferBalanceJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("TransferBalanceJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = TransferBalance(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("TransferBalanceJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("TransferBalanceJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }


        //[WebMethod]
        public int ManualRecharge(string strUser, int iQuantity)
        {
            ResultType rt = ResultType.Result_OK;
            try
            {
                Logger_AddLogMessage(string.Format("ManualRecharge::Request: user={0}, quantity={1}", strUser, iQuantity), LogLevels.logINFO);

                USER oUser = null;
                if (customersRepository.GetUserData(ref oUser, strUser))
                {

                    decimal? dRechargeId = null;
                    // TODO: ***

                    string str3DSURL = null;
                    decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();
                    long lEllapsedTime = 0;
                  

                    rt = PerformPrepayRecharge(ref oUser, null, (int)MobileOS.Web, false, iQuantity, iQuantity, true, null, null, "",
                                                PaymentMeanRechargeCreationType.pmrctRegularRecharge, "", "", "", "", "", "", "", "",
                                                "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
                                                dSourceApp, true, CardPayment_Mode.Charge, out dRechargeId, out str3DSURL, out lEllapsedTime);

                    if (rt != ResultType.Result_OK)
                    {
                        Logger_AddLogMessage(string.Format("ManualRecharge::Error: user={0}, quantity={1}, rt={2}", strUser, iQuantity, rt), LogLevels.logERROR);
                        return (int)rt;
                    }

                    Logger_AddLogMessage(string.Format("ManualRecharge::OK: user={0}, quantity={1}", strUser, iQuantity), LogLevels.logINFO);

                    try
                    {
                        if (dRechargeId != null)
                        {
                            CUSTOMER_PAYMENT_MEANS_RECHARGE oRecharge = null;
                            if (customersRepository.GetRechargeData(ref oUser, dRechargeId.Value, out oRecharge))
                            {
                                if ((PaymentSuscryptionType)oRecharge.CUSPMR_SUSCRIPTION_TYPE == PaymentSuscryptionType.pstPrepay)
                                {
                                    string culture = oUser.USR_CULTURE_LANG;
                                    CultureInfo ci = new CultureInfo(culture);
                                    Thread.CurrentThread.CurrentUICulture = ci;
                                    Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);
                                    integraMobile.WS.Properties.Resource.Culture = ci;


                                    iQuantity = oRecharge.CUSPMR_AMOUNT;
                                    decimal dPercVAT1 = oRecharge.CUSPMR_PERC_VAT1 ?? 0;
                                    decimal dPercVAT2 = oRecharge.CUSPMR_PERC_VAT2 ?? 0;
                                    decimal dPercFEE = oRecharge.CUSPMR_PERC_FEE ?? 0;
                                    int iPercFEETopped = (int)(oRecharge.CUSPMR_PERC_FEE_TOPPED ?? 0);
                                    int iFixedFEE = (int)(oRecharge.CUSPMR_FIXED_FEE ?? 0);

                                    int iPartialVAT1;
                                    int iPartialPercFEE;
                                    int iPartialFixedFEE;
                                    int iPartialPercFEEVAT;
                                    int iPartialFixedFEEVAT;

                                    int iTotalQuantity = customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                                    int iQFEE = Convert.ToInt32(Math.Round(iQuantity * dPercFEE, MidpointRounding.AwayFromZero));
                                    if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                    iQFEE += iFixedFEE;
                                    int iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                    int iQSubTotal = iQuantity + iQFEE;

                                    int iLayout = 0;
                                    if (iQFEE != 0 || iQVAT != 0)
                                    {
                                        OPERATOR oOperator = customersRepository.GetDefaultOperator();
                                        if (oOperator != null) iLayout = oOperator.OPR_FEE_LAYOUT;
                                    }


                                    string sLayoutSubtotal = "";
                                    string sLayoutTotal = "";

                                    string sCurIsoCode = infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID));
                                    string strSourceAppEmailPrefix = GetEmailSourceAppEmailPrefix(dSourceApp);


                                    if (iLayout == 2)
                                    {
                                        sLayoutSubtotal = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "Email_LayoutSubtotal"),
                                                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQSubTotal) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)),
                                                                        (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00#}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                        (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00#}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQVAT) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)));
                                    }
                                    else if (iLayout == 1)
                                    {
                                        sLayoutTotal = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "Email_LayoutTotal"),
                                                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQuantity) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)),
                                                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQFEE) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)),
                                                                        (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00#}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                        (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00#}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQVAT) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)));
                                    }

                                    string strRechargeEmailSubject = ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "ConfirmNoAutomaticRecharge_EmailHeader");
                                    /*
                                        ID: {0}<br>
                                        *  Fecha de recarga: {1:HH:mm:ss dd/MM/yyyy}<br>
                                        *  Cantidad Recargada: {2} 
                                        */
                                    string strRechargeEmailBody = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "ConfirmRecharge_EmailBody"),
                                        oRecharge.CUSPMR_ID,
                                        oRecharge.CUSPMR_DATE,
                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(oRecharge.CUSPMR_TOTAL_AMOUNT_CHARGED) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode),
                                                                        infraestructureRepository.GetCurrencySymbolOrIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID))),
                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))) + "} {1}", Convert.ToDouble(oUser.USR_BALANCE) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))),
                                                            infraestructureRepository.GetCurrencySymbolOrIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))),
                                        ConfigurationManager.AppSettings["EmailSignatureURL"],
                                        ConfigurationManager.AppSettings["EmailSignatureGraphic"],
                                        sLayoutSubtotal, sLayoutTotal,
                                        GetEmailFooter(ref oUser, dSourceApp));


                                    SendEmail(ref oUser, strRechargeEmailSubject, strRechargeEmailBody, dSourceApp);
                                    Logger_AddLogMessage(string.Format("ManualRecharge::Mail Sent: user={0}, quantity={1}", strUser, iQuantity), LogLevels.logINFO);


                                }
                            }
                        }
                    }
                    catch { }
                }
                oUser = null;


            }
            catch (Exception e)
            {
                rt = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, string.Format("ManualRecharge::Error: user={0}, quantity={1}", strUser, iQuantity), LogLevels.logERROR);
            }

            return (int)rt;

        }



        [WebMethod]
        public string QueryAvailableTariffs(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {                
                SortedList parametersIn = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("QueryAvailableTariffs: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["d"] == null) ||
                        (parametersIn["g"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryAvailableTariffs::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("QueryAvailableTariffs::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, out strAppVersion);
                            decimal? dlang = Convert.ToDecimal(parametersIn[ConstantsEntity.PARAMETER_LANG]);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryAvailableTariffs::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }



                            SortedList parametersOut = null;
                            rt = QueryParkingTariffsInternal(xmlIn, parametersIn, ref oUser, strAppVersion, dlang, false, ref parametersOut);

                            if (rt == ResultType.Result_OK)
                            {

                                xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "ltar" });

                                if (xmlOut.Length == 0)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryAvailableTariffs::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }
                                else
                                {
                                    Logger_AddLogMessage(string.Format("QueryAvailableTariffs: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                }

                                oUser = null;

                                if (parametersOut != null)
                                {
                                    parametersOut.Clear();
                                    parametersOut = null;
                                }
                            }
                            else if (rt == ResultType.Result_Error_Tariffs_Not_Available)
                            {
                                parametersOut["r"] = Convert.ToInt32(rt).ToString();
                                xmlOut = GenerateXMLOuput(parametersOut);

                                if (xmlOut.Length == 0)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryAvailableTariffs::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }
                                else
                                {
                                    Logger_AddLogMessage(string.Format("QueryAvailableTariffs: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                }

                            }
                            else
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryAvailableTariffs::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }


                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryAvailableTariffs::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }



            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryAvailableTariffs::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }

        [WebMethod]
        public string QueryAvailableTariffsJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("QueryAvailableTariffsJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryAvailableTariffs(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("QueryAvailableTariffsJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryAvailableTariffsJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }


        [WebMethod]
        public string QueryAvailableTariffsGuestUser(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {                
                SortedList parametersIn = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("QueryAvailableTariffsGuestUser: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if (
                        (parametersIn["d"] == null) ||
                        (parametersIn["culture"] == null) ||
                        (parametersIn["g"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryAvailableTariffsGuestUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("QueryAvailableTariffsGuestUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            string strAppVersion = "";


                            decimal? dGroupId = Helpers.ValidateInputParameterToDecimal(parametersIn, ConstantsEntity.PARAMETER_GROUP_ID);
                            GROUP oGroup = null;
                            DateTime? dtgroupDateTime = null;

                            if (!geograficAndTariffsRepository.getGroup(dGroupId, ref oGroup, ref dtgroupDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryAvailableTariffsGuestUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            decimal? dlang = GetLangIdFromCulture(parametersIn["culture"].ToString());                           

                          
                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryAvailableTariffsGuestUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            SortedList parametersOut = null;
                            USER oUser = null;
                            rt = QueryParkingTariffsInternal(xmlIn, parametersIn, ref oUser, strAppVersion, dlang, false, ref parametersOut);


                            if (rt == ResultType.Result_OK)
                            {
                                int? iUTCOffset = null;
                                if ((parametersIn["date"] != null) && (parametersIn["utc_date"] != null))
                                {

                                    DateTime dt;
                                    DateTime dtUTC;

                                    try
                                    {
                                        dt = DateTime.ParseExact(parametersIn["date"].ToString(), "HHmmssddMMyy",
                                          CultureInfo.InvariantCulture);
                                        dtUTC = DateTime.ParseExact(parametersIn["utc_date"].ToString(), "HHmmssddMMyy",
                                          CultureInfo.InvariantCulture);

                                        iUTCOffset = Convert.ToInt32((dtUTC - dt).TotalMinutes + 0.5);

                                    }
                                    catch
                                    {
                                        iUTCOffset = 0;
                                    }


                                }
                                else
                                {

                                    if (parametersIn["utc_offset"] != null)
                                    {
                                        try
                                        {
                                            iUTCOffset = Convert.ToInt32(parametersIn["utc_offset"].ToString());
                                        }
                                        catch { }
                                    }
                                    else
                                    {
                                        iUTCOffset = 0;
                                    }
                                }

                               
                                xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "ltar" });

                                if (xmlOut.Length == 0)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryAvailableTariffsGuestUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }
                                else
                                {
                                    Logger_AddLogMessage(string.Format("QueryAvailableTariffsGuestUser: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                }
                               

                                if (parametersOut != null)
                                {
                                    parametersOut.Clear();
                                    parametersOut = null;
                                }
                            }
                            else if (rt == ResultType.Result_Error_Tariffs_Not_Available)
                            {
                                parametersOut["r"] = Convert.ToInt32(rt).ToString();
                                xmlOut = GenerateXMLOuput(parametersOut);

                                if (xmlOut.Length == 0)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryAvailableTariffsGuestUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }
                                else
                                {
                                    Logger_AddLogMessage(string.Format("QueryAvailableTariffsGuestUser: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                }

                            }
                            else
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryAvailableTariffsGuestUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }

                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryAvailableTariffsGuestUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryAvailableTariffsGuestUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }

        [WebMethod]
        public string QueryAvailableTariffsGuestUserJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("QueryAvailableTariffsGuestUserJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryAvailableTariffsGuestUser(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("QueryAvailableTariffsGuestUserJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryAvailableTariffsGuestUserJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }




        /*
         *  QueryParkingTariffs
         *  
        <ipark_in>
            <u>user login or generated user id for anonymous operations</u>
            <p>plate</p>
            <d>date in format hh24missddMMYY</d>
            <g>parking sector</g>
            <ah>authentication hash</ah>
        </ ipark _in>
         * 
         * 
        <ipark_out>
	      <r>Result of the method</r>
                <ltar> list of tariffs
                    <ad id=”1>
                        <sel> tariff can be selected by the user </sel>
	                    <lit> number of literal </lit>
	                    <desc> tariff description (all day), morning </desc>
                    </ad>
                    <ad id=”2”>
                        <sel> tariff can be selected by the user </sel>
	                    <lit> number of literal </lit>
	                    <desc> tariff description (all day), morning </desc>
                    </ad>
                </ ltar >
        </ipark_out>
         * 
         * 
        Result of the method:
        a.	1: List of tariffs returned.
        b.	-1: Invalid authentication hash
        c.	-19: Tariffs not available
        d.	-9: Generic Error (for example database or execution error.)       
         *
         */
        [WebMethod]
        public string QueryParkingTariffs(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {                
                SortedList parametersIn = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("QueryParkingTariffs: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["p"] == null) ||
                        (parametersIn["d"] == null) ||
                        (parametersIn["g"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryParkingTariffs::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("QueryParkingTariffs::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, out strAppVersion);
                            decimal? dlang = Convert.ToDecimal(parametersIn[ConstantsEntity.PARAMETER_LANG]);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryParkingTariffs::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }



                            SortedList parametersOut = null;
                            rt = QueryParkingTariffsInternal(xmlIn, parametersIn, ref oUser, strAppVersion, dlang, true, ref parametersOut);                            

                            if (rt == ResultType.Result_OK)
                            {

                                xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "ltar" });

                                if (xmlOut.Length == 0)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryParkingTariffs::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }
                                else
                                {
                                    Logger_AddLogMessage(string.Format("QueryParkingTariffs: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                }

                                oUser = null;

                                if (parametersOut != null)
                                {
                                    parametersOut.Clear();
                                    parametersOut = null;
                                }
                            }
                            else if (rt == ResultType.Result_Error_Tariffs_Not_Available)
                            {
                                parametersOut["r"] = Convert.ToInt32(rt).ToString();
                                xmlOut = GenerateXMLOuput(parametersOut);

                                if (xmlOut.Length == 0)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryParkingTariffs::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }
                                else
                                {
                                    Logger_AddLogMessage(string.Format("QueryParkingTariffs: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                }
                               
                            }
                            else
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryParkingTariffs::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }

                            
                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryParkingTariffs::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

               

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryParkingTariffs::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }

        [WebMethod]
        public string QueryParkingTariffsJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("QueryParkingTariffsJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryParkingTariffs(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("QueryParkingTariffsJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryParkingTariffsJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }



        [WebMethod]
        public string QueryParkingTariffsGuestUser(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("QueryParkingTariffsGuestUser: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if (
                        (parametersIn["p"] == null) ||
                        (parametersIn["d"] == null) ||
                        (parametersIn["culture"] == null) ||
                        (parametersIn["g"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryParkingTariffsGuestUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("QueryParkingTariffsGuestUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            string strAppVersion = "";


                            decimal? dGroupId = Helpers.ValidateInputParameterToDecimal(parametersIn, ConstantsEntity.PARAMETER_GROUP_ID);
                            GROUP oGroup = null;
                            DateTime? dtgroupDateTime = null;

                            if (!geograficAndTariffsRepository.getGroup(dGroupId, ref oGroup, ref dtgroupDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryParkingTariffsGuestUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            string strPlate = NormalizePlate(parametersIn["p"].ToString());

                            if (strPlate.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryParkingTariffsGuestUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }
                            
                            decimal? dlang = GetLangIdFromCulture(parametersIn["culture"].ToString());
                            string strGuid = "";


                            if (parametersIn["guid"]!=null)
                            {
                                strGuid = parametersIn["guid"].ToString();
                            }



                            rt = GetGuestUserData(ref oUser, strGuid, strPlate, GetCultureFromLangID(dlang), oGroup.INSTALLATION, parametersIn, out strAppVersion); ;

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryParkingTariffsGuestUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            SortedList parametersOut = null;
                            rt  = QueryParkingTariffsInternal(xmlIn, parametersIn, ref oUser, strAppVersion, dlang, true, ref parametersOut);


                            if (rt == ResultType.Result_OK)
                            {
                                int? iUTCOffset = null;
                                if ((parametersIn["date"] != null) && (parametersIn["utc_date"] != null))
                                {

                                    DateTime dt;
                                    DateTime dtUTC;

                                    try
                                    {
                                        dt = DateTime.ParseExact(parametersIn["date"].ToString(), "HHmmssddMMyy",
                                          CultureInfo.InvariantCulture);
                                        dtUTC = DateTime.ParseExact(parametersIn["utc_date"].ToString(), "HHmmssddMMyy",
                                          CultureInfo.InvariantCulture);

                                        iUTCOffset = Convert.ToInt32((dtUTC - dt).TotalMinutes + 0.5);

                                    }
                                    catch
                                    {
                                        iUTCOffset = 0;
                                    }


                                }
                                else
                                {

                                    if (parametersIn["utc_offset"] != null)
                                    {
                                        try
                                        {
                                            iUTCOffset = Convert.ToInt32(parametersIn["utc_offset"].ToString());
                                        }
                                        catch { }
                                    }
                                    else
                                    {
                                        iUTCOffset = 0;
                                    }
                                }

                                string strSessionID = "";

                                parametersIn["u"] = oUser.USR_USERNAME;
                                ResultType rt2 = StartSession(ref oUser, oGroup.INSTALLATION.INS_ID, parametersIn, out strSessionID, iUTCOffset, GetCultureFromLangID(dlang));

                                if (rt2 != ResultType.Result_OK)
                                {
                                    xmlOut = GenerateXMLErrorResult(rt2);
                                    Logger_AddLogMessage(string.Format("QueryParkingTariffsGuestUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }


                                parametersOut["SessionID"] = strSessionID;
                                parametersOut["guid"] = oUser.USR_USERNAME;
                                parametersOut["u"] = oUser.USR_USERNAME;
                                parametersOut["email"] = oUser.USR_EMAIL;


                                xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "ltar" });

                                if (xmlOut.Length == 0)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryParkingTariffsGuestUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }
                                else
                                {
                                    Logger_AddLogMessage(string.Format("QueryParkingTariffsGuestUser: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                }

                                oUser = null;

                                if (parametersOut != null)
                                {
                                    parametersOut.Clear();
                                    parametersOut = null;
                                }
                            }
                            else if (rt == ResultType.Result_Error_Tariffs_Not_Available)
                            {
                                parametersOut["r"] = Convert.ToInt32(rt).ToString();
                                xmlOut = GenerateXMLOuput(parametersOut);

                                if (xmlOut.Length == 0)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryParkingTariffsGuestUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }
                                else
                                {
                                    Logger_AddLogMessage(string.Format("QueryParkingTariffsGuestUser: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                }

                            }
                            else
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryParkingTariffsGuestUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }

                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryParkingTariffsGuestUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryParkingTariffsGuestUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }

        [WebMethod]
        public string QueryParkingTariffsGuestUserJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("QueryParkingTariffsGuestUserJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryParkingTariffsGuestUser(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("QueryParkingTariffsGuestUserJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryParkingTariffsGuestUserJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }


     

        private ResultType QueryParkingTariffsInternal(string xmlIn, SortedList parametersIn, ref USER oUser, string strAppVersion, decimal? dlang, bool bCheckPlate, ref SortedList parametersOut)
        {
            parametersOut = null;
            ResultType rt = ResultType.Result_OK;

            try
            {

                string strCulture = GetCultureFromLangID(dlang);
                ulong ulAppVersion = AppUtilities.AppVersion(strAppVersion);


                parametersOut = new SortedList();
                parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();


                if (ulAppVersion >= _VERSION_999_99_9)
                {
                    rt = ResultType.Result_Error_Invalid_Input_Parameter;
                    return rt;
                }


                decimal? dLatitude = null;
                decimal? dLongitude = null;

                NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                numberFormatProvider.NumberDecimalSeparator = ".";

                string sValue = "";

                try
                {
                    sValue = parametersIn["gps_lat"].ToString();
                    if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                    decimal dTryLatitude = Convert.ToDecimal(parametersIn["gps_lat"].ToString(), numberFormatProvider);
                    dLatitude = dTryLatitude;
                }
                catch
                {
                    dLatitude = null;
                }

                try
                {
                    sValue = parametersIn["gps_long"].ToString();
                    if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                    decimal dTryLongitude = Convert.ToDecimal(parametersIn["gps_long"].ToString(), numberFormatProvider);
                    dLongitude = dTryLongitude;
                }
                catch
                {
                    dLongitude = null;
                }

                string strPlate = "";

                if (bCheckPlate)
                {
                    strPlate = NormalizePlate(parametersIn["p"].ToString());

                    if (strPlate.Length == 0)
                    {
                        rt = ResultType.Result_Error_Invalid_Input_Parameter;
                        return rt;
                    }
                }


                string strPlateSharing = infraestructureRepository.GetParameterValue("PlateSharing");
                bool bPlateSharing = true;

                if (!string.IsNullOrEmpty(strPlateSharing))
                {
                    bPlateSharing = (strPlateSharing != "0");
                }

                bool bIsShopKeeperOperation = false;
                if (parametersIn.ContainsKey("isshopkeeperoperation"))
                {
                    bIsShopKeeperOperation = Convert.ToInt32(parametersIn["isshopkeeperoperation"].ToString()) == 1;
                }

                decimal? dGroupId = Helpers.ValidateInputParameterToDecimal(parametersIn, ConstantsEntity.PARAMETER_GROUP_ID);
                GROUP oGroup = null;
                DateTime? dtgroupDateTime = null;

                if (!geograficAndTariffsRepository.getGroup(dGroupId, ref oGroup, ref dtgroupDateTime))
                {
                    rt = ResultType.Result_Error_Invalid_Input_Parameter;
                    return rt;
                }


                if (((ParkWSSignatureType)oGroup.INSTALLATION.INS_PARK_WS_SIGNATURE_TYPE) != ParkWSSignatureType.pst_bsm)
                {

                    IEnumerable<stTariff> tariffs;
                    string strXmlTariffs = "";

                    if (bCheckPlate)
                    {
                        tariffs = geograficAndTariffsRepository.getPlateTariffsInGroup(strPlate, oGroup.GRP_ID, dLatitude, dLongitude, dlang);
                    }
                    else
                    {
                        tariffs = new List<stTariff>();
                    }


                    if (tariffs.Count() == 0)
                    {

                        if (ulAppVersion < _VERSION_1_5)
                        {
                            tariffs = geograficAndTariffsRepository.getGroupTariffs(oGroup.GRP_ID, dlang);
                        }
                        else
                        {
                            tariffs = geograficAndTariffsRepository.getGroupTariffs(oGroup.GRP_ID, dLatitude, dLongitude, dlang);
                        }

                        if (tariffs.Count() == 0)
                        {
                            rt = ResultType.Result_Error_Tariffs_Not_Available;
                            if (oGroup.INSTALLATION.LITERAL10 != null)
                            {
                                parametersOut["custom_message"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.LITERAL10.LIT_ID, strCulture);
                            }
                            return rt;
                        }
                    }


                    if (ulAppVersion < _VERSION_999_99_9)
                    {

                        MobileOS oMobileOS = MobileOS.Android;
                        try
                        {
                            int iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                            oMobileOS = (MobileOS)iOSID;
                        }
                        catch
                        {
                            Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logERROR);

                        }
                        if (oMobileOS.Equals(MobileOS.Android) || oMobileOS.Equals(MobileOS.iOS) || oUser==null || oUser.USR_IS_ANONYMOUS==1)
                        {
                            tariffs = tariffs.Where(x => x.tariffType.Equals(TariffType.RegularTariff));
                        }

                    }

                    tariffs = tariffs.Where(tariff => (tariff.ulMinVersion == 0 || tariff.ulMinVersion <= ulAppVersion) &&
                                                        (tariff.ulMaxVersion == 0 || tariff.ulMaxVersion > ulAppVersion));

                    tariffs = tariffs.Where(tariff => tariff.bUserSelectable);

                    List<LiteralTariffLanguage> oListLiteralsTariffByLanguage = null;
                    if (tariffs != null && tariffs.Count() > 0)
                    {
                        oListLiteralsTariffByLanguage = customersRepository.GetLiteralsTariffByLanguage(Convert.ToDecimal(parametersIn[ConstantsEntity.PARAMETER_LANG]), tariffs); customersRepository.GetLiteralsTariffByLanguage(Convert.ToDecimal(parametersIn["lang"]), tariffs);
                    }

                    //***************************************************************************************
                    //                      Verificamos si existe algun servicio
                    //***************************************************************************************
                    TypeTypeServicesEnum oTypeTypeServicesEnum = TypeTypeServicesEnum.None;
                    IEnumerable<stTariff> tariffsServices = new List<stTariff>();
                    IEnumerable<stTariff> tariffsNoServices = null;
                    IEnumerable<stTariff> tariffsIntersec = null;

                    if (ulAppVersion >= _VERSION_3_4)
                    {
                        if ((bCheckPlate) && (oUser != null))
                        {
                            List<SERVICES_USER_PLATE> oServicesUserPlateList = ExistServiceType2(oUser, strPlate, oGroup.GRP_INS_ID, (dtgroupDateTime.HasValue ? dtgroupDateTime.Value : DateTime.Now));
                            if (oServicesUserPlateList.Count > 0)
                            {
                                tariffsServices = tariffs.Where(x => x.tariffServiceType.HasValue && oServicesUserPlateList.Any(y => y.SERUP_SERTYP_ID.Value.Equals(x.tariffServiceType))).ToList();
                            }
                        }
                    }

                    tariffsNoServices = tariffs.Where(x => !x.tariffServiceType.HasValue);
                    tariffsIntersec = IntersectTariff(tariffsNoServices.ToList(), tariffsServices.ToList());


                    if (tariffsIntersec.Count() == 0)
                    {
                        rt = ResultType.Result_Error_Tariffs_Not_Available;
                        if (oGroup.INSTALLATION.LITERAL10 != null)
                        {
                            parametersOut["custom_message"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.LITERAL10.LIT_ID, strCulture);
                        }
                        return rt;
                    }


                    IEnumerable<stTariff> tariffsIntersecFiltered = null;
                    ThirdPartyOperation oThirdPartyOperation = new ThirdPartyOperation();

                    int iWSTimeout = infraestructureRepository.GetRateWSTimeout(oGroup.INSTALLATION.INS_ID);
                    long lEllapsedTime = 0;

                    switch ((ParkWSSignatureType)oGroup.INSTALLATION.INS_PARK_WS_SIGNATURE_TYPE)
                    {
                        case ParkWSSignatureType.pst_standard_time_steps:
                        case ParkWSSignatureType.pst_standard_amount_steps:
                            {
                                rt = oThirdPartyOperation.StandardQueryAvailableTariffs(0, strPlate, dtgroupDateTime.Value, oGroup, tariffsIntersec, iWSTimeout, ref tariffsIntersecFiltered, out lEllapsedTime);

                                if ((rt != ResultType.Result_OK) && (rt != ResultType.Result_Error_Tariffs_Not_Available))
                                {
                                    tariffsIntersecFiltered = tariffsIntersec;
                                    rt = ResultType.Result_OK;
                                }
                                else if (rt == ResultType.Result_Error_Tariffs_Not_Available)
                                {
                                    if (oGroup.INSTALLATION.LITERAL10 != null)
                                    {
                                        parametersOut["custom_message"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.LITERAL10.LIT_ID, strCulture);
                                    }
                                    return rt;
                                }

                            }
                            break;

                        default:
                            tariffsIntersecFiltered = tariffsIntersec;
                            break;
                    }



                    IEnumerable<stTariff> tariffsResult = new List<stTariff>();
                    foreach (stTariff oTariff in tariffsIntersecFiltered)
                    {
                       

                        switch (oTariff.tariffShopkeeperBehavior)
                        {

                            case TariffShopkeeperBehavior.AllUsers:
                                ((List<stTariff>)tariffsResult).Add(oTariff);
                                break;

                            case TariffShopkeeperBehavior.OnlyUsers:
                                if (!bIsShopKeeperOperation)
                                {
                                    ((List<stTariff>)tariffsResult).Add(oTariff);
                                }
                                break;

                            case TariffShopkeeperBehavior.OnlyShopkeepers:
                                if (bIsShopKeeperOperation)
                                {
                                    ((List<stTariff>)tariffsResult).Add(oTariff);
                                }
                                break;

                        }

                    }


                    if (tariffsResult.Count() == 0)
                    {
                        rt = ResultType.Result_Error_Tariffs_Not_Available;
                        if (oGroup.INSTALLATION.LITERAL10 != null)
                        {
                            parametersOut["custom_message"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.LITERAL10.LIT_ID, strCulture);
                        }
                        return rt;
                    }




                    if (!GenerateXMLTariffs(tariffsResult, oListLiteralsTariffByLanguage, ulAppVersion, /*bServicePlateDUM, bServicePlatePMR, */oTypeTypeServicesEnum, ref strXmlTariffs))
                    {
                        rt = ResultType.Result_Error_Generic;
                        return rt;
                    }



                    parametersOut["ltar"] = strXmlTariffs;
                }

            }
            catch //(Exception e)
            {
                rt = ResultType.Result_Error_Generic;

            }

            return rt;
        }



        /*
         *  QueryParkingOperationWithTimeSteps
         *  
        <ipark_in>
            <u>user login or generated user id for anonymous operations</u>
            <p>plate</p>
            <d>date in format hh24missddMMYY</d>
            <g>parking sector</g>
            <ad>tariff type selected: NULL, ROTATION, RESIDENTS, VIPS</ad>
         * -- Cell Phne OS Version
            <ah>authentication hash</ah>
        </ ipark _in>
         * 
         * 
        <ipark_out>
            <r>Result of the method</r>
            <ad>tariff type to apply: in Bilbao for example: 4 (ROTATION), 5 (RESIDENTS), 6 VIPS</ad>
            <q1>minimum amount to pay in Cents</q1>
            <q2>maximum amount to pay in Cents</q2>
            <t1>minimum amount of time to park in minutes</q1>
            <t2> minimum amount of time to park in minutes </q2>
            <di>Initial date (in format hh24missddMMYY) of the parking: the same as the input date if the operation is a first parking, or the date of the end of parking operations chain if the operation is an extension</di>

            <steps> list of tariff steps starting in the minimum and finishing in maximum
	            The difference in time between steps will be a parameter. I.e. 5 minutes.
	            <step id=”1”>
		            <t>=minimum time (t1)</t>
		            <q>=minimum quantity(q1)</q>
		            <d>=<di>+<t>(resulting tariff date)</d>
	            </step>
	            <step id=”2”>
		            <t>t1+5 minutes</t>
		            <q>cost of time given in cents </q>
                    <d>=<di>+<t>(resulting tariff date)</d>
	            </step>

		            ….


	            <step id=”n”>
		            <t>=maximum time (t2)</t>
		            <q>=maximum quantity(q2)</q>
		            <d>=<di>+<t>(resulting tariff date)</d>
	            </step>
            </steps>
            <o>Operation Type: 1: First parking: 2: extension</o>
            <aq>Amount of Cents accumulated in the current parking chain (first parking plus all the extensions) linked to the current operation</aq>
            <at> Amount of minutes accumulated in the current parking chain (first parking plus all the extensions) linked to the current operation </at>
        </ipark_out>
         * 
         * 
        Result of the method:
        a.	1: Parking of extension is possible and the restrictions come after this tag.
        b.	-1: Invalid authentication hash
        c.	-2: The plate has used the maximum amount of time/money in the sector, so the extension is not possible. In Bilbao this depends on the colour of the zone and the tariff type.
        d.	-3: The plate has not waited enough to return to the current sector.
        e.	-9: Generic Error (for example database or execution error.)
       
         *
         */
        [WebMethod]
        public string QueryParkingOperationWithTimeSteps(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {                
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["p"] == null) ||
                        (parametersIn["d"] == null) ||
                        (parametersIn["g"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            // ***
                            //parametersIn["ad"] = 300105;
                            /*parametersIn["BSMcityId"] = 1;
                            parametersIn["BSMconfigurationId"] = 2;
                            parametersIn["BSMzoneTypeId"] = 1;
                            parametersIn["BSMsegmentId"] = 1430;*/
                            // ***

                            DateTime dt;
                            try
                            {
                                dt = DateTime.ParseExact(parametersIn["d"].ToString(), "HHmmssddMMyy",
                                  CultureInfo.InvariantCulture);
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }


                            decimal? dGroupId = null;

                            try
                            {
                                decimal dTryGroupId = Convert.ToDecimal(parametersIn["g"].ToString());
                                dGroupId = dTryGroupId;
                            }
                            catch
                            {
                                dGroupId = null;
                            }

                            GROUP oGroup = null;
                            DateTime? dtinstDateTime = null;
                            DateTime? dtQueryInstDateTime = null;


                            if (!geograficAndTariffsRepository.getGroup(dGroupId,
                                                                        ref oGroup,
                                                                        ref dtinstDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            decimal? dStreetSectionId = null;
                            try
                            {
                                decimal dTryId = Convert.ToDecimal(parametersIn["sts"].ToString());
                                dStreetSectionId = dTryId;
                            }
                            catch
                            {
                                dStreetSectionId = null;
                            }
                            STREET_SECTION oStreetSection = null;
                            if (dStreetSectionId.HasValue)
                            {
                                if (!geograficAndTariffsRepository.GetStreetSection(dStreetSectionId.Value, out oStreetSection) &&
                                    oStreetSection.INSTALLATION.INS_ID != oGroup.INSTALLATION.INS_ID)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }


                            if (dtinstDateTime.HasValue)
                            {
                                string sQueryParkingOffset = infraestructureRepository.GetParameterValueNoCache(string.Format("QueryParkingOffset_{0}", oGroup.GRP_INS_ID));
                                if (string.IsNullOrEmpty(sQueryParkingOffset))
                                    sQueryParkingOffset = infraestructureRepository.GetParameterValueNoCache("QueryParkingOffset");
                                if (!string.IsNullOrEmpty(sQueryParkingOffset))
                                {
                                    try
                                    {
                                        int iOffset = Convert.ToInt32(sQueryParkingOffset);
                                        dtinstDateTime = dtinstDateTime.Value.AddMinutes(iOffset);
                                        Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps datetime offset applied: new date={0:yyyy/MM/dd hh:mm:ss}", dtinstDateTime), LogLevels.logINFO);
                                    }
                                    catch (Exception)
                                    {
                                        Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error applying datetime offset: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logWARN);
                                    }
                                }
                            }

                            dtQueryInstDateTime = dtinstDateTime;

                            DateTime? dtIni;
                            try
                            {
                                dtIni = DateTime.ParseExact(parametersIn["di"].ToString(), "HHmmssddMMyy",
                                                            CultureInfo.InvariantCulture);
                            }
                            catch
                            {
                                dtIni = null;
                            }
                            if (dtIni.HasValue && dtQueryInstDateTime.HasValue)
                            {
                                dtQueryInstDateTime = dtIni;
                            }


                            TARIFF oTariff = null;
                            TARIFFS_IN_GROUP oTariffInGroup = null;
                            if (parametersIn["ad"] != null)
                            {
                                int iTariff = Convert.ToInt32(parametersIn["ad"]);
                                if (oGroup.INSTALLATION.INS_MAP_SCREEN_TYPE != 1)
                                {
                                    try
                                    {
                                        oTariffInGroup = oGroup.TARIFFS_IN_GROUPs.Where(r => r.TARGR_TAR_ID == iTariff).First();
                                        oTariff = oTariffInGroup.TARIFF;
                                    }
                                    catch
                                    {

                                        foreach (GROUPS_TYPES_ASSIGNATION oAssigns in oGroup.GROUPS_TYPES_ASSIGNATIONs)
                                        {
                                            try
                                            {
                                                oTariffInGroup = oAssigns.GROUPS_TYPE.TARIFFS_IN_GROUPs.Where(r => r.TARGR_TAR_ID == iTariff).First();
                                                oTariff = oTariffInGroup.TARIFF;
                                                break;
                                            }
                                            catch { }
                                        }

                                        if (oTariff == null)
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                            Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                    }
                                }
                                else
                                {
                                    oTariff = oGroup.INSTALLATION.TARIFFs.Where(t => t.TAR_ID == iTariff).FirstOrDefault();
                                    if (oTariff == null)
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }
                            }

                            string strPlate = NormalizePlate(parametersIn["p"].ToString());

                            if (strPlate.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }

                            List<string> oAdditionalPlates = new List<string>();
                            string sKey = "";
                            string sAddPlate = "";
                            for (int i = 2; i <= 10; i += 1)
                            {
                                sKey = string.Format("p{0}", i);
                                if (parametersIn[sKey] != null && parametersIn[sKey].ToString() != "")
                                {
                                    sAddPlate = NormalizePlate(parametersIn[sKey].ToString());
                                    if (sAddPlate.Length > 0)
                                        oAdditionalPlates.Add(sAddPlate);
                                }
                            }

                            Dictionary<int, List<string>> oExtraPlates = GetExtraPlatesFromParamsIn(parametersIn);

                            string sAdditionalParams = null;
                            int? iBSMCityId;
                            int? iBSMConfigurationId;
                            int? iBSMZoneTypeId;
                            int? iBSMSegmentId;
                            try
                            {
                                int iTryId = Convert.ToInt32(parametersIn["BSMcityId"].ToString());
                                iBSMCityId = iTryId;
                                iTryId = Convert.ToInt32(parametersIn["BSMconfigurationId"].ToString());
                                iBSMConfigurationId = iTryId;
                                iTryId = Convert.ToInt32(parametersIn["BSMzoneTypeId"].ToString());
                                iBSMZoneTypeId = iTryId;
                                iTryId = Convert.ToInt32(parametersIn["BSMsegmentId"].ToString());
                                iBSMSegmentId = iTryId;
                            }
                            catch
                            {
                                iBSMCityId = null;
                                iBSMConfigurationId = null;
                                iBSMZoneTypeId = null;
                                iBSMSegmentId = null;
                            }

                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();

                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion, ref dSourceApp);



                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            ulong ulAppVersion = AppUtilities.AppVersion(strAppVersion);


                            string strPlateSharing = infraestructureRepository.GetParameterValue("PlateSharing");
                            bool bPlateSharing = true;

                            if (!string.IsNullOrEmpty(strPlateSharing))
                            {
                                bPlateSharing = (strPlateSharing != "0");
                            }

                            bool bIsShopKeeperOperation = false;
                            if (parametersIn.ContainsKey("isshopkeeperoperation"))
                            {
                                bIsShopKeeperOperation = Convert.ToInt32(parametersIn["isshopkeeperoperation"].ToString()) == 1;
                            }

                            string strQPlusVATQs = "";


                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                            parametersOut["cityShortDesc"] = oGroup.INSTALLATION.INS_SHORTDESC;
                            parametersOut["time_bal"] = oUser.USR_TIME_BALANCE.ToString();
                            parametersOut["refund_balance_type"] = oUser.USR_REFUND_BALANCE_TYPE.ToString();
                            parametersOut["utc_offset"] = geograficAndTariffsRepository.GetInstallationUTCOffSetInMinutes(oGroup.INSTALLATION.INS_ID);

                            double dChangeToApply = 1.0;
                            double dChangeFee = 0;
                            string strAuthId = "";
                            decimal? dBonMlt = null;
                            decimal? dBonExtMlt = null;
                            string sVehicleType = null;
                            List<SortedList> oAdditionals = new List<SortedList>();

                            Dictionary<int, List<SortedList>> oExtraParametersOut = null;

                            if (oGroup.INSTALLATION.CURRENCy.CUR_ISO_CODE != infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)))
                            {
                                dChangeToApply = GetChangeToApplyFromInstallationCurToUserCur(oGroup.INSTALLATION, oUser);
                                if (dChangeToApply < 0)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                                numberFormatProvider.NumberDecimalSeparator = ".";
                                parametersOut["chng"] = dChangeToApply.ToString(numberFormatProvider);

                            }

                            if ((oTariff.TAR_BEHAVIOR ?? 0) == (int)ParkingMode.StartStop)
                            {
                                OPERATION oOperation = null;
                                if (customersRepository.ExistStartedParkingOperation(oUser.USR_ID, strPlate, null, null, dtQueryInstDateTime.Value, out oOperation))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_StartedOperation_Exist);
                                    Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }

                            var session = oUser.MOBILE_SESSIONs.Where(r => r.MOSE_SESSIONID == parametersIn["SessionID"].ToString()
                                                              && r.MOSE_USR_ID == oUser.USR_ID).First();

                            ThirdPartyOperation oThirdPartyOperation = new ThirdPartyOperation();

                            int iOSType = 0;
                            if (parametersIn["OSID"] != null && parametersIn["OSID"].ToString() != "")
                            {
                                iOSType = Convert.ToInt32(parametersIn["OSID"]);
                            }
                            else
                            {
                                iOSType = session.MOSE_OS.HasValue ? session.MOSE_OS.Value : (int)MobileOS.Web;
                            }

                            bool bHasPaymentMean = false;
                            int? iMaxAmountAllowedToPay = MaxAmountAllowedToPay(ref oUser, iOSType, dInsId.Value, out bHasPaymentMean);

                            decimal? dApplyCampaingDiscount = null;
                            CAMPAING oCampaing = null;
                            int? indexCampaing = null;
                            int? iAmountToSubstract = null;
                            int? iMinimumTimeToApply = null;
                            int? iFreeMinutes = null;
                            bool bApplyCampaingSchemaFour = false;
                            bool bApplyCampaingSchemaSix = false;
                            bool bApplyCampaingSchemaEight = false;

                            string sCulture = (session != null && !string.IsNullOrEmpty(session.MOSE_CULTURE_LANG) ? session.MOSE_CULTURE_LANG : "en-US");

                            if ((oUser.USR_IS_ANONYMOUS ?? 0) == 0)
                            {

                                bApplyCampaingSchemaEight = ApplyCampaingSchemaEight(dtinstDateTime.Value, oUser, oGroup, strPlate, session, dSourceApp, ref iFreeMinutes, ref iMinimumTimeToApply, ref oCampaing);

                                if (!bApplyCampaingSchemaEight)
                                {                                 
                                    //Anonymous users doesn't have access to Campaings
                                    bApplyCampaingSchemaSix = ApplyCampaingSchemaSix(dtinstDateTime.Value, oUser, oGroup, session, dSourceApp, ref dApplyCampaingDiscount, ref oCampaing);

                                    if (!bApplyCampaingSchemaSix)
                                    {
                                        bApplyCampaingSchemaFour = ApplyCampaingSchemaFour(dtinstDateTime.Value, oUser, oGroup, dSourceApp, ref dApplyCampaingDiscount, ref oCampaing, ref indexCampaing);
                                    }
                                }
                            }

                            int iWSTimeout = infraestructureRepository.GetRateWSTimeout(oGroup.INSTALLATION.INS_ID);
                            long lEllapsedTime = 0;
                            decimal? dTarId = null;
                            string sCustomErrorMessage = "";

                            switch ((ParkWSSignatureType)oGroup.INSTALLATION.INS_PARK_WS_SIGNATURE_TYPE)
                            {
                                case ParkWSSignatureType.pst_test:
                                    {
                                        string strAd = "";
                                        if (parametersIn["g"].ToString() == "3")
                                        {
                                            strAd = "1";
                                        }
                                        else if (parametersIn["g"].ToString() == "4")
                                        {
                                            strAd = "2";
                                        }
                                        else if ((parametersIn["g"].ToString() == "2") && (parametersIn["ad"] == null))
                                        {
                                            strAd = "2";
                                        }

                                        else if ((parametersIn["g"].ToString() == "2") && (parametersIn["ad"].ToString() == "2"))
                                        {
                                            strAd = "2";
                                        }
                                        else if ((parametersIn["g"].ToString() == "2") && (parametersIn["ad"].ToString() == "3"))
                                        {
                                            strAd = "3";
                                        }
                                        else if (parametersIn["g"].ToString() == "7")
                                        {
                                            strAd = "4";
                                        }
                                        else if (parametersIn["g"].ToString() == "8")
                                        {
                                            strAd = "5";
                                        }
                                        else if ((parametersIn["g"].ToString() == "6") && (parametersIn["ad"] == null))
                                        {
                                            strAd = "5";
                                        }

                                        else if ((parametersIn["g"].ToString() == "6") && (parametersIn["ad"].ToString() == "5"))
                                        {
                                            strAd = "5";
                                        }
                                        else if ((parametersIn["g"].ToString() == "6") && (parametersIn["ad"].ToString() == "6"))
                                        {
                                            strAd = "6";
                                        }

                                        else if (parametersIn["g"].ToString() == "11")
                                        {
                                            strAd = "7";
                                        }
                                        else if (parametersIn["g"].ToString() == "12")
                                        {
                                            strAd = "8";
                                        }
                                        else if ((parametersIn["g"].ToString() == "10") && (parametersIn["ad"] == null))
                                        {
                                            strAd = "8";
                                        }

                                        else if ((parametersIn["g"].ToString() == "10") && (parametersIn["ad"].ToString() == "8"))
                                        {
                                            strAd = "8";
                                        }
                                        else if ((parametersIn["g"].ToString() == "10") && (parametersIn["ad"].ToString() == "9"))
                                        {
                                            strAd = "9";
                                        }
                                        else if (((parametersIn["g"].ToString() == "14") ||
                                                (parametersIn["g"].ToString() == "15") ||
                                                (parametersIn["g"].ToString() == "16") ||
                                                (parametersIn["g"].ToString() == "17") ||
                                                (parametersIn["g"].ToString() == "18") ||
                                                (parametersIn["g"].ToString() == "19") ||
                                                (parametersIn["g"].ToString() == "20")) &&
                                                ((parametersIn["ad"].ToString() == "10") ||
                                                (parametersIn["ad"].ToString() == "11")))
                                        {
                                            strAd = parametersIn["ad"].ToString();
                                        }
                                        else if (((parametersIn["g"].ToString() == "14") ||
                                                (parametersIn["g"].ToString() == "15") ||
                                                (parametersIn["g"].ToString() == "16") ||
                                                (parametersIn["g"].ToString() == "17") ||
                                                (parametersIn["g"].ToString() == "18") ||
                                                (parametersIn["g"].ToString() == "19") ||
                                                (parametersIn["g"].ToString() == "20")) &&
                                                (parametersIn["ad"].ToString() == null))
                                        {
                                            strAd = "10";
                                        }
                                        else
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                            Logger_AddLogMessage(string.Format("QueryParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                        int i = 0;

                                        ChargeOperationsType oOperationType = ChargeOperationsType.ParkingOperation;

                                        int iQ = 0;
                                        int iQFEE = 0;
                                        decimal dQFEE = 0;
                                        int iQFEEChange = 0;
                                        decimal dQVAT = 0;
                                        int iQTotal = 0;
                                        int iQTotalChange = 0;
                                        int iQSubTotal = 0;
                                        int iQSubTotalChange = 0;

                                        decimal dVAT1;
                                        decimal dVAT2;
                                        int iPartialVAT1;
                                        decimal dPercFEE;
                                        decimal dPercFEETopped;
                                        int iPartialPercFEE;
                                        decimal dFixedFEE;
                                        int iPartialFixedFEE;
                                        int iPartialPercFEEVAT;
                                        int iPartialFixedFEEVAT;
                                        IsTAXMode eTaxMode = IsTAXMode.IsNotTaxVATForward;

                                        int? iPaymentTypeId = null;
                                        int? iPaymentSubtypeId = null;
                                        if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                                        {
                                            iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                                            iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                                        }
                                        int? iTariffType = null;
                                        if (oTariff != null)
                                            iTariffType = oTariff.TAR_TYPE;
                                        if (!customersRepository.GetFinantialParams(oUser, oGroup.INSTALLATION.INS_ID, (PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE, iPaymentTypeId, iPaymentSubtypeId, oOperationType, iTariffType,
                                                                                    out dVAT1, out dVAT2, out dPercFEE, out dPercFEETopped, out dFixedFEE, out eTaxMode))
                                        {
                                            //rtRes = ResultType.Result_Error_Generic;
                                            Logger_AddLogMessage("TestQueryParking::Error getting finantial parameters", LogLevels.logERROR);
                                        }

                                        if ((strAd == "1") || (strAd == "4") || (strAd == "7") || (strAd == "10"))
                                        {
                                            parametersOut["ad"] = strAd;
                                            parametersOut["q1"] = "100";
                                            parametersOut["q2"] = "1000";
                                            parametersOut["t1"] = "30";
                                            parametersOut["t2"] = "120";
                                            parametersOut["di"] = dtQueryInstDateTime.Value.ToString("HHmmssddMMyy");
                                            parametersOut["o"] = "1";
                                            parametersOut["aq"] = "0";
                                            parametersOut["at"] = "0";
                                            parametersOut["cur"] = oGroup.INSTALLATION.CURRENCy.CUR_ISO_CODE;

                                            if (oGroup.INSTALLATION.CURRENCy.CUR_ISO_CODE != infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)))
                                            {
                                                int iQChange = ChangeQuantityFromInstallationCurToUserCur(Convert.ToInt32(parametersOut["q1"]),
                                                                dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                                                parametersOut["qch1"] = iQChange.ToString();
                                                iQChange = ChangeQuantityFromInstallationCurToUserCur(Convert.ToInt32(parametersOut["q2"]),
                                                                dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                                                parametersOut["qch2"] = iQChange.ToString();

                                            }



                                            TimeSpan ts1 = new TimeSpan(0, 25, 0);
                                            DateTime dtCurr = dtQueryInstDateTime.Value + ts1;

                                            for (i = 30; i <= 120; i += 5)
                                            {
                                                iQ = 100 + (i - 30) * 10;
                                                TimeSpan ts = new TimeSpan(0, 5, 0);
                                                dtCurr = dtCurr + ts;

                                                iQTotal = customersRepository.CalculateFEE(ref iQ, dVAT1, dVAT2, dPercFEE, dPercFEETopped, dFixedFEE, eTaxMode,
                                                                                           out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE,
                                                                                           out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                                                dQFEE = Math.Round(iQ * dPercFEE, MidpointRounding.AwayFromZero);
                                                if (dPercFEETopped > 0 && iQFEE > dPercFEETopped) dQFEE = dPercFEETopped;
                                                dQFEE += dFixedFEE;
                                                iQFEE = Convert.ToInt32(Math.Round(dQFEE, MidpointRounding.AwayFromZero));

                                                dQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                                iQSubTotal = iQ + iQFEE;

                                                if (oGroup.INSTALLATION.CURRENCy.CUR_ISO_CODE != infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)))
                                                {
                                                    int iQChange = ChangeQuantityFromInstallationCurToUserCur(iQ,
                                                                    dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                                                    iQFEEChange = ChangeQuantityFromInstallationCurToUserCur(iQFEE, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);
                                                    iQSubTotalChange = ChangeQuantityFromInstallationCurToUserCur(iQSubTotal, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);
                                                    iQTotalChange = ChangeQuantityFromInstallationCurToUserCur(iQTotal, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                                                    parametersOut["steps"] = parametersOut["steps"] +
                                                                        string.Format("<step json:Array='true'><t>{0}</t><q>{1}</q><qch>{2}</qch><d>{3:HHmmssddMMyy}</d><q_fee>{4}</q_fee><q_vat>{5}</q_vat><q_subtotal>{6}</q_subtotal><q_total>{7}</q_total><qch_fee>{8}</qch_fee>qch_subtotal>{9}</qch_subtotal><qch_total>{10}</qch_total></step>",
                                                                            i.ToString(),
                                                                            iQ.ToString(),
                                                                            iQChange,
                                                                            dtCurr,
                                                                            iQFEE, dQVAT, iQSubTotal, iQTotal,
                                                                            iQFEEChange, iQSubTotalChange, iQTotalChange);
                                                }
                                                else
                                                {
                                                    parametersOut["steps"] = parametersOut["steps"] +
                                                                        string.Format("<step json:Array='true'><t>{0}</t><q>{1}</q><d>{2:HHmmssddMMyy}</d><q_fee>{3}</q_fee><q_vat>{4}</q_vat><q_subtotal>{5}</q_subtotal><q_total>{6}</q_total></step>",
                                                                            i.ToString(),
                                                                            iQ.ToString(),
                                                                            dtCurr,
                                                                            iQFEE, dQVAT, iQSubTotal, iQTotal);
                                                }

                                            }

                                        }
                                        if ((strAd == "2") || (strAd == "5") || (strAd == "8") || (strAd == "11"))
                                        {
                                            parametersOut["ad"] = strAd;
                                            parametersOut["q1"] = "30";
                                            parametersOut["q2"] = "480";
                                            parametersOut["t1"] = "30";
                                            parametersOut["t2"] = "480";
                                            parametersOut["di"] = dtQueryInstDateTime.Value.ToString("HHmmssddMMyy");
                                            parametersOut["o"] = "1";
                                            parametersOut["aq"] = "0";
                                            parametersOut["at"] = "0";
                                            parametersOut["steps"] = "";
                                            parametersOut["cur"] = oGroup.INSTALLATION.CURRENCy.CUR_ISO_CODE;

                                            if (oGroup.INSTALLATION.CURRENCy.CUR_ISO_CODE != infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)))
                                            {
                                                int iQChange = ChangeQuantityFromInstallationCurToUserCur(Convert.ToInt32(parametersOut["q1"]),
                                                                dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                                                parametersOut["qch1"] = iQChange.ToString();
                                                iQChange = ChangeQuantityFromInstallationCurToUserCur(Convert.ToInt32(parametersOut["q2"]),
                                                                dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                                                parametersOut["qch2"] = iQChange.ToString();

                                            }

                                            TimeSpan ts1 = new TimeSpan(0, 25, 0);
                                            DateTime dtCurr = dtQueryInstDateTime.Value + ts1;

                                            for (i = 30; i <= 480; i += 5)
                                            {
                                                iQ = i;
                                                TimeSpan ts = new TimeSpan(0, 5, 0);
                                                dtCurr = dtCurr + ts;

                                                iQTotal = customersRepository.CalculateFEE(ref iQ, dVAT1, dVAT2, dPercFEE, dPercFEETopped, dFixedFEE, eTaxMode,
                                                                                           out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE,
                                                                                           out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                                                dQFEE = Math.Round(iQ * dPercFEE, MidpointRounding.AwayFromZero);
                                                if (dPercFEETopped > 0 && iQFEE > dPercFEETopped) dQFEE = dPercFEETopped;
                                                dQFEE += dFixedFEE;
                                                iQFEE = Convert.ToInt32(Math.Round(dQFEE, MidpointRounding.AwayFromZero));

                                                dQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                                iQSubTotal = iQ + iQFEE;

                                                if (oGroup.INSTALLATION.CURRENCy.CUR_ISO_CODE != infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)))
                                                {
                                                    int iQChange = ChangeQuantityFromInstallationCurToUserCur(iQ,
                                                                    dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                                                    iQFEEChange = ChangeQuantityFromInstallationCurToUserCur(iQFEE, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);
                                                    iQSubTotalChange = ChangeQuantityFromInstallationCurToUserCur(iQSubTotal, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);
                                                    iQTotalChange = ChangeQuantityFromInstallationCurToUserCur(iQTotal, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                                                    parametersOut["steps"] = parametersOut["steps"] +
                                                                        string.Format("<step json:Array='true'><t>{0}</t><q>{1}</q><qch>{2}</qch><d>{3:HHmmssddMMyy}</d><q_fee>{4}</q_fee><q_vat>{5}</q_vat><q_subtotal>{6}</q_subtotal><q_total>{7}</q_total><qch_fee>{8}</qch_fee>qch_subtotal>{9}</qch_subtotal><qch_total>{10}</qch_total></step>",
                                                                            i.ToString(),
                                                                            iQ.ToString(),
                                                                            iQChange,
                                                                            dtCurr,
                                                                            iQFEE, dQVAT, iQSubTotal, iQTotal,
                                                                            iQFEEChange, iQSubTotalChange, iQTotalChange);

                                                }
                                                else
                                                {
                                                    parametersOut["steps"] = parametersOut["steps"] +
                                                                        string.Format("<step json:Array='true'><t>{0}</t><q>{1}</q><d>{2:HHmmssddMMyy}</d><q_fee>{3}</q_fee><q_vat>{4}</q_vat><q_subtotal>{5}</q_subtotal><q_total>{6}</q_total></step>",
                                                                            i.ToString(),
                                                                            iQ.ToString(),
                                                                            dtCurr,
                                                                            iQFEE, dQVAT, iQSubTotal, iQTotal);


                                                }
                                            }

                                        }
                                        if ((strAd == "3") || (strAd == "6") || (strAd == "9"))
                                        {
                                            parametersOut["ad"] = strAd;
                                            parametersOut["q1"] = "50";
                                            parametersOut["q2"] = "50";
                                            parametersOut["t1"] = "1440";
                                            parametersOut["t2"] = "1440";
                                            parametersOut["di"] = dtQueryInstDateTime.Value.ToString("HHmmssddMMyy");
                                            parametersOut["o"] = "1";
                                            parametersOut["aq"] = "0";
                                            parametersOut["at"] = "0";
                                            parametersOut["cur"] = oGroup.INSTALLATION.CURRENCy.CUR_ISO_CODE;

                                            if (oGroup.INSTALLATION.CURRENCy.CUR_ISO_CODE != infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)))
                                            {
                                                int iQChange = ChangeQuantityFromInstallationCurToUserCur(Convert.ToInt32(parametersOut["q1"]),
                                                                dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                                                parametersOut["qch1"] = iQChange.ToString();
                                                iQChange = ChangeQuantityFromInstallationCurToUserCur(Convert.ToInt32(parametersOut["q2"]),
                                                                dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                                                parametersOut["qch2"] = iQChange.ToString();

                                            }


                                            TimeSpan ts = new TimeSpan(0, 1440, 0);

                                            iQ = 50;

                                            iQTotal = customersRepository.CalculateFEE(ref iQ, dVAT1, dVAT2, dPercFEE, dPercFEETopped, dFixedFEE, eTaxMode,
                                                                                       out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE,
                                                                                       out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                                            dQFEE = Math.Round(iQ * dPercFEE, MidpointRounding.AwayFromZero);
                                            if (dPercFEETopped > 0 && iQFEE > dPercFEETopped) dQFEE = dPercFEETopped;
                                            dQFEE += dFixedFEE;
                                            iQFEE = Convert.ToInt32(Math.Round(dQFEE, MidpointRounding.AwayFromZero));



                                            dQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                            iQSubTotal = iQ + iQFEE;

                                            if (oGroup.INSTALLATION.CURRENCy.CUR_ISO_CODE != infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)))
                                            {
                                                int iQChange = ChangeQuantityFromInstallationCurToUserCur(iQ,
                                                                dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                                                iQFEEChange = ChangeQuantityFromInstallationCurToUserCur(iQFEE, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);
                                                iQSubTotalChange = ChangeQuantityFromInstallationCurToUserCur(iQSubTotal, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);
                                                iQTotalChange = ChangeQuantityFromInstallationCurToUserCur(iQTotal, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                                                parametersOut["steps"] = parametersOut["steps"] +
                                                                    string.Format("<step json:Array='true'><t>{0}</t><q>{1}</q><qch>{2}</qch><d>{3:HHmmssddMMyy}</d><q_fee>{4}</q_fee><q_vat>{5}</q_vat><q_subtotal>{6}</q_subtotal><q_total>{7}</q_total><qch_fee>{8}</qch_fee>qch_subtotal>{9}</qch_subtotal><qch_total>{10}</qch_total></step>",
                                                                        "1440",
                                                                        iQ.ToString(),
                                                                        iQChange,
                                                                        (dtQueryInstDateTime.Value + ts),
                                                                        iQFEE, dQVAT, iQSubTotal, iQTotal,
                                                                        iQFEEChange, iQSubTotalChange, iQTotalChange);


                                            }
                                            else
                                            {
                                                parametersOut["steps"] = parametersOut["steps"] +
                                                                    string.Format("<step json:Array='true'><t>{0}</t><q>{1}</q><d>{2:HHmmssddMMyy}</d><q_fee>{3}</q_fee><q_vat>{4}</q_vat><q_subtotal>{5}</q_subtotal><q_total>{6}</q_total></step>",
                                                                        "1440",
                                                                        iQ.ToString(),
                                                                        (dtQueryInstDateTime.Value + ts),
                                                                        iQFEE, dQVAT, iQSubTotal, iQTotal);

                                            }


                                        }

                                    }
                                    break;

                                case ParkWSSignatureType.pst_eysa:
                                    {
                                        rt = oThirdPartyOperation.EysaQueryParking(0, oUser, strPlate, dtQueryInstDateTime.Value, oGroup, oTariff, true, iMaxAmountAllowedToPay, 
                                                                                  dChangeToApply, ulAppVersion, bIsShopKeeperOperation, bApplyCampaingSchemaFour || bApplyCampaingSchemaSix, 
                                                                                  dApplyCampaingDiscount, sCulture, iWSTimeout, ref parametersOut, ref strAuthId, out strQPlusVATQs, out lEllapsedTime);

                                        if (rt != ResultType.Result_OK)
                                        {

                                            dTarId = null;
                                            try
                                            {
                                                dTarId = Convert.ToDecimal(parametersOut["ad"].ToString());
                                            }
                                            catch { }

                                            sCustomErrorMessage = infraestructureRepository.GetCustomErrorMessage(dtinstDateTime.Value, Convert.ToInt32(rt), dGroupId.Value, dTarId, strCulture);

                                            if (!string.IsNullOrEmpty(sCustomErrorMessage))
                                            {
                                                parametersOut["message"] = sCustomErrorMessage;
                                            }

                                            xmlOut = GenerateXMLOuput(parametersOut);

                                            if (xmlOut.Length == 0)
                                            {
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            }
                                            else
                                            {
                                                Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                            }

                                            return xmlOut;
                                        }

                                    }
                                    break;



                                case ParkWSSignatureType.pst_internal:
                                    parametersOut["r"] = Convert.ToInt32(ResultType.Result_Error_Generic).ToString();
                                    break;

                                case ParkWSSignatureType.pst_standard_time_steps:
                                    {
                                        rt = oThirdPartyOperation.StandardQueryParkingTimeSteps(0, oUser, strPlate, oAdditionalPlates, oExtraPlates, dtQueryInstDateTime.Value, oGroup, oStreetSection, oTariff, true, 
                                                                                                iMaxAmountAllowedToPay, dChangeToApply, bIsShopKeeperOperation,
                                                                                                bApplyCampaingSchemaFour || bApplyCampaingSchemaSix || bApplyCampaingSchemaEight, 
                                                                                                dApplyCampaingDiscount, iFreeMinutes ,iMinimumTimeToApply,
                                                                                                sCulture, iWSTimeout, ref parametersOut, ref oAdditionals, out strQPlusVATQs, 
                                                                                                out strAuthId, out dBonMlt, out dBonExtMlt, out sVehicleType, ref iAmountToSubstract, ref oExtraParametersOut, out lEllapsedTime);


                                        string sMessage = string.Empty;
                                        //En caso de que el error sea -85
                                        if (rt == ResultType.Result_Error_RestrictedTariffWithSpecificMessage)
                                        {
                                            sMessage = infraestructureRepository.GetRestrictedTariffMessage(dtinstDateTime.Value, dGroupId.Value, strCulture);
                                            if (string.IsNullOrEmpty(sMessage))
                                            {
                                                //mensaje por defecto en literals al que recurrir si no hay nada configurado.
                                                if (string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings["LITERAL_BY_DEFAULT_FOR_MADRID"].ToString()))
                                                {
                                                    Logger_AddLogMessage("QueryParkingOperation:: Is not found in WebConfig: LITERAL_BY_DEFAULT_FOR_MADRID", LogLevels.logINFO);
                                                }
                                                decimal dLiteralMadrid = Convert.ToDecimal(System.Configuration.ConfigurationManager.AppSettings["LITERAL_BY_DEFAULT_FOR_MADRID"].ToString());

                                                sMessage = infraestructureRepository.GetLiteral(dLiteralMadrid, strCulture);
                                            }
                                        }

                                        if (rt != ResultType.Result_OK && oExtraParametersOut == null)
                                        {
                                            if (rt == ResultType.Result_Error_RestrictedTariffWithSpecificMessage)
                                            {
                                                SortedList parametersErrorOut = new SortedList();
                                                parametersErrorOut["r"] = (int)rt;
                                                parametersErrorOut["message"] = sMessage;
                                                xmlOut = GenerateXMLOuput(parametersErrorOut);
                                            }
                                            else
                                            {

                                                dTarId = null;
                                                try
                                                {
                                                    dTarId = Convert.ToDecimal(parametersOut["ad"].ToString());
                                                }
                                                catch { }

                                                
                                                xmlOut = GenerateXMLErrorResult(rt, dtinstDateTime.Value, dGroupId.Value, dTarId, strCulture);
                                            }
                                            Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }


                                        if (parametersOut["rdetail"] != null)
                                        {
                                            Dictionary<string, object> oObjectDict = new Dictionary<string, object>();
                                            oObjectDict["rdetail"] = parametersOut["rdetail"];
                                            sAdditionalParams = JsonConvert.SerializeObject(oObjectDict).ToString();
                                        }

                                        if ((rt == ResultType.Result_OK) && bApplyCampaingSchemaEight)
                                        {
                                            if ((Convert.ToInt32(parametersOut["o"]) != (int)ChargeOperationsType.ParkingOperation) || (!iAmountToSubstract.HasValue) || (iAmountToSubstract.Value == 0))
                                            {

                                                oCampaing = null;
                                                iAmountToSubstract = null;
                                                iMinimumTimeToApply = null;
                                                iFreeMinutes = null;
                                                bApplyCampaingSchemaEight = false;
                                            }

                                        }

                                    }
                                    break;
                                case ParkWSSignatureType.pst_standard_amount_steps:
                                    {
                                        rt = oThirdPartyOperation.StandardQueryParkingAmountSteps(0, oUser, strPlate, oAdditionalPlates, oExtraPlates, dtQueryInstDateTime.Value, oGroup, oStreetSection, oTariff, true, 
                                                                                                  iMaxAmountAllowedToPay, dChangeToApply, bIsShopKeeperOperation,
                                                                                                  bApplyCampaingSchemaFour || bApplyCampaingSchemaSix || bApplyCampaingSchemaEight, 
                                                                                                  dApplyCampaingDiscount, iFreeMinutes, iMinimumTimeToApply,
                                                                                                  sCulture, iWSTimeout, ref parametersOut, ref oAdditionals, out strQPlusVATQs, out strAuthId, out dBonMlt, 
                                                                                                  out dBonExtMlt, out sVehicleType,  ref iAmountToSubstract, ref oExtraParametersOut, out lEllapsedTime);

                                        string sMessage = string.Empty;
                                        //En caso de que el error sea -85
                                        if (rt == ResultType.Result_Error_RestrictedTariffWithSpecificMessage)
                                        {
                                            sMessage = infraestructureRepository.GetRestrictedTariffMessage(dt, dGroupId.Value, strCulture);
                                            if (string.IsNullOrEmpty(sMessage))
                                            {
                                                //mensaje por defecto en literals al que recurrir si no hay nada configurado.
                                                if (string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings["LITERAL_BY_DEFAULT_FOR_MADRID"].ToString()))
                                                {
                                                    Logger_AddLogMessage("QueryParkingOperation:: Is not found in WebConfig: LITERAL_BY_DEFAULT_FOR_MADRID", LogLevels.logINFO);
                                                }
                                                decimal dLiteralMadrid = Convert.ToDecimal(System.Configuration.ConfigurationManager.AppSettings["LITERAL_BY_DEFAULT_FOR_MADRID"].ToString());

                                                sMessage = infraestructureRepository.GetLiteral(dLiteralMadrid, strCulture);
                                            }
                                        }

                                        if (rt != ResultType.Result_OK && oExtraParametersOut == null)
                                        {
                                            if (rt == ResultType.Result_Error_RestrictedTariffWithSpecificMessage)
                                            {
                                                SortedList parametersErrorOut = new SortedList();
                                                parametersErrorOut["r"] = (int)rt;
                                                parametersErrorOut["message"] = sMessage;
                                                xmlOut = GenerateXMLOuput(parametersErrorOut);
                                            }
                                            else
                                            {
                                                dTarId = null;
                                                try
                                                {
                                                    dTarId = Convert.ToDecimal(parametersOut["ad"].ToString());
                                                }
                                                catch { }

                                                xmlOut = GenerateXMLErrorResult(rt, dtinstDateTime.Value, dGroupId.Value, dTarId, strCulture);
                                            }
                                            Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }


                                        if (parametersOut["rdetail"]!=null)
                                        {
                                            Dictionary<string, object> oObjectDict = new Dictionary<string, object>();
                                            oObjectDict["rdetail"] = parametersOut["rdetail"];
                                            sAdditionalParams = JsonConvert.SerializeObject(oObjectDict).ToString();
                                        }


                                        if ((rt == ResultType.Result_OK)&& bApplyCampaingSchemaEight)
                                        {
                                            if ((Convert.ToInt32(parametersOut["o"]) != (int)ChargeOperationsType.ParkingOperation) || (!iAmountToSubstract.HasValue) || (iAmountToSubstract.Value==0))
                                            {

                                                oCampaing = null;
                                                iAmountToSubstract = null;
                                                iMinimumTimeToApply = null;
                                                iFreeMinutes = null;
                                                bApplyCampaingSchemaEight = false;
                                            }

                                        }

                                    }
                                    break;
                                case ParkWSSignatureType.pst_bsm:
                                    {
                                        if (iBSMCityId.HasValue && iBSMConfigurationId.HasValue && iBSMZoneTypeId.HasValue && iBSMSegmentId.HasValue)
                                        {
                                            string sLocale = "ca";
                                            if (!string.IsNullOrEmpty(strCulture))
                                            {
                                                sLocale = strCulture.Split('-')[0].Trim();
                                            }
                                            BSMConfiguration oBSMConfiguration = new BSMConfiguration()
                                            {
                                                cityId = iBSMCityId.Value,
                                                zoneTypeId = iBSMZoneTypeId.Value,
                                                configurationId = iBSMConfigurationId.Value,
                                                segmentId = iBSMSegmentId.Value
                                            };

                                            BSMModifiers oModifiers = null;

                                            rt = oThirdPartyOperation.BSMPriceParking(oUser, oGroup, oTariff, strPlate, oBSMConfiguration, dtQueryInstDateTime.Value, null,
                                                                                    bApplyCampaingSchemaFour || bApplyCampaingSchemaSix, dApplyCampaingDiscount,
                                                                                    strCulture, sLocale, iMaxAmountAllowedToPay, dChangeToApply, bIsShopKeeperOperation, iWSTimeout, 
                                                                                    out oModifiers, out dBonMlt, out dBonExtMlt, ref parametersOut, ref strQPlusVATQs, out lEllapsedTime);

                                            JsonSerializerSettings oJsonSettings = new JsonSerializerSettings();
                                            oJsonSettings.NullValueHandling = NullValueHandling.Ignore;
                                            sAdditionalParams = JsonConvert.SerializeObject(oBSMConfiguration, oJsonSettings);
                                        }
                                        else
                                        {
                                            rt = ResultType.Result_Error_Generic;
                                            Logger_AddLogMessage("QueryParkingOperationWithTimeSteps::BSM missing input parameters (BSMcityID, BSMconfigurationId, BSMzoneTypeId)", LogLevels.logERROR);
                                        }
                                        if (rt != ResultType.Result_OK)
                                        {
                                            dTarId = null;
                                            try
                                            {
                                                dTarId = Convert.ToDecimal(parametersOut["ad"].ToString());
                                            }
                                            catch { }


                                            xmlOut = GenerateXMLErrorResult(rt, dtinstDateTime.Value, dGroupId.Value, dTarId, strCulture);
                                            Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                    }
                                    break;
                                case ParkWSSignatureType.pst_bilbao_integration:
                                    {
                                        Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::ES BILBAO"), LogLevels.logINFO);


                                        rt = oThirdPartyOperation.BilbaoIntegrationQueryParkingAmountSteps(0, oUser, strPlate, oAdditionalPlates, oExtraPlates, dtQueryInstDateTime.Value, oGroup, oTariff, true,
                                                                                                  iMaxAmountAllowedToPay, dChangeToApply, bIsShopKeeperOperation, bApplyCampaingSchemaFour || bApplyCampaingSchemaSix || bApplyCampaingSchemaEight,
                                                                                                  dApplyCampaingDiscount, iFreeMinutes, iMinimumTimeToApply, 
                                                                                                  sCulture, iWSTimeout, ref parametersOut, ref oAdditionals, out strQPlusVATQs, out strAuthId, out dBonMlt,
                                                                                                  out dBonExtMlt, out sVehicleType, ref iAmountToSubstract, ref oExtraParametersOut, out lEllapsedTime);

                                        string sMessage = string.Empty;
                                        //En caso de que el error sea -85
                                        if (rt == ResultType.Result_Error_RestrictedTariffWithSpecificMessage)
                                        {
                                            sMessage = infraestructureRepository.GetRestrictedTariffMessage(dt, dGroupId.Value, strCulture);
                                            if (string.IsNullOrEmpty(sMessage))
                                            {
                                                //mensaje por defecto en literals al que recurrir si no hay nada configurado.
                                                if (string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings["LITERAL_BY_DEFAULT_FOR_BILBAO"].ToString()))
                                                {
                                                    Logger_AddLogMessage("QueryParkingOperation:: Is not found in WebConfig: LITERAL_BY_DEFAULT_FOR_BILBAO", LogLevels.logINFO);
                                                }
                                                decimal dLiteralMadrid = Convert.ToDecimal(System.Configuration.ConfigurationManager.AppSettings["LITERAL_BY_DEFAULT_FOR_BILBAO"].ToString());

                                                sMessage = infraestructureRepository.GetLiteral(dLiteralMadrid, strCulture);
                                            }
                                        }

                                        if (rt != ResultType.Result_OK && oExtraParametersOut == null)
                                        {
                                            if (rt == ResultType.Result_Error_RestrictedTariffWithSpecificMessage)
                                            {
                                                SortedList parametersErrorOut = new SortedList();
                                                parametersErrorOut["r"] = (int)rt;
                                                parametersErrorOut["message"] = sMessage;
                                                xmlOut = GenerateXMLOuput(parametersErrorOut);
                                            }
                                            else
                                            {
                                                dTarId = null;
                                                try
                                                {
                                                    dTarId = Convert.ToDecimal(parametersOut["ad"].ToString());
                                                }
                                                catch { }


                                                xmlOut = GenerateXMLErrorResult(rt, dtinstDateTime.Value, dGroupId.Value, dTarId, strCulture);
                                            }
                                            Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                    }
                                    break;
                                default:
                                    parametersOut["r"] = Convert.ToInt32(ResultType.Result_Error_Generic).ToString();
                                    break;
                            }

                            rt = (ResultType)Convert.ToInt32(parametersOut["r"]);


                            List<int> oExtraAmounts = null;

                            // Check extra parametersOut
                            if (oExtraParametersOut != null && oExtraParametersOut.Any())
                            {
                                var oExtraResults = new List<ResultType>();
                                var oExtraSteps = new List<List<StandardQueryParkingStep>>();
                                var iExtraQ1 = 0;
                                var iExtraQ2 = 0;

                                // Mirar si hi ha algun extra amb error
                                foreach (int iExtraOut in oExtraParametersOut.Keys)
                                {
                                    if (oExtraParametersOut[iExtraOut].Any())
                                    {
                                        var oFirstExtraParametersOut = oExtraParametersOut[iExtraOut][0];

                                        oExtraResults.Add((ResultType)Convert.ToInt32(oFirstExtraParametersOut["r"]));
                                        parametersOut[string.Format("r{0}", iExtraOut)] = Convert.ToInt32(oFirstExtraParametersOut["r"]);

                                        if (oFirstExtraParametersOut["steps"] != null)
                                        {
                                            var oStepsList = StandardQueryParkingSteps.FromCustomXml(oFirstExtraParametersOut["steps"].ToString());
                                            if (oStepsList != null)
                                            {
                                                oExtraSteps.Add(oStepsList.Steps.ToList());
                                                if (oStepsList.Steps.Any())
                                                {
                                                    if (oExtraAmounts == null) oExtraAmounts = new List<int>();
                                                    oExtraAmounts.Add(oStepsList.Steps[0].Q);
                                                }
                                            }
                                        }

                                        if (oFirstExtraParametersOut["q1"] != null && oFirstExtraParametersOut["q1"].ToString() != "") iExtraQ1 += Convert.ToInt32(oFirstExtraParametersOut["q1"].ToString());
                                        if (oFirstExtraParametersOut["q2"] != null && oFirstExtraParametersOut["q2"].ToString() != "") iExtraQ2 += Convert.ToInt32(oFirstExtraParametersOut["q2"].ToString());

                                        dTarId = null;
                                        try
                                        {
                                            dTarId = Convert.ToDecimal(oFirstExtraParametersOut["ad"].ToString());
                                        }
                                        catch { }

                                        sCustomErrorMessage = infraestructureRepository.GetCustomErrorMessage(dtinstDateTime.Value, Convert.ToInt32(oFirstExtraParametersOut["r"]), dGroupId.Value, dTarId, strCulture);

                                        if (!string.IsNullOrEmpty(sCustomErrorMessage))
                                        {
                                            parametersOut[string.Format("message{0}", iExtraOut)] = sCustomErrorMessage;
                                        }

                                        if (oFirstExtraParametersOut["rdetail"] != null)
                                        {
                                            parametersOut[string.Format("rdetail{0}", iExtraOut)] = Convert.ToInt32(oFirstExtraParametersOut["rdetail"]);
                                            ResultType rtDetail = (ResultType)Convert.ToInt32(oFirstExtraParametersOut["rdetail"]);
                                            sCustomErrorMessage = infraestructureRepository.GetCustomErrorMessage(dtinstDateTime.Value, Convert.ToInt32(rtDetail), dGroupId.Value, dTarId, strCulture);

                                            if (!string.IsNullOrEmpty(sCustomErrorMessage))
                                            {
                                                parametersOut[string.Format("messagedetail{0}", iExtraOut)] = sCustomErrorMessage;
                                            }
                                        }

                                    }
                                }
                                if (rt == ResultType.Result_OK && !oExtraResults.Where(r => r != ResultType.Result_OK).Any())
                                {
                                    // Sumar els steps dels extras als steps del principal                                    
                                    if (parametersOut["steps"] != null)
                                    {
                                        var oStepsList = StandardQueryParkingSteps.FromCustomXml(parametersOut["steps"].ToString());
                                        if (oStepsList != null)
                                        {
                                            List<StandardQueryParkingStep> oMainSteps = oStepsList.Steps.ToList();

                                            if (oMainSteps.Any())
                                                oExtraAmounts.Insert(0, oMainSteps[0].Q);

                                            // modificar steps
                                            for (int iStep = 0; iStep < oMainSteps.Count; iStep += 1)
                                            {
                                                var oSteps = oExtraSteps.Where(steps => steps.Count > iStep).Select(steps => steps[iStep]).ToList();

                                                oMainSteps[iStep].AddStepsAmounts(oSteps);
                                            }

                                            if (oMainSteps.Any())
                                            {
                                                //parametersOut["steps"] = sb.ToString();
                                                var oStandardQueryParkingSteps = new StandardQueryParkingSteps() { Steps = oMainSteps.ToArray() };
                                                parametersOut["steps"] = oStandardQueryParkingSteps.ToCustomXml();
                                            }
                                            else
                                                parametersOut["steps"] = "";
                                        }
                                    }
                                    if (parametersOut["q1"] != null && parametersOut["q1"].ToString() != "") parametersOut["q1"] = Convert.ToInt32(parametersOut["q1"].ToString()) + iExtraQ1;
                                    if (parametersOut["q2"] != null && parametersOut["q2"].ToString() != "") parametersOut["q2"] = Convert.ToInt32(parametersOut["q2"].ToString()) + iExtraQ2;

                                }
                                else
                                {
                                    parametersOut = new SortedList();
                                    parametersOut["r"] = Convert.ToInt32(rt);
                                    for (int i = 0; i < oExtraResults.Count; i += 1)
                                    {
                                        parametersOut[string.Format("r{0}", i + 2)] = Convert.ToInt32(oExtraResults[i]);
                                    }
                                    rt = ResultType.Result_Error_Generic;
                                }
                            }
                           

                            //if (Convert.ToInt32(parametersOut["r"]) == Convert.ToInt32(ResultType.Result_OK))
                            if (rt == ResultType.Result_OK)
                            {


                                DateTime? dtUTCDateTime = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oGroup.INSTALLATION.INS_ID, dtinstDateTime.Value);

                                decimal? dAuthId = null;
                                if (!string.IsNullOrEmpty(strAuthId))
                                {
                                    try
                                    {
                                        decimal dTryAuthId = Convert.ToDecimal(strAuthId);
                                        dAuthId = dTryAuthId;
                                    }
                                    catch
                                    {
                                        dAuthId = null;
                                    }
                                }

                                ChargeOperationsType oOperationType = (Convert.ToInt32(parametersOut["o"]) == 1 ? ChargeOperationsType.ParkingOperation : ChargeOperationsType.ExtensionOperation);

                                decimal dVAT1;
                                decimal dVAT2;
                                decimal dPercFEE;
                                decimal dPercFEETopped = 0;
                                decimal dFixedFEE = 0;

                                IsTAXMode eTaxMode = IsTAXMode.IsNotTaxVATForward;

                                int? iPaymentTypeId = null;
                                int? iPaymentSubtypeId = null;
                                if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                                {
                                    iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                                    iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                                }
                                int? iTariffType = null;
                                if (oTariff != null)
                                    iTariffType = oTariff.TAR_TYPE;
                                if (!customersRepository.GetFinantialParams(oUser, oGroup.INSTALLATION.INS_ID, (PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE, iPaymentTypeId, iPaymentSubtypeId, oOperationType, iTariffType,
                                                                                  out dVAT1, out dVAT2, out dPercFEE, out dPercFEETopped, out dFixedFEE, out eTaxMode))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error getting installation FEE parameters: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }


                                parametersOut["IsServiceCost"] = ((dPercFEE > 0 || dFixedFEE > 0) ? 1 : 0);
                                parametersOut["ServiceParkingLbl"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.INS_SERVICE_PARK_LIT_ID ?? 0, strCulture);
                                parametersOut["ServiceParkingBaseLbl"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.INS_SERVICE_PARK_BASE_LIT_ID ?? 0, strCulture);
                                parametersOut["ServiceParkingVariableLbl"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.INS_SERVICE_PARK_VARIABLE_LIT_ID ?? 0, strCulture);
                                parametersOut["ServiceFeeLbl"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.INS_SERVICE_FEE_LIT_ID ?? 0, strCulture);
                                parametersOut["ServiceFeeVATLbl"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.INS_SERVICE_FEE_PLUS_VAT_LIT_ID ?? 0, strCulture);
                                parametersOut["ServiceVATLbl"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.INS_SERVICE_VAT_LIT_ID ?? 0, strCulture);
                                parametersOut["q_subtotalLbl"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.INS_SERVICE_SUBTOTAL_LIT_ID ?? 0, strCulture);
                                parametersOut["ServiceTotalLbl"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.INS_SERVICE_TOTAL_LIT_ID ?? 0, strCulture);
                                parametersOut["ccpan"] = "";
                                parametersOut["cctype"] = "";

                                if ((PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE == PaymentSuscryptionType.pstPerTransaction)
                                {
                                    if ((oUser.CUSTOMER_PAYMENT_MEAN != null) &&
                                        ((PaymentMeanType)oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID == PaymentMeanType.pmtDebitCreditCard))
                                    {
                                        parametersOut["ccpan"] = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_MASKED_CARD_NUMBER;
                                        parametersOut["cctype"] = (int)customersRepository.GetCreditCardType(oUser.CUSTOMER_PAYMENT_MEAN);
                                        if (oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG != null)
                                            parametersOut["ccprovider"] = oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_PROVIDER;
                                    }
                                }

                                parametersOut["HasPaymentMean"] = bHasPaymentMean ? 1 : 0;


                                if (sVehicleType != null)
                                    parametersOut["vehicletype"] = sVehicleType;

                                // *** New tags for layout 3 ***
                                /*if (oGroup.INSTALLATION.INS_SHORTDESC == "BCN")
                                {
                                    parametersOut["layout"] = 3;
                                    parametersOut["bonusamount"] = 10;
                                    parametersOut["bonusid"] = 1;
                                }
                                else if (oGroup.INSTALLATION.INS_SHORTDESC == "SLP")
                                {
                                    parametersOut["layout"] = 3;
                                    parametersOut["bonusid"] = 1;
                                }*/
                                // *** End new tags for layout 3 ***


                                List<SortedList> oListOutParameters = new List<SortedList>();

                                oListOutParameters.Add(parametersOut);

                                foreach (SortedList oPars in oAdditionals)
                                {
                                    oListOutParameters.Add(oPars);
                                }


                                foreach (SortedList oPars in oListOutParameters)
                                {

                                    ChargeOperationsType operationType = ChargeOperationsType.ParkingOperation;

                                    if (oPars["at"] != null)
                                    {
                                        if (Convert.ToInt32(oPars["at"]) > 0)
                                        {
                                            operationType = ChargeOperationsType.ExtensionOperation;
                                        }
                                    }


                                    DateTime? dtExpirationDate = null;
                                    if (oPars["dexp"] != null)
                                    {

                                        dtExpirationDate = DateTime.ParseExact(oPars["dexp"].ToString(), "HHmmssddMMyy",
                                                    CultureInfo.InvariantCulture);
                                    }


                                    decimal dPercBonus = 0;
                                    string sBonusId = null;
                                    string sBonusMarca = null;
                                    int? iBonusType = null;
                                    if (/*parametersOut.ContainsKey("bonusper") &&*/ oPars["bonusper"] != null)
                                    {
                                        dPercBonus = Convert.ToDecimal(oPars["bonusper"]) / Convert.ToDecimal(100);
                                        sBonusId = oPars["bonusid"].ToString();
                                        sBonusMarca = oPars["bonusmarca"].ToString();
                                        iBonusType = Convert.ToInt32(oPars["bonustype"]);
                                    }

                                    oPars["layout"] = (dPercBonus == 0 ? oGroup.INSTALLATION.INS_FEE_LAYOUT : 3);
                                    if ((oCampaing != null) && (string.IsNullOrEmpty(oGroup.INSTALLATION.INS_BSM_CITY_ID)))
                                    {
                                        //En caso de que la campaña aplique se reemplaza el layout
                                        if (oCampaing.CAMP_LAYOUT_ID.HasValue && (bApplyCampaingSchemaFour || bApplyCampaingSchemaSix || bApplyCampaingSchemaEight))
                                        {
                                            oPars["layout"] = Convert.ToString(oCampaing.CAMP_LAYOUT_ID.Value);
                                        }
                                    }
                                    int iTariff = Convert.ToInt32(oPars["ad"]);
                                    if (oGroup.INSTALLATION.INS_MAP_SCREEN_TYPE != 1)
                                    {
                                        try
                                        {
                                            oTariffInGroup = oGroup.TARIFFS_IN_GROUPs.Where(r => r.TARGR_TAR_ID == iTariff).First();
                                            oTariff = oTariffInGroup.TARIFF;
                                        }
                                        catch
                                        {

                                            foreach (GROUPS_TYPES_ASSIGNATION oAssigns in oGroup.GROUPS_TYPES_ASSIGNATIONs)
                                            {
                                                try
                                                {
                                                    oTariffInGroup = oAssigns.GROUPS_TYPE.TARIFFS_IN_GROUPs.Where(r => r.TARGR_TAR_ID == iTariff).First();
                                                    oTariff = oTariffInGroup.TARIFF;
                                                    break;
                                                }
                                                catch { }
                                            }

                                        }
                                    }

                                    List<StandardQueryParkingStep> oSteps = null;
                                    if (oPars["steps"] != null)
                                    {
                                        var oStepsList = StandardQueryParkingSteps.FromCustomXml(oPars["steps"].ToString());
                                        if (oStepsList != null)
                                            oSteps = oStepsList.Steps.ToList();
                                    }

                                    int? iLayout = null;
                                    string sButtonsXml = QueryParkingOperationButtons(oPars, oSteps, oTariffInGroup, ulAppVersion, strCulture, out iLayout);
                                    if (!string.IsNullOrEmpty(sButtonsXml))
                                    {
                                        oPars["buttons"] = sButtonsXml;
                                        if (ulAppVersion < _VERSION_3_0)
                                        {
                                            if (iLayout.HasValue)
                                                oPars["buttons_layout"] = iLayout.Value;
                                            else if (oTariffInGroup != null && oTariffInGroup.TARGR_LAYOUT.HasValue)
                                                oPars["buttons_layout"] = oTariffInGroup.TARGR_LAYOUT.Value;
                                        }
                                        else
                                        {
                                            if (oTariffInGroup != null && oTariffInGroup.TARGR_LAYOUT.HasValue && oTariffInGroup.TARGR_LAYOUT > 0)
                                            {
                                                if (iLayout.HasValue)
                                                    oPars["buttons_layout"] = iLayout.Value;
                                                else
                                                {
                                                    oPars["buttons_layout"] = 0;
                                                }
                                            }
                                            else
                                            {
                                                oPars["buttons_layout"] = 0;
                                            }

                                        }
                                    }
                                    else
                                    {
                                        if (ulAppVersion >= _VERSION_3_0)
                                        {
                                            oPars["buttons_layout"] = 0;
                                        }
                                    }

                                    /*if (oSteps != null && oSteps.Any())
                                    {
                                        if (!oSteps.Where(s => s.Default == 1).Any())
                                            oSteps[0].Default = 1;
                                    }*/

                                    if ((oSteps != null) && (ulAppVersion >= _VERSION_2_11))
                                    {
                                        if (oSteps.Where(r => r.Time == 0).Count() == 0)
                                        {
                                            if (oTariffInGroup != null && oTariffInGroup.TARGR_INCLUDE_ZERO_STEP == 1)
                                            {
                                                var oZeroStep = new StandardQueryParkingStep()
                                                {
                                                    Time = 0,
                                                    Selectable = 0
                                                };
                                                if (oPars["di"] != null)
                                                    oZeroStep.Dt_String = oPars["di"].ToString();
                                                oSteps.Insert(0, oZeroStep);
                                            }
                                        }


                                        if (oSteps.Where(r => r.Default == 1).Count() == 0)
                                        {
                                            if (oTariffInGroup != null && oTariffInGroup.TARGR_TIME_DEF_STEP.HasValue)
                                            {
                                                var oDefStep = oSteps.Select((s, index) => new { diff = Math.Abs(s.Time - oTariffInGroup.TARGR_TIME_DEF_STEP.Value), stepIndex = index }).OrderBy(item => item.diff).FirstOrDefault();
                                                if (oDefStep != null)
                                                {
                                                    oSteps[oDefStep.stepIndex].Default = 1;
                                                }

                                            }
                                            else if (oSteps.Any())
                                                oSteps[0].Default = 1;
                                        }

                                        if (oSteps.Any())
                                        {
                                            var oStepsList = new StandardQueryParkingSteps() { Steps = oSteps.ToArray() };
                                            oPars["steps"] = oStepsList.ToCustomXml();
                                        }
                                    }

                                    int iPercFEETopped = Convert.ToInt32(Math.Round(dPercFEETopped, MidpointRounding.AwayFromZero));
                                    int iFixedFEE = Convert.ToInt32(Math.Round(dFixedFEE, MidpointRounding.AwayFromZero));

                                    decimal dIntGroupId = oGroup.GRP_ID;
                                    if (oPars.ContainsKey("g"))
                                    {
                                        dIntGroupId = Convert.ToDecimal(oPars["g"].ToString());
                                    }

                                    decimal? dCampaignId = null;

                                    if (oCampaing != null)
                                    {
                                        dCampaignId = oCampaing.CAMP_ID;
                                    }


                                    if (oTariffInGroup != null)
                                    {
                                        if ((ResultType)Convert.ToInt32(oPars["r"]) == ResultType.Result_OK &&
                                            oPars["q1"] != null && Convert.ToInt32(parametersOut["q1"]) > 0)
                                        {
                                            CUSTOMER_PAYMENT_MEAN oUserPaymentMean = customersRepository.GetUserPaymentMean(ref oUser, oGroup.INSTALLATION);
                                            if (oUserPaymentMean != null)
                                            {
                                                if ((PaymentMeanType)oUserPaymentMean.CUSPM_PAT_ID == PaymentMeanType.pmtDebitCreditCard)
                                                {
                                                    CardPayment_Mode eCardPaymentModeToApply = (CardPayment_Mode)oTariffInGroup.TARGR_CARD_PAYMENT_MODE;

                                                    bool bApplicableCardPaymentMode = CheckCardPaymentMode(oUserPaymentMean, (CardPayment_Mode)oTariffInGroup.TARGR_CARD_PAYMENT_MODE, out eCardPaymentModeToApply);
                                                    oPars["cardPayMode"] = (int)eCardPaymentModeToApply;

                                                    if (!bApplicableCardPaymentMode)
                                                        oPars["r"] = Convert.ToInt32(ResultType.Result_Error_CardPayment_Mode_NotApplicable);
                                                }
                                            }
                                        }
                                    }
                                    

                                    if ((oUser.USR_IS_ANONYMOUS ?? 0) == 1)
                                    {
                                        //we need to return payment options
                                        INSTALLATION oInstallation = oGroup.INSTALLATION;                                       
                                        GetUserPaymentData(ref oUser, ref oInstallation, ulAppVersion, dSourceApp, ref parametersOut, strCulture);
                                    }


                                    // afegir BonMlt
                                    if (!customersRepository.AddSessionOperationParkInfo(ref oUser, parametersIn["SessionID"].ToString(), operationType,
                                                dtinstDateTime.Value, dtUTCDateTime.Value, strPlate, oAdditionalPlates, dIntGroupId,
                                                Convert.ToDecimal(oPars["ad"].ToString()), dChangeToApply,
                                                dAuthId,
                                                dVAT1, dVAT2, dPercFEE, iPercFEETopped, iFixedFEE,
                                                dPercBonus, sBonusId, sBonusMarca, iBonusType, strQPlusVATQs,
                                                dBonMlt, dBonExtMlt, sVehicleType, dtExpirationDate,
                                                oExtraPlates, oExtraAmounts, sAdditionalParams, dCampaignId, indexCampaing, iAmountToSubstract))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("QueryParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                }




                                StringBuilder sb = new StringBuilder();

                                foreach (SortedList oPars in oAdditionals)
                                {
                                    sb.Append("<parkingdata json:Array='true'>");
                                    foreach (DictionaryEntry item in oPars)
                                    {
                                        try
                                        {
                                            if ((string)item.Key == "steps")
                                            {
                                                sb.AppendFormat("<{0} xmlns:json='http://james.newtonking.com/projects/json'>{1}</{0}>", item.Key, item.Value);
                                            }
                                            else
                                            {
                                                sb.AppendFormat("<{0}>{1}</{0}>", item.Key, item.Value);
                                            }

                                        }
                                        catch (Exception e)
                                        {
                                            Logger_AddLogException(e, string.Format("GenerateXMLOuput::Exception item={0}; value={1}", item.Key.ToString(), item.Value.ToString()), LogLevels.logERROR);
                                        }
                                    }
                                    sb.Append("</parkingdata>");

                                }
                                parametersOut["additionals"] = sb.ToString();


                            }


                            dTarId = null;
                            try
                            {
                                dTarId = Convert.ToDecimal(parametersOut["ad"].ToString());
                            }
                            catch { }

                            sCustomErrorMessage = infraestructureRepository.GetCustomErrorMessage(dtinstDateTime.Value, Convert.ToInt32(rt), dGroupId.Value, dTarId, strCulture);

                            if (!string.IsNullOrEmpty(sCustomErrorMessage))
                            {
                                parametersOut["message"] = sCustomErrorMessage;
                            }

                            if (parametersOut["rdetail"] != null)
                            {
                                ResultType rtDetail = (ResultType)Convert.ToInt32(parametersOut["rdetail"]);
                                sCustomErrorMessage = infraestructureRepository.GetCustomErrorMessage(dtinstDateTime.Value, Convert.ToInt32(rtDetail), dGroupId.Value, dTarId, strCulture);

                                if (!string.IsNullOrEmpty(sCustomErrorMessage))
                                {
                                    parametersOut["messagedetail"] = sCustomErrorMessage;
                                }
                            }

                            xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "steps", "additionals", "buttons", "modifiers", "ccpaymentsdata" });

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }

                            oUser = null;


                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }

        [WebMethod]
        public string QueryParkingOperationWithTimeStepsJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeStepsJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryParkingOperationWithTimeSteps(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeStepsJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryParkingOperationWithTimeStepsJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }

        /*
         *  ConfirmParkingOperation 
         *  
        <ipark_in>
            <u>user login or generated user id for anonymous operations</u>
            <p>plate</p>
            <g>parking sector</g>
            <ad>tariff type selected: NULL, ROTATION, RESIDENTS, VIPS</ad>
            <d>date in format hh24missddMMYY</d>
            <q>Amount of money paid in Cents</q>
            <t>Time in minutes obtained paying <q> cents</t>
            <tid>Paypal transaction Id for payments with anonymous operations</tid>
            <ah>authentication hash</ah>

        </ ipark _in>
         * 
         * 
         * 
        Result of the method:
         a.	Result: is an integer containing a Boolean value. 0 if an error has occurred
         * saving the operation or 1 if the operation has been stored correctly.      
         *
         */
        [WebMethod]
        public string ConfirmParkingOperation(string xmlIn)
        {
            string xmlOut = "";
            string strLockDictionaryString = "";
            bool bPaymentInPerson = true;

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {                
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ConfirmParkingOperation: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["p"] == null) ||
                        (parametersIn["d"] == null) ||
                        (parametersIn["g"] == null) ||
                        (parametersIn["t"] == null) ||
                        (parametersIn["ad"] == null) ||
                        (parametersIn["bd"] == null) ||
                        (parametersIn["ed"] == null) ||
                        (parametersIn["q"] == null)
                        )
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            strLockDictionaryString = parametersIn["u"].ToString();
                            if (ExistConfirmLockInformation(strLockDictionaryString))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_ConfirmOperationAlreadyExecuting);
                                Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }
                            else
                            {
                                DateTime dt = DateTime.Now;
                                try
                                {
                                    dt = DateTime.ParseExact(parametersIn["d"].ToString(), "HHmmssddMMyy",
                                      CultureInfo.InvariantCulture);
                                }
                                catch
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }


                                DateTime dtIni = DateTime.Now;
                                try
                                {
                                    dtIni = DateTime.ParseExact(parametersIn["bd"].ToString(), "HHmmssddMMyy",
                                      CultureInfo.InvariantCulture);
                                }
                                catch
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }


                                DateTime dtEnd = DateTime.Now;
                                try
                                {
                                    dtEnd = DateTime.ParseExact(parametersIn["ed"].ToString(), "HHmmssddMMyy",
                                      CultureInfo.InvariantCulture);
                                }
                                catch
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }


                                int iTime;
                                try
                                {
                                    iTime = Int32.Parse(parametersIn["t"].ToString(), CultureInfo.InvariantCulture);
                                }
                                catch
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }

                                int iQuantity;
                                try
                                {
                                    iQuantity = Int32.Parse(parametersIn["q"].ToString(), CultureInfo.InvariantCulture);
                                }
                                catch
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }

                                int iQuantityWithoutBon = iQuantity;
                                try
                                {
                                    if (parametersIn.ContainsKey("q_without_bon"))
                                        iQuantityWithoutBon = Int32.Parse(parametersIn["q_without_bon"].ToString(), CultureInfo.InvariantCulture);
                                }
                                catch
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }


                                bool bPermitAutomaticRenewal = false;
                                try
                                {
                                    bPermitAutomaticRenewal = (Int32.Parse(parametersIn["automatic_renewal"].ToString(), CultureInfo.InvariantCulture) == 1);
                                }
                                catch
                                {

                                }


                                decimal? dGroupId = null;

                                try
                                {
                                    decimal dTryGroupId = Convert.ToDecimal(parametersIn["g"].ToString());
                                    dGroupId = dTryGroupId;
                                }
                                catch
                                {
                                    dGroupId = null;
                                }

                                GROUP oGroup = null;
                                DateTime? dtinstDateTime = null;


                                if (!geograficAndTariffsRepository.getGroup(dGroupId,
                                                                            ref oGroup,
                                                                            ref dtinstDateTime))
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                decimal? dStreetSectionId = null;
                                try
                                {
                                    decimal dTryId = Convert.ToDecimal(parametersIn["sts"].ToString());
                                    dStreetSectionId = dTryId;
                                }
                                catch
                                {
                                    dStreetSectionId = null;
                                }
                                STREET_SECTION oStreetSection = null;
                                if (dStreetSectionId.HasValue)
                                {
                                    if (!geograficAndTariffsRepository.GetStreetSection(dStreetSectionId.Value, out oStreetSection) &&
                                        oStreetSection.INSTALLATION.INS_ID != oGroup.INSTALLATION.INS_ID)
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }

                                TARIFF oTariff = null;
                                CardPayment_Mode eCardPaymentMode = CardPayment_Mode.Charge;
                                if (parametersIn["ad"] != null)
                                {
                                    int iTariff = Convert.ToInt32(parametersIn["ad"]);
                                    if (oGroup.INSTALLATION.INS_MAP_SCREEN_TYPE != 1)
                                    {
                                        try
                                        {
                                            //oTariff = oGroup.TARIFFS_IN_GROUPs.Where(r => r.TARGR_TAR_ID == iTariff).First().TARIFF;
                                            var oTariffsInGroup = oGroup.TARIFFS_IN_GROUPs.Where(r => r.TARGR_TAR_ID == iTariff).FirstOrDefault();

                                            if (oTariffsInGroup != null)
                                            {
                                                oTariff = oTariffsInGroup.TARIFF;
                                                eCardPaymentMode = (CardPayment_Mode)oTariffsInGroup.TARGR_CARD_PAYMENT_MODE;
                                            }
                                        }
                                        catch
                                        {

                                            foreach (GROUPS_TYPES_ASSIGNATION oAssigns in oGroup.GROUPS_TYPES_ASSIGNATIONs)
                                            {
                                                try
                                                {
                                                    //oTariff = oAssigns.GROUPS_TYPE.TARIFFS_IN_GROUPs.Where(r => r.TARGR_TAR_ID == iTariff).First().TARIFF;
                                                    var oTariffsInGroup = oAssigns.GROUPS_TYPE.TARIFFS_IN_GROUPs.Where(r => r.TARGR_TAR_ID == iTariff).FirstOrDefault();
                                                    if (oTariffsInGroup != null)
                                                    {
                                                        oTariff = oTariffsInGroup.TARIFF;
                                                        eCardPaymentMode = (CardPayment_Mode)oTariffsInGroup.TARGR_CARD_PAYMENT_MODE;
                                                    }
                                                    break;
                                                }
                                                catch { }
                                            }

                                            if (oTariff == null)
                                            {
                                                DeleteConfirmLockInformation(strLockDictionaryString);
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                                Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                return xmlOut;
                                            }

                                        }
                                    }
                                    else
                                    {
                                        oTariff = oGroup.INSTALLATION.TARIFFs.Where(t => t.TAR_ID == iTariff).FirstOrDefault();
                                        if (oTariff == null)
                                        {
                                            DeleteConfirmLockInformation(strLockDictionaryString);
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                            Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                    }
                                }
                                else
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                string strPlate = NormalizePlate(parametersIn["p"].ToString());

                                if (strPlate.Length == 0)
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }

                                List<string> oAdditionalPlates = new List<string>();
                                string sKey = "";
                                string sAddPlate = "";
                                for (int i = 2; i <= 10; i += 1)
                                {
                                    sKey = string.Format("p{0}", i);
                                    if (parametersIn[sKey] != null && parametersIn[sKey].ToString() != "")
                                    {
                                        sAddPlate = NormalizePlate(parametersIn[sKey].ToString());
                                        if (sAddPlate.Length > 0)
                                            oAdditionalPlates.Add(sAddPlate);
                                    }
                                }

                                Dictionary<int, List<string>> oExtraPlates = GetExtraPlatesFromParamsIn(parametersIn);

                                string strPlaceString = parametersIn["sp"] != null ? parametersIn["sp"].ToString().Trim() : "";

                                USER oUser = null;
                                string strAppVersion = "";
                                //rt = GetUserData(ref oUser, parametersIn, out strAppVersion);
                                decimal? dInsIdTmp = null;
                                string strSessionCulture = "";
                                decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();

                                rt = GetUserData(ref oUser, parametersIn, true, out dInsIdTmp, out strSessionCulture, out strAppVersion, ref dSourceApp);


                                if (rt != ResultType.Result_OK)
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(rt);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }


                                int iRealQuantity = iQuantity;
                                try
                                {
                                    if (parametersIn.ContainsKey("real_q"))
                                    {
                                        iRealQuantity = Int32.Parse(parametersIn["real_q"].ToString(), CultureInfo.InvariantCulture);
                                    }
                                }
                                catch
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }


                                int iTimeBalUsed = 0;
                                try
                                {
                                    if (parametersIn.ContainsKey("time_bal_used"))
                                    {
                                        iTimeBalUsed = Int32.Parse(parametersIn["time_bal_used"].ToString(), CultureInfo.InvariantCulture);
                                    }

                                }
                                catch
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }

                                int iPostpay = 0;
                                try
                                {
                                    if (parametersIn.ContainsKey("postpay"))
                                    {
                                        iPostpay = Int32.Parse(parametersIn["postpay"].ToString(), CultureInfo.InvariantCulture);
                                    }

                                }
                                catch
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }


                                string strPlateSharing = infraestructureRepository.GetParameterValue("PlateSharing");
                                bool bPlateSharing = true;

                                if (!string.IsNullOrEmpty(strPlateSharing))
                                {
                                    bPlateSharing = (strPlateSharing != "0");
                                }

                                bool bIsShopKeeperOperation = false;
                                if (parametersIn.ContainsKey("isshopkeeperoperation"))
                                {
                                    bIsShopKeeperOperation = Convert.ToInt32(parametersIn["isshopkeeperoperation"].ToString()) == 1;
                                }


                                string strMD = parametersIn["moneris_md"] != null ? parametersIn["moneris_md"].ToString() : "";
                                string strCAVV = parametersIn["moneris_cavv"] != null ? parametersIn["moneris_cavv"].ToString() : "";
                                string strECI = parametersIn["moneris_eci"] != null ? parametersIn["moneris_eci"].ToString() : "";

                                string strBSRedsys3DSTransID = parametersIn["bsredsys_3ds_trans_id"] != null ? parametersIn["bsredsys_3ds_trans_id"].ToString() : "";
                                string strBSRedsys3DSPares = parametersIn["bsredsys_3ds_pares"] != null ? parametersIn["bsredsys_3ds_pares"].ToString() : "";
                                string strBSRedsys3DSCres = parametersIn["bsredsys_3ds_cres"] != null ? parametersIn["bsredsys_3ds_cres"].ToString() : "";
                                string strBSRedsys3DSMethodData = parametersIn["bsredsys_3ds_methoddata"] != null ? parametersIn["bsredsys_3ds_methoddata"].ToString() : "";

                                string strMercadoPagoToken = parametersIn["mercadopago_token"] != null ? parametersIn["mercadopago_token"].ToString() : "";


                                string strMPProTransactionId = parametersIn["mercadopago_transaction_id"] != null ? parametersIn["mercadopago_transaction_id"].ToString() : "";
                                string strMPProReference = parametersIn["mercadopago_reference"] != null ? parametersIn["mercadopago_reference"].ToString() : "";
                                string strMPProCardHash = parametersIn["mercadopago_card_hash"] != null ? parametersIn["mercadopago_card_hash"].ToString() : "";
                                string strMPProCardReference = parametersIn["mercadopago_card_reference"] != null ? parametersIn["mercadopago_card_reference"].ToString() : "";
                                string strMPProCardScheme = parametersIn["mercadopago_card_scheme"] != null ? parametersIn["mercadopago_card_scheme"].ToString() : "";
                                string strMPProGatewayDate = parametersIn["mercadopago_date_time_local_fmt"] != null ? parametersIn["mercadopago_date_time_local_fmt"].ToString() : "";
                                string strMPProMaskedCardNumber = parametersIn["mercadopago_masked_card_number"] != null ? parametersIn["mercadopago_masked_card_number"].ToString() : "";
                                string strMPProExpMonth = parametersIn["mercadopago_expires_end_month"] != null ? parametersIn["mercadopago_expires_end_month"].ToString() : "";
                                string strMPProExpYear = parametersIn["mercadopago_expires_end_year"] != null ? parametersIn["mercadopago_expires_end_year"].ToString() : "";
                                string strMPProCardType = parametersIn["mercadopago_card_type"] != null ? parametersIn["mercadopago_card_type"].ToString() : "";
                                string strMPProDocumentID = parametersIn["mercadopago_document_id"] != null ? parametersIn["mercadopago_document_id"].ToString() : "";
                                string strMPProDocumentType = parametersIn["mercadopago_document_type"] != null ? parametersIn["mercadopago_document_type"].ToString() : "";
                                string strMPProInstallaments = parametersIn["mercadopago_installaments"] != null ? parametersIn["mercadopago_installaments"].ToString() : "";
                                string strMPProCVVLength = parametersIn["mercadopago_cvv_length"] != null ? parametersIn["mercadopago_cvv_length"].ToString() : "";


                                if (!bIsShopKeeperOperation)
                                {
                                    List<string> oAllPlates = new List<string>() { strPlate };
                                    if (oAdditionalPlates != null)
                                    {
                                        oAllPlates.AddRange(oAdditionalPlates);
                                    }
                                    if (oExtraPlates != null)
                                    {
                                        foreach (var oPlates in oExtraPlates.Values)
                                        {
                                            oAllPlates.AddRange(oPlates);
                                        }
                                    }

                                    foreach (string sP in oAllPlates)
                                    {
                                        if (!customersRepository.IsPlateOfUser(ref oUser, sP))
                                        {
                                            if (bPlateSharing || !customersRepository.IsPlateAssignedToAnotherUser(ref oUser, sP))
                                            {
                                                if (!customersRepository.AddPlateToUser(ref oUser, sP))
                                                {
                                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                    return xmlOut;
                                                }
                                            }
                                            else
                                            {

                                                DeleteConfirmLockInformation(strLockDictionaryString);
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Plate_Is_Assigned_To_Another_User);
                                                Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                return xmlOut;

                                            }
                                        }
                                    }

                                }

                                string sBackOfficeUsr = null;
                                try
                                {
                                    sBackOfficeUsr = parametersIn["backofficeUsr"].ToString();
                                }
                                catch (Exception) { }

                                try
                                {
                                    if (parametersIn.ContainsKey("payment_in_person"))
                                    {
                                        bPaymentInPerson = (Int32.Parse(parametersIn["payment_in_person"].ToString(), CultureInfo.InvariantCulture) != 0);
                                    }

                                }
                                catch (Exception) { }



                                double dChangeToApply = 1.0;
                                decimal? dAuthId = null;
                                DateTime dtSavedInstallationTime = DateTime.UtcNow;
                                DateTime dtSavedUtcTime = DateTime.UtcNow;
                                ChargeOperationsType operationType = ChargeOperationsType.ParkingOperation;
                                decimal dPercVAT1;
                                decimal dPercVAT2;
                                decimal dPercFEE;
                                int iPercFEETopped;
                                int iFixedFEE;
                                decimal dPercBonus;
                                string sBonusId;
                                string sBonusMarca;
                                int? iBonusType;
                                decimal? dBonMlt;
                                decimal? dBonExtMlt;
                                string sVehicleType;
                                DateTime? dtExpirationDate = null;
                                List<int> oExtraAmounts = null;
                                string sAdditionalParams = null;
                                decimal? dCampaignId = null;
                                int? indexCampaing = null;
                                int? iCampaignAmountToSubstract = null;

                                string strQPlusVATQs = "";

                                if (!customersRepository.CheckSessionOperationParkInfo(ref oUser, parametersIn["SessionID"].ToString(), strPlate, oAdditionalPlates, oExtraPlates, oGroup.GRP_ID, oTariff.TAR_ID, infraestructureRepository,
                                                                                       out dtSavedInstallationTime, out dtSavedUtcTime, out operationType, out dChangeToApply, out dAuthId,
                                                                                       out dPercVAT1, out dPercVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE,
                                                                                       out dPercBonus, out sBonusId, out sBonusMarca, out iBonusType, out strQPlusVATQs,
                                                                                       out dBonMlt, out dBonExtMlt, out sVehicleType, out dtExpirationDate, out oExtraAmounts,
                                                                                       out sAdditionalParams, out dCampaignId, out indexCampaing, out iCampaignAmountToSubstract))
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_OperationExpired);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                int iOSType = 0;
                                if (parametersIn["OSID"] != null && parametersIn["OSID"].ToString() != "")
                                    iOSType = Convert.ToInt32(parametersIn["OSID"]);

                                if (oExtraPlates != null && oExtraPlates.Any())
                                {
                                    if (oExtraAmounts == null || oExtraPlates.Keys.Count != (oExtraAmounts.Count - 1))
                                    {
                                        rt = ResultType.Result_Error_Generic;
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(rt);
                                        Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    SortedList oParkingParametersOut = null;
                                    decimal? dRechargeId = null;
                                    bool bRestoreBalanceInCaseOfRefund = true;
                                    string sParkingPlate = "";
                                    List<string> oParkingAdditionalPlates = null;
                                    int iParkingQuantity;
                                    int iParkingTotalRechargeQuantity = oExtraAmounts.Sum();
                                    decimal? dParkingAuthId = null;
                                    decimal dParkingPercBonus;
                                    string sParkingBonusId;
                                    string sParkingBonusMarca;
                                    int? iParkingBonusType;
                                    decimal? dParkingBonMlt;
                                    decimal? dParkingBonExtMlt;
                                    string sParkingVehicleType;
                                    string sParkingQPlusVATQs;
                                    List<decimal> oOperationsGenerated = new List<decimal>();

                                    decimal? dLatitude = null;
                                    decimal? dLongitude = null;
                                    GetLatLon(parametersIn, out dLatitude, out dLongitude);

                                    var oQPlusVATQs = strQPlusVATQs.Split('~');

                                    for (int iParkingIndex = 0; iParkingIndex < oExtraAmounts.Count; iParkingIndex += 1)
                                    {
                                        if (iParkingIndex == 0)
                                        {
                                            sParkingPlate = strPlate;
                                            oParkingAdditionalPlates = oAdditionalPlates;
                                            dParkingAuthId = dAuthId;
                                            dParkingPercBonus = dPercBonus;
                                            sParkingBonusId = sBonusId;
                                            sParkingBonusMarca = sBonusMarca;
                                            iParkingBonusType = iBonusType;
                                            dParkingBonMlt = dBonMlt;
                                            dParkingBonExtMlt = dBonExtMlt;
                                            sParkingVehicleType = sVehicleType;
                                        }
                                        else
                                        {
                                            sParkingPlate = oExtraPlates[iParkingIndex + 1].FirstOrDefault();
                                            oParkingAdditionalPlates = oExtraPlates[iParkingIndex + 1].GetRange(1, oExtraPlates[iParkingIndex + 1].Count - 1);
                                            dParkingAuthId = null;
                                            dParkingPercBonus = 0;
                                            sParkingBonusId = "";
                                            sParkingBonusMarca = "";
                                            iParkingBonusType = null;
                                            dParkingBonMlt = 1;
                                            dParkingBonExtMlt = dBonExtMlt;
                                            sParkingVehicleType = "";
                                        }
                                        iParkingQuantity = oExtraAmounts[iParkingIndex];

                                        if (oQPlusVATQs.Length > iParkingIndex)
                                            sParkingQPlusVATQs = oQPlusVATQs[iParkingIndex];
                                        else
                                            sParkingQPlusVATQs = "";


                                        rt = ConfirmParkingOperationInternal(ref parametersIn, ref oUser, parametersIn["SessionID"].ToString(), dLatitude, dLongitude,
                                                                             sParkingPlate, oParkingAdditionalPlates, oTariff, oGroup, oStreetSection,
                                                                             dChangeToApply, dParkingAuthId, dtSavedInstallationTime, dtSavedUtcTime, operationType, dtIni, dtEnd, iTime, iTimeBalUsed, iParkingQuantity, iParkingQuantity, iParkingQuantity, sParkingQPlusVATQs,
                                                                             dParkingPercBonus, sParkingBonusId, sParkingBonusMarca, iParkingBonusType,
                                                                             strAppVersion, strPlaceString, iPostpay, bIsShopKeeperOperation, sBackOfficeUsr, bPermitAutomaticRenewal,
                                                                             dParkingBonMlt, dParkingBonExtMlt, sParkingVehicleType,
                                                                             dtExpirationDate, sAdditionalParams, dCampaignId, indexCampaing,iCampaignAmountToSubstract,
                                                                             (iParkingIndex == (oExtraAmounts.Count - 1)), (iParkingIndex == (oExtraAmounts.Count - 1) ? oExtraAmounts.Sum() : (int?)null), false,
                                                                             false, iOSType,
                                                                             xmlIn, xmlOut, strMD, strCAVV, strECI, strBSRedsys3DSTransID,
                                                                             strBSRedsys3DSPares, strBSRedsys3DSCres, strBSRedsys3DSMethodData, strMercadoPagoToken,
                                                                             strMPProTransactionId,
                                                                             strMPProReference,
                                                                             strMPProCardHash,
                                                                             strMPProCardReference,
                                                                             strMPProCardScheme,
                                                                             strMPProGatewayDate,
                                                                             strMPProMaskedCardNumber,
                                                                             strMPProExpMonth,
                                                                             strMPProExpYear,
                                                                             strMPProCardType,
                                                                             strMPProDocumentID,
                                                                             strMPProDocumentType,
                                                                             strMPProInstallaments,
                                                                             strMPProCVVLength,
                                                                             dSourceApp, bPaymentInPerson, eCardPaymentMode,
                                                                             out oParkingParametersOut, out dRechargeId, out bRestoreBalanceInCaseOfRefund);
                                        if (rt == ResultType.Result_OK)
                                        {
                                            decimal? dOpeationId = Helpers.ValidateInputParameterToDecimal(oParkingParametersOut, "operationid");
                                            if (dOpeationId.HasValue)
                                            {
                                                oOperationsGenerated.Add(dOpeationId.Value);
                                            }
                                        }
                                        else
                                            break;
                                    }

                                    if (rt == ResultType.Result_OK)
                                    {
                                        if (!customersRepository.UpdateRelatedOperations(oOperationsGenerated.Last(), oOperationsGenerated.Where((dOpeId, i) => i < oOperationsGenerated.Count - 1).ToList()))
                                        {
                                            rt = ResultType.Result_Error_Generic;
                                            Logger_AddLogMessage("ConfirmParkingOperation::UpdateRelatedOperations fail.", LogLevels.logERROR);
                                        }
                                    }
                                    if (rt == ResultType.Result_OK)
                                    {
                                        foreach (decimal dOpeID in oOperationsGenerated)
                                        {
                                            if (!customersRepository.UpdateThirdPartyConfirmedInParkingOperation(ref oUser, dOpeID, false, false, false))
                                            {
                                                rt = ResultType.Result_Error_Generic;
                                                Logger_AddLogMessage(string.Format("ConfirmParkingOperation::UpdateThirdPartyConfirmedInParkingOperation fail (OpeID={0}).", dOpeID), LogLevels.logERROR);
                                                break;
                                            }
                                        }
                                    }
                                    if (rt == ResultType.Result_OK)
                                    {
                                        bool bSendEmail = true;
                                        if (parametersIn["sendemail"] != null)
                                        {
                                            try
                                            {
                                                bSendEmail = (Convert.ToInt32(parametersIn["sendemail"].ToString()) == 1);
                                            }
                                            catch { }
                                        }
                                        if (bSendEmail)
                                        {
                                            Email_ConfirmMultiParking(ref oUser, oOperationsGenerated.Last());
                                        }
                                    }

                                    if (rt == ResultType.Result_OK)
                                    {
                                        parametersOut = new SortedList();
                                        parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                                        for (int i = 0; i < oOperationsGenerated.Count; i += 1)
                                        {
                                            parametersOut[string.Format("operationid{0}", (i == 0 ? "" : (i + 1).ToString()))] = oOperationsGenerated[i];
                                        }
                                        parametersOut["autorecharged"] = oParkingParametersOut["autorecharged"];
                                        parametersOut["cityDatetime"] = oParkingParametersOut["cityDatetime"];
                                        parametersOut["new_time_bal"] = oParkingParametersOut["new_time_bal"];
                                        parametersOut["newbal"] = oParkingParametersOut["newbal"];
                                        parametersOut["utc_offset"] = oParkingParametersOut["utc_offset"];
                                    }
                                    else
                                    {
                                        // Remove operations generated
                                        ResultType rtRefund;
                                        for (int i = 0; i < oOperationsGenerated.Count; i += 1)
                                        {
                                            if (i < (oOperationsGenerated.Count - 1) || !dRechargeId.HasValue)
                                                rtRefund = RefundChargeParkPayment(ref oUser, oOperationsGenerated[i], null, false, false);
                                            else
                                                rtRefund = RefundChargeParkPayment(ref oUser, oOperationsGenerated[i], dRechargeId, bRestoreBalanceInCaseOfRefund, false);
                                        }

                                        if (rt == ResultType.Result_3DS_Validation_Needed)
                                        {
                                            parametersOut["r"] = Convert.ToInt32(rt).ToString();

                                            xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "user_warnings", "userparks" });

                                            if (xmlOut.Length == 0)
                                            {
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            }
                                            else
                                            {
                                                Logger_AddLogMessage(string.Format("ConfirmParkingOperation: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                            }

                                            oUser = null;
                                            return xmlOut;

                                        }
                                        else
                                        {
                                            DeleteConfirmLockInformation(strLockDictionaryString);
                                            xmlOut = GenerateXMLErrorResult(rt);
                                            Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }



                                    }

                                }
                                else
                                {
                                    decimal? dLatitude = null;
                                    decimal? dLongitude = null;
                                    GetLatLon(parametersIn, out dLatitude, out dLongitude);

                                    decimal? dRechargeId = null;
                                    bool bRestoreBalanceInCaseOfRefund = true;

                                    rt = ConfirmParkingOperationInternal(ref parametersIn, ref oUser, parametersIn["SessionID"].ToString(), dLatitude, dLongitude,
                                                                             strPlate, oAdditionalPlates, oTariff, oGroup, oStreetSection,
                                                                             dChangeToApply, dAuthId, dtSavedInstallationTime, dtSavedUtcTime, operationType, dtIni, dtEnd, iTime, iTimeBalUsed, iQuantity, iRealQuantity, iQuantityWithoutBon, strQPlusVATQs,
                                                                             dPercBonus, sBonusId, sBonusMarca, iBonusType,
                                                                             strAppVersion, strPlaceString, iPostpay, bIsShopKeeperOperation, sBackOfficeUsr, bPermitAutomaticRenewal,
                                                                             dBonMlt, dBonExtMlt, sVehicleType,
                                                                             dtExpirationDate, sAdditionalParams, dCampaignId, indexCampaing, iCampaignAmountToSubstract,
                                                                             true, null, true,
                                                                             true, iOSType,
                                                                             xmlIn, xmlOut, strMD, strCAVV, strECI, strBSRedsys3DSTransID,
                                                                             strBSRedsys3DSPares, strBSRedsys3DSCres, strBSRedsys3DSMethodData, strMercadoPagoToken,
                                                                             strMPProTransactionId,
                                                                             strMPProReference,
                                                                             strMPProCardHash,
                                                                             strMPProCardReference,
                                                                             strMPProCardScheme,
                                                                             strMPProGatewayDate,
                                                                             strMPProMaskedCardNumber,
                                                                             strMPProExpMonth,
                                                                             strMPProExpYear,
                                                                             strMPProCardType,
                                                                             strMPProDocumentID,
                                                                             strMPProDocumentType,
                                                                             strMPProInstallaments,
                                                                             strMPProCVVLength,
                                                                             dSourceApp, bPaymentInPerson, eCardPaymentMode,
                                                                             out parametersOut, out dRechargeId, out bRestoreBalanceInCaseOfRefund);
                                    if (rt != ResultType.Result_OK)
                                    {

                                        if (rt == ResultType.Result_3DS_Validation_Needed)
                                        {
                                            parametersOut["r"] = Convert.ToInt32(rt).ToString();

                                            DeleteConfirmLockInformation(strLockDictionaryString);
                                            xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "user_warnings", "userparks" });

                                            if (xmlOut.Length == 0)
                                            {
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            }
                                            else
                                            {
                                                Logger_AddLogMessage(string.Format("ConfirmParkingOperation: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                            }

                                            oUser = null;
                                            return xmlOut;

                                        }
                                        else
                                        {
                                            DeleteConfirmLockInformation(strLockDictionaryString);
                                            xmlOut = GenerateXMLErrorResult(rt);
                                            Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                    }
                                    else
                                    {
                                        decimal dOperationID = Convert.ToDecimal(parametersOut["operationid"].ToString());

                                    }

                                }

                                try
                                {
                                    IEnumerable<USERS_WARNING> oUsersWarnings = customersRepository.GetUsersWarnings(oUser.USR_ID, (int)UserWarningType.Park);
                                    string xmlUserWarning = GenerateXMLUsersWarnings(oUsersWarnings);
                                    parametersOut["user_warnings"] = xmlUserWarning;
                                }
                                catch
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                string strCulture = strSessionCulture;
                                if (parametersIn["lang"] != null)
                                {
                                    try
                                    {
                                        int iLangIndex = Convert.ToInt32(parametersIn["lang"].ToString());
                                        if (iLangIndex <= UserDeviceLangs.Length)
                                        {
                                            strCulture = UserDeviceLangs[iLangIndex - 1];
                                        }
                                    }
                                    catch
                                    { }
                                }

                                INSTALLATION oInst = geograficAndTariffsRepository.GetSuperInstallation(oGroup.GRP_INS_ID);
                                if (oInst == null) oInst = oGroup.INSTALLATION;
                                ulong ulAppVersion = AppUtilities.AppVersion(strAppVersion);
                                parametersOut["userparks"] = GetUserCurrentParkingOperations(ref oUser, oInst.INS_ID, strCulture, ulAppVersion);

                                xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "user_warnings", "userparks" });

                                if (xmlOut.Length == 0)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }
                                else
                                {
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                }

                                oUser = null;

                            }
                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: '{0}'", e.ToString()), LogLevels.logERROR);

            }

            DeleteConfirmLockInformation(strLockDictionaryString);
            return xmlOut;

        }



        [WebMethod]
        public string ConfirmParkingOperationJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                Logger_AddLogMessage(string.Format("ConfirmParkingOperationJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ConfirmParkingOperation(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ConfirmParkingOperationJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ConfirmParkingOperationJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }


        [WebMethod]
        public string SendParkingEmailTo(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("SendParkingEmailTo: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["emailrecipient"] == null) ||
                        (parametersIn["operationid"] == null)
                        )
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("SendParkingEmailTo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        return xmlOut;

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("SendParkingEmailTo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            return xmlOut;

                        }
                        else
                        {


                            decimal dOperationID;
                            try
                            {
                                dOperationID = (decimal)Int32.Parse(parametersIn["operationid"].ToString(), CultureInfo.InvariantCulture);
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("SendParkingEmailTo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }


                            string strEmailRecipient = parametersIn["emailrecipient"].ToString().Trim();


                            USER oUser = null;
                            string strAppVersion = "";
                            decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();

                            rt = GetUserData(ref oUser, parametersIn, out strAppVersion, ref dSourceApp);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("SendParkingEmailTo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            EmailChecker.EmailCheckResult oCheckResult = EmailChecker.EmailCheckResult.Invalid;

                            oCheckResult = EmailChecker.Check(strEmailRecipient);
                                
                            if ((oCheckResult != EmailChecker.EmailCheckResult.Valid) && (oCheckResult != EmailChecker.EmailCheckResult.Unknown))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Email_Address);
                                Logger_AddLogMessage(string.Format("SendParkingEmailTo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            if (!Email_ConfirmParking(ref oUser, dOperationID, strEmailRecipient))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("SendParkingEmailTo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            xmlOut = GenerateXMLOuput(parametersOut);

                            /*DateTime dtSavedInstallationTime = DateTime.UtcNow;
                            decimal dPercVAT1;
                            decimal dPercVAT2;
                            decimal dPercFEE;
                            int iPercFEETopped;
                            int iFixedFEE;
                            int iPartialVAT1;
                            int iPartialPercFEE;
                            int iPartialFixedFEE;
                            int iPartialPercFEEVAT;
                            int iPartialFixedFEEVAT;
                            int iTotalQuantity;
                            decimal dPercBonus;
                            int iPartialBonusFEE;
                            int iPartialBonusFEEVAT;
                            int iQuantity;


                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            try
                            {
                                OPERATION oParkOp = null;
                                if (customersRepository.GetOperationData(dOperationID, out oParkOp))
                                {
                                    string culture = oUser.USR_CULTURE_LANG;
                                    CultureInfo ci = new CultureInfo(culture);
                                    Thread.CurrentThread.CurrentUICulture = ci;
                                    Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);
                                    integraMobile.WS.Properties.Resource.Culture = ci;


                                    iQuantity = oParkOp.OPE_AMOUNT;
                                    dPercVAT1 = oParkOp.OPE_PERC_VAT1 ?? 0;
                                    dPercVAT2 = oParkOp.OPE_PERC_VAT2 ?? 0;
                                    dPercFEE = oParkOp.OPE_PERC_FEE ?? 0;
                                    dPercBonus = oParkOp.OPE_PERC_BONUS ?? 0;
                                    iPercFEETopped = (int)(oParkOp.OPE_PERC_FEE_TOPPED ?? 0);
                                    iFixedFEE = (int)(oParkOp.OPE_FIXED_FEE ?? 0);

                                    iTotalQuantity = customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, dPercBonus,
                                                                                        out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialBonusFEE,
                                                                                        out iPartialPercFEEVAT, out iPartialFixedFEEVAT, out iPartialBonusFEEVAT);


                                    int iQFEE = Convert.ToInt32(Math.Round(iQuantity * dPercFEE, MidpointRounding.AwayFromZero));
                                    if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                    iQFEE += iFixedFEE;
                                    int iQBonus = iPartialBonusFEE - iPartialBonusFEEVAT;
                                    int iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT - iPartialBonusFEEVAT;
                                    int iQSubTotal = iQuantity + iQFEE;

                                    int iLayout = 0;
                                    if (dPercBonus == 0)
                                    {
                                        if (iQFEE != 0 || iQVAT != 0)
                                        {
                                            iLayout = oParkOp.INSTALLATION.INS_FEE_LAYOUT;
                                        }
                                    }
                                    else
                                        iLayout = 3;


                                    string sLayoutSubtotal = "";
                                    string sLayoutTotal = "";

                                    string strSpaceSection = "";
                                    string strSourceAppEmailPrefix = GetEmailSourceAppEmailPrefix(dSourceApp);


                                    string sCurIsoCode = infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oParkOp.OPE_AMOUNT_CUR_ID));

                                    if (iLayout == 2)
                                    {
                                        sLayoutSubtotal = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "Email_LayoutSubtotal"),
                                                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQSubTotal) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)),
                                                                        (oParkOp.OPE_PERC_VAT1 != 0 ? string.Format("{0:0.00#}% ", oParkOp.OPE_PERC_VAT1 * 100) : "") +
                                                                        (oParkOp.OPE_PERC_VAT2 != 0 && oParkOp.OPE_PERC_VAT1 != oParkOp.OPE_PERC_VAT2 ? string.Format("{0:0.00#}%", oParkOp.OPE_PERC_VAT2 * 100) : ""),
                                                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQVAT) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)));
                                    }
                                    else if (iLayout == 1)
                                    {
                                        sLayoutTotal = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "Email_LayoutTotal"),
                                                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQuantity) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)),
                                                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQFEE) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)),
                                                                        (oParkOp.OPE_PERC_VAT1 != 0 ? string.Format("{0:0.00#}% ", oParkOp.OPE_PERC_VAT1 * 100) : "") +
                                                                        (oParkOp.OPE_PERC_VAT2 != 0 && oParkOp.OPE_PERC_VAT1 != oParkOp.OPE_PERC_VAT2 ? string.Format("{0:0.00#}%", oParkOp.OPE_PERC_VAT2 * 100) : ""),
                                                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQVAT) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)));
                                    }


                                    string strParkingEmailSubject = ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "ConfirmParking_EmailHeader");
                                  
                                    INSTALLATION oInstallation = oParkOp.INSTALLATION;
                                    string sCurIsoCode2 = oParkOp.CURRENCy.CUR_ISO_CODE;
                                    string sCurIsoCode3 = oParkOp.CURRENCy1.CUR_ISO_CODE;

                                    string strParkingEmailBody = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "ConfirmParking_EmailBody"),
                                        oParkOp.OPE_ID,
                                        oParkOp.USER_PLATE.USRP_PLATE,
                                        oParkOp.INSTALLATION.INS_DESCRIPTION,
                                        oParkOp.GROUP.GRP_DESCRIPTION,
                                        oParkOp.TARIFF.TAR_DESCRIPTION,
                                        oParkOp.OPE_DATE,
                                        oParkOp.OPE_INIDATE,
                                        oParkOp.OPE_ENDDATE,
                                        (oParkOp.OPE_AMOUNT_CUR_ID == oParkOp.OPE_BALANCE_CUR_ID ?
                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode2) + "} {1}", Convert.ToDouble(oParkOp.OPE_TOTAL_AMOUNT) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode2), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode2)) :
                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode2) + "} {1} / {2:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode3) + "} {3}",
                                                                                        Convert.ToDouble(oParkOp.OPE_TOTAL_AMOUNT) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode2), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode2),
                                                                                        Convert.ToDouble(oParkOp.OPE_FINAL_AMOUNT) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode3), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode3))),
                                                                                         (oParkOp.OPE_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPrepay || oUser.USR_BALANCE > 0) ?
                                                string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "Confirm_EmailBody_Balance"), string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))) + "} {1}",
                                                            Convert.ToDouble(oUser.USR_BALANCE) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))),
                                                            infraestructureRepository.GetCurrencySymbolOrIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)))) : "",
                                        ConfigurationManager.AppSettings["EmailSignatureURL"],
                                        ConfigurationManager.AppSettings["EmailSignatureGraphic"],
                                        sLayoutSubtotal,
                                        sLayoutTotal,
                                        strSpaceSection,
                                        GetEmailFooter(ref oInstallation, dSourceApp));


                                    SendEmail(strEmailRecipient, strParkingEmailSubject, strParkingEmailBody, dSourceApp);

                                    xmlOut = GenerateXMLOuput(parametersOut);
                                }
                                else
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("SendParkingEmailTo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("SendParkingEmailTo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }*/

                        }

                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                    Logger_AddLogMessage(string.Format("SendParkingEmailTo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    return xmlOut;

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("SendParkingEmailTo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }


            return xmlOut;

        }

        [WebMethod]
        public string SendParkingEmailToJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("SendParkingEmailToJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = SendParkingEmailTo(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("SendParkingEmailToJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("SendParkingEmailToJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }



        /*
         *  QueryUnParkingOperation
         *  
        <ipark_in>
            <u>user login or generated user id for anonymous operations</u>
            <p>plate</p>
            <d>date in format hh24missddMMYY</d>
            <ah>authentication hash</ah>

        </ ipark _in>
         * 
         * 
        <ipark_out>
            <r>Result of the method</r>	
            <q>quantity in Cents to be refunded</q>
            <d1>Initial date (in format hh24missddMMYY) for the parking operation chain (first parking, extensions and unparking operation) after unparking</d1>
            <d2>End date (in format hh24missddMMYY) for the parking operation chain (first parking, extensions and unparking operation) after unparking</d2>
            <t>Tariff time in minutes for the parking operation chain after unparking (d2-d1) </t>

        </ipark_out>
         * 
         * 
        Result of the method:
            a.	1: UnParking is possible and the restrictions come after this tag.
            b.	-1: Invalid authentication hash
            c.	-4: Plate has no rights for doing an unparking operation
            d.	-9: Generic Error (for example database or execution error.)
        
         *
         */
        [WebMethod]
        public string QueryUnParkingOperation(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";
                string sLiteralUnparkNotAllowed = string.Empty;
                Logger_AddLogMessage(string.Format("QueryUnParkingOperation: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["d"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("QueryUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            // ***
                            //parametersIn["g"] = 300101;
                            //parametersIn["ad"] = 300101;
                            // ***

                            DateTime dt;
                            try
                            {
                                dt = DateTime.ParseExact(parametersIn["d"].ToString(), "HHmmssddMMyy",
                                  CultureInfo.InvariantCulture);
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }

                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";

                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (dInsId.HasValue)
                            {
                                INSTALLATION oInstallation = infraestructureRepository.Installations.FirstOrDefault(x => x.INS_ID == dInsId.Value);
                                sLiteralUnparkNotAllowed = infraestructureRepository.GetLiteral(oInstallation.INS_LIT_UNPARK_NOT_ALLOWED.Value, strCulture);
                            }

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = SpecifyMessageErrorRefundNotPossible(sLiteralUnparkNotAllowed, parametersOut, rt);
                                //xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            ulong ulAppVersion = AppUtilities.AppVersion(strAppVersion);


                            if ((ulAppVersion < _VERSION_2_3) && (parametersIn["p"] == null))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }
                            string strPlate = parametersIn["p"] != null ? parametersIn["p"].ToString() : "";
                            strPlate = NormalizePlate(strPlate);

                            if ((ulAppVersion < _VERSION_2_3) && (strPlate.Length == 0))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            if (strPlate.Length > 0)
                            {
                                string strPlateSharing = infraestructureRepository.GetParameterValue("PlateSharing");
                                bool bPlateSharing = true;

                                if (!string.IsNullOrEmpty(strPlateSharing))
                                {
                                    bPlateSharing = (strPlateSharing != "0");
                                }

                                if (!customersRepository.IsPlateOfUser(ref oUser, strPlate))
                                {
                                    if (bPlateSharing || !customersRepository.IsPlateAssignedToAnotherUser(ref oUser, strPlate))
                                    {
                                        if (!customersRepository.AddPlateToUser(ref oUser, strPlate))
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("QueryUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                    }
                                    else
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Plate_Is_Assigned_To_Another_User);
                                        Logger_AddLogMessage(string.Format("QueryUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }

                            }

                            decimal? dGroupId = null;
                            decimal? dTariffId = null;

                            try
                            {
                                decimal dTryGroupId = Convert.ToDecimal(parametersIn["g"].ToString());
                                dGroupId = dTryGroupId;
                            }
                            catch
                            {
                                dGroupId = null;
                            }

                            try
                            {
                                decimal dTryTariffId = Convert.ToDecimal(parametersIn["ad"].ToString());
                                dTariffId = dTryTariffId;
                            }
                            catch
                            {
                                dTariffId = null;
                            }

                            decimal? dStreetSectionId = null;
                            try
                            {
                                decimal dTryId = Convert.ToDecimal(parametersIn["sts"].ToString());
                                dStreetSectionId = dTryId;
                            }
                            catch
                            {
                                dStreetSectionId = null;
                            }
                            
                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                            List<SortedList> lstRefunds = new List<SortedList>();

                            int iWSTimeout = infraestructureRepository.GetRateWSTimeout(dInsId.Value);
                            long lEllapsedTime = 0;

                            xmlOut = QueryUnParkingOperation(xmlIn,
                                                ref parametersIn,
                                                ref oUser,
                                                dInsId,
                                                strCulture,
                                                ulAppVersion,
                                                strPlate,
                                                dGroupId, dStreetSectionId, dTariffId,iWSTimeout,
                                                ref lstRefunds,
                                                ref parametersOut,
                                                ref rt,
                                                out lEllapsedTime);

                            if (dInsId.HasValue && !string.IsNullOrEmpty(sLiteralUnparkNotAllowed))
                            {
                                INSTALLATION oInstallation = infraestructureRepository.Installations.FirstOrDefault(x => x.INS_ID == dInsId.Value);
                                sLiteralUnparkNotAllowed = infraestructureRepository.GetLiteral(oInstallation.INS_LIT_UNPARK_NOT_ALLOWED.Value, strCulture);
                            }

                            if (rt == ResultType.Result_OK)
                            {

                                if (dGroupId.HasValue && dTariffId.HasValue)
                                {
                                    parametersOut["refunds"] = "";
                                    SortedList oSelRefund = null;

                                    foreach (SortedList oRefund in lstRefunds)
                                    {

                                        decimal? dRefGroupId = oRefund.ContainsKey("g") ? Convert.ToDecimal(oRefund["g"]) : (decimal?)null;
                                        decimal? dRefStreetSectionId = oRefund.ContainsKey("sts") ? Convert.ToDecimal(oRefund["sts"]) : (decimal?)null;
                                        decimal? dRefTariffId = oRefund.ContainsKey("ad") ? Convert.ToDecimal(oRefund["ad"]) : (decimal?)null;

                                        if ((dGroupId == dRefGroupId) && (dTariffId == dRefTariffId) &&
                                            (!dStreetSectionId.HasValue || dStreetSectionId.Value == (dRefStreetSectionId??0)))
                                        {
                                            oSelRefund = oRefund;
                                            break;
                                        }

                                    }

                                    if (oSelRefund == null)
                                    {
                                        rt = ResultType.Result_Error_RefundNotPossible;
                                        xmlOut = SpecifyMessageErrorRefundNotPossible(sLiteralUnparkNotAllowed, parametersOut, rt);
                                        Logger_AddLogMessage(string.Format("QueryUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                                    }
                                    else
                                    {
                                        //decimal? dRefGroupId = oSelRefund.ContainsKey("g") ? Convert.ToDecimal(oSelRefund["g"]) : (decimal?)null;                                        
                                        //decimal? dRefTariffId = oSelRefund.ContainsKey("ad") ? Convert.ToDecimal(oSelRefund["ad"]) : (decimal?)null;
                                        //if (dRefGroupId.HasValue && dRefTariffId.HasValue)
                                        //{
                                        //    var oTariff = GetTariff(dRefGroupId.Value, dRefTariffId.Value);
                                        //    if (oTariff != null && oTariff.TAR_BEHAVIOR == (int)ParkingMode.StartStopHybrid)
                                        //    {
                                        //        int iQuantity = Convert.ToInt32(oSelRefund["q"]);
                                        //        oSelRefund["q_ref"] = iQuantity;
                                        //        
                                        //        int? iQuantityRem = null;
                                        //        if (oSelRefund["q_rem"] != null)
                                        //        {
                                        //            int iAmount = Convert.ToInt32(oSelRefund["q_rem"]);
                                        //            RecalcRefundAmount(ref iAmount, ref oUser, ref oSelRefund, oTariff.INSTALLATION, ulAppVersion);
                                        //            oSelRefund.Remove("q_rem");
                                        //            iQuantityRem = iAmount;
                                        //            if (oSelRefund["q_rem_without_bon"] != null)
                                        //            {
                                        //                SortedList oSelRefundTmp = new SortedList();
                                        //                iAmount = Convert.ToInt32(oSelRefund["q_rem_without_bon"]);
                                        //                RecalcRefundAmount(ref iAmount, ref oUser, ref oSelRefundTmp, oGroup.INSTALLATION, ulAppVersion);
                                        //                oSelRefund["q_without_bon"] = iAmount;
                                        //                oSelRefund.Remove("q_rem_without_bon");
                                        //            }
                                        //
                                        //        }
                                        //        if (oSelRefund["t_rem"] != null)
                                        //        {
                                        //            oSelRefund["t"] = oSelRefund["t_rem"];
                                        //            oSelRefund.Remove("t_rem");
                                        //        }
                                        //    }
                                        //}
                                        
                                        StringBuilder sb = new StringBuilder();
                                        sb.Append("<refund json:Array='true'>");
                                        foreach (string key in oSelRefund.Keys)
                                        {
                                            sb.AppendFormat("<{0}>{1}</{0}>", key, oSelRefund[key]);
                                        }
                                        sb.Append("</refund>");
                                        parametersOut["refunds"] = sb.ToString();
                                    }
                                }
                            }

                            if (string.IsNullOrEmpty(xmlOut))
                            {
                                if (ulAppVersion >= _VERSION_2_3)
                                {
                                    xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "refunds" });
                                }
                                else
                                {
                                    xmlOut = GenerateXMLOuput(parametersOut);
                                }
                            }

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("QueryUnParkingOperation: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                            oUser = null;
                        }
                    }

                    if (parametersIn != null)
                    {
                        parametersIn.Clear();
                        parametersIn = null;
                    }

                    if (parametersOut != null)
                    {
                        parametersOut.Clear();
                        parametersOut = null;
                    }

                }
                else
                {
                    xmlOut = SpecifyMessageErrorRefundNotPossible(sLiteralUnparkNotAllowed, parametersOut, rt);
                    Logger_AddLogMessage(string.Format("QueryUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }


        [WebMethod]
        public string QueryUnParkingOperationJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("QueryUnParkingOperationJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryUnParkingOperation(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("QueryUnParkingOperationJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryUnParkingOperationJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }

        /*
         *  ConfirmUnParkingOperation 
         *  
        <ipark_in>
            <u>user login or generated user id for anonymous operations</u>
            <m>plate</m>
            <d>date in format hh24missddMMYY </d>
            <q>Amount refunded in Cents</q>
            <ah>authentication hash</ah>

        </ ipark _in>
         * 
         
         * 
         * 
        Result of the method:
        a.	Result: is an integer containing a Boolean value. 0 if an error has occurred
         * saving the operation or 1 if the operation has been stored correctly.    
         *
         */
        [WebMethod]
        public string ConfirmUnParkingOperation(string xmlIn)
        {
            string xmlOut = "";
            string strLockDictionaryString = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["p"] == null) ||
                        (parametersIn["d"] == null) ||
                        (parametersIn["q"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            strLockDictionaryString = parametersIn["u"].ToString();
                            if (ExistConfirmLockInformation(strLockDictionaryString))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_ConfirmOperationAlreadyExecuting);
                                Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }
                            else
                            {


                                DateTime dt;
                                try
                                {
                                    dt = DateTime.ParseExact(parametersIn["d"].ToString(), "HHmmssddMMyy",
                                      CultureInfo.InvariantCulture);
                                }
                                catch
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }

                                int iQuantity;
                                try
                                {
                                    iQuantity = Int32.Parse(parametersIn["q"].ToString(), CultureInfo.InvariantCulture);
                                }
                                catch
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }

                                int? iQuantityRefund = null;
                                try
                                {
                                    iQuantityRefund = Int32.Parse(parametersIn["q_ref"].ToString(), CultureInfo.InvariantCulture);
                                }
                                catch { }


                                USER oUser = null;
                                decimal? dInsId = null;
                                string strAppVersion = "";
                                //rt = GetUserData(ref oUser, parametersIn, out dInsId, out strAppVersion);
                                string strSessionCulture = "";
                                decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();

                                rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strSessionCulture, out strAppVersion, ref dSourceApp);


                                if (rt != ResultType.Result_OK)
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(rt);
                                    Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                decimal? dLatitude = null;
                                decimal? dLongitude = null;
                                GetLatLon(parametersIn, out dLatitude, out dLongitude);


                                string strPlate = NormalizePlate(parametersIn["p"].ToString());

                                if (strPlate.Length == 0)
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }


                                string strPlateSharing = infraestructureRepository.GetParameterValue("PlateSharing");
                                bool bPlateSharing = true;

                                if (!string.IsNullOrEmpty(strPlateSharing))
                                {
                                    bPlateSharing = (strPlateSharing != "0");
                                }

                                if (!customersRepository.IsPlateOfUser(ref oUser, strPlate))
                                {
                                    if (bPlateSharing || !customersRepository.IsPlateAssignedToAnotherUser(ref oUser, strPlate))
                                    {
                                        if (!customersRepository.AddPlateToUser(ref oUser, strPlate))
                                        {
                                            DeleteConfirmLockInformation(strLockDictionaryString);
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                    }
                                    else
                                    {

                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Plate_Is_Assigned_To_Another_User);
                                        Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;

                                    }
                                }

                                parametersOut = new SortedList();
                                parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                                decimal? dGroupId = null;
                                decimal? dTariffId = null;

                                try
                                {
                                    decimal dTryGroupId = Convert.ToDecimal(parametersIn["g"].ToString());
                                    dGroupId = dTryGroupId;
                                }
                                catch
                                {
                                    dGroupId = null;
                                }

                                try
                                {
                                    decimal dTryTariffId = Convert.ToDecimal(parametersIn["ad"].ToString());
                                    dTariffId = dTryTariffId;
                                }
                                catch
                                {
                                    dTariffId = null;
                                }



                                if (AppUtilities.AppVersion(strAppVersion) >= _VERSION_2_10)
                                {
                                    if (!dGroupId.HasValue || !dTariffId.HasValue)
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }

                                decimal? dStreetSectionId = null;
                                try
                                {
                                    decimal dTryId = Convert.ToDecimal(parametersIn["sts"].ToString());
                                    dStreetSectionId = dTryId;
                                }
                                catch
                                {
                                    dStreetSectionId = null;
                                }
                                STREET_SECTION oStreetSection = null;
                                if (dStreetSectionId.HasValue)
                                {
                                    if (!geograficAndTariffsRepository.GetStreetSection(dStreetSectionId.Value, out oStreetSection) &&
                                        oStreetSection.INSTALLATION.INS_ID != (dInsId ?? 0))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }

                                DateTime? dtEndModified;
                                int iWSTimeout = infraestructureRepository.GetRateWSTimeout(dInsId.Value);
                                

                                xmlOut = ConfirmUnParkingOperation(xmlIn,
                                                    ref parametersIn,
                                                    ref oUser,
                                                    dInsId,
                                                    dLatitude,
                                                    dLongitude,
                                                    strAppVersion,
                                                    strPlate,
                                                    iQuantity,
                                                    null,
                                                    dGroupId,
                                                    dStreetSectionId,
                                                    dTariffId,
                                                    dSourceApp,
                                                    strSessionCulture,
                                                    iWSTimeout,
                                                    ref parametersOut,
                                                    ref rt,
                                                    out dtEndModified);


                                try
                                {
                                    IEnumerable<USERS_WARNING> oUsersWarnings = customersRepository.GetUsersWarnings(oUser.USR_ID, (int)UserWarningType.UnPark);
                                    string xmlUserWarning = GenerateXMLUsersWarnings(oUsersWarnings);
                                    parametersOut["user_warnings"] = xmlUserWarning;
                                }
                                catch
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                if (string.IsNullOrEmpty(xmlOut))
                                {
                                    xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "refunds", "user_warnings", "userparks" });
                                }

                                if (xmlOut.Length == 0)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }
                                else
                                {
                                    Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                }

                                oUser = null;
                            }
                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            DeleteConfirmLockInformation(strLockDictionaryString);
            return xmlOut;

        }

        [WebMethod]
        public string ConfirmUnParkingOperationJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ConfirmUnParkingOperationJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ConfirmUnParkingOperation(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ConfirmUnParkingOperationJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ConfirmUnParkingOperationJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }



        [WebMethod]
        public string StopParkingOperation(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("StopParkingOperation: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["d"] == null) ||
                        (parametersIn["g"] == null) ||
                        (parametersIn["ad"] == null) ||
                        (parametersIn["p"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("StopParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {

                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("StopParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            DateTime dt;
                            try
                            {
                                dt = DateTime.ParseExact(parametersIn["d"].ToString(), "HHmmssddMMyy",
                                  CultureInfo.InvariantCulture);
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("StopParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }

                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";


                            decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();

                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion, ref dSourceApp);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("StopParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            ulong ulAppVersion = AppUtilities.AppVersion(strAppVersion);


                            string strPlate = parametersIn["p"] != null ? parametersIn["p"].ToString() : "";
                            strPlate = NormalizePlate(strPlate);


                            if (strPlate.Length > 0)
                            {
                                string strPlateSharing = infraestructureRepository.GetParameterValue("PlateSharing");
                                bool bPlateSharing = true;

                                if (!string.IsNullOrEmpty(strPlateSharing))
                                {
                                    bPlateSharing = (strPlateSharing != "0");
                                }

                                if (!customersRepository.IsPlateOfUser(ref oUser, strPlate))
                                {
                                    if (bPlateSharing || !customersRepository.IsPlateAssignedToAnotherUser(ref oUser, strPlate))
                                    {
                                        if (!customersRepository.AddPlateToUser(ref oUser, strPlate))
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("StopParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                    }
                                    else
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Plate_Is_Assigned_To_Another_User);
                                        Logger_AddLogMessage(string.Format("StopParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }

                            }

                            decimal? dGroupId = null;
                            try
                            {
                                decimal dTryGroupId = Convert.ToDecimal(parametersIn["g"].ToString());
                                dGroupId = dTryGroupId;
                            }
                            catch
                            {
                                dGroupId = null;
                            }

                            GROUP oGroup = null;
                            DateTime? dtInstDateTime = null;

                            if (!geograficAndTariffsRepository.getGroup(dGroupId,
                                                                        ref oGroup,
                                                                        ref dtInstDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("StopParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            decimal? dStreetSectionId = null;
                            try
                            {
                                decimal dTryId = Convert.ToDecimal(parametersIn["sts"].ToString());
                                dStreetSectionId = dTryId;
                            }
                            catch
                            {
                                dStreetSectionId = null;
                            }
                            STREET_SECTION oStreetSection = null;
                            if (dStreetSectionId.HasValue)
                            {
                                if (!geograficAndTariffsRepository.GetStreetSection(dStreetSectionId.Value, out oStreetSection) &&
                                    oStreetSection.INSTALLATION.INS_ID != (dInsId ?? 0))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }

                            decimal dTariffId;
                            try
                            {
                                dTariffId = Convert.ToDecimal(parametersIn["ad"].ToString());
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("StopParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            TARIFF oTariff = null;
                            if (oGroup.INSTALLATION.INS_MAP_SCREEN_TYPE != 1)
                            {
                                TARIFFS_IN_GROUP oTariffInGroup = null;
                                try
                                {
                                    oTariffInGroup = oGroup.TARIFFS_IN_GROUPs.Where(r => r.TARGR_TAR_ID == dTariffId).First();
                                    oTariff = oTariffInGroup.TARIFF;
                                }
                                catch
                                {

                                    foreach (GROUPS_TYPES_ASSIGNATION oAssigns in oGroup.GROUPS_TYPES_ASSIGNATIONs)
                                    {
                                        try
                                        {
                                            oTariffInGroup = oAssigns.GROUPS_TYPE.TARIFFS_IN_GROUPs.Where(r => r.TARGR_TAR_ID == dTariffId).First();
                                            oTariff = oTariffInGroup.TARIFF;
                                            break;
                                        }
                                        catch { }
                                    }

                                    if (oTariff == null)
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("StopParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                }
                            }
                            else
                            {
                                oTariff = oGroup.INSTALLATION.TARIFFs.Where(t => t.TAR_ID == dTariffId).FirstOrDefault();
                                if (oTariff == null)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("StopParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }

                            /*if (oTariff.TAR_BEHAVIOR != (int)ParkingMode.StartStop)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("StopParkingOperation::No start/stop tariff behavior configured: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }*/

                            int iRetry = 0;
                            if (parametersIn["retry"] != null)
                            {
                                try
                                {
                                    iRetry = Convert.ToInt32(parametersIn["retry"].ToString());
                                }
                                catch { }
                            }

                            OPERATION oStopOperation = null;
                            // ***
                            //if (iRetry > 0) 
                            //{
                            if (!customersRepository.ExistStopParkingOperation(oUser.USR_ID, strPlate, null, null, out oStopOperation))
                                oStopOperation = null;
                            //}


                            CultureInfo oSystemCulture = Thread.CurrentThread.CurrentUICulture;

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                            int iWSTimeout = infraestructureRepository.GetRateWSTimeout(oGroup.INSTALLATION.INS_ID);
                            long lEllapsedTime = 0;
                            if (oStopOperation == null)
                            {

                                List<SortedList> lstRefunds = new List<SortedList>();

                                xmlOut = QueryUnParkingOperation(xmlIn,
                                                    ref parametersIn,
                                                    ref oUser,
                                                    dInsId,
                                                    strCulture,
                                                    ulAppVersion,
                                                    strPlate,
                                                    dGroupId, dStreetSectionId, dTariffId,
                                                    iWSTimeout,
                                                    ref lstRefunds,
                                                    ref parametersOut,
                                                    ref rt,
                                                    out lEllapsedTime);

                                iWSTimeout -= (int)lEllapsedTime;
                                if (rt == ResultType.Result_OK)
                                {
                                    parametersOut["refunds"] = "";

                                    Logger_AddLogMessage(string.Format("StopParkingOperation: refunds count={0}", lstRefunds.Count()), LogLevels.logINFO);

                                    SortedList oSelRefund = null;

                                    foreach (SortedList oRefund in lstRefunds)
                                    {

                                        decimal? dRefGroupId = oRefund.ContainsKey("g") ? Convert.ToDecimal(oRefund["g"]) : (decimal?)null;
                                        decimal? dRefStreetSectionId = oRefund.ContainsKey("sts") ? Convert.ToDecimal(oRefund["sts"]) : (decimal?)null;
                                        decimal? dRefTariffId = oRefund.ContainsKey("ad") ? Convert.ToDecimal(oRefund["ad"]) : (decimal?)null;

                                        Logger_AddLogMessage(string.Format("StopParkingOperation: dStreetSectionId={0}, dRefStreetSectionId={1}", dStreetSectionId, dRefStreetSectionId), LogLevels.logINFO);

                                        if ((dGroupId == dRefGroupId) && (dTariffId == dRefTariffId) &&
                                            (!dStreetSectionId.HasValue || dStreetSectionId.Value == (dRefStreetSectionId ?? 0)))
                                        {
                                            oSelRefund = oRefund;
                                            Logger_AddLogMessage(string.Format("StopParkingOperation: refund selected"), LogLevels.logINFO);
                                            break;
                                        }

                                    }

                                    if (oSelRefund == null)
                                    {
                                        if (dInsId.HasValue)
                                        {
                                            INSTALLATION oInstallation = infraestructureRepository.Installations.FirstOrDefault(x => x.INS_ID == dInsId.Value);
                                            string sLiteralUnparkNotAllowed = infraestructureRepository.GetLiteral(oInstallation.INS_LIT_UNPARK_NOT_ALLOWED.Value, strCulture);

                                            if (!string.IsNullOrEmpty(sLiteralUnparkNotAllowed))
                                            {
                                                parametersOut["literal_unpark_not_allowed"] = sLiteralUnparkNotAllowed;
                                            }
                                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_Error_RefundNotPossible).ToString();
                                            rt = (ResultType)Convert.ToInt32(parametersOut["r"].ToString());
                                        }
                                        //Logger_AddLogMessage(string.Format("StopParkingOperation::Error: Not exist refund for plate {0} in group {1} and tariff {2}", strPlate, dGroupId, dTariffId), LogLevels.logERROR);
                                        //xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_RefundNotPossible);
                                        //Logger_AddLogMessage(string.Format("QueryUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    }


                                    decimal? dLatitude = null;
                                    decimal? dLongitude = null;
                                    GetLatLon(parametersIn, out dLatitude, out dLongitude);

                                    int iQuantity = Convert.ToInt32(oSelRefund["q"]);

                                    int? iQuantityRem = null;
                                    if (oSelRefund["q_rem"] != null)
                                    {
                                        int iAmount = Convert.ToInt32(oSelRefund["q_rem"]);
                                        RecalcRefundAmount(ref iAmount, ref oUser, ref oSelRefund, oGroup.INSTALLATION, ulAppVersion);
                                        oSelRefund.Remove("q_rem");
                                        iQuantityRem = iAmount;
                                        if (oSelRefund["q_rem_without_bon"] != null)
                                        {
                                            SortedList oSelRefundTmp = new SortedList();
                                            iAmount = Convert.ToInt32(oSelRefund["q_rem_without_bon"]);
                                            RecalcRefundAmount(ref iAmount, ref oUser, ref oSelRefundTmp, oGroup.INSTALLATION, ulAppVersion);
                                            oSelRefund["q_without_bon"] = iAmount;
                                            oSelRefund.Remove("q_rem_without_bon");
                                        }

                                    }
                                    if (oSelRefund["t_rem"] != null)
                                    {
                                        oSelRefund["t"] = oSelRefund["t_rem"];
                                        oSelRefund.Remove("t_rem");
                                    }

                                    if (!dStreetSectionId.HasValue && oSelRefund.ContainsKey("sts"))
                                    {
                                        dStreetSectionId = Convert.ToDecimal(oSelRefund["sts"]);
                                    }

                                    DateTime? dtEndModified;
                                    xmlOut = ConfirmUnParkingOperation(xmlIn,
                                                      ref parametersIn,
                                                      ref oUser,
                                                      dInsId,
                                                      dLatitude,
                                                      dLongitude,
                                                      strAppVersion,
                                                      strPlate,
                                                      iQuantity,
                                                      iQuantityRem,
                                                      dGroupId,
                                                      dStreetSectionId,
                                                      dTariffId,
                                                      dSourceApp,
                                                      strCulture,
                                                      iWSTimeout,
                                                      ref parametersOut,
                                                      ref rt,
                                                      out dtEndModified) ;

                                    if (rt == ResultType.Result_OK)
                                    {
                                        Thread.CurrentThread.CurrentUICulture = oSystemCulture;
                                        Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(oSystemCulture.Name);
                                        integraMobile.WS.Properties.Resource.Culture = oSystemCulture;


                                        oSelRefund["ServiceParkingLbl"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.INS_SERVICE_PARK_LIT_ID ?? 0, strCulture);
                                        oSelRefund["ServiceParkingBaseLbl"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.INS_SERVICE_PARK_BASE_LIT_ID ?? 0, strCulture);
                                        oSelRefund["ServiceParkingVariableLbl"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.INS_SERVICE_PARK_VARIABLE_LIT_ID ?? 0, strCulture);

                                        if (oSelRefund["q_fee_lbl"] != null)
                                        {
                                            oSelRefund["ServiceFeeLbl"] = oSelRefund["q_fee_lbl"];
                                            oSelRefund["ServiceFeeVATLbl"] = oSelRefund["q_fee_vat_lbl"];
                                            oSelRefund["ServiceVATLbl"] = oSelRefund["q_vat_lbl"];
                                            oSelRefund["ServiceTotalLbl"] = oSelRefund["q_total_lbl"];
                                            oSelRefund.Remove("q_fee_lbl");
                                            oSelRefund.Remove("q_fee_vat_lbl");
                                            oSelRefund.Remove("q_vat_lbl");
                                            oSelRefund.Remove("q_total_lbl");
                                        }
                                        else
                                        {
                                            oSelRefund["ServiceFeeLbl"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.INS_SERVICE_FEE_LIT_ID ?? 0, strCulture);
                                            oSelRefund["ServiceFeeVATLbl"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.INS_SERVICE_FEE_PLUS_VAT_LIT_ID ?? 0, strCulture);
                                            oSelRefund["ServiceVATLbl"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.INS_SERVICE_VAT_LIT_ID ?? 0, strCulture);
                                            oSelRefund["ServiceTotalLbl"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.INS_SERVICE_TOTAL_LIT_ID ?? 0, strCulture);
                                        }

                                        if (dtEndModified.HasValue)
                                            oSelRefund["d2"] = dtEndModified.Value.ToString("HHmmssddMMyy");

                                        oSelRefund["ReceiptHeaderLbl"] = infraestructureRepository.GetLiteralFromKey(string.Format("{0}_{1}", Convert.ToInt32(oGroup.INSTALLATION.INS_ID), "RECEIPT_HEADER"), strCulture);

                                        parametersOut.Remove("refunds");
                                        foreach (string key in oSelRefund.Keys)
                                        {
                                            parametersOut[key] = oSelRefund[key];
                                        }
                                    }

                                }

                            }
                            else
                            {
                                OPERATION oStartOperation = null;
                                if (customersRepository.GetStartOperationByExternalBaseId(1, oStopOperation.OPE_EXTERNAL_BASE_ID1, out oStartOperation))
                                {
                                    SortedList oSelRefund = new SortedList();

                                    decimal dVAT1;
                                    decimal dVAT2;
                                    decimal dPercFEE;
                                    decimal dPercFEETopped;
                                    decimal dFixedFEE;
                                    int? iPaymentTypeId = null;
                                    int? iPaymentSubtypeId = null;
                                    int? iTariffType = null;
                                    IsTAXMode eTaxMode = IsTAXMode.IsNotTaxVATForward;

                                    if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                                    {
                                        iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                                        iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                                    }
                                    if (oStartOperation.TARIFF != null)
                                        iTariffType = oStartOperation.TARIFF.TAR_TYPE;
                                    if (!customersRepository.GetFinantialParams(oUser, oStartOperation.OPE_INS_ID, (PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE, iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.ParkingOperation, iTariffType,
                                                                                out dVAT1, out dVAT2, out dPercFEE, out dPercFEETopped, out dFixedFEE, out eTaxMode))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("StopParkingOperation::error getting finantial params: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;

                                    }
                                    int iStartOpAmount = oStartOperation.OPE_AMOUNT;
                                    if (eTaxMode == IsTAXMode.IsNotTaxVATBackward)
                                        iStartOpAmount += Convert.ToInt32((oStartOperation.OPE_PARTIAL_VAT1 ?? 0));


                                    if (oStopOperation.TARIFF != null)
                                        iTariffType = oStopOperation.TARIFF.TAR_TYPE;
                                    if (!customersRepository.GetFinantialParams(oUser, oStopOperation.OPE_INS_ID, (PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE, iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.ParkingRefund, iTariffType,
                                                                                out dVAT1, out dVAT2, out dPercFEE, out dPercFEETopped, out dFixedFEE, out eTaxMode))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("StopParkingOperation::error getting finantial params: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;

                                    }
                                    int iStopOpAmount = oStopOperation.OPE_AMOUNT;
                                    if (eTaxMode == IsTAXMode.IsNotTaxVATBackward)
                                        iStopOpAmount += Convert.ToInt32((oStopOperation.OPE_PARTIAL_VAT1 ?? 0));


                                    oSelRefund["ExternalID"] = oStopOperation.OPE_EXTERNAL_BASE_ID1;
                                    oSelRefund["p"] = oStopOperation.USER_PLATE.USRP_PLATE;
                                    oSelRefund["q"] = iStartOpAmount - iStopOpAmount;
                                    oSelRefund["q_rem"] = iStopOpAmount;
                                    oSelRefund["t"] = oStartOperation.OPE_TIME - oStopOperation.OPE_TIME;
                                    oSelRefund["t_rem"] = oStopOperation.OPE_TIME;
                                    oSelRefund["cur"] = oGroup.INSTALLATION.CURRENCy.CUR_ISO_CODE;

                                    oSelRefund["d1"] = oStopOperation.OPE_INIDATE.ToString("HHmmssddMMyy");
                                    oSelRefund["d2"] = oStopOperation.OPE_ENDDATE.ToString("HHmmssddMMyy");
                                    oSelRefund["d_prev_end"] = oStartOperation.OPE_ENDDATE.ToString("HHmmssddMMyy");
                                    oSelRefund["exp"] = (Conversions.RoundSeconds(dtInstDateTime.Value) < Conversions.RoundSeconds(oStopOperation.OPE_ENDDATE)) ? "0" : "1";

                                    oSelRefund["ad"] = oTariff.TAR_ID;
                                    oSelRefund["g"] = oGroup.GRP_ID;

                                    oSelRefund["base_oper_id"] = oStopOperation.OPE_EXTERNAL_BASE_ID1;

                                    oSelRefund["layout"] = oStopOperation.INSTALLATION.INS_FEE_LAYOUT;
                                    oSelRefund["time_bal"] = oUser.USR_TIME_BALANCE.ToString();

                                    if (!string.IsNullOrEmpty(oStopOperation.OPE_ADDITIONAL_PARAMS) && oStopOperation.INSTALLATION.INS_UNPARK_WS_SIGNATURE_TYPE == (int)UnParkWSSignatureType.upst_bsm)
                                    {
                                        BSMConfiguration oBSMConfiguration = null;
                                        try
                                        {
                                            oBSMConfiguration = (BSMConfiguration)JsonConvert.DeserializeObject(oStartOperation.OPE_ADDITIONAL_PARAMS, typeof(BSMConfiguration));
                                        }
                                        catch (Exception) { }

                                        if (oBSMConfiguration != null)
                                        {
                                            oSelRefund["ServiceParkingBaseQuantityLbl"] = oBSMConfiguration.parkingBaseQuantityLbl;
                                            oSelRefund["ServiceParkingVariableQuantityLbl"] = oBSMConfiguration.parkingVariableQuantityLbl;
                                        }

                                        if (oBSMConfiguration != null && oBSMConfiguration.Modifiers != null && oBSMConfiguration.Modifiers.Modifiers.Any())
                                            oSelRefund["modifiers"] = oBSMConfiguration.Modifiers.ToCustomXml();
                                    }



                                    int iAmount = Convert.ToInt32(oSelRefund["q"]);
                                    RecalcRefundAmount(ref iAmount, ref oUser, ref oSelRefund, oGroup.INSTALLATION, ulAppVersion);

                                    //Thread.CurrentThread.CurrentUICulture = oSystemCulture;
                                    //Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(oSystemCulture.Name);

                                    oSelRefund["ServiceParkingLbl"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.INS_SERVICE_PARK_LIT_ID ?? 0, strCulture);
                                    oSelRefund["ServiceParkingBaseLbl"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.INS_SERVICE_PARK_BASE_LIT_ID ?? 0, strCulture);
                                    oSelRefund["ServiceParkingVariableLbl"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.INS_SERVICE_PARK_VARIABLE_LIT_ID ?? 0, strCulture);


                                    if (oSelRefund["q_fee_lbl"] != null)
                                    {
                                        oSelRefund["ServiceFeeLbl"] = oSelRefund["q_fee_lbl"];
                                        oSelRefund["ServiceFeeVATLbl"] = oSelRefund["q_fee_vat_lbl"];
                                        oSelRefund["ServiceVATLbl"] = oSelRefund["q_vat_lbl"];
                                        oSelRefund["ServiceTotalLbl"] = oSelRefund["q_total_lbl"];
                                        oSelRefund.Remove("q_fee_lbl");
                                        oSelRefund.Remove("q_fee_vat_lbl");
                                        oSelRefund.Remove("q_vat_lbl");
                                        oSelRefund.Remove("q_total_lbl");
                                    }
                                    else
                                    {
                                        oSelRefund["ServiceFeeLbl"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.INS_SERVICE_FEE_LIT_ID ?? 0, strCulture);
                                        oSelRefund["ServiceFeeVATLbl"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.INS_SERVICE_FEE_PLUS_VAT_LIT_ID ?? 0, strCulture);
                                        oSelRefund["ServiceVATLbl"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.INS_SERVICE_VAT_LIT_ID ?? 0, strCulture);
                                        oSelRefund["ServiceTotalLbl"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.INS_SERVICE_TOTAL_LIT_ID ?? 0, strCulture);
                                    }

                                    oSelRefund["ReceiptHeaderLbl"] = infraestructureRepository.GetLiteralFromKey(string.Format("{0}_{1}", Convert.ToInt32(oGroup.INSTALLATION.INS_ID), "RECEIPT_HEADER"), strCulture);

                                    parametersOut.Remove("refunds");
                                    foreach (string key in oSelRefund.Keys)
                                    {
                                        parametersOut[key] = oSelRefund[key];
                                    }

                                    parametersOut["newbal"] = oUser.USR_BALANCE;
                                    parametersOut["new_time_bal"] = oUser.USR_TIME_BALANCE;

                                    parametersOut["cityDatetime"] = dtInstDateTime.Value.ToString("HHmmssddMMyy");
                                    parametersOut["utc_offset"] = geograficAndTariffsRepository.GetInstallationUTCOffSetInMinutes(dInsId.Value);

                                    parametersOut["userparks"] = GetUserCurrentParkingOperations(ref oUser, dInsId.Value, strCulture, ulAppVersion);

                                }
                                else
                                    parametersOut["r"] = Convert.ToInt32(ResultType.Result_Error_StartedOperation_NotExist).ToString();

                            }

                            if (string.IsNullOrEmpty(xmlOut))
                            {
                                xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "refunds", "modifiers", "userparks" });
                            }

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("StopParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("StopParkingOperation: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                            oUser = null;
                        }
                    }

                    if (parametersIn != null)
                    {
                        parametersIn.Clear();
                        parametersIn = null;
                    }

                    if (parametersOut != null)
                    {
                        parametersOut.Clear();
                        parametersOut = null;
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("StopParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("StopParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string StopParkingOperationJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("StopParkingOperationJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = StopParkingOperation(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("StopParkingOperationJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("StopParkingOperationJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }


        /*
         *  QueryFinePaymentQuantity
         *  
        <ipark_in>
            <u>user login or generated user id for anonymous operations</u>
	        <f>fine number</f>
	        <d>date in format hh24missddMMYY</d>
            <ah>authentication hash</ah>

        </ ipark _in>
         *
         * 
         * 
        Result of the method:
        a.	>0: Quantity in Cents to be paid for the input fine number
        b.	-5: Fine number not found
        c.	-6: Fine number found but fine type is not payable.
        d.	-7: Fine number not found but payment period has expired.
        e.	-8: Fine number already paid.
        f.	-9: Generic Error (for example database or execution error.)
  
         *
         */

        [WebMethod]
        public string QueryFinePaymentQuantity(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["cityID"] == null) ||
                        (parametersIn["f"] == null && parametersIn["p"] == null) ||
                        (parametersIn["d"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            DateTime dt;
                            try
                            {
                                dt = DateTime.ParseExact(parametersIn["d"].ToString(), "HHmmssddMMyy",
                                  CultureInfo.InvariantCulture);
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }

                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);


                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            decimal? dInstallationId = null;

                            try
                            {
                                decimal dTryInstallationId = Convert.ToDecimal(parametersIn["cityID"].ToString());
                                dInstallationId = dTryInstallationId;
                            }
                            catch
                            {
                                dInstallationId = null;
                            }

                            INSTALLATION oInstallation = null;
                            DateTime? dtinstDateTime = null;
                            decimal? dLatitude = null;
                            decimal? dLongitude = null;

                            if (!geograficAndTariffsRepository.getInstallation(dInstallationId,
                                                                         dLatitude,
                                                                         dLongitude,
                                                                         ref oInstallation,
                                                                         ref dtinstDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_City);
                                Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            string strFineNumber = null;
                            string strPlate = null;

                            if (parametersIn["f"] != null)
                            {
                                strFineNumber = parametersIn["f"].ToString();
                                strFineNumber = strFineNumber.Trim();
                            }
                            if (parametersIn["p"] != null)
                            {
                                strPlate = NormalizePlate(parametersIn["p"].ToString());
                            }
                            if (!string.IsNullOrEmpty(strFineNumber) && !string.IsNullOrEmpty(strPlate))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                            parametersOut["cityShortDesc"] = oInstallation.INS_SHORTDESC;

                            var oChildInstallations = geograficAndTariffsRepository.GetChildInstallations(oInstallation.INS_ID, dtinstDateTime, false);


                            int iWSTimeout = infraestructureRepository.GetRateWSTimeout(oInstallation.INS_ID);

                            if (!oChildInstallations.Any())
                            {
                                rt = QueryFinePaymentThirdParty(strFineNumber, strPlate, dtinstDateTime.Value, strCulture, oInstallation, oUser, iWSTimeout, parametersIn, parametersOut, out strFineNumber);
                            }
                            else
                            {
                                List<SortedList> oInstallationsRet = new List<SortedList>();
                                SortedList oParametersOutIns = null;
                                string strFineNumberOut = "";

                                var oStandardThirdPartyInfo = oChildInstallations.Where(i => i.INS_FINE_WS_SIGNATURE_TYPE == (int)FineWSSignatureType.fst_standard &&
                                                                                             i.INS_FINE_WS_URL != null)
                                                                                 .GroupBy(i => new { SignatureType = i.INS_FINE_WS_SIGNATURE_TYPE, Url = i.INS_FINE_WS_URL, HashKey = i.INS_FINE_WS_AUTH_HASH_KEY, HttpUser = i.INS_FINE_WS_HTTP_USER, HttpPassword = i.INS_FINE_WS_HTTP_PASSWORD })
                                                                                 .Select(g => new { Params = g.Key, Count = g.Count() })
                                    
                                                                                 .ToList();
                                Stopwatch watch = watch = Stopwatch.StartNew();
                                foreach (var oInfo in oStandardThirdPartyInfo)
                                {
                                    
                                    oParametersOutIns = new SortedList();

                                    var oInstallationsStd = oChildInstallations.Where(i => i.INS_FINE_WS_SIGNATURE_TYPE == oInfo.Params.SignatureType &&
                                                                                           i.INS_FINE_WS_URL == oInfo.Params.Url &&
                                                                                           i.INS_FINE_WS_HTTP_USER == oInfo.Params.HttpUser &&
                                                                                           i.INS_FINE_WS_HTTP_PASSWORD == oInfo.Params.HttpPassword)
                                                                                    .ToList();

                                    if (oInstallationsStd.Count > 1)
                                    {
                                        ThirdPartyFine oThirdPartyFine = null;
                                        if (oThirdPartyFine == null) oThirdPartyFine = new ThirdPartyFine();

                                        string sCityIdOut = "";
                                        rt = oThirdPartyFine.StandardQueryFinePaymentQuantityMultiInstallations(strFineNumber, dtinstDateTime.Value, oUser, oInstallationsStd.Select(i => i.INS_STANDARD_CITY_ID).ToList(), oInfo.Params.Url, oInfo.Params.HashKey, 
                                                                                                                oInfo.Params.HttpUser, oInfo.Params.HttpPassword, oInstallation.CURRENCy.CUR_ISO_CODE, iWSTimeout - (int)watch.ElapsedMilliseconds, 
                                                                                                                ref oParametersOutIns, out sCityIdOut);
                                        oParametersOutIns["r"] = Convert.ToInt32(rt).ToString();
                                        var oInstallationRet = oInstallationsStd.Where(i => i.INS_STANDARD_CITY_ID == sCityIdOut).FirstOrDefault();
                                        if (oInstallationRet != null)
                                            oParametersOutIns["insid"] = oInstallationRet.INS_ID;
                                        oInstallationsRet.Add(oParametersOutIns);
                                        if (rt == ResultType.Result_OK)
                                            break;
                                    }
                                    else
                                    {
                                        rt = QueryFinePaymentThirdParty(strFineNumber, strPlate, dtinstDateTime.Value, strCulture, oInstallationsStd.First(), oUser, iWSTimeout-(int)watch.ElapsedMilliseconds, parametersIn, oParametersOutIns, out strFineNumberOut);
                                        oParametersOutIns["insid"] = oInstallationsStd.First().INS_ID;
                                        oInstallationsRet.Add(oParametersOutIns);
                                        if (rt == ResultType.Result_OK)
                                            break;
                                    }

                                }

                                SortedList oRet = oInstallationsRet.Where(ret => ((ResultType)Convert.ToInt32(ret["r"].ToString())) == ResultType.Result_OK).FirstOrDefault();
                                if (oRet == null)
                                {
                                    foreach (var oChildInstallation in oChildInstallations.Where(i => i.INS_FINE_WS_SIGNATURE_TYPE != (int)FineWSSignatureType.fst_standard &&
                                                                                                      i.INS_FINE_WS_URL != null))
                                    {
                                        rt = QueryFinePaymentThirdParty(strFineNumber, strPlate, dtinstDateTime.Value, strCulture, oChildInstallation, oUser, iWSTimeout - (int)watch.ElapsedMilliseconds, parametersIn, parametersOut, out strFineNumber);
                                        oParametersOutIns["insid"] = oChildInstallation.INS_ID;
                                        oInstallationsRet.Add(oParametersOutIns);
                                        if (rt == ResultType.Result_OK)
                                            break;
                                    }

                                    oRet = oInstallationsRet.Where(ret => ((ResultType)Convert.ToInt32(ret["r"].ToString())) == ResultType.Result_OK).FirstOrDefault();
                                    if (oRet == null)
                                    {
                                        List<ResultType> oErrorCodes = new List<ResultType>() { ResultType.Result_Error_Fine_Number_Not_Found, ResultType.Result_Error_Fine_Payment_Period_Expired, ResultType.Result_Error_Fine_Number_Already_Paid,
                                                                                                ResultType.Result_Error_Fine_Type_Not_Payable, /*ResultCode.PlateHasAlreadyAValidOperation, ResultCode.PlatePaymentWithSpecialGrants, ResultCode.PlatePaymentDoesNotExists,*/ };
                                        oRet = oInstallationsRet.Where(ret => oErrorCodes.Contains((ResultType)Convert.ToInt32(ret["r"].ToString()))).FirstOrDefault();
                                        if (oRet == null)
                                        {
                                            oRet = oInstallationsRet.First();
                                        }
                                    }
                                }
                                watch.Stop();


                                if (oRet != null)
                                {
                                    rt = (ResultType)Convert.ToInt32(oRet["r"].ToString());
                                    parametersOut = oRet;
                                    parametersOut["cityShortDesc"] = oInstallation.INS_SHORTDESC;
                                    if (parametersOut.ContainsKey("fnumber") && parametersOut["fnumber"] != null)
                                        strFineNumber = parametersOut["fnumber"].ToString();
                                    if (parametersOut.ContainsKey("insid") && parametersOut["insid"] != null)
                                    {
                                        var oInstallationRet = oChildInstallations.Where(i => i.INS_ID == Convert.ToDecimal(parametersOut["insid"].ToString())).FirstOrDefault();
                                        if (oInstallationRet != null)
                                            oInstallation = oInstallationRet;
                                        parametersOut.Remove("insid");
                                    }
                                }
                            }

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLOuput(parametersOut);
                                Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            /*ThirdPartyFine oThirdPartyFine = new ThirdPartyFine();

                            switch ((FineWSSignatureType)oInstallation.INS_FINE_WS_SIGNATURE_TYPE)
                            {
                                case FineWSSignatureType.fst_gtechna:
                                    {
                                        rt = oThirdPartyFine.GtechnaQueryFinePaymentQuantity(strFineNumber, dtinstDateTime.Value, oInstallation, ref parametersOut);
                                        parametersOut["r"] = Convert.ToInt32(rt).ToString();
                                        if (rt != ResultType.Result_OK)
                                        {
                                            xmlOut = GenerateXMLOuput(parametersOut);
                                            Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                    }
                                    break;
                                case FineWSSignatureType.fst_standard:
                                    {
                                        rt = oThirdPartyFine.StandardQueryFinePaymentQuantity(strFineNumber, dtinstDateTime.Value, oUser, oInstallation, ref parametersOut);
                                        parametersOut["r"] = Convert.ToInt32(rt).ToString();
                                        if (parametersOut.ContainsKey("fnumber") && parametersOut["fnumber"] != null)
                                            strFineNumber = parametersOut["fnumber"].ToString();

                                        if (rt != ResultType.Result_OK)
                                        {
                                            xmlOut = GenerateXMLOuput(parametersOut);
                                            Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                    }
                                    break;
                                case FineWSSignatureType.fst_eysa:
                                    {
                                        if (parametersIn["lang"] != null)
                                        {
                                            try
                                            {
                                                int iLangIndex = Convert.ToInt32(parametersIn["lang"].ToString());
                                                if (iLangIndex <= UserDeviceLangs.Length)
                                                {
                                                    strCulture = UserDeviceLangs[iLangIndex - 1];
                                                }
                                            }
                                            catch
                                            { }


                                        }

                                        string strCulturePrefix = strCulture.ToLower().Substring(0, 2);

                                        rt = oThirdPartyFine.EysaQueryFinePaymentQuantity(strFineNumber, dtinstDateTime.Value, strCulturePrefix, oUser, oInstallation, ref parametersOut);
                                        parametersOut["r"] = Convert.ToInt32(rt).ToString();
                                        if (parametersOut.ContainsKey("fnumber") && parametersOut["fnumber"] != null)
                                            strFineNumber = parametersOut["fnumber"].ToString();

                                        if (rt != ResultType.Result_OK)
                                        {
                                            xmlOut = GenerateXMLOuput(parametersOut);
                                            Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                        else
                                        {
                                            if (parametersOut.ContainsKey("sector"))
                                            {
                                                CultureInfo ci = new CultureInfo(strCulture);
                                                Thread.CurrentThread.CurrentUICulture = ci;
                                                Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);

                                                parametersOut["zone"]=ResourceExtension.GetLiteral("Zone_" + parametersOut["sector"].ToString());
                                                parametersOut["sector"]=ResourceExtension.GetLiteral("Sector_" + parametersOut["sector"].ToString());

                                            }
                                            else
                                            {
                                                parametersOut["zone"] = "----";
                                                parametersOut["sector"] = "----";
                                            }




                                        }



                                    }
                                    break;
                                case FineWSSignatureType.fst_madidplatform:
                                    {
                                        rt = oThirdPartyFine.MadridPlatformQueryFinePaymentQuantity(strFineNumber, dtinstDateTime.Value, oUser, oInstallation, ref parametersOut);
                                        parametersOut["r"] = Convert.ToInt32(rt).ToString();
                                    }
                                    break;

                                case FineWSSignatureType.fst_santboi:
                                    {
                                        rt = oThirdPartyFine.SantBoiQueryFinePaymentQuantity(strFineNumber, dtinstDateTime.Value, oUser, oInstallation, ref parametersOut);
                                        parametersOut["r"] = Convert.ToInt32(rt).ToString();
                                    }
                                    break;

                                case FineWSSignatureType.fst_valoriza:
                                    {
                                        rt = oThirdPartyFine.ValorizaQueryFinePaymentQuantity(strFineNumber, dtinstDateTime.Value, oUser, oInstallation, ref parametersOut);
                                        parametersOut["r"] = Convert.ToInt32(rt).ToString();
                                    }
                                    break;
                                case FineWSSignatureType.fst_mifas:
                                    {
                                        rt = oThirdPartyFine.MifasQueryFinePaymentQuantity(strFineNumber, dtinstDateTime.Value, oUser, oInstallation, ref parametersOut);
                                        parametersOut["r"] = Convert.ToInt32(rt).ToString();
                                    }
                                    break;

                                case FineWSSignatureType.fst_internal:
                                    parametersOut["r"] = Convert.ToInt32(ResultType.Result_Error_Generic).ToString();
                                    rt = (ResultType)Convert.ToInt32(parametersOut["r"].ToString());
                                    break;
                                case FineWSSignatureType.fst_test:
                                    switch (parametersIn["f"].ToString().Substring(parametersIn["f"].ToString().Length - 1, 1))
                                    {

                                        case "0":
                                            parametersOut["r"] = (int)ResultType.Result_OK;
                                            parametersOut["q"] = 100;
                                            parametersOut["lp"] =  oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).First().USRP_PLATE;
                                            parametersOut["d"] = dtinstDateTime.Value.Subtract(new TimeSpan(0, 30, 0)).ToString("HHmmssddMMyy");
                                            parametersOut["df"] = dtinstDateTime.Value.Add(new TimeSpan(2, 30, 0)).ToString("HHmmssddMMyy");
                                            parametersOut["ta"] = "0.5.2";
                                            parametersOut["dta"] ="Test Article Description";
                                            parametersOut["cur"] = oInstallation.CURRENCy.CUR_ISO_CODE;

                                            break;
                                        case "1":
                                            parametersOut["r"] = (int)ResultType.Result_OK;
                                            parametersOut["q"] = 200;
                                            parametersOut["lp"] =  oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).First().USRP_PLATE;
                                            parametersOut["d"] = dtinstDateTime.Value.Subtract(new TimeSpan(0, 30, 0)).ToString("HHmmssddMMyy");
                                            parametersOut["df"] = dtinstDateTime.Value.Add(new TimeSpan(2, 30, 0)).ToString("HHmmssddMMyy");
                                            parametersOut["ta"] = "0.5.2";
                                            parametersOut["dta"] ="Test Article Description";
                                            parametersOut["cur"] = oInstallation.CURRENCy.CUR_ISO_CODE;

                                            break;
                                        case "2":
                                            parametersOut["r"] = (int)ResultType.Result_OK;
                                            parametersOut["q"] = 300;
                                            parametersOut["lp"] =  oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).First().USRP_PLATE;
                                            parametersOut["d"] = dtinstDateTime.Value.Subtract(new TimeSpan(0, 30, 0)).ToString("HHmmssddMMyy");
                                            parametersOut["df"] = dtinstDateTime.Value.Add(new TimeSpan(2, 30, 0)).ToString("HHmmssddMMyy");
                                            parametersOut["ta"] = "0.5.2";
                                            parametersOut["dta"] ="Test Article Description";
                                            parametersOut["cur"] = oInstallation.CURRENCy.CUR_ISO_CODE;

                                            break;
                                        case "3":
                                            parametersOut["r"] = (int)ResultType.Result_OK;
                                            parametersOut["q"] = 400;
                                            parametersOut["lp"] =  oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).First().USRP_PLATE;
                                            parametersOut["d"] = dtinstDateTime.Value.Subtract(new TimeSpan(0, 30, 0)).ToString("HHmmssddMMyy");
                                            parametersOut["df"] = dtinstDateTime.Value.Add(new TimeSpan(2, 30, 0)).ToString("HHmmssddMMyy");
                                            parametersOut["ta"] = "0.5.2";
                                            parametersOut["dta"] ="Test Article Description";
                                            parametersOut["cur"] = oInstallation.CURRENCy.CUR_ISO_CODE;

                                            break;
                                        case "4":
                                            parametersOut["r"] = (int)ResultType.Result_OK;
                                            parametersOut["q"] = 500;
                                            parametersOut["lp"] =  oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).First().USRP_PLATE;
                                            parametersOut["d"] = dtinstDateTime.Value.Subtract(new TimeSpan(0, 30, 0)).ToString("HHmmssddMMyy");
                                            parametersOut["df"] = dtinstDateTime.Value.Add(new TimeSpan(2, 30, 0)).ToString("HHmmssddMMyy");
                                            parametersOut["ta"] = "0.5.2";
                                            parametersOut["dta"] ="Test Article Description";
                                            parametersOut["cur"] = oInstallation.CURRENCy.CUR_ISO_CODE;

                                            break;
                                        case "5":
                                            parametersOut["r"] = (int)ResultType.Result_OK;
                                            parametersOut["q"] = 600;
                                            parametersOut["lp"] =  oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).First().USRP_PLATE;
                                            parametersOut["d"] = dtinstDateTime.Value.Subtract(new TimeSpan(0, 30, 0)).ToString("HHmmssddMMyy");
                                            parametersOut["df"] = dtinstDateTime.Value.Add(new TimeSpan(2, 30, 0)).ToString("HHmmssddMMyy");
                                            parametersOut["ta"] = "0.5.2";
                                            parametersOut["dta"] ="Test Article Description";
                                            parametersOut["cur"] = oInstallation.CURRENCy.CUR_ISO_CODE;

                                            break;
                                        case "6":
                                            parametersOut["r"] = (int)ResultType.Result_Error_Fine_Number_Not_Found;
                                            break;
                                        case "7":
                                            parametersOut["r"] = (int)ResultType.Result_Error_Fine_Type_Not_Payable;
                                            break;
                                        case "8":
                                            parametersOut["r"] = (int)ResultType.Result_Error_Fine_Payment_Period_Expired;
                                            break;
                                        case "9":
                                            parametersOut["r"] = (int)ResultType.Result_Error_Fine_Number_Already_Paid;
                                            break;
                                        default:
                                            parametersOut["r"] = (int)ResultType.Result_OK;
                                            parametersOut["q"] = 100;
                                            parametersOut["lp"] =  oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).First().USRP_PLATE;
                                            parametersOut["d"] = dtinstDateTime.Value.Subtract(new TimeSpan(0,30,0));
                                            parametersOut["df"] = dtinstDateTime.Value.Add(new TimeSpan(2, 30, 0));
                                            parametersOut["ta"] = "0.5.2";
                                            parametersOut["dta"] ="Test Article Description";
                                            parametersOut["cur"] = oInstallation.CURRENCy.CUR_ISO_CODE;

                                            break;

                                    }
                                    rt = (ResultType)Convert.ToInt32(parametersOut["r"].ToString());
                                    break;
                                default:
                                     parametersOut["r"] = Convert.ToInt32(ResultType.Result_Error_Generic).ToString();
                                    break;
                                    
                            }*/


                            double dChangeToApply = 1.0;

                            string strQPlusVATQs = "";

                            if (rt == ResultType.Result_OK)
                            {
                                int iQ = 0;
                                int iQFEE = 0;
                                decimal dQFEE = 0;
                                int iQFEEChange = 0;
                                int iQVAT = 0;
                                int iQVATChange = 0;
                                int iQTotal = 0;
                                int iQTotalChange = 0;
                                int iQSubTotal = 0;
                                int iQSubTotalChange = 0;

                                decimal dVAT1;
                                decimal dVAT2;
                                int iPartialVAT1;
                                decimal dPercFEE;
                                decimal dPercFEETopped;
                                int iPartialPercFEE;
                                decimal dFixedFEE;
                                int iPartialFixedFEE;
                                int iPartialPercFEEVAT;
                                int iPartialFixedFEEVAT;

                                int? iPaymentTypeId = null;
                                int? iPaymentSubtypeId = null;
                                IsTAXMode eTaxMode = IsTAXMode.IsNotTaxVATForward;

                                if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                                {
                                    iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                                    iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                                }
                                if (!customersRepository.GetFinantialParams(oUser, oInstallation.INS_ID, (PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE, iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.TicketPayment, null,
                                                                            out dVAT1, out dVAT2, out dPercFEE, out dPercFEETopped, out dFixedFEE, out eTaxMode))
                                {
                                    rt = ResultType.Result_Error_Generic;
                                    Logger_AddLogMessage("QueryFinePaymentQuantity::Error getting finantial parameters", LogLevels.logERROR);
                                }

                                iQ = Convert.ToInt32(parametersOut["q"].ToString());

                                iQTotal = customersRepository.CalculateFEE(ref iQ, dVAT1, dVAT2, dPercFEE, dPercFEETopped, dFixedFEE, eTaxMode,
                                                                           out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE,
                                                                           out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                                dQFEE = Math.Round(iQ * dPercFEE, MidpointRounding.AwayFromZero);
                                if (dPercFEETopped > 0 && iQFEE > dPercFEETopped) dQFEE = dPercFEETopped;
                                dQFEE += dFixedFEE;
                                iQFEE = Convert.ToInt32(Math.Round(dQFEE, MidpointRounding.AwayFromZero));

                                iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                iQSubTotal = iQ + iQFEE;

                                int iQPlusIVA = iQ + iPartialVAT1;
                                int iFeePlusIVA = iPartialPercFEE + iPartialFixedFEE;

                                parametersOut["q"] = iQ;
                                parametersOut["q_lbl"] = infraestructureRepository.GetLiteral(oInstallation.INS_SERVICE_FINE_LIT_ID ?? 0, strCulture);
                                parametersOut["layout"] = oInstallation.INS_FEE_LAYOUT;
                                parametersOut["q_fee_lbl"] = infraestructureRepository.GetLiteral(oInstallation.INS_SERVICE_FEE_LIT_ID ?? 0, strCulture);
                                parametersOut["q_fee_vat_lbl"] = infraestructureRepository.GetLiteral(oInstallation.INS_SERVICE_FEE_PLUS_VAT_LIT_ID ?? 0, strCulture);
                                parametersOut["q_vat_lbl"] = infraestructureRepository.GetLiteral(oInstallation.INS_SERVICE_VAT_LIT_ID ?? 0, strCulture);
                                parametersOut["q_subtotalLbl"] = infraestructureRepository.GetLiteral(oInstallation.INS_SERVICE_SUBTOTAL_LIT_ID ?? 0, strCulture);
                                parametersOut["q_total_lbl"] = infraestructureRepository.GetLiteral(oInstallation.INS_SERVICE_TOTAL_LIT_ID ?? 0, strCulture);
                                parametersOut["df_lbl"] = infraestructureRepository.GetLiteral(oInstallation.INS_SERVICE_FINE_MAX_DATE_LIT_ID ?? 0, strCulture);
                                parametersOut["q_fee"] = iQFEE;
                                parametersOut["q_vat"] = iQVAT;
                                parametersOut["q_subtotal"] = iQSubTotal;
                                parametersOut["q_total"] = iQTotal;
                                parametersOut["q_plus_vat"] = iQPlusIVA;
                                parametersOut["q_fee_plus_vat"] = iFeePlusIVA;


                                strQPlusVATQs += string.Format("{0};{1}", iQ, iQPlusIVA);

                                int iOSType = 0;
                                if (parametersIn["OSID"] != null && parametersIn["OSID"].ToString() != "")
                                    iOSType = Convert.ToInt32(parametersIn["OSID"]);

                                bool bHasPaymentMean = false;
                                int? iMaxAmountAllowedToPay = MaxAmountAllowedToPay(ref oUser, iOSType, dInsId.Value, out bHasPaymentMean);



                                if (oInstallation.CURRENCy.CUR_ISO_CODE != infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)))
                                {
                                    double dChangeFee = 0;

                                    dChangeToApply = GetChangeToApplyFromInstallationCurToUserCur(oInstallation, oUser);
                                    if (dChangeToApply < 0)
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                                    numberFormatProvider.NumberDecimalSeparator = ".";
                                    parametersOut["chng"] = dChangeToApply.ToString(numberFormatProvider);

                                    int iQChange = ChangeQuantityFromInstallationCurToUserCur(iQ, dChangeToApply, oInstallation, oUser, out dChangeFee);

                                    parametersOut["qch"] = iQChange.ToString();

                                    iQFEEChange = ChangeQuantityFromInstallationCurToUserCur(iQFEE, dChangeToApply, oInstallation, oUser, out dChangeFee);
                                    iQVATChange = ChangeQuantityFromInstallationCurToUserCur(iQVAT, dChangeToApply, oInstallation, oUser, out dChangeFee);
                                    iQSubTotalChange = ChangeQuantityFromInstallationCurToUserCur(iQSubTotal, dChangeToApply, oInstallation, oUser, out dChangeFee);
                                    iQTotalChange = ChangeQuantityFromInstallationCurToUserCur(iQTotal, dChangeToApply, oInstallation, oUser, out dChangeFee);

                                    parametersOut["qch_fee"] = iQFEEChange;
                                    parametersOut["qch_vat"] = iQVATChange;
                                    parametersOut["qch_subtotal"] = iQSubTotalChange;
                                    parametersOut["qch_total"] = iQTotalChange;

                                    int iQPlusIVAChange = ChangeQuantityFromInstallationCurToUserCur(iQPlusIVA, dChangeToApply, oInstallation, oUser, out dChangeFee);
                                    parametersOut["qch_plus_vat"] = iQPlusIVAChange.ToString();

                                    int iFeePlusIVAChange = ChangeQuantityFromInstallationCurToUserCur(iFeePlusIVA, dChangeToApply, oInstallation, oUser, out dChangeFee);
                                    parametersOut["qch_fee_plus_vat"] = iFeePlusIVAChange.ToString();



                                    if (iMaxAmountAllowedToPay.HasValue)
                                    {
                                        if (iMaxAmountAllowedToPay < iQTotalChange)
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Not_Enough_Balance);
                                            Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                    }

                                }
                                else
                                {
                                    if (iMaxAmountAllowedToPay.HasValue)
                                    {
                                        if (iMaxAmountAllowedToPay < iQTotal)
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Not_Enough_Balance);
                                            Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                    }


                                }


                                DateTime? dtUTCDateTime = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oInstallation.INS_ID, dtinstDateTime.Value);

                                decimal? dAuthId = null;
                                if (parametersOut["AuthId"] != null)
                                {
                                    try
                                    {
                                        decimal dTryAuthId = Convert.ToDecimal(parametersOut["AuthId"].ToString());
                                        dAuthId = dTryAuthId;
                                    }
                                    catch
                                    {
                                        dAuthId = null;
                                    }
                                }

                                string sExtGrpId = "";
                                decimal? dGrpId = null;
                                if (parametersOut["ExtGrpId"] != null) sExtGrpId = parametersOut["ExtGrpId"].ToString();
                                if (!string.IsNullOrWhiteSpace(sExtGrpId))
                                {
                                    GROUP oGroup = null;
                                    DateTime? dtGroupDateTime = null;
                                    if (geograficAndTariffsRepository.getGroupByExtOpsId(sExtGrpId, ref oGroup, ref dtGroupDateTime))
                                    {
                                        dGrpId = oGroup.GRP_ID;
                                    }
                                }

                                /*decimal dVAT1;
                                decimal dVAT2;
                                decimal dPercFEE;
                                int iPercFEETopped;
                                int iFixedFEE;
                                int? iPaymentTypeId = null;
                                int? iPaymentSubtypeId = null;
                                if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                                {
                                    iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                                    iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                                }
                                if (!customersRepository.GetFinantialParams(oUser, oInstallation.INS_ID, (PaymentSuscryptionType) oUser.USR_SUSCRIPTION_TYPE, iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.TicketPayment,
                                                                                 out dVAT1, out dVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error getting installation FEE parameters: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }*/

                                int iPercFEETopped = Convert.ToInt32(Math.Round(dPercFEETopped, MidpointRounding.AwayFromZero));
                                int iFixedFEE = Convert.ToInt32(Math.Round(dFixedFEE, MidpointRounding.AwayFromZero));

                                if (!customersRepository.AddSessionTicketPaymentInfo(ref oUser, parametersIn["SessionID"].ToString(),
                                    dtinstDateTime.Value, dtUTCDateTime.Value, (parametersOut["fnumber"] != null) ? parametersOut["fnumber"].ToString() : strFineNumber,
                                                parametersOut["lp"].ToString(), parametersOut["ta"].ToString(), parametersOut["dta"].ToString(),
                                                iQ,
                                                dChangeToApply, dAuthId, dGrpId,
                                                dVAT1, dVAT2, dPercFEE, iPercFEETopped, iFixedFEE, strQPlusVATQs,
                                                oInstallation.INS_ID))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }

                            parametersOut["utc_offset"] = geograficAndTariffsRepository.GetInstallationUTCOffSetInMinutes(oInstallation.INS_ID);

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }

                            oUser = null;
                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;

        }



        [WebMethod]
        public string QueryFinePaymentQuantityJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("QueryFinePaymentQuantityJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryFinePaymentQuantity(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;


                //Logger_AddLogMessage(string.Format("QueryFinePaymentQuantityJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryFinePaymentQuantityJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }



        /*
         *  ConfirmFinePayment 
         *  
        <ipark_in>
            <u>user login or generated user id for anonymous operations</u>
	        <f>fine number</f>
	        <d>date in format hh24missddMMYY</d>
	        <q>quantity paid in Cents for the fine</q>
            <tid>Paypal transaction Id for payments with anonymous operations</tid>
            <ah>authentication hash</ah>
        </ ipark _in>
         * 
         
         * 
        Result of the method:
        Result: is an integer containing a Boolean value. 0 if an error has occurred
         * saving the operation or 1 if the operation has been stored correctly.      
         *
         */
        [WebMethod]
        public string ConfirmFinePayment(string xmlIn)
        {
            string xmlOut = "";
            string strLockDictionaryString = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ConfirmFinePayment: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                          (parametersIn["SessionID"] == null) ||
                          (parametersIn["cityID"] == null) ||
                          (parametersIn["f"] == null) ||
                          (parametersIn["d"] == null) ||
                          (parametersIn["q"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            strLockDictionaryString = parametersIn["u"].ToString();
                            if (ExistConfirmLockInformation(strLockDictionaryString))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_ConfirmOperationAlreadyExecuting);
                                Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }
                            else
                            {


                                DateTime dt;
                                try
                                {
                                    dt = DateTime.ParseExact(parametersIn["d"].ToString(), "HHmmssddMMyy",
                                      CultureInfo.InvariantCulture);
                                }
                                catch
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }

                                int iQuantity;
                                try
                                {
                                    iQuantity = Int32.Parse(parametersIn["q"].ToString(), CultureInfo.InvariantCulture);
                                }
                                catch
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }


                                USER oUser = null;
                                string strAppVersion = "";
                                decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();

                                rt = GetUserData(ref oUser, parametersIn, out strAppVersion, ref dSourceApp);

                                if (rt != ResultType.Result_OK)
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(rt);
                                    Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                decimal? dInstallationId = null;

                                try
                                {
                                    decimal dTryInstallationId = Convert.ToDecimal(parametersIn["cityID"].ToString());
                                    dInstallationId = dTryInstallationId;
                                }
                                catch
                                {
                                    dInstallationId = null;
                                }

                                decimal? dLatitude = null;
                                decimal? dLongitude = null;
                                GetLatLon(parametersIn, out dLatitude, out dLongitude);

                                INSTALLATION oInstallation = null;
                                DateTime? dtinstDateTime = null;
                                decimal? dLatitudeInst = null;
                                decimal? dLongitudeInst = null;

                                if (!geograficAndTariffsRepository.getInstallation(dInstallationId,
                                                                             dLatitudeInst,
                                                                             dLongitudeInst,
                                                                             ref oInstallation,
                                                                             ref dtinstDateTime))
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_City);
                                    Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }


                                string strFineNumber = parametersIn["f"].ToString();
                                strFineNumber = strFineNumber.Trim();


                                string strPlate = "";
                                string strArticleType = "";
                                string strArticleDescription = "";
                                double dChangeToApply = 1.0;
                                decimal? dAuthId = null;
                                decimal? dGrpId = null;
                                DateTime dtSavedInstallationTime = DateTime.UtcNow;
                                decimal dPercVAT1;
                                decimal dPercVAT2;
                                decimal dPercFEE;
                                int iPercFEETopped;
                                int iFixedFEE;
                                int iPartialVAT1;
                                int iPartialPercFEE;
                                int iPartialFixedFEE;
                                int iPartialPercFEEVAT;
                                int iPartialFixedFEEVAT;
                                int iTotalQuantity;

                                int iQTIVA;

                                IsTAXMode eTaxMode = IsTAXMode.IsNotTaxVATForward;
                                int? iPaymentTypeId = null;
                                int? iPaymentSubtypeId = null;
                                if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                                {
                                    iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                                    iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                                }



                                string strQPlusVATQs = "";
                                decimal? dInstallationSession = null;

                                if (!customersRepository.CheckSessionTicketPaymentInfo(ref oUser, parametersIn["SessionID"].ToString(), ref strFineNumber, iQuantity,
                                        out strPlate, out strArticleType, out strArticleDescription, out dtSavedInstallationTime, out dChangeToApply, out dAuthId, out dGrpId,
                                        out dPercVAT1, out dPercVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE, out strQPlusVATQs,
                                        out dInstallationSession))
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_OperationExpired);
                                    Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                GROUP oGroup = null;
                                DateTime? drGroupDateTime = null;
                                if (dGrpId.HasValue)
                                {
                                    if (geograficAndTariffsRepository.getGroup(dGrpId, ref oGroup, ref drGroupDateTime))
                                    {
                                    }
                                }

                                if (dInstallationSession.HasValue)
                                {
                                    if (!geograficAndTariffsRepository.getInstallationById(dInstallationSession.Value,
                                                                                 ref oInstallation,
                                                                                 ref dtinstDateTime))
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_City);
                                        Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }

                                parametersOut = new SortedList();
                                parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();


                                int iCurrencyChargedQuantity = 0;
                                decimal dTicketPaymentID = -1;
                                string str3rdPartyOpNum = "";
                                decimal? dRechargeId = null;
                                bool bRestoreBalanceInCaseOfRefund = true;
                                int? iBalanceAfterRecharge = null;
                                DateTime? dtUTCInsertionDate = null;

                                var session = oUser.MOBILE_SESSIONs.Where(r => r.MOSE_SESSIONID == parametersIn["SessionID"].ToString()
                                                                  && r.MOSE_USR_ID == oUser.USR_ID).First();


                                decimal dPercFEETopped = 0;
                                decimal dFixedFEE = 0;

                                customersRepository.GetFinantialParams(oUser, oInstallation.INS_ID, (PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE, iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.TicketPayment, null,
                                                                                 out dPercVAT1, out dPercVAT2, out dPercFEE, out dPercFEETopped, out dFixedFEE, out eTaxMode);


                                Dictionary<int, int> oDictQs = new Dictionary<int, int>();

                                string[] strTuples = strQPlusVATQs.Split(new char[] { '|' });

                                foreach (string strtupla in strTuples)
                                {
                                    string[] strQs = strtupla.Split(new char[] { ';' });

                                    if (strQs.Length == 2)
                                    {
                                        oDictQs[Convert.ToInt32(strQs[0])] = Convert.ToInt32(strQs[1]);
                                    }

                                }



                                if ((oDictQs.ContainsKey(iQuantity)) && (eTaxMode == IsTAXMode.IsNotTaxVATBackward))
                                {
                                    iQuantity = oDictQs[iQuantity];
                                    iTotalQuantity = customersRepository.CalculateFEE(ref iQuantity, dPercVAT1, dPercVAT2, dPercFEE, dPercFEETopped, dFixedFEE, eTaxMode, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);
                                }
                                else
                                {
                                    iTotalQuantity = customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, dPercFEETopped, dFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE);
                                }

                                iQTIVA = iQuantity;


                                if (eTaxMode == IsTAXMode.IsNotTaxVATBackward)
                                {
                                    iQTIVA += iPartialVAT1;
                                }


                                string str3DSURL = null;
                                string strMD = parametersIn["moneris_md"] != null ? parametersIn["moneris_md"].ToString() : "";
                                string strCAVV = parametersIn["moneris_cavv"] != null ? parametersIn["moneris_cavv"].ToString() : "";
                                string strECI = parametersIn["moneris_eci"] != null ? parametersIn["moneris_eci"].ToString() : "";

                                string strBSRedsys3DSTransID = parametersIn["bsredsys_3ds_trans_id"] != null ? parametersIn["bsredsys_3ds_trans_id"].ToString() : "";
                                string strBSRedsys3DSPares = parametersIn["bsredsys_3ds_pares"] != null ? parametersIn["bsredsys_3ds_pares"].ToString() : "";
                                string strBSRedsys3DSCres = parametersIn["bsredsys_3ds_cres"] != null ? parametersIn["bsredsys_3ds_cres"].ToString() : "";
                                string strBSRedsys3DSMethodData = parametersIn["bsredsys_3ds_methoddata"] != null ? parametersIn["bsredsys_3ds_methoddata"].ToString() : "";

                                string strMercadoPagoToken = parametersIn["mercadopago_token"] != null ? parametersIn["mercadopago_token"].ToString() : "";


                                string strMPProTransactionId = parametersIn["mercadopago_transaction_id"] != null ? parametersIn["mercadopago_transaction_id"].ToString() : "";
                                string strMPProReference = parametersIn["mercadopago_reference"] != null ? parametersIn["mercadopago_reference"].ToString() : "";
                                string strMPProCardHash = parametersIn["mercadopago_card_hash"] != null ? parametersIn["mercadopago_card_hash"].ToString() : "";
                                string strMPProCardReference = parametersIn["mercadopago_card_reference"] != null ? parametersIn["mercadopago_card_reference"].ToString() : "";
                                string strMPProCardScheme = parametersIn["mercadopago_card_scheme"] != null ? parametersIn["mercadopago_card_scheme"].ToString() : "";
                                string strMPProGatewayDate = parametersIn["mercadopago_date_time_local_fmt"] != null ? parametersIn["mercadopago_date_time_local_fmt"].ToString() : "";
                                string strMPProMaskedCardNumber = parametersIn["mercadopago_masked_card_number"] != null ? parametersIn["mercadopago_masked_card_number"].ToString() : "";
                                string strMPProExpMonth = parametersIn["mercadopago_expires_end_month"] != null ? parametersIn["mercadopago_expires_end_month"].ToString() : "";
                                string strMPProExpYear = parametersIn["mercadopago_expires_end_year"] != null ? parametersIn["mercadopago_expires_end_year"].ToString() : "";
                                string strMPProCardType = parametersIn["mercadopago_card_type"] != null ? parametersIn["mercadopago_card_type"].ToString() : "";
                                string strMPProDocumentID = parametersIn["mercadopago_document_id"] != null ? parametersIn["mercadopago_document_id"].ToString() : "";
                                string strMPProDocumentType = parametersIn["mercadopago_document_type"] != null ? parametersIn["mercadopago_document_type"].ToString() : "";
                                string strMPProInstallaments = parametersIn["mercadopago_installaments"] != null ? parametersIn["mercadopago_installaments"].ToString() : "";
                                string strMPProCVVLength = parametersIn["mercadopago_cvv_length"] != null ? parametersIn["mercadopago_cvv_length"].ToString() : "";


                                int iWSTimeout = infraestructureRepository.GetRateWSTimeout(oInstallation.INS_ID);
                                long lEllapsedTime = 0;

                                rt = ChargeFinePayment(strFineNumber, dChangeToApply, iQuantity, dtSavedInstallationTime, strPlate, strArticleType, strArticleDescription,
                                                        oInstallation, ref oUser, session.MOSE_OS.Value, dLatitude, dLongitude, strAppVersion, dGrpId,
                                                        dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE,
                                                        iPartialVAT1, iPartialPercFEE, iPartialFixedFEE, iTotalQuantity, strMD, strCAVV, strECI,
                                                        strBSRedsys3DSTransID, strBSRedsys3DSPares, strBSRedsys3DSCres, strBSRedsys3DSMethodData, strMercadoPagoToken,
                                                        strMPProTransactionId,
                                                        strMPProReference,
                                                        strMPProCardHash,
                                                        strMPProCardReference,
                                                        strMPProCardScheme,
                                                        strMPProGatewayDate,
                                                        strMPProMaskedCardNumber,
                                                        strMPProExpMonth,
                                                        strMPProExpYear,
                                                        strMPProCardType,
                                                        strMPProDocumentID,
                                                        strMPProDocumentType,
                                                        strMPProInstallaments,
                                                        strMPProCVVLength,
                                                        dSourceApp,
                                                        ref parametersOut, out iCurrencyChargedQuantity, out dTicketPaymentID, out dtUTCInsertionDate, out dRechargeId,
                                                        out iBalanceAfterRecharge, out bRestoreBalanceInCaseOfRefund, out str3DSURL, out lEllapsedTime);

                                if (rt != ResultType.Result_OK)
                                {

                                    if (rt == ResultType.Result_3DS_Validation_Needed)
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        parametersOut["r"] = Convert.ToInt32(rt).ToString();
                                        parametersOut["ThreeDSURL"] = str3DSURL;
                                        CUSTOMER_PAYMENT_MEAN oUserPaymentMean = customersRepository.GetUserPaymentMean(ref oUser, (INSTALLATION)null);
                                        parametersOut["cc_provider"] = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_PROVIDER;

                                        xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "user_warnings" });

                                        if (xmlOut.Length == 0)
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        }
                                        else
                                        {
                                            Logger_AddLogMessage(string.Format("ConfirmFinePayment: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                        }

                                        oUser = null;
                                        return xmlOut;

                                    }
                                    else
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(rt);
                                        Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }

                                iWSTimeout -= (int)lEllapsedTime;

                                switch ((FineWSSignatureType)oInstallation.INS_FINE_WS_SIGNATURE_TYPE)
                                {
                                    case FineWSSignatureType.fst_madidplatform:
                                        {
                                            str3rdPartyOpNum = dAuthId.Value.ToString();
                                        }
                                        break;
                                    case FineWSSignatureType.fst_valoriza:
                                        {
                                            str3rdPartyOpNum = Convert.ToInt32(dAuthId.Value).ToString();
                                        }
                                        break;
                                    default:
                                        break;

                                }


                                if ((oInstallation.INS_OPT_FINECONFIRM_MODE ?? 0) == 0)
                                {
                                    ThirdPartyFine oThirdPartyFine = new ThirdPartyFine();

                                    FineWSSignatureType eFineSignatureType = (FineWSSignatureType)oInstallation.INS_FINE_WS_SIGNATURE_TYPE;
                                    // ***
                                    if (eFineSignatureType == FineWSSignatureType.fst_madidplatform && 
                                        oThirdPartyFine.Madrid2AllowedZone(oGroup, 4))
                                        eFineSignatureType = FineWSSignatureType.fst_madrid2platform;
                                    // ***

                                    switch (eFineSignatureType)
                                    {
                                        case FineWSSignatureType.fst_gtechna:
                                            {
                                                rt = oThirdPartyFine.GtechnaConfirmFinePayment(strFineNumber, dtSavedInstallationTime, iQTIVA, dTicketPaymentID,
                                                                                               oInstallation, iWSTimeout,  ref parametersOut, out str3rdPartyOpNum, out lEllapsedTime);
                                            }
                                            break;
                                        case FineWSSignatureType.fst_standard:
                                            {
                                                rt = oThirdPartyFine.StandardConfirmFinePayment(strFineNumber, dtSavedInstallationTime, iQTIVA, oUser, dTicketPaymentID,
                                                                                                oInstallation, iWSTimeout, ref parametersOut, out str3rdPartyOpNum, out lEllapsedTime);
                                            }
                                            break;
                                        case FineWSSignatureType.fst_eysa:
                                            {
                                                rt = oThirdPartyFine.EysaConfirmFinePayment(strFineNumber, dtSavedInstallationTime, iQTIVA, oUser,
                                                                                            oInstallation, iWSTimeout, ref parametersOut, out str3rdPartyOpNum, out lEllapsedTime);
                                            }
                                            break;
                                        case FineWSSignatureType.fst_madidplatform:
                                            {
                                                rt = oThirdPartyFine.MadridPlatformConfirmFinePayment(strFineNumber, dtSavedInstallationTime, dtUTCInsertionDate.Value, iQTIVA, oUser,
                                                                                                      oInstallation, dTicketPaymentID, dAuthId ?? 0, oGroup, iWSTimeout, 
                                                                                                      ref parametersOut, out str3rdPartyOpNum, out lEllapsedTime);
                                            }
                                            break;
                                        case FineWSSignatureType.fst_madrid2platform:
                                            {
                                                rt = oThirdPartyFine.Madrid2PlatformConfirmFinePayment(strFineNumber, dtSavedInstallationTime, dtUTCInsertionDate.Value, iQTIVA, oUser,
                                                                                                      oInstallation, dTicketPaymentID, dAuthId ?? 0, oGroup, iWSTimeout,
                                                                                                      ref parametersOut, out str3rdPartyOpNum, out lEllapsedTime);
                                            }
                                            break;
                                        case FineWSSignatureType.fst_santboi:
                                            {
                                                rt = oThirdPartyFine.SantBoiConfirmFinePayment(strFineNumber, dtSavedInstallationTime, oUser,
                                                                                          oInstallation, iWSTimeout, ref parametersOut, out str3rdPartyOpNum, out lEllapsedTime);
                                            }
                                            break;
                                        case FineWSSignatureType.fst_valoriza:
                                            {
                                                rt = oThirdPartyFine.ValorizaConfirmFinePayment(str3rdPartyOpNum, oUser, oInstallation, iWSTimeout,
                                                                                                ref parametersOut, out str3rdPartyOpNum, out lEllapsedTime);
                                            }
                                            break;
                                        case FineWSSignatureType.fst_mifas:
                                            {
                                                rt = oThirdPartyFine.MifasConfirmFinePayment(strFineNumber, oUser, oInstallation, dtSavedInstallationTime, iWSTimeout, 
                                                                                             ref parametersOut, out str3rdPartyOpNum, out lEllapsedTime);
                                            }
                                            break;
                                        case FineWSSignatureType.fst_bsm:
                                            {
                                                rt = oThirdPartyFine.BSMConfirmFinePayment(oInstallation, strFineNumber, dtSavedInstallationTime, iWSTimeout,
                                                                                           ref parametersOut, out str3rdPartyOpNum, out lEllapsedTime);
                                            }
                                            break;
                                        case FineWSSignatureType.fst_emisalba:
                                            {
                                                rt = oThirdPartyFine.EmisalbaConfirmFinePayment(strFineNumber, dtSavedInstallationTime, iQTIVA, oUser,
                                                                                                oInstallation, iWSTimeout, ref parametersOut, out str3rdPartyOpNum, out lEllapsedTime);
                                            }
                                            break;
                                        case FineWSSignatureType.fst_internal:
                                            rt = ResultType.Result_Error_Generic;
                                            parametersOut["r"] = Convert.ToInt32(rt).ToString();
                                            break;
                                        case FineWSSignatureType.fst_test:
                                            rt = ResultType.Result_OK;
                                            parametersOut["r"] = Convert.ToInt32(rt).ToString();
                                            break;
                                        case FineWSSignatureType.fst_bilbao_integration:
                                            {
                                                var ticketNumber = parametersIn["fnumber"].ToString();
                                                rt = oThirdPartyFine.BilbaoIntegrationConfirmFinePayment(strFineNumber, dtSavedInstallationTime, strPlate, iQTIVA, oUser, dTicketPaymentID,
                                                                                                oInstallation, iWSTimeout, ticketNumber, strArticleType, ref parametersOut, out str3rdPartyOpNum, out lEllapsedTime);
                                            }
                                            break;
                                        default:
                                            rt = ResultType.Result_Error_Generic;
                                            parametersOut["r"] = Convert.ToInt32(rt).ToString();
                                            break;

                                    }
                                }


                                if (rt != ResultType.Result_OK)
                                {
                                    ResultType rtRefund = RefundChargeFinePayment(ref oUser, dTicketPaymentID, dRechargeId, bRestoreBalanceInCaseOfRefund);
                                    if (rtRefund == ResultType.Result_OK)
                                    {
                                        Logger_AddLogMessage(string.Format("ConfirmFinePayment::Payment Refund of {0}", iCurrencyChargedQuantity), LogLevels.logERROR);
                                    }
                                    else
                                    {
                                        Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error in Payment Refund: {0}", rtRefund.ToString()), LogLevels.logERROR);
                                    }


                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(rt);
                                    Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                                else
                                {
                                    if (str3rdPartyOpNum.Length > 0)
                                    {
                                        customersRepository.UpdateThirdPartyIDInFinePayment(ref oUser, dTicketPaymentID, str3rdPartyOpNum);
                                    }



                                    if (dRechargeId != null)
                                    {
                                        customersRepository.ConfirmRecharge(ref oUser, dRechargeId.Value);

                                        try
                                        {


                                            CUSTOMER_PAYMENT_MEANS_RECHARGE oRecharge = null;
                                            if (customersRepository.GetRechargeData(ref oUser, dRechargeId.Value, out oRecharge))
                                            {
                                                //if ((PaymentSuscryptionType)oRecharge.CUSPMR_SUSCRIPTION_TYPE == PaymentSuscryptionType.pstPrepay)
                                                if ((PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE.Value == PaymentSuscryptionType.pstPrepay)
                                                {
                                                    string culture = oUser.USR_CULTURE_LANG;
                                                    CultureInfo ci = new CultureInfo(culture);
                                                    Thread.CurrentThread.CurrentUICulture = ci;
                                                    Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);
                                                    integraMobile.WS.Properties.Resource.Culture = ci;


                                                    iQuantity = oRecharge.CUSPMR_AMOUNT;
                                                    dPercVAT1 = oRecharge.CUSPMR_PERC_VAT1 ?? 0;
                                                    dPercVAT2 = oRecharge.CUSPMR_PERC_VAT2 ?? 0;
                                                    dPercFEE = oRecharge.CUSPMR_PERC_FEE ?? 0;
                                                    iPercFEETopped = (int)(oRecharge.CUSPMR_PERC_FEE_TOPPED ?? 0);
                                                    iFixedFEE = (int)(oRecharge.CUSPMR_FIXED_FEE ?? 0);

                                                    iTotalQuantity = customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                                                    int iQFEE = Convert.ToInt32(Math.Round(iQuantity * dPercFEE, MidpointRounding.AwayFromZero));
                                                    if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                                    iQFEE += iFixedFEE;
                                                    int iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                                    int iQSubTotal = iQuantity + iQFEE;

                                                    int iLayout = 0;
                                                    if (iQFEE != 0 || iQVAT != 0)
                                                    {
                                                        OPERATOR oOperator = customersRepository.GetDefaultOperator();
                                                        if (oOperator != null) iLayout = oOperator.OPR_FEE_LAYOUT;
                                                    }


                                                    string sLayoutSubtotal = "";
                                                    string sLayoutTotal = "";

                                                    string sCurIsoCode = infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID));
                                                    string strSourceAppEmailPrefix = GetEmailSourceAppEmailPrefix(dSourceApp);


                                                    if (iLayout == 2)
                                                    {
                                                        sLayoutSubtotal = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "Email_LayoutSubtotal"),
                                                                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQSubTotal) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)),
                                                                                        (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00#}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                                        (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00#}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQVAT) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)));
                                                    }
                                                    else if (iLayout == 1)
                                                    {
                                                        sLayoutTotal = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "Email_LayoutTotal"),
                                                                                     string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQuantity) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)),
                                                                                     string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQFEE) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)),
                                                                                     (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00#}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                                     (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00#}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                                     string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQVAT) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)));
                                                    }





                                                    string strRechargeEmailSubject = ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "ConfirmAutomaticRecharge_EmailHeader");
                                                    /*
                                                        ID: {0}<br>
                                                     *  Fecha de recarga: {1:HH:mm:ss dd/MM/yyyy}<br>
                                                     *  Cantidad Recargada: {2} 
                                                     */
                                                    string strRechargeEmailBody = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "ConfirmRecharge_EmailBody"),
                                                        oRecharge.CUSPMR_ID,
                                                        oRecharge.CUSPMR_DATE,
                                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(oRecharge.CUSPMR_TOTAL_AMOUNT_CHARGED) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode),
                                                                                      infraestructureRepository.GetCurrencySymbolOrIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID))),
                                                        string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))) + "} {1}", Convert.ToDouble(iBalanceAfterRecharge) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))),
                                                                            infraestructureRepository.GetCurrencySymbolOrIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))),
                                                        ConfigurationManager.AppSettings["EmailSignatureURL"],
                                                        ConfigurationManager.AppSettings["EmailSignatureGraphic"],
                                                        sLayoutSubtotal, sLayoutTotal,
                                                        GetEmailFooter(ref oUser, dSourceApp));

                                                    SendEmail(ref oUser, strRechargeEmailSubject, strRechargeEmailBody, dSourceApp);

                                                }
                                            }
                                        }
                                        catch { }


                                    }


                                    if (oUser.USR_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPrepay)
                                    {
                                        int iDiscountValue = 0;
                                        string strDiscountCurrencyISOCode = "";

                                        try
                                        {
                                            iDiscountValue = Convert.ToInt32(ConfigurationManager.AppSettings["SuscriptionType1_DiscountValue"]);
                                            strDiscountCurrencyISOCode = ConfigurationManager.AppSettings["SuscriptionType1_DiscountCurrency"];
                                        }
                                        catch
                                        { }


                                        if (iDiscountValue > 0)
                                        {
                                            double dDiscountChangeApplied = 0;
                                            double dDiscountChangeFee = 0;
                                            int iCurrencyDiscountQuantity = ChangeQuantityFromCurToUserCur(iDiscountValue, strDiscountCurrencyISOCode, oUser,
                                                                                                            out dDiscountChangeApplied, out dDiscountChangeFee);

                                            if (iCurrencyDiscountQuantity > 0)
                                            {
                                                DateTime? dtUTCTime = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oInstallation.INS_ID, dtSavedInstallationTime.AddSeconds(1));

                                                customersRepository.AddDiscountToFinePayment(ref oUser, session.MOSE_OS.Value, PaymentSuscryptionType.pstPrepay,
                                                        dtSavedInstallationTime.AddSeconds(1), dtUTCTime.Value, iDiscountValue,
                                                        infraestructureRepository.GetCurrencyFromIsoCode(strDiscountCurrencyISOCode),
                                                        oUser.CURRENCy.CUR_ID, dDiscountChangeApplied, dDiscountChangeFee, iCurrencyDiscountQuantity, dTicketPaymentID,
                                                        dLatitude, dLongitude, strAppVersion);

                                                parametersOut["newbal"] = oUser.USR_BALANCE;

                                            }
                                        }

                                    }

                                }



                                if (Convert.ToInt32(parametersOut["r"]) == Convert.ToInt32(ResultType.Result_OK))
                                {
                                    customersRepository.DeleteSessionTicketPaymentInfo(ref oUser, parametersIn["SessionID"].ToString());


                                    try
                                    {

                                        TICKET_PAYMENT oTicketPayment = null;
                                        if (customersRepository.GetTicketPaymentData(ref oUser, dTicketPaymentID, out oTicketPayment))
                                        {
                                            string culture = oUser.USR_CULTURE_LANG;
                                            CultureInfo ci = new CultureInfo(culture);
                                            Thread.CurrentThread.CurrentUICulture = ci;
                                            Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);
                                            integraMobile.WS.Properties.Resource.Culture = ci;


                                            iQuantity = oTicketPayment.TIPA_AMOUNT;
                                            dPercVAT1 = oTicketPayment.TIPA_PERC_VAT1 ?? 0;
                                            dPercVAT2 = oTicketPayment.TIPA_PERC_VAT2 ?? 0;
                                            dPercFEE = oTicketPayment.TIPA_PERC_FEE ?? 0;
                                            iPercFEETopped = (int)(oTicketPayment.TIPA_PERC_FEE_TOPPED ?? 0);
                                            iFixedFEE = (int)(oTicketPayment.TIPA_FIXED_FEE ?? 0);

                                            iTotalQuantity = customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                                            int iQFEE = Convert.ToInt32(Math.Round(iQuantity * dPercFEE, MidpointRounding.AwayFromZero));
                                            if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                            iQFEE += iFixedFEE;
                                            int iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                            int iQSubTotal = iQuantity + iQFEE;

                                            int iLayout = 0;
                                            if (iQFEE != 0 || iQVAT != 0)
                                            {
                                                iLayout = oTicketPayment.INSTALLATION.INS_FEE_LAYOUT;
                                            }

                                            string strEnforcUser = "";
                                            string strZone = "";
                                            string strSector = "";

                                            if (parametersIn.ContainsKey("enforcuser"))
                                                strEnforcUser = parametersIn["enforcuser"].ToString();
                                            if (parametersIn.ContainsKey("zone"))
                                                strZone = parametersIn["zone"].ToString();
                                            if (parametersIn.ContainsKey("sector"))
                                                strSector = parametersIn["sector"].ToString();

                                            string sLayoutSubtotal = "";
                                            string sLayoutTotal = "";
                                            string strSourceAppEmailPrefix = GetEmailSourceAppEmailPrefix(dSourceApp);

                                            string sCurIsoCode = oTicketPayment.CURRENCy.CUR_ISO_CODE;
                                            string sCurIsoCode2 = oTicketPayment.CURRENCy1.CUR_ISO_CODE
                                                ;
                                            if (iLayout == 2)
                                            {
                                                sLayoutSubtotal = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "Email_LayoutSubtotal"),
                                                                                string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQSubTotal) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)),
                                                                                (oTicketPayment.TIPA_PERC_VAT1 != 0 ? string.Format("{0:0.00#}% ", oTicketPayment.TIPA_PERC_VAT1 * 100) : "") +
                                                                                (oTicketPayment.TIPA_PERC_VAT2 != 0 && oTicketPayment.TIPA_PERC_VAT1 != oTicketPayment.TIPA_PERC_VAT2 ? string.Format("{0:0.00#}%", oTicketPayment.TIPA_PERC_VAT2 * 100) : ""),
                                                                                string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQVAT) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)));
                                            }
                                            else if (iLayout == 1)
                                            {
                                                sLayoutTotal = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "Email_LayoutTotal"),
                                                                             string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQuantity) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)),
                                                                             string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQFEE) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)),
                                                                             (oTicketPayment.TIPA_PERC_VAT1 != 0 ? string.Format("{0:0.00#}% ", oTicketPayment.TIPA_PERC_VAT1 * 100) : "") +
                                                                             (oTicketPayment.TIPA_PERC_VAT2 != 0 && oTicketPayment.TIPA_PERC_VAT1 != oTicketPayment.TIPA_PERC_VAT2 ? string.Format("{0:0.00#}%", oTicketPayment.TIPA_PERC_VAT2 * 100) : ""),
                                                                             string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQVAT) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)));
                                            }

                                            string strTicketPaymentEmailSubject = ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "ConfirmTicketPayment_EmailHeader");
                                            /*
                                             ID: {0}<br>
                                             Expediente: {1}<br>
                                             Matr&iacute;cula: {2}<br>
                                             Ciudad: {3}<br>
                                             Fecha de anulaci&oacute;n: {4:HH:mm:ss dd/MM/yyyy}<br>
                                             Artículo: {5}<br>
                                             Cantidad Pagada: {6} <br><br>
                                             */
                                            INSTALLATION oInst = geograficAndTariffsRepository.GetSuperInstallation(oTicketPayment.INSTALLATION.INS_ID);
                                            if (oInst == null) oInst = oTicketPayment.INSTALLATION;
                                            string strTicketPaymentEmailBody = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "ConfirmTicketPayment_EmailBody"),
                                                oTicketPayment.TIPA_ID,
                                                oTicketPayment.TIPA_TICKET_NUMBER,
                                                oTicketPayment.TIPA_PLATE_STRING,
                                                oInst.INS_DESCRIPTION,
                                                oTicketPayment.TIPA_DATE,
                                                oTicketPayment.TIPA_TICKET_DATA,
                                                (oTicketPayment.TIPA_AMOUNT_CUR_ID == oTicketPayment.TIPA_BALANCE_CUR_ID ?
                                                string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(oTicketPayment.TIPA_TOTAL_AMOUNT) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)) :
                                                string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1} / {2:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode2) + "} {3}", Convert.ToDouble(oTicketPayment.TIPA_TOTAL_AMOUNT) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode),
                                                                                             Convert.ToDouble(oTicketPayment.TIPA_FINAL_AMOUNT) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode2), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode2))),
                                                (oTicketPayment.TIPA_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPrepay || oUser.USR_BALANCE > 0) ?
                                                        string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "Confirm_EmailBody_Balance"), string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))) + "} {1}",
                                                                    Convert.ToDouble(oUser.USR_BALANCE) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))),
                                                                    infraestructureRepository.GetCurrencySymbolOrIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)))) : "",
                                                ConfigurationManager.AppSettings["EmailSignatureURL"],
                                                ConfigurationManager.AppSettings["EmailSignatureGraphic"],
                                                sLayoutSubtotal,
                                                sLayoutTotal,
                                                GetEmailFooter(ref oInst, dSourceApp), GetEmailInvoiceHeader(ref oInst, dSourceApp), strZone, strSector, strEnforcUser);


                                            SendEmail(ref oUser, strTicketPaymentEmailSubject, strTicketPaymentEmailBody, dSourceApp);

                                            if (rt == ResultType.Result_OK)
                                            {
                                                //ConfirmFinePayment
                                                if (oTicketPayment != null && oTicketPayment.TIPA_ID != 0)
                                                {
                                                    int iOSType = 0;
                                                    if (parametersIn["OSID"] != null && parametersIn["OSID"].ToString() != "")
                                                        iOSType = Convert.ToInt32(parametersIn["OSID"]);
                                                    xmlOut = Campaing(oUser, dLatitude, dLongitude, iOSType, null, oTicketPayment.TIPA_ID, oGroup, xmlIn, xmlOut, dSourceApp);
                                                }
                                            }
                                        }
                                    }
                                    catch { }


                                }

                                parametersOut["utc_offset"] = geograficAndTariffsRepository.GetInstallationUTCOffSetInMinutes(oInstallation.INS_ID);

                                try
                                {
                                    IEnumerable<USERS_WARNING> oUsersWarnings = customersRepository.GetUsersWarnings(oUser.USR_ID, (int)UserWarningType.Fine);
                                    string xmlUserWarning = GenerateXMLUsersWarnings(oUsersWarnings);
                                    parametersOut["user_warnings"] = xmlUserWarning;
                                }
                                catch
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "user_warnings" });

                                if (xmlOut.Length == 0)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }
                                else
                                {
                                    Logger_AddLogMessage(string.Format("ConfirmFinePayment: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                }

                                oUser = null;

                            }

                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ConfirmFinePayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            DeleteConfirmLockInformation(strLockDictionaryString);
            return xmlOut;

        }



        [WebMethod]
        public string ConfirmFinePaymentJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ConfirmFinePaymentJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ConfirmFinePayment(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ConfirmFinePaymentJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ConfirmFinePaymentJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }
        /*
        *  ConfirmUserData
        *  

            xmlIn: xml containing input parameters of the method:
        <ipark_in>
            <fname>First Name</fname >
            <lname>Last Name</lname >
            <dlicense> Driver License / Passport / DNI </dlicense>
            <ccode>Country Code </code>
            <phone>Complete Cell Number</phone >	
            <email> user e-mail </email >	
            <ah>authentication hash</ah>
        </ ipark _in>

        * 
        * 
        <ipark_out>
	        <r>Result of the method</r>
        </ipark_out>

        * 
        * 
        The tag <r> of the method will have these possible values:
        a.	2: Login successful.
        b.	-13: Invalid First Name
        c.	-14: Invalid Last Name.
        d.	-15: Invalid Driver License / Passport / DNI 
        e.	-16: Invalid Country Code
        f.	-17: Invalid Cell Number	
        g.	-18: user e-mail	
        h.	-19 Invalid Input Parameter 
        i.	-20 Missing Input Parameter 
        j.	-21: Cell Number already exists.
        k.	-22: Email already exists.
      
        *
        */

        [WebMethod]
        public string ConfirmUserData(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ConfirmUserData: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    PaymentMeanCreditCardProviderType CCProvider = PaymentMeanCreditCardProviderType.pmccpUndefined;
                    PaymentMeanType paymentType = PaymentMeanType.pmtDebitCreditCard;

                    try
                    {
                        int iPayType = Convert.ToInt32(parametersIn["paymeth"].ToString());
                        paymentType = (PaymentMeanType)iPayType;

                    }
                    catch
                    {
                        Logger_AddLogMessage(string.Format("ConfirmUserData::Invalid Payment Method. Setting to 1 (Credit Card"), LogLevels.logDEBUG); ;
                        paymentType = PaymentMeanType.pmtDebitCreditCard;

                    }


                    try
                    {
                        int iCCProvider = Convert.ToInt32(parametersIn["ccprovider"].ToString());
                        CCProvider = (PaymentMeanCreditCardProviderType)iCCProvider;
                    }
                    catch
                    {
                        Logger_AddLogMessage(string.Format("ConfirmUserData::Invalid ccprovider. Setting to 1(Credit Call)"), LogLevels.logDEBUG); ;
                        CCProvider = PaymentMeanCreditCardProviderType.pmccpCreditCall;
                    }


                    if ((parametersIn["pass"] == null) ||
                        (parametersIn["ccode"] == null) ||
                        (parametersIn["email"] == null) ||
                        (parametersIn["subscription_type"] == null) ||
                        (parametersIn["paymeth"] == null) ||
                        ((CCProvider == PaymentMeanCreditCardProviderType.pmccpCreditCall) &&
                                (paymentType == PaymentMeanType.pmtDebitCreditCard) &&
                                ((parametersIn["ekashu_transaction_id"] == null) ||
                                (parametersIn["ekashu_reference"] == null) ||
                                (parametersIn["ekashu_auth_code"] == null) ||
                                (parametersIn["ekashu_auth_result"] == null) ||
                                (parametersIn["ekashu_card_hash"] == null) ||
                                (parametersIn["ekashu_card_reference"] == null) ||
                                (parametersIn["ekashu_card_scheme"] == null) ||
                                (parametersIn["ekashu_date_time_local_fmt"] == null) ||
                                (parametersIn["ekashu_masked_card_number"] == null) ||
                                (parametersIn["ekashu_expires_end_month"] == null) ||
                                (parametersIn["ekashu_expires_end_year"] == null) ||
                                (parametersIn["ccchargedquantity"] == null))) ||
                        ((CCProvider == PaymentMeanCreditCardProviderType.pmccpIECISA) &&
                                (paymentType == PaymentMeanType.pmtDebitCreditCard) &&
                                ((parametersIn["iecisa_CF_TicketNumber"] == null) ||
                                (parametersIn["iecisa_CF_AuthCode"] == null) ||
                                (parametersIn["iecisa_CF_TransactionID"] == null) ||
                                (parametersIn["iecisa_TransactionID"] == null) ||
                                (parametersIn["iecisa_CF_Result"] == null) ||
                                (parametersIn["iecisa_CF_Token"] == null) ||
                                (parametersIn["iecisa_CF_CardHash"] == null) ||
                                (parametersIn["iecisa_CF_PAN"] == null) ||
                                (parametersIn["iecisa_GatewayDate"] == null) ||
                                (parametersIn["iecisa_CF_ExpirationDate"] == null) ||
                                (parametersIn["ccchargedquantity"] == null))) ||
                        ((CCProvider == PaymentMeanCreditCardProviderType.pmccpStripe) &&
                                (paymentType == PaymentMeanType.pmtDebitCreditCard) &&
                                ((parametersIn["stripe_customer_id"] == null) ||
                                (parametersIn["stripe_card_reference"] == null) ||
                                (parametersIn["stripe_card_scheme"] == null) ||
                                (parametersIn["stripe_masked_card_number"] == null) ||
                                (parametersIn["stripe_expires_end_month"] == null) ||
                                (parametersIn["stripe_expires_end_year"] == null) ||
                                (parametersIn["stripe_transaction_id"] == null) ||
                                (parametersIn["stripe_date_time_utc"] == null) ||
                                (parametersIn["ccchargedquantity"] == null))) ||
                        ((CCProvider == PaymentMeanCreditCardProviderType.pmccpMoneris) &&
                                (paymentType == PaymentMeanType.pmtDebitCreditCard) &&
                                ((parametersIn["moneris_transaction_id"] == null) ||
                                (parametersIn["moneris_reference"] == null) ||
                                (parametersIn["moneris_auth_code"] == null) ||
                                (parametersIn["moneris_auth_result"] == null) ||
                                (parametersIn["moneris_card_hash"] == null) ||
                                (parametersIn["moneris_card_reference"] == null) ||
                                (parametersIn["moneris_card_scheme"] == null) ||
                                (parametersIn["moneris_date_time_local_fmt"] == null) ||
                                (parametersIn["moneris_masked_card_number"] == null) ||
                                (parametersIn["moneris_expires_end_month"] == null) ||
                                (parametersIn["moneris_expires_end_year"] == null) ||
                                (parametersIn["ccchargedquantity"] == null))) ||
                        ((CCProvider == PaymentMeanCreditCardProviderType.pmccpPayu) &&
                                (paymentType == PaymentMeanType.pmtDebitCreditCard) &&
                                ((parametersIn["payu_transaction_id"] == null) ||
                                (parametersIn["payu_reference"] == null) ||
                                (parametersIn["payu_auth_code"] == null) ||
                                (parametersIn["payu_card_hash"] == null) ||
                                (parametersIn["payu_card_reference"] == null) ||
                                (parametersIn["payu_card_scheme"] == null) ||
                                (parametersIn["payu_date_time_local_fmt"] == null) ||
                                (parametersIn["payu_masked_card_number"] == null) ||
                                (parametersIn["ccchargedquantity"] == null))) ||
                         ((CCProvider == PaymentMeanCreditCardProviderType.pmccpTransbank) &&
                                (paymentType == PaymentMeanType.pmtDebitCreditCard) &&
                                ((parametersIn["transbank_card_hash"] == null) ||
                                (parametersIn["transbank_card_reference"] == null) ||
                                (parametersIn["transbank_card_scheme"] == null) ||
                                (parametersIn["transbank_masked_card_number"] == null) ||
                                (parametersIn["ccchargedquantity"] == null))) ||
                         ((CCProvider == PaymentMeanCreditCardProviderType.pmccpBSRedsys) &&
                                (paymentType == PaymentMeanType.pmtDebitCreditCard) &&
                                ((parametersIn["bsredsys_transaction_id"] == null) ||
                                (parametersIn["bsredsys_reference"] == null) ||
                                //(parametersIn["bsredsys_auth_code"] == null) ||
                                //(parametersIn["bsredsys_auth_result"] == null) ||
                                (parametersIn["bsredsys_card_hash"] == null) ||
                                (parametersIn["bsredsys_card_reference"] == null) ||
                                //(parametersIn["bsredsys_card_scheme"] == null) ||
                                (parametersIn["bsredsys_date_time_local_fmt"] == null) ||
                                (parametersIn["bsredsys_masked_card_number"] == null) ||
                                (parametersIn["bsredsys_expires_end_month"] == null) ||
                                (parametersIn["bsredsys_expires_end_year"] == null) ||
                                (parametersIn["ccchargedquantity"] == null))) ||
                         ((CCProvider == PaymentMeanCreditCardProviderType.pmccpPaysafe) &&
                                (paymentType == PaymentMeanType.pmtDebitCreditCard) &&
                                ((parametersIn["paysafe_transaction_id"] == null) ||
                                (parametersIn["paysafe_reference"] == null) ||
                                //(parametersIn["paysafe_auth_code"] == null) ||
                                //(parametersIn["paysafe_auth_result"] == null) ||
                                (parametersIn["paysafe_card_hash"] == null) ||
                                (parametersIn["paysafe_card_reference"] == null) ||
                                //(parametersIn["paysafe_card_scheme"] == null) ||
                                (parametersIn["paysafe_date_time_local_fmt"] == null) ||
                                (parametersIn["paysafe_masked_card_number"] == null) ||
                                (parametersIn["paysafe_expires_end_month"] == null) ||
                                (parametersIn["paysafe_expires_end_year"] == null) ||
                                (parametersIn["ccchargedquantity"] == null))) ||
                          ((CCProvider == PaymentMeanCreditCardProviderType.pmccpMercadoPago) &&
                                (paymentType == PaymentMeanType.pmtDebitCreditCard) &&
                                ((parametersIn["mercadopago_card_hash"] == null) ||
                                (parametersIn["mercadopago_card_reference"] == null) ||
                                (parametersIn["mercadopago_card_scheme"] == null) ||
                                (parametersIn["mercadopago_card_type"] == null) ||
                                (parametersIn["mercadopago_masked_card_number"] == null) ||
                                (parametersIn["mercadopago_expires_end_month"] == null) ||
                                (parametersIn["mercadopago_expires_end_year"] == null) ||
                                (parametersIn["mercadopago_date_time_local_fmt"] == null) ||
                                (parametersIn["mercadopago_reference"] == null) ||
                                (parametersIn["mercadopago_transaction_id"] == null) ||
                                (parametersIn["mercadopago_document_id"] == null) ||
                                (parametersIn["mercadopago_document_type"] == null) ||
                                (parametersIn["mercadopago_installaments"] == null) ||
                                (parametersIn["mercadopago_cvv_length"] == null) ||
                                (parametersIn["ccchargedquantity"] == null))))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {

                        string strSignupScreenType = infraestructureRepository.GetParameterValue("SignUpScreenType");
                        SignupScreenType eSignupScreenType = SignupScreenType.Iparkme;

                        if (!string.IsNullOrEmpty(strSignupScreenType))
                        {
                            try
                            {
                                eSignupScreenType = (SignupScreenType)Convert.ToInt32(strSignupScreenType);
                            }
                            catch { }
                        }


                        if (eSignupScreenType == SignupScreenType.Iparkme)
                        {
                            if ((parametersIn["license"] == null) ||
                               (parametersIn["phone"] == null))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                        }

                        if (eSignupScreenType == SignupScreenType.Iparkme)
                        {
                            if ((string.IsNullOrEmpty(parametersIn["license"].ToString().Trim())) ||
                               (string.IsNullOrEmpty(parametersIn["phone"].ToString().Trim())))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                        }

                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            string strCulture = ConfigurationManager.AppSettings["ConfirmUserData_Culture"];
                            if (parametersIn["lang"] != null)
                            {
                                try
                                {
                                    int iLangIndex = Convert.ToInt32(parametersIn["lang"].ToString());
                                    if (iLangIndex <= UserDeviceLangs.Length)
                                    {
                                        strCulture = UserDeviceLangs[iLangIndex - 1];
                                    }
                                }
                                catch
                                { }


                            }




                            int iCountry = -1;
                            try
                            {
                                iCountry = Convert.ToInt32(parametersIn["ccode"].ToString());
                                string strPrefix = infraestructureRepository.GetCountryTelephonePrefix(iCountry);
                                if (strPrefix.Length == 0)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Country_Code);
                                    Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Country_Code);
                                Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            bool bAutoRecharge = false;
                            int? iAutoRechargeAmount = null;
                            int? iAutoRechargeBelow = null;
                            if (parametersIn["autrech"] != null)
                            {
                                try
                                {
                                    bAutoRecharge = Convert.ToInt32(parametersIn["autrech"].ToString()) == 1;

                                    if (bAutoRecharge)
                                    {
                                        if ((parametersIn["autbelow"] != null) && (parametersIn["autamo"] != null))
                                        {

                                            iAutoRechargeAmount = Convert.ToInt32(parametersIn["autamo"].ToString());
                                            iAutoRechargeBelow = Convert.ToInt32(parametersIn["autbelow"].ToString());

                                        }
                                        else
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                            Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                    }


                                }
                                catch
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }
                            }


                            PaymentSuscryptionType? suscriptionType = null;
                            string sSuscriptionType = "";
                            RefundBalanceType eRefundBalType = RefundBalanceType.rbtAmount;

                            infraestructureRepository.GetCountryPossibleSuscriptionTypes(iCountry, out sSuscriptionType, out eRefundBalType);

                            try
                            {
                                int iSuscType = Convert.ToInt32(parametersIn["subscription_type"].ToString());
                                if (iSuscType == -1)
                                {

                                    if (((int)PaymentSuscryptionType.pstPrepay).ToString() == sSuscriptionType)
                                    {
                                        suscriptionType = PaymentSuscryptionType.pstPrepay;
                                    }
                                    else if (((int)PaymentSuscryptionType.pstPerTransaction).ToString() == sSuscriptionType)
                                    {
                                        suscriptionType = PaymentSuscryptionType.pstPerTransaction;
                                    }
                                }
                                else
                                {
                                    suscriptionType = (PaymentSuscryptionType)iSuscType;

                                }

                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }



                            int? iChargedQuantity = null;
                            if ((paymentType == PaymentMeanType.pmtDebitCreditCard) || (paymentType == PaymentMeanType.pmtPaypal))
                            {
                                try
                                {
                                    iChargedQuantity = Convert.ToInt32(parametersIn["ccchargedquantity"].ToString());

                                }
                                catch
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }



                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            int? iUTCOffset = null;


                            if ((parametersIn["date"] != null) && (parametersIn["utc_date"] != null))
                            {

                                DateTime dt;
                                DateTime dtUTC;

                                try
                                {
                                    dt = DateTime.ParseExact(parametersIn["date"].ToString(), "HHmmssddMMyy",
                                      CultureInfo.InvariantCulture);
                                    dtUTC = DateTime.ParseExact(parametersIn["utc_date"].ToString(), "HHmmssddMMyy",
                                      CultureInfo.InvariantCulture);

                                    iUTCOffset = Convert.ToInt32((dtUTC - dt).TotalMinutes + 0.5);

                                }
                                catch
                                {
                                    iUTCOffset = 0;
                                }


                            }
                            else
                            {

                                if (parametersIn["utc_offset"] != null)
                                {
                                    try
                                    {
                                        iUTCOffset = Convert.ToInt32(parametersIn["utc_offset"].ToString());
                                    }
                                    catch { }
                                }
                                else
                                {
                                    iUTCOffset = 0;
                                }
                            }


                            string strfname = "";
                            string strlname = "";
                            string strdlicense = "";
                            string struserstreet = "";
                            int istreetnum = 0;
                            int? iuserstreetflat = null;
                            string struserstate = "";
                            string strusercity = "";
                            string struserpostalcode = "";

                            if (parametersIn["fname"] != null)
                            {
                                strfname = parametersIn["fname"].ToString();
                            }

                            if (parametersIn["lname"] != null)
                            {
                                strlname = parametersIn["lname"].ToString();
                            }

                            if (parametersIn["dlicense"] != null)
                            {
                                strdlicense = parametersIn["dlicense"].ToString();
                            }

                            if (parametersIn["userstreet"] != null)
                            {
                                struserstreet = parametersIn["userstreet"].ToString();
                            }

                            if (parametersIn["userstreetnum"] != null)
                            {
                                try
                                {
                                    istreetnum = Convert.ToInt32(parametersIn["userstreetnum"].ToString());
                                }
                                catch { }
                            }


                            if (parametersIn["userstreetflat"] != null)
                            {
                                try
                                {
                                    iuserstreetflat = Convert.ToInt32(parametersIn["userstreetflat"].ToString());
                                }
                                catch { }
                            }


                            if (parametersIn["userstate"] != null)
                            {
                                struserstate = parametersIn["userstate"].ToString();
                            }

                            if (parametersIn["usercity"] != null)
                            {
                                strusercity = parametersIn["usercity"].ToString();
                            }

                            if (parametersIn["userpostalcode"] != null)
                            {
                                struserpostalcode = parametersIn["userpostalcode"].ToString();
                            }


                            string sAppVersion = "";
                            try
                            {
                                if (parametersIn["appvers"] != null)
                                    sAppVersion = parametersIn["appvers"].ToString();
                                else
                                    sAppVersion = "1.0";
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            if (!CheckVersionFormat(sAppVersion))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmUserData::Error: Invalid app version format: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            ulong ulAppVersion = AppUtilities.AppVersion(sAppVersion);

                            string strSignUpGuid = GenerateNewGuid();

                            string strTel = "";

                            if (parametersIn["phone"] != null)
                            {
                                strTel = parametersIn["phone"].ToString().Trim();
                            }


                            string strUserMustBeActivated = infraestructureRepository.GetParameterValue("UserMustBeActivated");
                            bool bUserMustBeActivated = false;
                            int iNumMaxMinutesForActivation = Int32.MaxValue;

                            if (!string.IsNullOrEmpty(strUserMustBeActivated))
                            {
                                bUserMustBeActivated = (strUserMustBeActivated == "1");
                            }

                            if (bUserMustBeActivated)
                            {
                                bool bDeleteMembership = false;
                                string strNumMaxMinutesForActivation = infraestructureRepository.GetParameterValue("NonActivatedUserUnBlockingTime");
                                try
                                {
                                    iNumMaxMinutesForActivation = Convert.ToInt32(strNumMaxMinutesForActivation);
                                }
                                catch
                                { }

                                customersRepository.DeleteNonActivatedUser(parametersIn["email"].ToString().ToLower().Trim(), iNumMaxMinutesForActivation, out bDeleteMembership);


                                if (bDeleteMembership)
                                {
                                    FormAuthMemberShip.MembershipService.DeleteUser(parametersIn["email"].ToString().ToLower().Trim());
                                }
                            }


                            decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();
                            if (parametersIn["appcode"] != null)
                            {
                                try
                                {
                                    string strAppCode = parametersIn["appcode"].ToString();
                                    dSourceApp = geograficAndTariffsRepository.GetSourceApp(strAppCode);
                                }
                                catch { }
                            }

                            USER oUser = new USER
                            {

                                CUSTOMER = new CUSTOMER
                                {
                                    CUS_TYPE = (int)CustomerType.Individual,
                                    CUS_COU_ID = iCountry,
                                    CUS_DOC_ID = strdlicense.ToUpper(),
                                    CUS_DOC_ID_TYPE = 0,//Undefined for now
                                    CUS_FIRST_NAME = strfname.ToUpper(),
                                    CUS_SURNAME1 = strlname.ToUpper(),
                                    CUS_SURNAME2 = "",
                                    CUS_STREET = struserstreet.ToUpper(),
                                    CUS_STREE_NUMBER = istreetnum,
                                    CUS_LEVEL_NUM = iuserstreetflat,
                                    CUS_DOOR = "",
                                    CUS_LETTER = "",
                                    CUS_STAIR = "",
                                    CUS_CITY = strusercity.ToUpper(),
                                    CUS_STATE = struserstate.ToUpper(),
                                    CUS_ZIPCODE = struserpostalcode.ToUpper(),
                                    CUS_ENABLED = 1,
                                    CUS_INSERT_UTC_DATE = DateTime.UtcNow,
                                    CUS_NAME = "",

                                },

                                USR_COU_ID = iCountry,
                                USR_EMAIL = parametersIn["email"].ToString().ToLower().Trim(),
                                USR_MAIN_TEL_COUNTRY = iCountry,
                                USR_MAIN_TEL = strTel,
                                USR_SECUND_TEL_COUNTRY = null,
                                USR_SECUND_TEL = "",
                                USR_USERNAME = parametersIn["email"].ToString().ToLower().Trim(),
                                USR_BALANCE = 0,
                                USR_CUR_ID = (ulAppVersion < _VERSION_2_0) ? infraestructureRepository.GetCountryCurrency(MEXICO_COUNTRY_ID) : infraestructureRepository.GetCountryCurrency(iCountry),
                                USR_CULTURE_LANG = strCulture,
                                USR_ENABLED = 1,
                                USR_INSERT_UTC_DATE = DateTime.UtcNow,
                                USR_SUSCRIPTION_TYPE = (int?)suscriptionType,
                                USR_REFUND_BALANCE_TYPE = (int)eRefundBalType,
                                USR_UTC_OFFSET = iUTCOffset.Value,
                                USR_PAYMETH = (int)PaymentMeanTypeStatus.pmsWithoutPaymentMean,
                                USR_SIGNUP_OS = iOSID,
                                USR_SIGNUP_GUID = strSignUpGuid,
                                USR_ACTIVATED = bUserMustBeActivated ? 0 : 1,
                                USR_SIGNUP_SOAPP_ID = dSourceApp,
                                USR_LAST_SOAPP_ID = dSourceApp,
                                USR_IS_ANONYMOUS = 0,
                            };





                            if (eSignupScreenType == SignupScreenType.Iparkme)
                            {

                                string strPlateSharing = infraestructureRepository.GetParameterValue("PlateSharing");
                                bool bPlateSharing = true;

                                if (!string.IsNullOrEmpty(strPlateSharing))
                                {
                                    bPlateSharing = (strPlateSharing != "0");
                                }


                                if (bPlateSharing || !customersRepository.IsPlateAssignedToAnotherUser(parametersIn["license"].ToString().ToUpper()))
                                {
                                    oUser.USER_PLATEs.Add(new USER_PLATE
                                    {
                                        USRP_PLATE = parametersIn["license"].ToString().ToUpper(),
                                        USRP_IS_DEFAULT = 1,
                                        USRP_ENABLED = 1
                                    });
                                }
                                else
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Plate_Is_Assigned_To_Another_User);
                                    Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                            }

                            if (eSignupScreenType == SignupScreenType.Iparkme)
                            {
                                if (customersRepository.ExistMainTelephone(Convert.ToInt32(oUser.USR_MAIN_TEL_COUNTRY), oUser.USR_MAIN_TEL))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Mobile_Phone_Already_Exist);
                                    Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }


                            if (customersRepository.ExistEmail(oUser.USR_EMAIL))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Email_Already_Exist);
                                Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            string password = parametersIn["pass"].ToString();
                            FormAuthMemberShip.MembershipService.DeleteUser(oUser.USR_USERNAME);

                            DateTime? dtExpDate = null;
                            string strReference = "";
                            string strAuthCode = "";
                            string strAuthResult = "";
                            string strAuthResultDesc = "";
                            string strCardHash = "";
                            string strCardReference = "";
                            string strCardScheme = "";
                            string strGatewayDate = "";
                            string strMaskedCardNumber = "";
                            string strTransactionId = "";
                            string strCFTransactionId = null;
                            string strExpMonth = "";
                            string strExpYear = "";
                            string strCardSecurityCode = "";
                            string strCardType = "";
                            string strDocumentID = "";
                            string strDocumentType = "";
                            string strInstallaments = "";
                            string strCVVLength = "";


                            bool bReturnPAN = false;

                            MembershipCreateStatus createStatus = FormAuthMemberShip.MembershipService.CreateUser(oUser.USR_USERNAME, password, oUser.USR_EMAIL);
                            if (createStatus != MembershipCreateStatus.Success)
                            {
                                FormAuthMemberShip.MembershipService.DeleteUser(oUser.USR_USERNAME);
                                createStatus = FormAuthMemberShip.MembershipService.CreateUser(oUser.USR_USERNAME, password, oUser.USR_EMAIL);
                            }

                            if (createStatus != MembershipCreateStatus.Success)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            else
                            {
                                if (!customersRepository.AddUser(ref oUser, null))
                                {
                                    FormAuthMemberShip.MembershipService.DeleteUser(oUser.USR_USERNAME);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                                else
                                {


                                    string culture = oUser.USR_CULTURE_LANG;
                                    CultureInfo ci = new CultureInfo(culture);
                                    Thread.CurrentThread.CurrentUICulture = ci;
                                    Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);
                                    integraMobile.WS.Properties.Resource.Culture = ci;


                                    if ((paymentType == PaymentMeanType.pmtDebitCreditCard) || (paymentType == PaymentMeanType.pmtPaypal))
                                    {
                                        CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG oGatewayConfig = null;
                                        if (paymentType == PaymentMeanType.pmtDebitCreditCard)
                                        {

                                            oGatewayConfig = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                                                                  .Where(r => r.CPTGC_ENABLED != 0 && 
                                                                              r.CPTGC_IS_INTERNAL != 0 && 
                                                                              r.CPTGC_INTERNAL_SOAPP_ID.HasValue &&
                                                                              r.CPTGC_INTERNAL_SOAPP_ID == dSourceApp &&
                                                                              r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtDebitCreditCard))
                                                                  .FirstOrDefault();


                                            if (oGatewayConfig==null)
                                            {

                                                oGatewayConfig = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                                                                .Where(r => r.CPTGC_ENABLED != 0 &&
                                                                            r.CPTGC_IS_INTERNAL != 0 &&
                                                                            !r.CPTGC_INTERNAL_SOAPP_ID.HasValue &&
                                                                            r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtDebitCreditCard))
                                                                .FirstOrDefault();

                                            }
                                        }

                                        decimal? dGatewayConfigId = ((oGatewayConfig != null) ? oGatewayConfig.CPTGC_ID : (decimal?)null);


                                        PaymentMeanRechargeStatus rechargeStatus = PaymentMeanRechargeStatus.Waiting_Commit;


                                        if (CCProvider == PaymentMeanCreditCardProviderType.pmccpCreditCall)
                                        {

                                            strTransactionId = parametersIn["ekashu_transaction_id"].ToString();
                                            strReference = parametersIn["ekashu_reference"].ToString();
                                            strAuthCode = parametersIn["ekashu_auth_code"].ToString();
                                            strAuthResult = parametersIn["ekashu_auth_result"].ToString();
                                            strCardHash = parametersIn["ekashu_card_hash"].ToString();
                                            strCardReference = parametersIn["ekashu_card_reference"].ToString();
                                            strCardScheme = parametersIn["ekashu_card_scheme"].ToString();
                                            strGatewayDate = parametersIn["ekashu_date_time_local_fmt"].ToString();
                                            strMaskedCardNumber = parametersIn["ekashu_masked_card_number"].ToString();
                                            strExpMonth = parametersIn["ekashu_expires_end_month"].ToString();
                                            strExpYear = parametersIn["ekashu_expires_end_year"].ToString();

                                            if ((strExpMonth.Length == 2) && (strExpYear.Length == 4))
                                            {
                                                dtExpDate = new DateTime(Convert.ToInt32(strExpYear), Convert.ToInt32(strExpMonth), 1).AddMonths(1).AddSeconds(-1);
                                            }

                                            bReturnPAN = true;
                                        }
                                        else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpIECISA)
                                        {


                                            strReference = parametersIn["iecisa_CF_TicketNumber"].ToString();
                                            strAuthCode = parametersIn["iecisa_CF_AuthCode"].ToString();
                                            strAuthResult = parametersIn["iecisa_CF_Result"].ToString(); ;
                                            strCardScheme = "";
                                            strCFTransactionId = parametersIn["iecisa_CF_TransactionID"].ToString();
                                            strTransactionId = parametersIn["iecisa_TransactionID"].ToString();


                                            strCardHash = parametersIn["iecisa_CF_CardHash"].ToString();
                                            strCardReference = parametersIn["iecisa_CF_Token"].ToString();
                                            strMaskedCardNumber = parametersIn["iecisa_CF_PAN"].ToString();
                                            strGatewayDate = DateTime.ParseExact(parametersIn["iecisa_GatewayDate"].ToString(), "HHmmssddMMyyyy",
                                                                    CultureInfo.InvariantCulture).ToString("ddMMyyyyHHmmss");
                                            string strExpDate = parametersIn["iecisa_CF_ExpirationDate"].ToString();

                                            if (strExpDate.Length == 4)
                                            {
                                                dtExpDate = new DateTime(Convert.ToInt32(strExpDate.Substring(2, 2)) + 2000,
                                                                            Convert.ToInt32(strExpDate.Substring(0, 2)), 1).AddMonths(1).AddSeconds(-1);
                                            }
                                            rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                            bReturnPAN = true;

                                        }
                                        else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpStripe)
                                        {

                                            strReference = parametersIn["stripe_transaction_id"].ToString();
                                            strAuthCode = "";
                                            strAuthResult = "succeeded";
                                            strCardHash = parametersIn["stripe_customer_id"].ToString();
                                            strCardReference = parametersIn["stripe_card_reference"].ToString();
                                            strCardScheme = parametersIn["stripe_card_scheme"].ToString();
                                            strGatewayDate = DateTime.ParseExact(parametersIn["stripe_date_time_utc"].ToString(), "HHmmssddMMyy",
                                                                    CultureInfo.InvariantCulture).ToString("ddMMyyyyHHmmss");
                                            strMaskedCardNumber = parametersIn["stripe_masked_card_number"].ToString();
                                            strTransactionId = parametersIn["stripe_transaction_id"].ToString();
                                            strExpMonth = parametersIn["stripe_expires_end_month"].ToString();
                                            strExpYear = parametersIn["stripe_expires_end_year"].ToString();


                                            if ((strExpMonth.Length == 2) && (strExpYear.Length == 4))
                                            {
                                                dtExpDate = new DateTime(Convert.ToInt32(strExpYear), Convert.ToInt32(strExpMonth), 1).AddMonths(1).AddSeconds(-1);
                                            }
                                            bReturnPAN = true;

                                        }
                                        else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpMoneris)
                                        {

                                            strTransactionId = parametersIn["moneris_transaction_id"].ToString();
                                            strReference = parametersIn["moneris_reference"].ToString();
                                            strAuthCode = parametersIn["moneris_auth_code"].ToString();
                                            strAuthResult = parametersIn["moneris_auth_result"].ToString();
                                            strCardHash = parametersIn["moneris_card_hash"].ToString();
                                            strCardReference = parametersIn["moneris_card_reference"].ToString();
                                            strCardScheme = parametersIn["moneris_card_scheme"].ToString();
                                            strGatewayDate = parametersIn["moneris_date_time_local_fmt"].ToString();
                                            strMaskedCardNumber = parametersIn["moneris_masked_card_number"].ToString();
                                            strExpMonth = parametersIn["moneris_expires_end_month"].ToString();
                                            strExpYear = parametersIn["moneris_expires_end_year"].ToString();

                                            if ((strExpMonth.Length == 2) && (strExpYear.Length == 2))
                                            {
                                                dtExpDate = new DateTime(Convert.ToInt32(strExpYear) + 2000, Convert.ToInt32(strExpMonth), 1).AddMonths(1).AddSeconds(-1);
                                            }

                                            rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                            bReturnPAN = true;
                                        }
                                        else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpPayu)
                                        {

                                            strTransactionId = parametersIn["payu_transaction_id"].ToString();
                                            strReference = parametersIn["payu_reference"].ToString();
                                            strAuthCode = parametersIn["payu_auth_code"].ToString();
                                            strCardHash = parametersIn["payu_card_hash"].ToString();
                                            strCardReference = parametersIn["payu_card_reference"].ToString();
                                            strCardScheme = parametersIn["payu_card_scheme"].ToString();
                                            strGatewayDate = parametersIn["payu_date_time_local_fmt"].ToString();
                                            strMaskedCardNumber = parametersIn["payu_masked_card_number"].ToString();
                                            strCardSecurityCode = parametersIn["payu_card_security_code"].ToString();

                                            rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                            bReturnPAN = true;
                                        }
                                        else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpTransbank)
                                        {

                                            if (iChargedQuantity > 0)
                                            {
                                                strTransactionId = parametersIn["transbank_transaction_id"].ToString();
                                                strReference = parametersIn["transbank_reference"].ToString();
                                                strAuthCode = parametersIn["transbank_auth_code"].ToString();
                                                strGatewayDate = parametersIn["transbank_date_time_local_fmt"].ToString();
                                            }
                                            else
                                            {
                                                strTransactionId = "";
                                                strReference = "";
                                                strAuthCode = "";
                                                strGatewayDate = "";
                                            }


                                            strAuthResult = "";
                                            strCardHash = parametersIn["transbank_card_hash"].ToString();
                                            strCardReference = parametersIn["transbank_card_reference"].ToString();
                                            strCardScheme = parametersIn["transbank_card_scheme"].ToString();
                                            strMaskedCardNumber = parametersIn["transbank_masked_card_number"].ToString();
                                            dtExpDate = null;
                                            rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                            bReturnPAN = true;
                                        }
                                        else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpBSRedsys)
                                        {
                                            if (parametersIn["bsredsys_auth_code"] == null) parametersIn["bsredsys_auth_code"] = "";
                                            if (parametersIn["bsredsys_auth_result"] == null) parametersIn["bsredsys_auth_result"] = "";
                                            if (parametersIn["bsredsys_card_scheme"] == null) parametersIn["bsredsys_card_scheme"] = "";

                                            strTransactionId = parametersIn["bsredsys_transaction_id"].ToString();
                                            strReference = parametersIn["bsredsys_reference"].ToString();
                                            strAuthCode = parametersIn["bsredsys_auth_code"].ToString();
                                            strAuthResult = parametersIn["bsredsys_auth_result"].ToString();
                                            strCardHash = parametersIn["bsredsys_card_hash"].ToString();
                                            strCardReference = parametersIn["bsredsys_card_reference"].ToString();
                                            strCardScheme = parametersIn["bsredsys_card_scheme"].ToString();
                                            strGatewayDate = parametersIn["bsredsys_date_time_local_fmt"].ToString();
                                            strMaskedCardNumber = parametersIn["bsredsys_masked_card_number"].ToString();
                                            strExpMonth = parametersIn["bsredsys_expires_end_month"].ToString();
                                            strExpYear = parametersIn["bsredsys_expires_end_year"].ToString();

                                            if ((strExpMonth.Length == 2) && (strExpYear.Length == 2))
                                            {
                                                dtExpDate = new DateTime(Convert.ToInt32(strExpYear) + 2000, Convert.ToInt32(strExpMonth), 1).AddMonths(1).AddSeconds(-1);
                                            }

                                            rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                            bReturnPAN = false;
                                        }
                                        else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpPaysafe)
                                        {
                                            if (parametersIn["paysafe_auth_code"] == null) parametersIn["paysafe_auth_code"] = "";
                                            if (parametersIn["paysafe_auth_result"] == null) parametersIn["paysafe_auth_result"] = "";
                                            if (parametersIn["paysafe_card_scheme"] == null) parametersIn["paysafe_card_scheme"] = "";

                                            strTransactionId = parametersIn["paysafe_transaction_id"].ToString();
                                            strReference = parametersIn["paysafe_reference"].ToString();
                                            strAuthCode = parametersIn["paysafe_auth_code"].ToString();
                                            strAuthResult = parametersIn["paysafe_auth_result"].ToString();
                                            strCardHash = parametersIn["paysafe_card_hash"].ToString();
                                            strCardReference = parametersIn["paysafe_card_reference"].ToString();
                                            strCardScheme = parametersIn["paysafe_card_scheme"].ToString();
                                            strGatewayDate = parametersIn["paysafe_date_time_local_fmt"].ToString();
                                            strMaskedCardNumber = parametersIn["paysafe_masked_card_number"].ToString();
                                            strExpMonth = parametersIn["paysafe_expires_end_month"].ToString();
                                            strExpYear = parametersIn["paysafe_expires_end_year"].ToString();

                                            if ((strExpMonth.Length > 0) && (strExpYear.Length == 2))
                                            {
                                                dtExpDate = new DateTime(Convert.ToInt32(strExpYear) + 2000, Convert.ToInt32(strExpMonth), 1).AddMonths(1).AddSeconds(-1);
                                            }

                                            rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                            bReturnPAN = false;
                                        }
                                        else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpMercadoPago)
                                        {                                            
                                            strTransactionId = parametersIn["mercadopago_transaction_id"].ToString();
                                            strReference = parametersIn["mercadopago_reference"].ToString();
                                            strCardHash = parametersIn["mercadopago_card_hash"].ToString();
                                            strCardReference = parametersIn["mercadopago_card_reference"].ToString();
                                            strCardScheme = parametersIn["mercadopago_card_scheme"].ToString();
                                            strGatewayDate = parametersIn["mercadopago_date_time_local_fmt"].ToString();
                                            strMaskedCardNumber = parametersIn["mercadopago_masked_card_number"].ToString();
                                            strExpMonth = parametersIn["mercadopago_expires_end_month"].ToString();
                                            strExpYear = parametersIn["mercadopago_expires_end_year"].ToString();
                                            strCardType = parametersIn["mercadopago_card_type"].ToString();
                                            strDocumentID = parametersIn["mercadopago_document_id"].ToString();
                                            strDocumentType = parametersIn["mercadopago_document_type"].ToString();
                                            strInstallaments = parametersIn["mercadopago_installaments"].ToString();
                                            strCVVLength = parametersIn["mercadopago_cvv_length"].ToString();



                                            if ((strExpMonth.Length > 0) && (strExpYear.Length == 4))
                                            {
                                                dtExpDate = new DateTime(Convert.ToInt32(strExpYear), Convert.ToInt32(strExpMonth), 1).AddMonths(1).AddSeconds(-1);
                                            }

                                            rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                            bReturnPAN = true;
                                        }
                                        else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpMercadoPagoPro)
                                        {
                                            rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                            bReturnPAN = false;
                                        }


                                        if (!customersRepository.SetUserPaymentMean(ref oUser, infraestructureRepository,
                                                        new CUSTOMER_PAYMENT_MEAN
                                                        {
                                                            CUSPM_PAT_ID = Convert.ToInt32(paymentType),
                                                            CUSPM_PAST_ID = ((Convert.ToInt32(paymentType) == (int)PaymentMeanType.pmtPaypal) && (!bAutoRecharge)) ?
                                                                (int)PaymentMeanSubType.pmstPaypal : (int)PaymentMeanSubType.pmstUndefined,
                                                            CUSPM_CREDIT_CARD_PAYMENT_PROVIDER = (Convert.ToInt32(paymentType) == (int)PaymentMeanType.pmtPaypal) ? -1 :
                                                                                                (int)CCProvider,
                                                            CUSPM_AUTOMATIC_RECHARGE = bAutoRecharge ? 1 : 0,
                                                            CUSPM_AMOUNT_TO_RECHARGE = bAutoRecharge ? iAutoRechargeAmount.Value : (int?)null,
                                                            CUSPM_RECHARGE_WHEN_AMOUNT_IS_LESS = bAutoRecharge ? iAutoRechargeBelow : (int?)null,
                                                            CUSPM_TOKEN_PAYPAL_ID = "",
                                                            CUSPM_CUR_ID = oUser.USR_CUR_ID,
                                                            CUSPM_VALID = 1,
                                                            CUSPM_CPTGC_ID = dGatewayConfigId,
                                                            CUSPM_TOKEN_CARD_HASH = (CCProvider == PaymentMeanCreditCardProviderType.pmccpTransbank && iChargedQuantity == 0) ? strCardHash : null,
                                                            CUSPM_TOKEN_CARD_REFERENCE = (CCProvider == PaymentMeanCreditCardProviderType.pmccpTransbank && iChargedQuantity == 0) ? strCardReference : null,
                                                            CUSPM_TOKEN_MASKED_CARD_NUMBER = (CCProvider == PaymentMeanCreditCardProviderType.pmccpTransbank && iChargedQuantity == 0) ? strMaskedCardNumber : null,
                                                            CUSPM_TOKEN_CARD_SCHEMA = (CCProvider == PaymentMeanCreditCardProviderType.pmccpTransbank && iChargedQuantity == 0) ? strCardScheme : null,
                                                            CUSPM_CREATION_SOAPP_ID = dSourceApp,
                                                            CUSPM_LAST_SOAPP_ID = dSourceApp,
                                                            CUSPM_CVV_LENGTH = (string.IsNullOrEmpty(strCVVLength) ? (int?)null : Convert.ToInt32(strCVVLength)),
                                                            CUSPM_TOKEN_CARD_TYPE = strCardType,
                                                            CUSPM_TOKEN_CARD_DOCUMENT_ID = strDocumentID,
                                                            CUSPM_TOKEN_CARD_DOCUMENT_TYPE = strDocumentType,
                                                            CUSPM_TOKEN_INSTALLMENTS = strInstallaments,
                                                        }))
                                        {
                                            FormAuthMemberShip.MembershipService.DeleteUser(oUser.USR_USERNAME);
                                            customersRepository.DeleteUser(ref oUser);
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;

                                        }
                                        else
                                        {

                                            if (paymentType != PaymentMeanType.pmtDebitCreditCard)
                                            {
                                                FormAuthMemberShip.MembershipService.DeleteUser(oUser.USR_USERNAME);
                                                customersRepository.DeleteUser(ref oUser);
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                                Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                return xmlOut;
                                            }


                                            if (iChargedQuantity > 0)
                                            {


                                                decimal? dRechargeId = null;

                                                bool bAddToBalance = true;
                                                decimal dCurrencyToCharge = oUser.CURRENCy.CUR_ID;




                                                if (suscriptionType == PaymentSuscryptionType.pstPerTransaction)
                                                {
                                                    List<string> oPerTransactionParameters = new List<string>();
                                                    iChargedQuantity = 0;

                                                    oPerTransactionParameters = ConfigurationManager.AppSettings["SuscriptionType2_AddPayMethChargeValue"].ToString().Split(';').ToList();

                                                    for (int i = 0; i < oPerTransactionParameters.Count; i++)
                                                    {
                                                        if (oPerTransactionParameters[i] == infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)))
                                                        {
                                                            iChargedQuantity = Convert.ToInt32(oPerTransactionParameters[i + 1]);
                                                            dCurrencyToCharge = oUser.CURRENCy.CUR_ID;
                                                            break;
                                                        }

                                                    }

                                                    bAddToBalance = false;
                                                    rechargeStatus = rechargeStatus == PaymentMeanRechargeStatus.Waiting_Commit ? PaymentMeanRechargeStatus.Waiting_Cancellation : PaymentMeanRechargeStatus.Waiting_Refund;
                                                }


                                                decimal? dLatitude = null;
                                                decimal? dLongitude = null;
                                                this.GetLatLon(parametersIn, out dLatitude, out dLongitude);

                                                decimal dPercVAT1;
                                                decimal dPercVAT2;
                                                decimal dPercFEE;
                                                decimal dPercFEETopped;
                                                decimal dFixedFEE;
                                                int? iPaymentTypeId = null;
                                                int? iPaymentSubtypeId = null;
                                                if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                                                {
                                                    iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                                                    iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                                                }



                                                if ((ulAppVersion >= _VERSION_1_6) && (suscriptionType != PaymentSuscryptionType.pstPerTransaction))
                                                {
                                                    if (!customersRepository.GetFinantialParams(oUser, "", iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.BalanceRecharge,
                                                                                                out dPercVAT1, out dPercVAT2, out dPercFEE, out dPercFEETopped, out dFixedFEE))
                                                    {
                                                        FormAuthMemberShip.MembershipService.DeleteUser(oUser.USR_USERNAME);
                                                        customersRepository.DeleteUser(ref oUser);
                                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                        Logger_AddLogMessage(string.Format("ConfirmUserData::Error: Error getting finantial parameters. xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                        return xmlOut;
                                                    }
                                                }
                                                else
                                                {
                                                    dPercVAT1 = 0;
                                                    dPercVAT2 = 0;
                                                    dPercFEE = 0;
                                                    dPercFEETopped = 0;
                                                    dFixedFEE = 0;
                                                }

                                                int iPartialVAT1 = 0;
                                                int iPartialPercFEE = 0;
                                                int iPartialFixedFEE = 0;
                                                int iPartialPercFEEVAT = 0;
                                                int iPartialFixedFEEVAT = 0;

                                                int iTotalQuantity = iChargedQuantity.Value;

                                                if (suscriptionType != PaymentSuscryptionType.pstPerTransaction)
                                                {
                                                    iTotalQuantity = customersRepository.CalculateFEE(iChargedQuantity.Value, dPercVAT1, dPercVAT2, dPercFEE, dPercFEETopped, dFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE);
                                                }



                                                /*if (CCProvider == PaymentMeanCreditCardProviderType.pmccpIECISA)
                                                {
                                                    if (rechargeStatus == PaymentMeanRechargeStatus.Waiting_Commit)
                                                    {
                                                        strReference = IECISAPayments.UserReference();
                                                        DateTime dtNow = DateTime.Now;

                                                        if (!customersRepository.StartRecharge(ref oUser,
                                                                                                iOSID,
                                                                                                PaymentMeanCreditCardProviderType.pmccpIECISA,
                                                                                                PaymentMeanRechargeInfoType.Payment_With_Token,
                                                                                                dtNow,
                                                                                                iTotalQuantity,
                                                                                                dCurrencyToCharge,
                                                                                                strReference,
                                                                                                strCardReference))
                                                        {
                                                            FormAuthMemberShip.MembershipService.DeleteUser(oUser.USR_USERNAME);
                                                            customersRepository.DeleteUser(ref oUser);
                                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                            Logger_AddLogMessage(string.Format("ConfirmUserData::Error:Error Starting IECISA Recharge. xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                            return xmlOut;
                                                        }

                                                        IECISAPayments cardPayment = new IECISAPayments();

                                                        bool bOperationMustBeCancelled = false;
                                                        if (!cardPayment.AutomaticPayment(oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_IE_CF_MERCHANT_ID,
                                                                                        oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_IE_CF_CENTRE_ID,
                                                                                        oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_IE_CF_POS_ID,
                                                                                        oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_IE_SYNC_URL,
                                                                                        oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_IE_MAC_KEY,
                                                                                        oUser.USR_EMAIL,
                                                                                        iTotalQuantity,
                                                                                        infraestructureRepository.GetCurrencyIsoCode((int)dCurrencyToCharge),
                                                                                        strCardReference,
                                                                                        strReference,
                                                                                        dtNow,
                                                                                        out bOperationMustBeCancelled,
                                                                                        out strAuthCode,
                                                                                        out strAuthResult,
                                                                                        out strAuthResultDesc,
                                                                                        out strGatewayDate,
                                                                                        out strTransactionId))
                                                        {
                                                            customersRepository.FailedRecharge(ref oUser, strReference, strAuthResult,
                                                                                            strAuthResultDesc, strMaskedCardNumber,
                                                                                            bOperationMustBeCancelled ? PaymentMeanRechargeInfoStatus.WaitingSystemCancellation :
                                                                                                                        PaymentMeanRechargeInfoStatus.Failed);
                                                            FormAuthMemberShip.MembershipService.DeleteUser(oUser.USR_USERNAME);
                                                            customersRepository.DeleteUser(ref oUser);
                                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                            Logger_AddLogMessage(string.Format("ConfirmUserData::Error:Error in IECISA Recharge. xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                            return xmlOut;
                                                        }


                                                        rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                                    }
                                                }*/

                                                int iPercFEETopped = Convert.ToInt32(Math.Round(dPercFEETopped, MidpointRounding.AwayFromZero));
                                                int iFixedFEE = Convert.ToInt32(Math.Round(dFixedFEE, MidpointRounding.AwayFromZero));

                                                if (!customersRepository.RechargeUserBalance(ref oUser,
                                                    null,
                                                    Convert.ToInt32(iOSID),
                                                    bAddToBalance,
                                                    iChargedQuantity.Value,
                                                    iChargedQuantity.Value,
                                                    dPercVAT1, dPercVAT2, iPartialVAT1, dPercFEE, iPercFEETopped, iPartialPercFEE, iFixedFEE, iPartialFixedFEE, iTotalQuantity,
                                                    dCurrencyToCharge,
                                                    (PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE,
                                                    rechargeStatus,
                                                    PaymentMeanRechargeCreationType.pmrctUserCreationRecharge,
                                                    //0,
                                                    strReference,
                                                    strTransactionId,
                                                    strCFTransactionId,
                                                    strGatewayDate,
                                                    strAuthCode,
                                                    strAuthResult,
                                                    strAuthResultDesc,
                                                    strCardHash,
                                                    strCardReference,
                                                    strCardScheme,
                                                    strMaskedCardNumber,
                                                    "",
                                                    "",
                                                    dtExpDate,
                                                    null,
                                                    null,
                                                    null,
                                                    false,
                                                    dLatitude, dLongitude, sAppVersion, "", "", "", "", "", null, null, dSourceApp,
                                                    infraestructureRepository,
                                                    out dRechargeId))
                                                {
                                                    FormAuthMemberShip.MembershipService.DeleteUser(oUser.USR_USERNAME);
                                                    customersRepository.DeleteUser(ref oUser);
                                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                    Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                    return xmlOut;

                                                }


                                                /*if ((suscriptionType == PaymentSuscryptionType.pstPerTransaction) && (!bPerTransactionRefundMoney))
                                                {

                                                    decimal dOperationID;
                                                    if (!customersRepository.ChargeServiceOperation(ref oUser,
                                                        Convert.ToInt32(iOSID),
                                                        false,
                                                        ServiceChargeType.NewPaymentMean,
                                                        PaymentSuscryptionType.pstPerTransaction,
                                                        DateTime.UtcNow.AddMinutes(-oUser.USR_UTC_OFFSET),
                                                        DateTime.UtcNow,
                                                        iChargedQuantity.Value,
                                                        dCurrencyToCharge,
                                                        dCurrencyToCharge,
                                                        1.0,
                                                        0,
                                                        iChargedQuantity.Value,
                                                        dRechargeId,
                                                        out dOperationID))
                                                    {
                                                        FormAuthMemberShip.MembershipService.DeleteUser(oUser.USR_USERNAME);
                                                        customersRepository.DeleteUser(ref oUser);
                                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                        Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                        return xmlOut;

                                                    }
                                                }*/




                                                if (oUser.USR_SUSCRIPTION_TYPE.Value == (int)PaymentSuscryptionType.pstPrepay)
                                                {
                                                    CUSTOMER_PAYMENT_MEANS_RECHARGE oRecharge = null;
                                                    if (customersRepository.GetRechargeData(ref oUser, dRechargeId.Value, out oRecharge))
                                                    {
                                                        if ((PaymentSuscryptionType)oRecharge.CUSPMR_SUSCRIPTION_TYPE == PaymentSuscryptionType.pstPrepay)
                                                        {

                                                            int iQuantity = oRecharge.CUSPMR_AMOUNT;
                                                            dPercVAT1 = oRecharge.CUSPMR_PERC_VAT1 ?? 0;
                                                            dPercVAT2 = oRecharge.CUSPMR_PERC_VAT2 ?? 0;
                                                            dPercFEE = oRecharge.CUSPMR_PERC_FEE ?? 0;
                                                            iPercFEETopped = (int)(oRecharge.CUSPMR_PERC_FEE_TOPPED ?? 0);
                                                            iFixedFEE = (int)(oRecharge.CUSPMR_FIXED_FEE ?? 0);

                                                            iTotalQuantity = customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                                                            int iQFEE = Convert.ToInt32(Math.Round(iQuantity * dPercFEE, MidpointRounding.AwayFromZero));
                                                            if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                                            iQFEE += iFixedFEE;
                                                            int iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                                            int iQSubTotal = iQuantity + iQFEE;

                                                            int iLayout = 0;
                                                            if (iQFEE != 0 || iQVAT != 0)
                                                            {
                                                                OPERATOR oOperator = customersRepository.GetDefaultOperator();
                                                                if (oOperator != null) iLayout = oOperator.OPR_FEE_LAYOUT;
                                                            }


                                                            string sLayoutSubtotal = "";
                                                            string sLayoutTotal = "";

                                                            string sCurIsoCode = infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID));
                                                            string strSourceAppEmailPrefix = GetEmailSourceAppEmailPrefix(dSourceApp);

                                                            if (iLayout == 2)
                                                            {
                                                                sLayoutSubtotal = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "Email_LayoutSubtotal"),
                                                                                                string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQSubTotal) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)),
                                                                                                (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00#}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                                                (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00#}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                                                string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQVAT) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)));
                                                            }
                                                            else if (iLayout == 1)
                                                            {
                                                                sLayoutTotal = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "Email_LayoutTotal"),
                                                                                                string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQuantity) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)),
                                                                                                string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQFEE) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)),
                                                                                                (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00#}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                                                (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00#}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                                                string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQVAT) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)));
                                                            }

                                                            string strRechargeEmailSubject = ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "ConfirmNoAutomaticRecharge_EmailHeader");
                                                            /*
                                                                ID: {0}<br>
                                                                *  Fecha de recarga: {1:HH:mm:ss dd/MM/yyyy}<br>
                                                                *  Cantidad Recargada: {2} 
                                                                */
                                                            string strRechargeEmailBody = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "ConfirmRecharge_EmailBody"),
                                                                oRecharge.CUSPMR_ID,
                                                                oRecharge.CUSPMR_DATE,
                                                                string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID))) + "} {1}",
                                                                Convert.ToDouble(oRecharge.CUSPMR_TOTAL_AMOUNT_CHARGED) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID))),
                                                                                                infraestructureRepository.GetCurrencySymbolOrIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID))),
                                                                string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))) + "} {1}",
                                                                Convert.ToDouble(oUser.USR_BALANCE) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))),
                                                                                    infraestructureRepository.GetCurrencySymbolOrIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))),
                                                                ConfigurationManager.AppSettings["EmailSignatureURL"],
                                                                ConfigurationManager.AppSettings["EmailSignatureGraphic"],
                                                                sLayoutSubtotal, sLayoutTotal,
                                                                GetEmailFooter(ref oUser, dSourceApp));


                                                            SendEmail(ref oUser, strRechargeEmailSubject, strRechargeEmailBody, dSourceApp);

                                                        }
                                                    }

                                                }
                                            }
                                        }
                                    }

                                    SendSignupEmails(ref oUser, strCulture, bUserMustBeActivated, dSourceApp);
                                }
                            }

                            customersRepository.AssignPendingInvitationsToAccept(ref oUser);

                            oUser = null;



                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                            parametersOut["signup_guid"] = strSignUpGuid;
                            parametersOut["accountnotactive"] = bUserMustBeActivated ? 1 : 0;

                            if (bReturnPAN)
                            {

                                /*parametersOut["ekashu_reference"] = strReference;
                                parametersOut["ekashu_auth_code"] = strAuthCode;
                                parametersOut["ekashu_auth_result"] = strAuthResult;
                                parametersOut["ekashu_card_hash"] = strCardHash;
                                parametersOut["ekashu_card_reference"] = strCardReference;
                                parametersOut["ekashu_card_scheme"] = strCardScheme;
                                parametersOut["ekashu_date_time_local_fmt"] = strGatewayDate;*/
                                parametersOut["masked_card_number"] = strMaskedCardNumber;
                                /*parametersOut["ekashu_expires_end_month"] = strExpMonth;
                                parametersOut["ekashu_expires_end_year"] = strExpYear;*/
                            }

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("ConfirmUserData: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }



                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }

        [WebMethod]
        public string ConfirmUserDataJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ConfirmUserDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ConfirmUserData(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);

                //Logger_AddLogMessage(string.Format("ConfirmUserDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);
                xmlOut = null;

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ConfirmUserDataJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }

        // EJEMPLO:   
        //SignUpStep1: xmlIn=
        //<ipark_in>
        //  <ah>880BD2D19C25B8AE</ah>
        //  <ccode>198</ccode>
        //  <email>mperdia2@integraparking.com</email>
        //  <appvers>2.7.3</appvers>
        //  <OSID>3</OSID>
        //  <WIFIMAC>02:00:00:00:00:00</WIFIMAC>
        //  <utc_date>094904011018</utc_date>
        //  <date>114904011018</date>
        //  <vers>1.0</vers>
        //  <IMEI>46FCA66E-75F1-41A3-B9F3-3E8C4BF28E53</IMEI>
        //  <lang>1</lang>
        //  <gps>
        //    <lat>41.396032</lat>
        //    <long>2.149749</long>
        //  </gps>
        //</ipark_in>
        [WebMethod]
        public string SignUpStep1(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("SignUpStep1: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {


                    //cccode, lat, long,appvers opcionales
                    if ((parametersIn["email"] == null && parametersIn["ccodephone"] == null && parametersIn["phone"] == null) ||
                        (parametersIn["lang"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("SignUpStep1::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {



                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("SignUpStep1::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            string strCulture = "";
                            if (parametersIn["lang"] != null)
                            {
                                try
                                {
                                    int iLangIndex = Convert.ToInt32(parametersIn["lang"].ToString());
                                    if (iLangIndex <= UserDeviceLangs.Length)
                                    {
                                        strCulture = UserDeviceLangs[iLangIndex - 1];
                                    }
                                }
                                catch
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("SignUpStep1::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }


                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }


                            ulong? ulSOVersion = null;

                            if (parametersIn["cosvers"] != null)
                            {
                                try
                                {
                                    string strSOVersion = parametersIn["cosvers"].ToString();
                                    var allowedChars = "01234567890.,";
                                    strSOVersion = new string(strSOVersion.Where(c => allowedChars.Contains(c)).ToArray());
                                    ulSOVersion = AppUtilities.AppVersion(strSOVersion);


                                }
                                catch { }
                            }



                            int? iCountry = null;
                            if ((parametersIn["ccode"] != null) && (!string.IsNullOrEmpty(parametersIn["ccode"].ToString())) && iOSID == (int)MobileOS.Web)
                            {
                                try
                                {

                                    iCountry = Convert.ToInt32(parametersIn["ccode"].ToString());


                                    COUNTRy oCountry = infraestructureRepository.GetCountry(iCountry.Value);
                                    if (oCountry == null)
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Country_Code);
                                        Logger_AddLogMessage(string.Format("SignUpStep1::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }
                                catch
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Country_Code);
                                    Logger_AddLogMessage(string.Format("SignUpStep1::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }


                            string sAppVersion = "";
                            try
                            {
                                if (parametersIn["appvers"] != null)
                                    sAppVersion = parametersIn["appvers"].ToString();
                                else
                                    sAppVersion = "1.0";
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("SignUpStep1::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            if (!CheckVersionFormat(sAppVersion))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("SignUpStep1::Error: Invalid app version format: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            // Get all the external servers that exist. It is verified that the email does not exist in any of these servers.
                            List<COUNTRIES_REDIRECTION> oCountriesRedirectionsList = infraestructureRepository.GetCountriesRedirections();
                            if (oCountriesRedirectionsList != null && oCountriesRedirectionsList.Count > 0)
                            {
                                foreach (COUNTRIES_REDIRECTION cr in oCountriesRedirectionsList)
                                {
                                    ExternalIntegraMobileWS.integraMobileWS oExternalIntegraMobileWS = StarExternalIntegraMobileWS(cr);
                                    if (oExternalIntegraMobileWS != null)
                                    {
                                        xmlOut = oExternalIntegraMobileWS.VerifySignUpExists(xmlIn);
                                        if (!xmlOut.Contains(TAG_RESULT_OK_VALUE_1))
                                        {
                                            string sValueResult = FindNodeXMLValue(xmlOut, TAG_RESULT);
                                            ResultType errorResultType = (ResultType)Convert.ToInt32(sValueResult);
                                            xmlOut = GenerateXMLErrorResult(errorResultType);
                                            Logger_AddLogMessage(string.Format("VerifySignUpExists::Error: CountriesRedirectionsURL={0}, xmlIn={1}, xmlOut={2}", cr.COURE_COUNTRY_REDIRECTION_WS_URL, PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                    }
                                }
                            }

                            string sEmail = null;
                            if (parametersIn["email"] != null)
                                sEmail = parametersIn["email"].ToString();
                            EmailChecker.EmailCheckResult oCheckResult = EmailChecker.EmailCheckResult.Invalid;

                            decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();
                            decimal dDefaultSourceApp = dSourceApp;
                            string strAppCode = "";
                            if (parametersIn["appcode"] != null)
                            {
                                try
                                {
                                    strAppCode = parametersIn["appcode"].ToString();
                                    dSourceApp = geograficAndTariffsRepository.GetSourceApp(strAppCode);
                                }
                                catch { }
                            }

                            string strForceToCheckWithEmail = infraestructureRepository.GetParameterValue("SignupStep1_ForceToCheckByEmail");
                            bool bForceToCheckWithEmail = false;
                            try
                            {
                                bForceToCheckWithEmail = (Convert.ToInt32(strForceToCheckWithEmail) != 0);
                            }
                            catch { }


                            if (!string.IsNullOrEmpty(sEmail))
                            {
                                if (customersRepository.ExistEmail(sEmail))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Email_Already_Exist);
                                    Logger_AddLogMessage(string.Format("SignUpStep1::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                             
                                oCheckResult = EmailChecker.Check(sEmail);
                                
                                switch (oCheckResult)
                                {
                                    case EmailChecker.EmailCheckResult.Valid:
                                        {
                                            

                                            if ((bForceToCheckWithEmail) && (dSourceApp==dDefaultSourceApp))
                                            {
                                                oCheckResult = EmailChecker.EmailCheckResult.Unknown;
                                                Logger_AddLogMessage(string.Format("SignUpStep1::Error: Email {0} verification is valid Changed to unknown (bForceToCheckWithEmail=true). APP {1}", sEmail, strAppCode), LogLevels.logINFO);
                                            }
                                            else
                                            {

                                                Logger_AddLogMessage(string.Format("SignUpStep1::Error: Email {0} verification is valid. APP {1}", sEmail, strAppCode), LogLevels.logINFO);
                                            }
                                        }
                                        break;
                                    case EmailChecker.EmailCheckResult.Invalid:
                                        {
                                            /*xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Email_Address);
                                            Logger_AddLogMessage(string.Format("SignUpStep1::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;*/

                                            if (dSourceApp != dDefaultSourceApp)
                                            {
                                                Logger_AddLogMessage(string.Format("SignUpStep1::Error: Email {0} verification is invalid Changed to valid. APP {1}", sEmail, strAppCode), LogLevels.logINFO);
                                                oCheckResult = EmailChecker.EmailCheckResult.Valid;
                                            }
                                            else if (bForceToCheckWithEmail)
                                            {
                                                Logger_AddLogMessage(string.Format("SignUpStep1::Error: Email {0} verification is invalid Changed to unknown. APP {1}", sEmail, strAppCode), LogLevels.logINFO);
                                                oCheckResult = EmailChecker.EmailCheckResult.Unknown;
                                            }
                                        }
                                        break;
                                    case EmailChecker.EmailCheckResult.Unknown:
                                        {
                                            if (dSourceApp != dDefaultSourceApp)
                                            {
                                                Logger_AddLogMessage(string.Format("SignUpStep1::Error: Email {0} verification is unknown Changed to valid. APP {1}", sEmail, strAppCode), LogLevels.logINFO);
                                                oCheckResult = EmailChecker.EmailCheckResult.Valid;
                                            }
                                            else
                                            {
                                                Logger_AddLogMessage(string.Format("SignUpStep1::Error: Email {0} verification is unknown. APP {1}", sEmail, strAppCode), LogLevels.logINFO);

                                            }
                                        }
                                        break;

                                }

                            }

                           
                           
                            if (oCheckResult == EmailChecker.EmailCheckResult.Unknown)
                            {
                                if ((iOSID == (int)MobileOS.iOS)&& 
                                    ((!ulSOVersion.HasValue)  ||  
                                     ((ulSOVersion.HasValue) && (ulSOVersion.Value < _IOS_VERSION_14_6))))
                                {
                                    oCheckResult = EmailChecker.EmailCheckResult.Valid;
                                    Logger_AddLogMessage(string.Format("SignUpStep1::Error: Email {0} verification is unknown Changed to valid (ios<14.6). APP {1}", sEmail, strAppCode), LogLevels.logINFO);
                                }
                            }



                            if ((oCheckResult == EmailChecker.EmailCheckResult.Unknown) && (!bForceToCheckWithEmail))
                            {
                                
                                oCheckResult = EmailChecker.EmailCheckResult.Valid;
                                Logger_AddLogMessage(string.Format("SignUpStep1::Error: Email {0} verification is unknown Changed to valid. We don't want to verify emails. APP {1}", sEmail, strAppCode), LogLevels.logINFO);
                               
                            }



                            int? iPhoneCountryId = null;
                            string sPhonePrefix = null;
                            if ((parametersIn["ccodephone"] != null) && (!string.IsNullOrEmpty(parametersIn["ccodephone"].ToString())))
                            {
                                try
                                {

                                    iPhoneCountryId = Convert.ToInt32(parametersIn["ccodephone"].ToString());

                                    COUNTRy oCountry = infraestructureRepository.GetCountry(iPhoneCountryId.Value);
                                    if (oCountry != null)
                                    {
                                        sPhonePrefix = (oCountry.COU_TEL_PREFIX ?? "").Trim();
                                    }
                                    else
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Country_Code);
                                        Logger_AddLogMessage(string.Format("SignUpStep1::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }
                                catch
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Country_Code);
                                    Logger_AddLogMessage(string.Format("SignUpStep1::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }

                            string sPhone = null;
                            string sPhoneComplete = "";
                            if (parametersIn["phone"] != null)
                            {
                                sPhone = parametersIn["phone"].ToString();
                                if (string.IsNullOrEmpty(sPhone))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Cell_Number);
                                    Logger_AddLogMessage(string.Format("SignUpStep1::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }

                            if (iPhoneCountryId.HasValue && !string.IsNullOrEmpty(sPhone))
                            {
                                sPhoneComplete = string.Format("{0}_{1}", sPhonePrefix, sPhone);
                                if (customersRepository.ExistMainTelephone(iPhoneCountryId.Value, sPhone))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Mobile_Phone_Already_Exist);
                                    Logger_AddLogMessage(string.Format("SignUpStep1::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }

                            if (string.IsNullOrEmpty(sEmail) && !iPhoneCountryId.HasValue && string.IsNullOrEmpty(sPhone))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                Logger_AddLogMessage(string.Format("SignUpStep1::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            double? dLatitude = null;
                            double? dLongitude = null;

                            NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                            numberFormatProvider.NumberDecimalSeparator = ".";

                            string sValue = "";

                            try
                            {
                                sValue = parametersIn["gps_lat"].ToString();
                                if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                                double dTryLatitude = Convert.ToDouble(parametersIn["gps_lat"].ToString(), numberFormatProvider);
                                dLatitude = dTryLatitude;
                            }
                            catch
                            {
                                dLatitude = null;
                            }

                            try
                            {
                                sValue = parametersIn["gps_long"].ToString();
                                if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                                double dTryLongitude = Convert.ToDouble(parametersIn["gps_long"].ToString(), numberFormatProvider);
                                dLongitude = dTryLongitude;
                            }
                            catch
                            {
                                dLongitude = null;
                            }


                            if (!iCountry.HasValue && dLatitude.HasValue && dLongitude.HasValue && iOSID != (int)MobileOS.Web)
                            {
                                string Address_country_code;
                                string Address_country_name;
                                string Address_administrative_area_level_1;
                                string Address_administrative_area_level_2;
                                string Address_administrative_area_level_3;
                                string Address_colloquial_area;
                                string Address_locality;
                                string Address_sublocality;
                                string Address_neighborhood;
                                ThirdPartyGeo oThirtPartyGeo = new ThirdPartyGeo();

                                if (oThirtPartyGeo.ReverseGeoLoc(dLatitude.Value, dLongitude.Value, ConfigurationManager.AppSettings["GoogleMapsAPIKey"].ToString(),
                                    out Address_country_code,
                                    out Address_country_name,
                                    out Address_administrative_area_level_1,
                                    out Address_administrative_area_level_2,
                                    out Address_administrative_area_level_3,
                                    out Address_colloquial_area,
                                    out Address_locality,
                                    out Address_sublocality,
                                    out Address_neighborhood))
                                {

                                    if (!string.IsNullOrEmpty(Address_country_code))
                                    {
                                        iCountry = infraestructureRepository.GetCountryIdFromCountryCode(Address_country_code);
                                    }

                                }

                            }



                            ulong ulAppVersion = AppUtilities.AppVersion(sAppVersion);

                            string strSignUpGuid = GenerateNewGuid();


                            Logger_AddLogMessage(string.Format("SignUpStep1::Country: {0}", iCountry), LogLevels.logERROR);
                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                            parametersOut["signup_guid"] = strSignUpGuid;
                            parametersOut["ccode"] = iCountry.HasValue ? iCountry.ToString() : "";
                            parametersOut["utcdate"] = DateTime.UtcNow.ToString("HHmmssddMMyy");



                            Dictionary<string, object> oDataDict = new Dictionary<string, object>();

                            if (string.IsNullOrEmpty(sEmail))
                            {
                                sEmail = string.Format((ConfigurationManager.AppSettings["EmailFromPhoneNumberFormat"] ?? "{0}"), sPhoneComplete);
                            }
                            oDataDict["email"] = sEmail;
                            if (!string.IsNullOrEmpty(sPhoneComplete))
                            {
                                oDataDict["ccodephone"] = iPhoneCountryId.Value;
                                oDataDict["phone"] = sPhone;
                            }
                            oDataDict["signup_guid"] = strSignUpGuid;
                            oDataDict["utcdate"] = DateTime.UtcNow.ToString("HHmmssddMMyy");
                            oDataDict["lang"] = parametersIn["lang"].ToString();
                            oDataDict["appid"] = dSourceApp;


                            var json = JsonConvert.SerializeObject(oDataDict);

                            string strBin = CalculateCryptResult(json, ConfigurationManager.AppSettings["CryptKey"]);


                            if (oCheckResult == EmailChecker.EmailCheckResult.Unknown)
                            {
                                SOURCE_APPS_CONFIGURATION oConf = infraestructureRepository.GetSourceAppsConfiguration(dSourceApp);
                                parametersOut["r"] = Convert.ToInt32(ResultType.Result_Validate_Email).ToString();

                                CultureInfo ci = new CultureInfo(strCulture);
                                Thread.CurrentThread.CurrentUICulture = ci;
                                Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);
                                integraMobile.WS.Properties.Resource.Culture = ci;


                                string strSourceAppEmailPrefix = GetEmailSourceAppEmailPrefix(dSourceApp);

                                string strSignupEmailSubject = ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "SignupStep1_Email_Subject");

                                string strSignupEmailBody = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "SignupStep1_Email_Body"),
                                     oConf.SOAPC_SIGNUP_URL, iCountry.HasValue ? iCountry : -1, parametersIn["lang"].ToString(), strBin);


                                SendEmail(parametersIn["email"].ToString(), strSignupEmailSubject, strSignupEmailBody, dSourceApp);
                            }
                            else
                            {
                                parametersOut["bin"] = strBin;
                            }

                            //Creation of structure for questions by country
                            String strXmlVersionLiterals = String.Empty;
                            IEnumerable<stVersionsLiterals> ostVersionsLiteralsList = customersRepository.GetQuestions(strCulture, dSourceApp);

                            if (!GenerateXMLQuestions(ostVersionsLiteralsList, ref strXmlVersionLiterals))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("SignUpStep1::GenerateXMLQuestions::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            parametersOut["countries"] = strXmlVersionLiterals;

                            xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "countries" });


                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("SignUpStep1::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("SignUpStep1: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("SignUpStep1::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }
            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("SignUpStep1::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }

        [WebMethod]
        public string SignUpStep1JSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("SignUpStep1JSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = SignUpStep1(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);

                Logger_AddLogMessage(string.Format("SignUpStep1JSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);
                xmlOut = null;

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("SignUpStep1JSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }




        [WebMethod]
        public string SignUpStep2(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";
                string sURLCountriesRedirections = string.Empty;
                COUNTRIES_REDIRECTION oCountriesRedirections = null;

                Logger_AddLogMessage(string.Format("SignUpStep2: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["bin"] == null) ||
                        (parametersIn["pass"] == null) ||
                        (parametersIn["ccode"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("SignUpStep2::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("SignUpStep2::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            int? iCountry = null;

                            try
                            {
                                iCountry = Convert.ToInt32(parametersIn["ccode"].ToString());
                                COUNTRy oCountry = infraestructureRepository.GetCountry(iCountry.Value);

                                if (oCountry == null)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Country_Code);
                                    Logger_AddLogMessage(string.Format("SignUpStep2::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                                else
                                {
                                    oCountriesRedirections = FindCountriesRedirections(-1, Convert.ToInt32(oCountry.COU_ID));
                                    string sSignUpGuid = string.Empty;
                                    if (oCountriesRedirections != null)
                                    {
                                        sURLCountriesRedirections = oCountriesRedirections.COURE_COUNTRY_REDIRECTION_WS_URL;
                                        xmlOut = CallToServerSignUpStep2(xmlIn, xmlOut, oCountriesRedirections);
                                        if (xmlOut.Contains("<r>1</r>"))
                                        {
                                            XElement doc = XElement.Parse(xmlOut);
                                            sSignUpGuid = doc.Descendants("signup_guid").First().Value;
                                        }
                                        if (!string.IsNullOrEmpty(sSignUpGuid))
                                        {
                                            if (!infraestructureRepository.SetSignUpGuidCountriesRedirections(sSignUpGuid, oCountriesRedirections.COURE_COU_ID))
                                            {
                                                Logger_AddLogMessage(string.Format("SignUpStep2::SetSignUpGuidCountriesRedirections::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        xmlOut = SignUpStep2Interno(xmlIn, parametersIn, xmlOut, iCountry, parametersOut);
                                    }
                                }
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Country_Code);
                                Logger_AddLogMessage(string.Format("SignUpStep2::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("SignUpStep2::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("SignUpStep2: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }
                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("SignUpStep2::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("SignUpStep2::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }


        [WebMethod]
        public string SignUpStep2JSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("SignUpStep2JSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = SignUpStep2(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);

                Logger_AddLogMessage(string.Format("SignUpStep2JSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);
                xmlOut = null;

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("SignUpStep2JSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);
            }

            return jsonOut;
        }

        [WebMethod]
        public string SignUp(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("SignUp: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    //cccode, lat, long,appvers opcionales
                    if ((parametersIn["email"] == null && parametersIn["ccodephone"] == null && parametersIn["phone"] == null) ||
                        (parametersIn["lang"] == null) ||
                        (parametersIn["pass"] == null) ||
                        (parametersIn["ccode"] == null) ||
                        (parametersIn["st"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("SignUp::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("SignUp::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            string strCulture = "";
                            if (parametersIn["lang"] != null)
                            {
                                try
                                {
                                    int iLangIndex = Convert.ToInt32(parametersIn["lang"].ToString());
                                    if (iLangIndex <= UserDeviceLangs.Length)
                                    {
                                        strCulture = UserDeviceLangs[iLangIndex - 1];
                                    }
                                }
                                catch
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("SignUp::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }


                            }

                            int? iCountry = null;
                            try
                            {

                                iCountry = Convert.ToInt32(parametersIn["ccode"].ToString());


                                COUNTRy oCountry = infraestructureRepository.GetCountry(iCountry.Value);
                                if (oCountry == null)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Country_Code);
                                    Logger_AddLogMessage(string.Format("SignUp::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Country_Code);
                                Logger_AddLogMessage(string.Format("SignUp::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;
                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }


                            string sAppVersion = "";
                            try
                            {
                                if (parametersIn["appvers"] != null)
                                    sAppVersion = parametersIn["appvers"].ToString();
                                else
                                    sAppVersion = "1.0";
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("SignUpStep1::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            if (!CheckVersionFormat(sAppVersion))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("SignUpStep1::Error: Invalid app version format: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            string sEmail = null;
                            if (parametersIn["email"] != null)
                                sEmail = parametersIn["email"].ToString().ToLower().Trim();
                            EmailChecker.EmailCheckResult oCheckResult = EmailChecker.EmailCheckResult.Invalid;

                            if (!string.IsNullOrEmpty(sEmail))
                            {
                                if (customersRepository.ExistEmail(sEmail))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Email_Already_Exist);
                                    Logger_AddLogMessage(string.Format("SignUp::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                oCheckResult = EmailChecker.Check(sEmail);

                                switch (oCheckResult)
                                {
                                    case EmailChecker.EmailCheckResult.Valid:
                                        break;
                                    case EmailChecker.EmailCheckResult.Invalid:
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Email_Address);
                                            Logger_AddLogMessage(string.Format("SignUp::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                    case EmailChecker.EmailCheckResult.Unknown:
                                        break;

                                }
                            }

                            decimal? dPhoneCountryId = null;
                            string sPhonePrefix = null;
                            if ((parametersIn["ccodephone"] != null) && (!string.IsNullOrEmpty(parametersIn["ccodephone"].ToString())))
                            {
                                try
                                {
                                    dPhoneCountryId = Convert.ToDecimal(parametersIn["ccodephone"].ToString());

                                    COUNTRy oCountry = infraestructureRepository.GetCountry(Convert.ToInt32(dPhoneCountryId.Value));
                                    if (oCountry != null)
                                    {
                                        sPhonePrefix = (oCountry.COU_TEL_PREFIX ?? "").Trim();
                                    }
                                    else
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Country_Code);
                                        Logger_AddLogMessage(string.Format("SignUp::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }
                                catch
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Country_Code);
                                    Logger_AddLogMessage(string.Format("SignUp::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }

                            string sPhone = null;
                            string sPhoneComplete = "";
                            if (parametersIn["phone"] != null)
                            {
                                sPhone = parametersIn["phone"].ToString();
                                if (string.IsNullOrEmpty(sPhone))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Cell_Number);
                                    Logger_AddLogMessage(string.Format("SignUp::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }

                            if (dPhoneCountryId.HasValue && !string.IsNullOrEmpty(sPhone))
                            {
                                sPhoneComplete = string.Format("{0}_{1}", sPhonePrefix, sPhone);
                                if (customersRepository.ExistMainTelephone(Convert.ToInt32(dPhoneCountryId.Value), sPhone))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Mobile_Phone_Already_Exist);
                                    Logger_AddLogMessage(string.Format("SignUp::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }

                            if (string.IsNullOrEmpty(sEmail) && !dPhoneCountryId.HasValue && string.IsNullOrEmpty(sPhone))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                Logger_AddLogMessage(string.Format("SignUp::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iSuscryptionType = 0;
                            try
                            {
                                iSuscryptionType = Convert.ToInt32(parametersIn["st"].ToString());
                                if (iSuscryptionType != (int)PaymentSuscryptionType.pstPrepay &&
                                    iSuscryptionType != (int)PaymentSuscryptionType.pstPerTransaction)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("SignUp::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("SignUp::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            double? dLatitude = null;
                            double? dLongitude = null;

                            NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                            numberFormatProvider.NumberDecimalSeparator = ".";

                            string sValue = "";

                            try
                            {
                                sValue = parametersIn["gps_lat"].ToString();
                                if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                                double dTryLatitude = Convert.ToDouble(parametersIn["gps_lat"].ToString(), numberFormatProvider);
                                dLatitude = dTryLatitude;
                            }
                            catch
                            {
                                dLatitude = null;
                            }

                            try
                            {
                                sValue = parametersIn["gps_long"].ToString();
                                if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                                double dTryLongitude = Convert.ToDouble(parametersIn["gps_long"].ToString(), numberFormatProvider);
                                dLongitude = dTryLongitude;
                            }
                            catch
                            {
                                dLongitude = null;
                            }

                            string sBackOfficeUsr = null;
                            try
                            {
                                sBackOfficeUsr = parametersIn["backofficeUsr"].ToString();
                            }
                            catch (Exception) { }


                            if (!iCountry.HasValue && dLatitude.HasValue && dLongitude.HasValue)
                            {
                                string Address_country_code;
                                string Address_country_name;
                                string Address_administrative_area_level_1;
                                string Address_administrative_area_level_2;
                                string Address_administrative_area_level_3;
                                string Address_colloquial_area;
                                string Address_locality;
                                string Address_sublocality;
                                string Address_neighborhood;
                                ThirdPartyGeo oThirtPartyGeo = new ThirdPartyGeo();

                                if (oThirtPartyGeo.ReverseGeoLoc(dLatitude.Value, dLongitude.Value, ConfigurationManager.AppSettings["GoogleMapsAPIKey"].ToString(),
                                    out Address_country_code,
                                    out Address_country_name,
                                    out Address_administrative_area_level_1,
                                    out Address_administrative_area_level_2,
                                    out Address_administrative_area_level_3,
                                    out Address_colloquial_area,
                                    out Address_locality,
                                    out Address_sublocality,
                                    out Address_neighborhood))
                                {

                                    if (!string.IsNullOrEmpty(Address_country_code))
                                    {
                                        iCountry = infraestructureRepository.GetCountryIdFromCountryCode(Address_country_code);
                                    }

                                }

                            }



                            ulong ulAppVersion = AppUtilities.AppVersion(sAppVersion);


                            Logger_AddLogMessage(string.Format("SignUp::Country: {0}", iCountry), LogLevels.logERROR);

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                            parametersOut["ccode"] = iCountry.HasValue ? iCountry.ToString() : "";
                            parametersOut["utcdate"] = DateTime.UtcNow.ToString("HHmmssddMMyy");



                            Dictionary<string, object> oDataDict = new Dictionary<string, object>();

                            if (string.IsNullOrEmpty(sEmail))
                            {
                                sEmail = string.Format((ConfigurationManager.AppSettings["EmailFromPhoneNumberFormat"] ?? "{0}"), sPhoneComplete);
                            }



                            string strUserMustBeActivated = infraestructureRepository.GetParameterValue("UserMustBeActivated");
                            bool bUserMustBeActivated = false;
                            int iNumMaxMinutesForActivation = Int32.MaxValue;

                            if (!string.IsNullOrEmpty(strUserMustBeActivated))
                            {
                                bUserMustBeActivated = (strUserMustBeActivated == "1");
                            }

                            if (bUserMustBeActivated)
                            {
                                bool bDeleteMembership = false;
                                string strNumMaxMinutesForActivation = infraestructureRepository.GetParameterValue("NonActivatedUserUnBlockingTime");
                                try
                                {
                                    iNumMaxMinutesForActivation = Convert.ToInt32(strNumMaxMinutesForActivation);
                                }
                                catch
                                { }

                                customersRepository.DeleteNonActivatedUser(sEmail, iNumMaxMinutesForActivation, out bDeleteMembership);


                                if (bDeleteMembership)
                                {
                                    FormAuthMemberShip.MembershipService.DeleteUser(sEmail);
                                }
                            }


                            USER_IMPORT_CONFIGURATION oImportConfig = null;
                            decimal dImportId = -1;
                            customersRepository.GetImportUserConfiguration(ref sEmail, out dImportId, out oImportConfig);

                            decimal? dCouId = null;
                            decimal? dCurId = null;
                            int iBalance = 0;
                            bool bImportUser = false;

                            if (oImportConfig != null)
                            {
                                ThirdPartyUser oThirtPartyUser = new ThirdPartyUser();
                                ResultType rtTemp = ResultType.Result_OK;


                                switch ((UserImportGetBalanceSignature)oImportConfig.UICON_GET_BALANCE_WS_SIGNATURE_TYPE.Value)
                                {
                                    case UserImportGetBalanceSignature.AparcApp:
                                        {

                                            rtTemp = oThirtPartyUser.AparcAppGetBalance(oImportConfig.UICON_GET_BALANCE_WS_URL, sEmail, out iBalance, out dCurId, out dCouId);

                                        }
                                        break;
                                    default:
                                        break;

                                }

                                if (rtTemp == ResultType.Result_OK)
                                {
                                    if (iBalance < 0)
                                    {
                                        Logger_AddLogMessage(string.Format("SignUp Balance Imported={0} ; Set to 0 ", iBalance), LogLevels.logINFO);
                                        iBalance = 0;
                                    }


                                    customersRepository.SetBalanceToImportUser(dImportId, iBalance, dCurId.Value, dCouId.Value);
                                    iCountry = (int)dCouId.Value;
                                    bImportUser = true;
                                }

                            }

                            string sSuscriptionType = "";
                            RefundBalanceType eRefundBalType = RefundBalanceType.rbtAmount;

                            infraestructureRepository.GetCountryPossibleSuscriptionTypes(iCountry.Value, out sSuscriptionType, out eRefundBalType);
                            if (!string.IsNullOrEmpty(sSuscriptionType))
                            {
                                if (iSuscryptionType.ToString() != sSuscriptionType)
                                {
                                    iSuscryptionType = Convert.ToInt32(sSuscriptionType);
                                }
                            }


                            string strSignUpGuid = GenerateNewGuid();


                            decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();
                            if (parametersIn["appcode"] != null)
                            {
                                try
                                {
                                    string strAppCode = parametersIn["appcode"].ToString();
                                    dSourceApp = geograficAndTariffsRepository.GetSourceApp(strAppCode);
                                }
                                catch { }
                            }

                            USER oUser = new USER
                            {

                                CUSTOMER = new CUSTOMER
                                {
                                    CUS_TYPE = (int)CustomerType.Individual,
                                    CUS_COU_ID = iCountry.Value,
                                    CUS_DOC_ID = "",
                                    CUS_DOC_ID_TYPE = 0,//Undefined for now
                                    CUS_NAME = "",
                                    CUS_FIRST_NAME = "",
                                    CUS_SURNAME1 = "",
                                    CUS_SURNAME2 = "",
                                    CUS_STREET = "",
                                    CUS_STREE_NUMBER = 0,
                                    CUS_LEVEL_NUM = null,
                                    CUS_DOOR = "",
                                    CUS_LETTER = "",
                                    CUS_STAIR = "",
                                    CUS_CITY = "",
                                    CUS_STATE = "",
                                    CUS_ZIPCODE = "",
                                    CUS_ENABLED = 1,
                                    CUS_INSERT_UTC_DATE = DateTime.UtcNow
                                },

                                USR_COU_ID = iCountry.Value,
                                USR_EMAIL = sEmail,
                                USR_MAIN_TEL_COUNTRY = dPhoneCountryId,
                                USR_MAIN_TEL = sPhone,
                                USR_SECUND_TEL_COUNTRY = null,
                                USR_SECUND_TEL = "",
                                USR_USERNAME = sEmail,
                                USR_BALANCE = iBalance,
                                USR_CUR_ID = (ulAppVersion < _VERSION_2_0) ? infraestructureRepository.GetCountryCurrency(MEXICO_COUNTRY_ID) : infraestructureRepository.GetCountryCurrency(iCountry.Value),
                                USR_CULTURE_LANG = strCulture,
                                USR_ENABLED = 1,
                                USR_INSERT_UTC_DATE = DateTime.UtcNow,
                                USR_SUSCRIPTION_TYPE = iSuscryptionType,
                                USR_REFUND_BALANCE_TYPE = (int)eRefundBalType,
                                USR_UTC_OFFSET = 0,
                                USR_PAYMETH = (int)PaymentMeanTypeStatus.pmsWithoutPaymentMean,
                                USR_SIGNUP_OS = iOSID,
                                USR_SIGNUP_GUID = strSignUpGuid,
                                USR_ACTIVATED = bUserMustBeActivated ? 0 : 1,
                                USR_BACKOFFICE_USR = sBackOfficeUsr,
                                USR_SIGNUP_SOAPP_ID = dSourceApp,
                                USR_LAST_SOAPP_ID = dSourceApp,
                                USR_IS_ANONYMOUS = 0,
                            };



                            string password = parametersIn["pass"].ToString();
                            FormAuthMemberShip.MembershipService.DeleteUser(oUser.USR_USERNAME);

                            MembershipCreateStatus createStatus = FormAuthMemberShip.MembershipService.CreateUser(oUser.USR_USERNAME, password, oUser.USR_EMAIL);
                            if (createStatus != MembershipCreateStatus.Success)
                            {
                                FormAuthMemberShip.MembershipService.DeleteUser(oUser.USR_USERNAME);
                                createStatus = FormAuthMemberShip.MembershipService.CreateUser(oUser.USR_USERNAME, password, oUser.USR_EMAIL);
                            }

                            if (createStatus != MembershipCreateStatus.Success)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("SignUp::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            else
                            {
                                if (!customersRepository.AddUser(ref oUser, null))
                                {
                                    FormAuthMemberShip.MembershipService.DeleteUser(oUser.USR_USERNAME);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("SignUp::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                            }


                            SendSignupEmails(ref oUser, strCulture, bUserMustBeActivated, dSourceApp);
                            customersRepository.AssignPendingInvitationsToAccept(ref oUser);
                            oUser = null;

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                            parametersOut["accountnotactive"] = bUserMustBeActivated ? 1 : 0;
                            parametersOut["email"] = sEmail;
                            parametersOut["username"] = sEmail;
                            parametersOut["signup_guid"] = strSignUpGuid;

                            //xmlOut = GenerateXMLOuput(parametersOut);


                            if (!GetSubPayOptions(iCountry.Value, ulAppVersion, strCulture, dSourceApp, ref parametersOut))
                            {
                                Logger_AddLogMessage(string.Format("GetSubPayOptions::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }


                            if ((oImportConfig != null) && (bImportUser))
                            {
                                customersRepository.SetUserImportStatus(dImportId, UserImportStatus.Imported);
                            }


                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("SignUp::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("SignUp: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("SignUp::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("SignUp::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }

        [WebMethod]
        public string SignUpJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("SignUpStep2JSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = SignUp(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);

                //Logger_AddLogMessage(string.Format("SignUpStep2JSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);
                xmlOut = null;

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("SignUpJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);
            }

            return jsonOut;
        }

        [WebMethod]
        public string VerifySignUpExists(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("VerifySignUpExists: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    //cccode, lat, long,appvers opcionales
                    if ((parametersIn["email"] == null && parametersIn["ccodephone"] == null && parametersIn["phone"] == null) ||
                        (parametersIn["lang"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("VerifySignUpExists::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);
                        string sEmail = null;
                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("VerifySignUpExists::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            if (parametersIn["email"] != null)
                                sEmail = parametersIn["email"].ToString();
                            EmailChecker.EmailCheckResult oCheckResult = EmailChecker.EmailCheckResult.Invalid;

                            if (!string.IsNullOrEmpty(sEmail))
                            {
                                if (customersRepository.ExistEmail(sEmail))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Email_Already_Exist);
                                    Logger_AddLogMessage(string.Format("VerifySignUpExists::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }


                               
                                decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();
                                decimal dDefaultSourceApp = dSourceApp;
                                string strAppCode = "";
                                if (parametersIn["appcode"] != null)
                                {
                                    try
                                    {
                                        strAppCode = parametersIn["appcode"].ToString();
                                        dSourceApp = geograficAndTariffsRepository.GetSourceApp(strAppCode);
                                    }
                                    catch { }
                                }



                                int iOSID = (int)MobileOS.Web;

                                if (parametersIn["OSID"] != null)
                                {
                                    try
                                    {
                                        iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                    }
                                    catch { }
                                }


                                ulong? ulSOVersion = null;

                                if (parametersIn["cosvers"] != null)
                                {
                                    try
                                    {
                                        string strSOVersion = parametersIn["cosvers"].ToString();
                                        var allowedChars = "01234567890.,";
                                        strSOVersion = new string(strSOVersion.Where(c => allowedChars.Contains(c)).ToArray());
                                        ulSOVersion = AppUtilities.AppVersion(strSOVersion);


                                    }
                                    catch { }
                                }

                                oCheckResult = EmailChecker.Check(sEmail);

                                switch (oCheckResult)
                                {
                                    /*case EmailChecker.EmailCheckResult.Valid:
                                        {
                                            string strForceToCheckWithEmail = infraestructureRepository.GetParameterValue("SignupStep1_ForceToCheckByEmail");
                                            bool bForceToCheckWithEmail = false;
                                            try
                                            {
                                                bForceToCheckWithEmail = (Convert.ToInt32(strForceToCheckWithEmail) != 0);
                                            }
                                            catch { }


                                            if (bForceToCheckWithEmail)
                                            {
                                                oCheckResult = EmailChecker.EmailCheckResult.Unknown;
                                            }
                                        }
                                        break;
                                    case EmailChecker.EmailCheckResult.Invalid:
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Email_Address);
                                            Logger_AddLogMessage(string.Format("VerifySignUpExists::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                    case EmailChecker.EmailCheckResult.Unknown:
                                        break;*/


                                    case EmailChecker.EmailCheckResult.Valid:
                                        {
                                            string strForceToCheckWithEmail = infraestructureRepository.GetParameterValue("SignupStep1_ForceToCheckByEmail");
                                            bool bForceToCheckWithEmail = false;
                                            try
                                            {
                                                bForceToCheckWithEmail = (Convert.ToInt32(strForceToCheckWithEmail) != 0);
                                            }
                                            catch { }


                                            if ((bForceToCheckWithEmail) && (dSourceApp==dDefaultSourceApp))
                                            {
                                                oCheckResult = EmailChecker.EmailCheckResult.Unknown;
                                                Logger_AddLogMessage(string.Format("VerifySignUpExists::Error: Email {0} verification is valid Changed to unknown (bForceToCheckWithEmail=true). APP {1}", sEmail, strAppCode), LogLevels.logINFO);
                                            }
                                            else
                                            {

                                                Logger_AddLogMessage(string.Format("VerifySignUpExists::Error: Email {0} verification is valid. APP {1}", sEmail, strAppCode), LogLevels.logINFO);
                                            }
                                        }
                                        break;
                                    case EmailChecker.EmailCheckResult.Invalid:
                                        {
                                            /*xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Email_Address);
                                            Logger_AddLogMessage(string.Format("SignUpStep1::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;*/

                                            if (dSourceApp != dDefaultSourceApp)
                                            {
                                                Logger_AddLogMessage(string.Format("VerifySignUpExists::Error: Email {0} verification is invalid Changed to valid. APP {1}", sEmail, strAppCode), LogLevels.logINFO);
                                                oCheckResult = EmailChecker.EmailCheckResult.Valid;
                                            }
                                            else
                                            {
                                                Logger_AddLogMessage(string.Format("VerifySignUpExists::Error: Email {0} verification is invalid Changed to unknown. APP {1}", sEmail, strAppCode), LogLevels.logINFO);
                                                oCheckResult = EmailChecker.EmailCheckResult.Unknown;
                                            }
                                        }
                                        break;
                                    case EmailChecker.EmailCheckResult.Unknown:
                                        {
                                            if (dSourceApp != dDefaultSourceApp)
                                            {
                                                Logger_AddLogMessage(string.Format("VerifySignUpExists::Error: Email {0} verification is unknown Changed to valid. APP {1}", sEmail, strAppCode), LogLevels.logINFO);
                                                oCheckResult = EmailChecker.EmailCheckResult.Valid;
                                            }
                                            else
                                            {
                                                Logger_AddLogMessage(string.Format("VerifySignUpExists::Error: Email {0} verification is unknown. APP {1}", sEmail, strAppCode), LogLevels.logINFO);

                                            }
                                        }
                                        break;


                                }


                                if (oCheckResult == EmailChecker.EmailCheckResult.Unknown)
                                {
                                    if ((iOSID == (int)MobileOS.iOS) &&
                                        ((!ulSOVersion.HasValue) ||
                                         ((ulSOVersion.HasValue) && (ulSOVersion.Value < _IOS_VERSION_14_6))))
                                    {
                                        oCheckResult = EmailChecker.EmailCheckResult.Valid;
                                        Logger_AddLogMessage(string.Format("VerifySignUpExists::Error: Email {0} verification is unknown Changed to valid (ios<14.6). APP {1}", sEmail, strAppCode), LogLevels.logINFO);
                                    }
                                }
                            }
                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                            parametersOut["email"] = sEmail;

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("VerifySignUpExists::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("VerifySignUpExists: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("VerifySignUpExists::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("VerifySignUpExists::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }

        [WebMethod]
        public string VerifySignUpExistsJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = VerifySignUpExists(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);

                xmlOut = null;
            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("VerifySignUpExistsJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);
            }

            return jsonOut;
        }

        [WebMethod]
        public string QueryTokenZendesk(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("QueryTokenZendesk: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    if (parametersIn["strToken"] == null)
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryTokenZendesk::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        Dictionary<string, object> payload = null;

                        Logger_AddLogMessage(string.Format("QueryTokenZendesk::Looking for user" ), LogLevels.logINFO);
                        if (customersRepository.GetUserFromOpenSessionSSO(parametersIn["strToken"].ToString(), ref payload))
                        {
                            Logger_AddLogMessage(string.Format("QueryTokenZendesk::Payload:{0}", payload), LogLevels.logINFO);
                            string strXmlZendesk = string.Empty;
                            if (payload != null)
                            {
                                parametersOut = new SortedList();
                                parametersOut = CreateParameterOutZendesk(parametersOut, payload, strXmlZendesk);
                                parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                            }
                            xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "tags" });
                        }
                        else
                        {
                            Logger_AddLogMessage(string.Format("QueryTokenZendesk::cOUNTRY REDIRECTION"), LogLevels.logINFO);
                            //LLAMAR AL SERVIDOR
                            List<COUNTRIES_REDIRECTION> oListCountriesRedirection = infraestructureRepository.GetCountriesRedirections();
                            foreach (COUNTRIES_REDIRECTION country in oListCountriesRedirection)
                            {
                                xmlOut = CallToServerTokenZendesk(xmlIn, xmlOut, country);
                                if (xmlOut.Contains("<r>1</r>"))
                                {
                                    return xmlOut;
                                }
                            }


                        }
                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryTokenZendesk::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryTokenZendesk::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            Logger_AddLogMessage(string.Format("QueryTokenZendesk: xmlOut={0}",  PrettyXml(xmlOut)), LogLevels.logERROR);
            return xmlOut;
        }

        [WebMethod]
        public string QueryTokenZendeskJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryTokenZendesk(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);

                xmlOut = null;
            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryTokenZendeskJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);
            }

            return jsonOut;
        }

        [WebMethod]
        public string QueryTokenZendeskServerExternal(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("QueryTokenZendeskServerExternal: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    if (parametersIn["strToken"] == null)
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryTokenZendeskServerExternal::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        Dictionary<string, object> payload = null;

                        if (customersRepository.GetUserFromOpenSession(parametersIn["strToken"].ToString(), ref payload))
                        {
                            string strXmlZendesk = string.Empty;
                            if (payload != null)
                            {
                                parametersOut = new SortedList();
                                parametersOut = CreateParameterOutZendesk(parametersOut, payload, strXmlZendesk);
                                parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                            }
                            xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "tags" });
                        }
                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryTokenZendeskServerExternal::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryTokenZendeskServerExternal::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }

        [WebMethod]
        public string QueryTokenZendeskServerExternalJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryTokenZendeskServerExternal(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);

                xmlOut = null;
            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryTokenZendeskServerExternalJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);
            }

            return jsonOut;
        }


        [WebMethod]
        public string VerifyLoginExists(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("VerifyLoginExists: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    if (parametersIn["u"] == null && parametersIn["pasw"] == null)
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("VerifyLoginExists::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);
                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("VerifyLoginExists::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            string strUsername = parametersIn["u"].ToString();
                            parametersOut = new SortedList();
                            if (customersRepository.ExistEmail(strUsername))
                            {
                                if (FormAuthMemberShip.MembershipService.ValidateUser(ref strUsername, parametersIn["pasw"].ToString()))
                                {
                                    USER oUser = null;
                                    if (customersRepository.GetUserData(ref oUser, strUsername))
                                    {
                                        if (oUser != null)
                                        {
                                            if (oUser.USR_ACTIVATED == 0)
                                            {
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_User_Is_Not_Activated);
                                                Logger_AddLogMessage(string.Format("VerifyLoginExists::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                return xmlOut;
                                            }
                                            else
                                            {

                                                parametersOut["InsVersion"]=  geograficAndTariffsRepository.GetSyncInstallationCurrentVersion();
                                                parametersOut["InsGeomVersion"] = geograficAndTariffsRepository.GetSyncInstallationGeometryCurrentVersion();
                                                parametersOut["usr_cur_id"] = oUser.USR_CUR_ID;
                                                parametersOut["usr_cou_id"] = oUser.USR_COU_ID;
                                                parametersOut["user_id"] = oUser.USR_ID;
                                                parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                                                xmlOut = GenerateXMLOuput(parametersOut);
                                            }
                                        }
                                        else
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_User);
                                            Logger_AddLogMessage(string.Format("VerifyLoginExists::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        }
                                    }
                                    else
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_User);
                                        Logger_AddLogMessage(string.Format("VerifyLoginExists::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    }

                                }
                                else
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthentication);
                                    Logger_AddLogMessage(string.Format("VerifyLoginExists::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }
                            }
                            else
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_User_Not_Logged);
                                Logger_AddLogMessage(string.Format("VerifyLoginExists::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                            }

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("VerifyLoginExists::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("VerifyLoginExists: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }

                        }
                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("VerifyLoginExists::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("VerifySignUpExists::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }

        [WebMethod]
        public string VerifyLoginExistsJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = VerifyLoginExists(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);

                xmlOut = null;
            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("VerifyLoginExistsJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);
            }

            return jsonOut;
        }



        [WebMethod]
        public string UpdateInfoQuery(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("UpdateInfoQuery: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("UpdateInfoQuery::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("UpdateInfoQuery::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();
                            if (parametersIn["appcode"] != null)
                            {
                                try
                                {
                                    string sAppCode = parametersIn["appcode"].ToString();
                                    dSourceApp = geograficAndTariffsRepository.GetSourceApp(sAppCode);
                                }
                                catch { }
                            }

                            string strAppCode = geograficAndTariffsRepository.GetSourceAppCode(dSourceApp);


                            MobileOS oMobileOS = MobileOS.Android;
                            try
                            {
                                int iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                oMobileOS = (MobileOS)iOSID;
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("UpdateInfoQuery::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }



                            USER oUser = null;
                            string strCulture = "";


                            rt = GetUserData(ref oUser, parametersIn, false, out strCulture);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("UpdateInfoQuery::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            decimal? dInsId = null;
                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            string sAppVersion = "";
                            try
                            {
                                if (parametersIn["appvers"] != null)
                                    sAppVersion = parametersIn["appvers"].ToString();
                                else
                                    sAppVersion = parametersIn["vers"].ToString();
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("UpdateInfoQuery::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            if (!CheckVersionFormat(sAppVersion))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("UpdateInfoQuery::Error: Invalid app version format: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }



                            rt = GetQueryLoginData(ref oUser, parametersIn, AppUtilities.AppVersion(sAppVersion), strCulture, null, out dInsId, ref parametersOut);

                            INSTALLATION oInstallation = null;
                            DateTime? dtinstDateTime = null;
                            decimal? dLatitude = null;
                            decimal? dLongitude = null;

                            if (!geograficAndTariffsRepository.getInstallation(dInsId,
                                                                         dLatitude,
                                                                         dLongitude,
                                                                         ref oInstallation,
                                                                         ref dtinstDateTime))
                            {
                                oInstallation = null;
                            }


                            decimal? dShareMessage = Tools.Helpers.ValidateStringToDecimal(SettingsApp.ShareMessage);
                            if (dShareMessage.HasValue)
                            {
                                string sSharemessage = infraestructureRepository.GetLiteral(dShareMessage.Value, strCulture);
                                if (!String.IsNullOrEmpty(sSharemessage))
                                {
                                    parametersOut["sharemessage"] = sSharemessage;
                                }
                            }


                            string sLicenseTermsVersion = "";
                            string sLicenseTermsUrl = "";
                            string sConditionsUrl = "";
                            string strXmlVersionLiterals = String.Empty;



                            if (AppUtilities.AppVersion(sAppVersion) >= _VERSION_2_8)
                            {

                                IEnumerable<stVersionsLiterals> ostVersionsLiterals = customersRepository.DisplayQuestions(oUser, strCulture, dSourceApp, out sLicenseTermsVersion, out sLicenseTermsUrl, out sConditionsUrl);

                                if (!GenerateXMLVersionsLiterals(ostVersionsLiterals, ref strXmlVersionLiterals))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("UpdateInfoQuery::GenerateXMLVersionsLiterals::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                                parametersOut["questions"] = strXmlVersionLiterals;

                                parametersOut["legalterms"] = (customersRepository.NeedDisplayLicenseTerms(oUser, strCulture, out sLicenseTermsVersion, out sLicenseTermsUrl, out sConditionsUrl) ? "1" : "0");
                                parametersOut["legaltermsver"] = sLicenseTermsVersion;
                                parametersOut["url1"] = sLicenseTermsUrl;
                                parametersOut["url2"] = sConditionsUrl;
                            }
                            else
                            {

                                parametersOut["legalterms"] = (customersRepository.NeedDisplayLicenseTerms(oUser, strCulture, out sLicenseTermsVersion, out sLicenseTermsUrl, out sConditionsUrl) ? "1" : "0");
                                parametersOut["legaltermsver"] = sLicenseTermsVersion;
                                parametersOut["url1"] = sLicenseTermsUrl;
                                parametersOut["url2"] = sConditionsUrl;

                                parametersOut["urlmarket"] = ConfigurationManager.AppSettings[string.Format("UrlMarket_{0}_{1}", oMobileOS.ToString(), strAppCode)] ?? "";
                                parametersOut["urlmarketmsg"] = ConfigurationManager.AppSettings[string.Format("UrlMarketMsg_{0}_{1}_{2}_{3}",
                                                                                                               (rt == ResultType.Result_Error_InvalidAppVersion_UpdateMandatory ? "Mandatory" : "NotMandatory"),
                                                                                                               oMobileOS.ToString(),
                                                                                                               strAppCode,
                                                                                                               strCulture)] ?? "";

                                string sCheckVersionFrom = ConfigurationManager.AppSettings["CheckVersionFrom_" + oMobileOS.ToString()] ?? "";
                                string sCheckVersionUpdateMandatory = ConfigurationManager.AppSettings["CheckVersionUpdateMandatory_" + oMobileOS.ToString()] ?? "";
                                string sCheckVersionUpdateNotMandatory = ConfigurationManager.AppSettings["CheckVersionUpdateNotMandatory_" + oMobileOS.ToString()] ?? "";
                                if (!string.IsNullOrEmpty(sCheckVersionFrom) &&
                                    (!string.IsNullOrEmpty(sCheckVersionUpdateMandatory) || !string.IsNullOrEmpty(sCheckVersionUpdateNotMandatory)))
                                {
                                    if (VersionGreatherEqual(sAppVersion, sCheckVersionFrom))
                                    {
                                        if (VersionMinor(sAppVersion, sCheckVersionUpdateMandatory))
                                            rt = ResultType.Result_Error_InvalidAppVersion_UpdateMandatory;
                                        else if (VersionMinor(sAppVersion, sCheckVersionUpdateNotMandatory))
                                            rt = ResultType.Result_Error_InvalidAppVersion_UpdateNotMandatory;
                                    }
                                }

                                if (rt == ResultType.Result_Error_InvalidAppVersion_UpdateMandatory)
                                {
                                    parametersOut["urlmarketvers"] = sCheckVersionUpdateMandatory ?? "";
                                }
                                else if (rt == ResultType.Result_Error_InvalidAppVersion_UpdateNotMandatory)
                                {
                                    parametersOut["urlmarketvers"] = sCheckVersionUpdateNotMandatory ?? "";
                                }
                            }

                            ulong ulAppVersion = AppUtilities.AppVersion(sAppVersion);
                            if (ulAppVersion >= _VERSION_3_4)
                            {
                                string strXmlCityServiceList = string.Empty;
                                StringBuilder sbXmlCityServiceList = new StringBuilder();

                                if (!GenerateXMLCityServiceList(oInstallation, ref sbXmlCityServiceList, Convert.ToDecimal(parametersIn[ConstantsEntity.PARAMETER_LANG]), dtinstDateTime))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("UpdateInfoQuery::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                                strXmlCityServiceList = sbXmlCityServiceList.ToString();
                                parametersOut["CityServiceList"] = strXmlCityServiceList;
                            }

                            parametersOut["OPEUSERID"] = oUser.USR_ID.ToString();
                            parametersOut["BALCUR"] = oUser.USR_CUR_ID.ToString();

                            USER_AVERAGE_BALANCE oUserAverageBalance = oUser.USER_AVERAGE_BALANCEs.FirstOrDefault();
                            if (oUserAverageBalance != null)
                                parametersOut["BALAVER"] = oUserAverageBalance.USRB_AVERAGE_BALANCE.ToString();

                            //parametersOut["PAYMODE"] = Convert.ToInt32(ConfigurationManager.AppSettings["TollPaymentMode"] ?? "0");
                            parametersOut["PAYSTATUS"] = (oUser.USR_BALANCE >= 0 ? 0 : 1);
                            if (oUser.USR_BALANCE < 0)
                                parametersOut["PAYBALDUE"] = oUser.USR_BALANCE;


                            if (rt != ResultType.Result_OK)
                            {
                                parametersOut["r"] = Convert.ToInt32(rt);

                                string strInsXML = "";
                                string strInsGeomXML = "";
                              
                                if (rt == ResultType.Result_Error_Invalid_City || rt == ResultType.Result_Error_Incompatible_City_With_UserCurrency)
                                {

                                    if ((parametersIn["InsVersion"] != null) &&
                                        (parametersIn["InsGeomVersion"] != null))
                                    {


                                        long lCurrVersion = -1;


                                        try
                                        {
                                            lCurrVersion = Convert.ToInt64(parametersIn["InsVersion"].ToString());
                                            strInsXML = GetInstallationsSync(lCurrVersion);
                                            parametersOut["InsSync"] = strInsXML;
                                        }
                                        catch { }


                                        lCurrVersion = -1;

                                        try
                                        {
                                            lCurrVersion = Convert.ToInt64(parametersIn["InsGeomVersion"].ToString());
                                            strInsGeomXML = GetInstallationsGeometrySync(lCurrVersion, oMobileOS, sAppVersion);
                                            parametersOut["InsGeomSync"] = strInsGeomXML;

                                        }
                                        catch { }
                                    }


                                }

                                xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "cities", "InsSync", "InsGeomSync" });
                                Logger_AddLogMessage(string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "cities", "ccpaymentsdata" });

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("UpdateInfoQuery::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("UpdateInfoQuery: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }

                            oUser = null;

                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("UpdateInfoQuery::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("UpdateInfoQuery::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;

        }



        [WebMethod]
        public string UpdateInfoQueryJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("UpdateInfoQueryJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = UpdateInfoQuery(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("UpdateInfoQueryJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("UpdateInfoQueryJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }




        [WebMethod]
        public string UpdatePushID(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("UpdatePushID: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["pushID"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("UpdatePushID::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("UpdatePushID::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            rt = GetUserData(ref oUser, parametersIn);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("UpdatePushID::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("UpdatePushID::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("UpdatePushID: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }

                            oUser = null;


                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("UpdatePushID::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("UpdatePushID::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;

        }



        [WebMethod]
        public string UpdatePushIDJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("UpdatePushIDJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = UpdatePushID(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("UpdatePushIDJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("UpdatePushIDJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }



        [WebMethod]
        public string ForgetPassword(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                bool bContainsCountryRedirection = (xmlIn.Contains(TAG_COUNTRIES_REDIRECTIONS) ? true : false);

                if (bContainsCountryRedirection)
                {
                    xmlIn = RemoveNodeXML(xmlIn, TAG_COUNTRIES_REDIRECTIONS);
                }

                Logger_AddLogMessage(string.Format("ForgetPassword: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);
                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if (parametersIn["u"] == null)
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ForgetPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ForgetPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;

                            decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();
                            if (parametersIn["appcode"] != null)
                            {
                                try
                                {
                                    string strAppCode = parametersIn["appcode"].ToString();
                                    dSourceApp = geograficAndTariffsRepository.GetSourceApp(strAppCode);
                                }
                                catch { }
                            }

                            if (!customersRepository.GetUserData(ref oUser, parametersIn["u"].ToString()))
                            {
                                oUser = null;
                                if (!customersRepository.GetUserDataByEmail(ref oUser, parametersIn["u"].ToString()))
                                {
                                    //Si el usuario no existe se verifica el los Servidores Externos
                                    if (!bContainsCountryRedirection)
                                    {
                                        List<COUNTRIES_REDIRECTION> oCountriesRedirectionsList = infraestructureRepository.GetCountriesRedirections();
                                        try
                                        {
                                            foreach (COUNTRIES_REDIRECTION cr in oCountriesRedirectionsList)
                                            {

                                                Logger_AddLogMessage(string.Format("ForgetPassword: ExternalIntegraMobileWS: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);
                                                ExternalIntegraMobileWS.integraMobileWS oExternalIntegraMobileWS = StarExternalIntegraMobileWS(cr);
                                                if (oExternalIntegraMobileWS != null)
                                                {
                                                    xmlIn = AddNodeXML(xmlIn, TAG_COUNTRIES_REDIRECTIONS, cr.COURE_COUNTRY_REDIRECTION_WS_URL);
                                                    xmlOut = oExternalIntegraMobileWS.ForgetPassword(xmlIn);
                                                    if (xmlOut.Contains(TAG_RESULT_OK_VALUE_1))
                                                    {
                                                        return xmlOut;
                                                    }
                                                }
                                            }

                                        }
                                        catch (Exception)
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("ForgetPassword::ExternalIntegraMobileWS::Error:  xmlIn={1}, xmlOut={2}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        }
                                    }
                                    else
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_User);
                                        Logger_AddLogMessage(string.Format("ForgetPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    }
                                }
                            }




                            if (oUser != null)
                            {

                             
                                if (oUser.USR_SIGNUP_SOAPP_ID != dSourceApp)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_User);
                                    Logger_AddLogMessage(string.Format("ForgetPassword::Error (User Signup in other Application): xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }

                                bool bSendByPush = false;
                                USERS_PUSH_ID oUserPush = null;

                                try
                                {
                                    //is device from user
                                    string strWIFIMAC = parametersIn["WIFIMAC"].ToString();
                                    string strIMEI = parametersIn["IMEI"].ToString();
                                    int iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());

                                    if (!string.IsNullOrEmpty(strWIFIMAC) || !string.IsNullOrEmpty(strIMEI))
                                    {
                                        MobileOS eMobileOS = (MobileOS)iOSID;

                                        string strSendPush = infraestructureRepository.GetParameterValue(string.Format("ForgetPassword_SendPush.{0}", eMobileOS));

                                        Logger_AddLogMessage(string.Format("ForgetPassword: ForgetPassword_SendPush.{0}={1}", eMobileOS, strSendPush), LogLevels.logINFO);


                                        if (!string.IsNullOrEmpty(strSendPush))
                                        {
                                            if (Convert.ToInt32(strSendPush) == 1)
                                            {
                                                oUserPush = oUser.USERS_PUSH_IDs.Where(r => r.UPID_OS == iOSID &&
                                                  ((!string.IsNullOrEmpty(r.UPID_CELL_WIFI_MAC) && !string.IsNullOrEmpty(strWIFIMAC) && r.UPID_CELL_WIFI_MAC == strWIFIMAC) ||
                                                   (!string.IsNullOrEmpty(r.UPID_CELL_IMEI) && !string.IsNullOrEmpty(strIMEI) && r.UPID_CELL_IMEI == strIMEI))).FirstOrDefault();

                                                if (oUserPush != null)
                                                {
                                                    Logger_AddLogMessage(string.Format("ForgetPassword: ForgetPassword_SendPush.{0}={1} PushId={2}", eMobileOS, strSendPush, oUserPush.UPID_PUSHID), LogLevels.logINFO);
                                                    bSendByPush = true;

                                                }
                                            }
                                        }
                                    }


                                }
                                catch (Exception e)
                                {
                                    Logger_AddLogException(e, string.Format("ForgetPassword::Error: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logERROR);
                                }

                                USERS_SECURITY_OPERATION oSecOperation = null;


                                string strPasswordRecoveryType = infraestructureRepository.GetParameterValue("PasswordRecoveryType");
                                PasswordRecoveryType ePasswordRecoveryType = PasswordRecoveryType.Recover;

                                if (!string.IsNullOrEmpty(strPasswordRecoveryType))
                                {
                                    try
                                    {
                                        ePasswordRecoveryType = (PasswordRecoveryType)Convert.ToInt32(strPasswordRecoveryType);
                                    }
                                    catch { }
                                }


                                switch (ePasswordRecoveryType)
                                {

                                    case PasswordRecoveryType.Recover:
                                        {

                                            oSecOperation = new USERS_SECURITY_OPERATION
                                            {
                                                USOP_NEW_EMAIL = oUser.USR_EMAIL,
                                                USOP_NEW_MAIN_TEL = oUser.USR_MAIN_TEL,
                                                USOP_NEW_MAIN_TEL_COUNTRY = oUser.USR_MAIN_TEL_COUNTRY,
                                                USOP_ACTIVATION_RETRIES = 0,
                                                USOP_OP_TYPE = (int)SecurityOperationType.RecoverPassword,
                                                USOP_STATUS = (int)SecurityOperationStatus.Inserted,
                                                USOP_LAST_SENT_DATE = DateTime.UtcNow,
                                                USOP_UTCDATETIME = DateTime.UtcNow,
                                                USOP_USR_ID = oUser.USR_ID,
                                                USOP_SEND_BY_PUSH = bSendByPush ? 1 : 0,
                                                USOP_UPID_ID = (oUserPush != null) ? oUserPush.UPID_ID : (decimal?)null
                                            };

                                            if (customersRepository.AddSecurityOperation(ref oUser, oSecOperation))
                                            {

                                                if (!string.IsNullOrEmpty(oUser.USR_CULTURE_LANG))
                                                {
                                                    CultureInfo ci = new CultureInfo(oUser.USR_CULTURE_LANG);
                                                    Thread.CurrentThread.CurrentUICulture = ci;
                                                    Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);
                                                    integraMobile.WS.Properties.Resource.Culture = ci;

                                                }

                                                string strSourceAppEmailPrefix = GetEmailSourceAppEmailPrefix(dSourceApp);


                                                if (!SendEmailAndSMS(ref oUser, oSecOperation, ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "ForgotPassword_EmailHeader"),
                                                        ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "ForgotPassword_EmailBody"), ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "ForgotPassword_SMS"), dSourceApp))
                                                {
                                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                    Logger_AddLogMessage(string.Format("ForgetPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                }

                                                customersRepository.UpdateSecurityOperationRetries(ref oSecOperation);

                                                if (bSendByPush)
                                                {
                                                    Logger_AddLogMessage(string.Format("ForgetPassword: Sending Code Also by Push to {0}", oUser.USR_EMAIL), LogLevels.logINFO);
                                                }

                                                parametersOut = new SortedList();
                                                parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                                                xmlOut = GenerateXMLOuput(parametersOut);

                                                if (xmlOut.Length == 0)
                                                {
                                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                    Logger_AddLogMessage(string.Format("ForgetPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                }
                                                else
                                                {
                                                    Logger_AddLogMessage(string.Format("ForgetPassword: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                                }



                                            }
                                            else
                                            {
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                Logger_AddLogMessage(string.Format("ForgetPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            }


                                        }
                                        break;
                                    case PasswordRecoveryType.Reset:
                                        {

                                            oSecOperation = new USERS_SECURITY_OPERATION
                                            {
                                                USOP_NEW_EMAIL = oUser.USR_EMAIL,
                                                USOP_NEW_MAIN_TEL = oUser.USR_MAIN_TEL,
                                                USOP_NEW_MAIN_TEL_COUNTRY = oUser.USR_MAIN_TEL_COUNTRY,
                                                USOP_ACTIVATION_RETRIES = 0,
                                                USOP_OP_TYPE = (int)SecurityOperationType.ResetPassword,
                                                USOP_STATUS = (int)SecurityOperationStatus.Inserted,
                                                USOP_LAST_SENT_DATE = DateTime.UtcNow,
                                                USOP_UTCDATETIME = DateTime.UtcNow,
                                                USOP_USR_ID = oUser.USR_ID,
                                                USOP_SEND_BY_PUSH = 0,
                                                USOP_UPID_ID = null
                                            };

                                            if (customersRepository.AddSecurityOperation(ref oUser, oSecOperation))
                                            {

                                                if (!string.IsNullOrEmpty(oUser.USR_CULTURE_LANG))
                                                {
                                                    CultureInfo ci = new CultureInfo(oUser.USR_CULTURE_LANG);
                                                    Thread.CurrentThread.CurrentUICulture = ci;
                                                    Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);
                                                    integraMobile.WS.Properties.Resource.Culture = ci;

                                                }

                                                string strSourceAppEmailPrefix = GetEmailSourceAppEmailPrefix(dSourceApp);


                                                if (!SendEmail(ref oUser, oSecOperation, ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "ForgotPassword_EmailHeader"),
                                                        ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "ForgotPassword_EmailBody"), dSourceApp))
                                                {
                                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                    Logger_AddLogMessage(string.Format("ForgetPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                }

                                                customersRepository.UpdateSecurityOperationRetries(ref oSecOperation);


                                                parametersOut = new SortedList();
                                                parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                                                xmlOut = GenerateXMLOuput(parametersOut);

                                                if (xmlOut.Length == 0)
                                                {
                                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                    Logger_AddLogMessage(string.Format("ForgetPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                }
                                                else
                                                {
                                                    Logger_AddLogMessage(string.Format("ForgetPassword: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                                }



                                            }
                                            else
                                            {
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                Logger_AddLogMessage(string.Format("ForgetPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            }
                                        }
                                        break;

                                    default:
                                        break;
                                }

                                oUser = null;
                            }
                            else
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_User);
                                Logger_AddLogMessage(string.Format("ForgetPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                        }

                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ForgetPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }


            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ForgetPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;

        }




        [WebMethod]
        public string ForgetPasswordJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ForgetPasswordJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ForgetPassword(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ForgetPasswordJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ForgetPasswordJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }


        [WebMethod]
        public string ForgetUsername(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ForgetUsername: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if (parametersIn["email"] == null)
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ForgetUsername::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ForgetUsername::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;

                            if (customersRepository.GetUserDataByEmail(ref oUser, parametersIn["email"].ToString()))
                            {

                                if (oUser != null)
                                {

                                    string culture = oUser.USR_CULTURE_LANG;
                                    CultureInfo ci = new CultureInfo(culture);
                                    Thread.CurrentThread.CurrentUICulture = ci;
                                    Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);
                                    integraMobile.WS.Properties.Resource.Culture = ci;


                                    decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();
                                    if (parametersIn["appcode"] != null)
                                    {
                                        try
                                        {
                                            string strAppCode = parametersIn["appcode"].ToString();
                                            dSourceApp = geograficAndTariffsRepository.GetSourceApp(strAppCode);
                                        }
                                        catch { }
                                    }


                                    string strSourceAppEmailPrefix = GetEmailSourceAppEmailPrefix(dSourceApp);

                                    string strSubject = ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "ForgetUsername_EmailHeader");
                                    string strMessage = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "ForgeUsername_EmailBody"), oUser.USR_USERNAME);

                                    long lSenderId = infraestructureRepository.SendEmailTo(oUser.USR_EMAIL, strSubject, strMessage, dSourceApp);

                                    if (lSenderId > 0)
                                    {
                                        parametersOut = new SortedList();
                                        parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                                        xmlOut = GenerateXMLOuput(parametersOut);

                                        if (xmlOut.Length == 0)
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("ForgetUsername::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        }
                                        else
                                        {
                                            Logger_AddLogMessage(string.Format("ForgetUsername: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                        }
                                    }
                                    else
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("ForgetUsername::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    }

                                    oUser = null;

                                }
                                else
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_User);
                                    Logger_AddLogMessage(string.Format("ForgetUsername::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }
                            }
                            else
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_User);
                                Logger_AddLogMessage(string.Format("ForgetUsername::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }

                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ForgetUsername::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ForgetUsername::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;

        }




        [WebMethod]
        public string ForgetUsernameJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ForgetUsernameJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ForgetUsername(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ForgetUsernameJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ForgetUsernameJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }



        [WebMethod]
        public string QueryOperationList(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("QueryOperationList: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["typeoflist"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryOperationList::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("QueryOperationList::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";

                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryOperationList::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            ulong ulAppVersion = AppUtilities.AppVersion(strAppVersion);

                            int iTypeofList = -1;
                            OperationListType opListType = OperationListType.Current;

                            try
                            {
                                iTypeofList = Convert.ToInt32(parametersIn["typeoflist"].ToString());
                                opListType = (OperationListType)iTypeofList;

                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryOperationList::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            int iNumDaysToGoBack = Convert.ToInt32(ConfigurationManager.AppSettings["NumDaysToGoBackInOperationsList"].ToString());
                            DateTime dtIni = DateTime.Now.AddDays(-iNumDaysToGoBack);
                            if (parametersIn["dateini"] != null)
                            {
                                try
                                {
                                    dtIni = DateTime.ParseExact(parametersIn["dateini"].ToString(), "HHmmssddMMyy",
                                      CultureInfo.InvariantCulture);

                                }
                                catch
                                {

                                }

                            }


                            DateTime dtEnd = DateTime.Now.AddDays(1);
                            if (parametersIn["dateend"] != null)
                            {

                                try
                                {
                                    dtEnd = DateTime.ParseExact(parametersIn["dateend"].ToString(), "HHmmssddMMyy",
                                      CultureInfo.InvariantCulture);

                                }
                                catch
                                {

                                }

                            }

                            List<ALL_OPERATION> oOperations = new List<ALL_OPERATION>();

                            DateTime userDateTime = DateTime.UtcNow - new TimeSpan(0, oUser.USR_UTC_OFFSET, 0);

                            if ((opListType == OperationListType.Current) || (opListType == OperationListType.CurrentShopKeeper))
                            {
                                int iCurrentDaysToGoBack = 2;


                                if (ulAppVersion >= _VERSION_3_0)
                                {

                                    iCurrentDaysToGoBack = 30;
                                    try
                                    {
                                        iCurrentDaysToGoBack = Convert.ToInt32(infraestructureRepository.GetParameterValue("HistoricCurrentDaysToGoBack"));
                                    }
                                    catch { }

                                }



                                IQueryable<ALL_OPERATION> oAllOperations = customersRepository.GetUserOperations(ref oUser, iCurrentDaysToGoBack, (opListType == OperationListType.CurrentShopKeeper));

                                //Add Today Operations
                                foreach (ALL_OPERATION oper in oAllOperations)
                                {
                                    DateTime operCorrectedTime = oper.OPE_DATE.Value;

                                    if ((userDateTime.Date == operCorrectedTime.Date) || (ulAppVersion >= _VERSION_3_0))
                                    {
                                        oOperations.Add(oper);
                                    }
                                }


                                if (ulAppVersion < _VERSION_3_0)
                                {
                                    oAllOperations = customersRepository.GetUserOperations(ref oUser, 60, (opListType == OperationListType.CurrentShopKeeper));


                                    Dictionary<string, bool> oHashPlateUsed = new Dictionary<string, bool>();
                                    foreach (USER_PLATE oPlate in oUser.USER_PLATEs)
                                    {
                                        if (!oHashPlateUsed.ContainsKey(oPlate.USRP_PLATE))
                                        {
                                            oHashPlateUsed.Add(oPlate.USRP_PLATE, false);
                                        }
                                    }



                                    //Add Active Operations from previous days
                                    foreach (ALL_OPERATION oper in oAllOperations)
                                    {
                                        if ((oper.OPE_TYPE == (int)ChargeOperationsType.ParkingOperation) ||
                                            (oper.OPE_TYPE == (int)ChargeOperationsType.ExtensionOperation) ||
                                            (oper.OPE_TYPE == (int)ChargeOperationsType.ParkingRefund))
                                        {
                                            bool bUsed = oHashPlateUsed[oper.USRP_PLATE];
                                            if (!bUsed)
                                            {
                                                DateTime operCorrectedTime = oper.OPE_DATE.Value;
                                                if (userDateTime.Date != operCorrectedTime.Date)
                                                {
                                                    DateTime operIniCorrectedTime = oper.OPE_INIDATE.Value;
                                                    DateTime operEndCorrectedTime = oper.OPE_ENDDATE.Value;



                                                    if (userDateTime >= operIniCorrectedTime && userDateTime < operEndCorrectedTime)
                                                    {
                                                        oOperations.Add(oper);
                                                        oHashPlateUsed[oper.USRP_PLATE] = true;

                                                        bool bAllPlatesUsed = true;
                                                        var keys = new List<string>(oHashPlateUsed.Keys);
                                                        foreach (string key in keys)
                                                        {
                                                            bAllPlatesUsed = bAllPlatesUsed && oHashPlateUsed[key];
                                                        }

                                                        if (bAllPlatesUsed)
                                                            break;

                                                    }
                                                }


                                            }
                                        }
                                    }

                                    oAllOperations = null;
                                }

                            }
                            else
                            {


                                string strHistoricOperationsBehavior = infraestructureRepository.GetParameterValue("HistoricOperationsBehavior");
                                OperationListType olt = OperationListType.Historical;

                                if (!string.IsNullOrEmpty(strHistoricOperationsBehavior))
                                {
                                    try
                                    {
                                        olt = (OperationListType)Convert.ToInt32(strHistoricOperationsBehavior);
                                    }
                                    catch { }
                                }




                                IQueryable<ALL_OPERATION> oAllOperations = customersRepository.GetUserOperations(ref oUser, dtIni, dtEnd, (opListType == OperationListType.HistoricalShopKeeper));
                                //Add Not Today Operations and arriving to iNumDaysToGoBack

                                DateTime dtLastOperation = dtIni;


                                foreach (ALL_OPERATION oper in oAllOperations)
                                {

                                    DateTime operCorrectedTime = oper.OPE_DATE.Value;


                                    if ((operCorrectedTime > dtLastOperation) || (olt == OperationListType.All))
                                    {
                                        //Is not today's
                                        if ((userDateTime.Date != operCorrectedTime.Date) || (olt == OperationListType.All))
                                        {
                                            oOperations.Add(oper);
                                        }
                                    }

                                }
                                oAllOperations = null;

                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = oOperations.Count();
                            parametersOut["useropers"] = "";

                            if (oOperations.Count() > 0)
                            {
                                OperationsRemoveStarts(ref oOperations);

                                Dictionary<decimal, INSTALLATION> oSuperInstallations = new Dictionary<decimal, INSTALLATION>();

                                List<decimal> oRemovedOps = new List<decimal>();

                                StringBuilder sb = new StringBuilder();
                                foreach (ALL_OPERATION operation in oOperations)
                                {
                                    if (ulAppVersion >= _VERSION_1_5 || (operation.OPE_TYPE != (int)ChargeOperationsType.BalanceTransfer && operation.OPE_TYPE != (int)ChargeOperationsType.BalanceReception))
                                    {
                                        int iOt = operation.OPE_TYPE;
                                        if (ulAppVersion < _VERSION_2_1)
                                        {
                                            if (operation.OPE_TYPE == (int)ChargeOperationsType.BalanceTransfer ||
                                                operation.OPE_TYPE == (int)ChargeOperationsType.BalanceReception)
                                                iOt = 10;
                                            else if (operation.OPE_TYPE == (int)ChargeOperationsType.TollPayment)
                                                iOt = 11;
                                            else if (operation.OPE_TYPE == (int)ChargeOperationsType.TollLock)
                                                iOt = 12;
                                            else if (operation.OPE_TYPE == (int)ChargeOperationsType.TollUnlock)
                                                iOt = 13;
                                        }

                                        if (operation.OPE_INS_ID.HasValue)
                                        {
                                            if (!oSuperInstallations.ContainsKey(operation.OPE_INS_ID.Value))
                                            {
                                                var oSuperIns = geograficAndTariffsRepository.GetSuperInstallation(operation.OPE_INS_ID.Value);
                                                if (oSuperIns != null)
                                                    oSuperInstallations.Add(operation.OPE_INS_ID.Value, oSuperIns);
                                            }
                                            if (oSuperInstallations.ContainsKey(operation.OPE_INS_ID.Value))
                                            {
                                                operation.INS_SHORTDESC = oSuperInstallations[operation.OPE_INS_ID.Value].INS_SHORTDESC;
                                                operation.OPE_INS_ID = oSuperInstallations[operation.OPE_INS_ID.Value].INS_ID;
                                            }
                                        }

                                        bool bAddOperation = true;

                                        DateTime operCorrectedTime = operation.OPE_DATE.Value;
                                        switch ((ChargeOperationsType)operation.OPE_TYPE)
                                        {

                                            case ChargeOperationsType.ParkingOperation:
                                            case ChargeOperationsType.ExtensionOperation:
                                            case ChargeOperationsType.ParkingRefund:

                                                DateTime operIniCorrectedTime = operation.OPE_INIDATE.Value;
                                                DateTime operEndCorrectedTime = operation.OPE_ENDDATE.Value;
                                                string strOpeRefundPreviousEndDate = "";
                                                if (operation.OPE_REFUND_PREVIOUS_ENDDATE.HasValue)
                                                {
                                                    strOpeRefundPreviousEndDate = operation.OPE_REFUND_PREVIOUS_ENDDATE.Value.ToString("HHmmssddMMyy");
                                                }


                                                HIS_OPERATION oOp = null;
                                                bool bHisOp = customersRepository.GetOperationData(operation.OPE_ID, out oOp);
                                                
                                                if (oOp.OPE_PARKING_MODE == (int)ParkingMode.StartStopHybrid && oOp.OPE_TYPE == (int)ChargeOperationsType.ParkingRefund)
                                                {
                                                    List<OPERATION> oChainOps = new List<OPERATION>();
                                                    if (!string.IsNullOrEmpty(oOp.OPE_EXTERNAL_BASE_ID1))
                                                        customersRepository.GetStartStopHybridChainOperationsByExternalBaseId(1, oOp.OPE_EXTERNAL_BASE_ID1, out oChainOps);
                                                    if (!oChainOps.Any() && !string.IsNullOrEmpty(oOp.OPE_EXTERNAL_BASE_ID2))
                                                        customersRepository.GetStartStopHybridChainOperationsByExternalBaseId(2, oOp.OPE_EXTERNAL_BASE_ID2, out oChainOps);
                                                    if (!oChainOps.Any() && !string.IsNullOrEmpty(oOp.OPE_EXTERNAL_BASE_ID3))
                                                        customersRepository.GetStartStopHybridChainOperationsByExternalBaseId(3, oOp.OPE_EXTERNAL_BASE_ID3, out oChainOps);

                                                    if (oChainOps.Any())
                                                    {
                                                        int iTime = 0;
                                                        foreach (var oChainOp in oChainOps.Where(o => o.OPE_DATE < oOp.OPE_DATE).OrderByDescending(o => o.OPE_DATE))
                                                        {
                                                            if (oChainOp.OPE_TYPE == (int)ChargeOperationsType.ParkingRefund && oChainOp.OPE_ID != oOp.OPE_ID)
                                                                break;
                                                            else
                                                                iTime += oChainOp.OPE_TIME;
                                                        }
                                                        iTime -= oOp.OPE_TIME;
                                                        bAddOperation = (iTime > 0);
                                                    }
                                                }
                                                else
                                                    bAddOperation = (oOp.OPE_TIME > 0);

                                                if (!bAddOperation)
                                                    oRemovedOps.Add(oOp.OPE_ID);

                                                if (bAddOperation)
                                                {
                                                    if (bHisOp && oOp != null)
                                                    {
                                                        if ((ChargeOperationsType)operation.OPE_TYPE == ChargeOperationsType.ParkingRefund &&
                                                            ((ParkingMode)oOp.OPE_PARKING_MODE == ParkingMode.StartStop || (ParkingMode)oOp.OPE_PARKING_MODE == ParkingMode.StartStopHybrid))
                                                            iOt = 1;
                                                    }
                                                    sb.AppendFormat("<userope json:Array='true'>" +
                                                                    "<ot>{21}</ot>" +
                                                                    "<p>{0}</p>" +
                                                                    "<cityID>{1}</cityID>" +
                                                                    "<cityShortDesc>{2}</cityShortDesc>" +
                                                                    "<g>{3}</g>" +
                                                                    "<sts>{23}</sts>" +
                                                                    "<ad>{4}</ad>" +
                                                                    "<d>{5}</d>" +
                                                                    "<q_city>{6}</q_city>" +
                                                                    "<cur_city>{7}</cur_city>" +
                                                                    "<q_user>{8}</q_user>" +
                                                                    "<cur_user>{9}</cur_user>" +
                                                                    //"<t>{10}</t>" +
                                                                    "<bd>{11}</bd>	" +
                                                                    "<ed>{12}</ed>	" +
                                                                    "<bal_before>{13}</bal_before>" +
                                                                    "<st>{14}</st>" +
                                                                    "<srcType>{15}</srcType>" +
                                                                    "<srcIdent>{16}</srcIdent>" +
                                                                    "<postpay>{17}</postpay>" +
                                                                    "<time_bal_used>{18}</time_bal_used>" +
                                                                    "<time_bal_before>{19}</time_bal_before>" +
                                                                    "<d_prev_end>{20}</d_prev_end>" +
                                                                    "<cityDesc>{22}</cityDesc>",
                                                                    operation.USRP_PLATE,
                                                                    operation.OPE_INS_ID,
                                                                    operation.INS_SHORTDESC,
                                                                    operation.GRP_DESCRIPTION,
                                                                    operation.TAR_DESCRIPTION,
                                                                    operCorrectedTime.ToString("HHmmssddMMyy"),
                                                                    operation.OPE_TOTAL_AMOUNT,
                                                                    operation.OPE_AMOUNT_CUR_ISO_CODE,
                                                                    operation.OPE_FINAL_AMOUNT,
                                                                    operation.OPE_BALANCE_CUR_ISO_CODE,
                                                                    operation.OPE_TIME,
                                                                    operIniCorrectedTime.ToString("HHmmssddMMyy"),
                                                                    operEndCorrectedTime.ToString("HHmmssddMMyy"),
                                                                    operation.OPE_BALANCE_BEFORE,
                                                                    operation.OPE_SUSCRIPTION_TYPE,
                                                                    operation.EPO_SRCTYPE,
                                                                    string.IsNullOrEmpty(operation.EPO_SRCIDENT) ? "-1" : operation.EPO_SRCIDENT,
                                                                    operation.OPE_POSTPAY ?? 0,
                                                                    operation.OPE_TIME_BALANCE_USED,
                                                                    operation.OPE_TIME_BALANCE_BEFORE,
                                                                    strOpeRefundPreviousEndDate,
                                                                    iOt,
                                                                    operation.INS_DESCRIPTION,
                                                                    operation.STRSE_DESCRIPTION);

                                                    if (bHisOp && oOp != null)
                                                        sb.Append(OperationQueryTags(oOp, ref oOperations, strCulture, oRemovedOps));

                                                    bool bShowDetails = ((oOp.OPE_PARKING_MODE == (int)ParkingMode.Normal) ||
                                                                        (oOp.OPE_TYPE == (int)ChargeOperationsType.ParkingRefund));
                                                    sb.AppendFormat("<show_details>{0}</show_details>", bShowDetails ? 1 : 0);
                                                }

                                                break;

                                            case ChargeOperationsType.TicketPayment:
                                                sb.AppendFormat("<userope json:Array='true'>" +
                                                                "<ot>{13}</ot>" +
                                                                "<f>{0}</f>" +
                                                                "<show_details>0</show_details>" +
                                                                "<lp>{1}</lp>" +
                                                                "<cityID>{2}</cityID>" +
                                                                "<cityShortDesc>{3}</cityShortDesc>" +
                                                                "<d>{4}</d>" +
                                                                "<q_city>{5}</q_city>" +
                                                                "<cur_city>{6}</cur_city>" +
                                                                "<q_user>{7}</q_user>" +
                                                                "<cur_user>{8}</cur_user>" +
                                                                "<bal_before>{9}</bal_before>" +
                                                                "<st>{10}</st>" +
                                                                "<srcType>{11}</srcType>" +
                                                                "<srcIdent>{12}</srcIdent>" +
                                                                "<cityDesc>{14}</cityDesc>",
                                                                operation.TIPA_TICKET_NUMBER,
                                                                operation.USRP_PLATE,
                                                                operation.OPE_INS_ID,
                                                                operation.INS_SHORTDESC,
                                                                operCorrectedTime.ToString("HHmmssddMMyy"),
                                                                operation.OPE_TOTAL_AMOUNT,
                                                                operation.OPE_AMOUNT_CUR_ISO_CODE,
                                                                operation.OPE_FINAL_AMOUNT,
                                                                operation.OPE_BALANCE_CUR_ISO_CODE,
                                                                operation.OPE_BALANCE_BEFORE,
                                                                operation.OPE_SUSCRIPTION_TYPE,
                                                                operation.EPO_SRCTYPE,
                                                                string.IsNullOrEmpty(operation.EPO_SRCIDENT) ? "-1" : operation.EPO_SRCIDENT,
                                                                iOt,
                                                                operation.INS_DESCRIPTION);
                                                break;


                                            case ChargeOperationsType.BalanceRecharge:
                                                PaymentMeanRechargeType oRechargeType = (PaymentMeanRechargeType)(operation.OPE_CUSPMR_TYPE ?? 0);
                                                sb.AppendFormat("<userope json:Array='true'>" +
                                                                "<ot>{10}</ot>" +
                                                                "<d>{0}</d>" +
                                                                "<show_details>0</show_details>" +
                                                                "<q_user>{1}</q_user>" +
                                                                "<cur_user>{2}</cur_user>" +
                                                                "<bal_before>{3}</bal_before>" +
                                                                "<st>{4}</st>" +
                                                                "<srcType>{5}</srcType>" +
                                                                "<srcIdent>{6}</srcIdent>" +
                                                                "<q_balance>{7}</q_balance>" +
                                                                "<recType>{8}</recType>" +
                                                                "{9}",
                                                                operCorrectedTime.ToString("HHmmssddMMyy"),
                                                                operation.OPE_TOTAL_AMOUNT,
                                                                operation.OPE_AMOUNT_CUR_ISO_CODE,
                                                                operation.OPE_BALANCE_BEFORE,
                                                                operation.OPE_SUSCRIPTION_TYPE,
                                                                (int)TranslatePaymentMeanRechargeType(oRechargeType),
                                                                //operation.EPO_SRCTYPE,
                                                                string.IsNullOrEmpty(operation.EPO_SRCIDENT) ? "-1" : operation.EPO_SRCIDENT,
                                                                operation.OPE_AMOUNT,
                                                                (oRechargeType == PaymentMeanRechargeType.Pagatelia ? 4 : (int)oRechargeType),
                                                                (operation.OPE_CUSPMR_PAGATELIA_NEW_BALANCE.HasValue ? string.Format("<new_pagatelia_balance>{0}</new_pagatelia_balance>", operation.OPE_CUSPMR_PAGATELIA_NEW_BALANCE) : ""),
                                                                iOt);

                                                break;

                                            case ChargeOperationsType.ServiceCharge:
                                            case ChargeOperationsType.Discount:
                                                sb.AppendFormat("<userope json:Array='true'>" +
                                                                "<ot>{10}</ot>" +
                                                                "<d>{0}</d>" +
                                                                "<show_details>0</show_details>" +
                                                                "<q_city>{1}</q_city>" +
                                                                "<cur_city>{2}</cur_city>" +
                                                                "<q_user>{3}</q_user>" +
                                                                "<q_balance>{9}</q_balance>" +
                                                                "<cur_user>{4}</cur_user>" +
                                                                "<bal_before>{5}</bal_before>" +
                                                                "<st>{6}</st>" +
                                                                "<srcType>{7}</srcType>" +
                                                                "<srcIdent>{8}</srcIdent>",
                                                                operCorrectedTime.ToString("HHmmssddMMyy"),
                                                                operation.OPE_TOTAL_AMOUNT,
                                                                operation.OPE_AMOUNT_CUR_ISO_CODE,
                                                                operation.OPE_FINAL_AMOUNT,
                                                                operation.OPE_BALANCE_CUR_ISO_CODE,
                                                                operation.OPE_BALANCE_BEFORE,
                                                                operation.OPE_SUSCRIPTION_TYPE,
                                                                operation.EPO_SRCTYPE,
                                                                string.IsNullOrEmpty(operation.EPO_SRCIDENT) ? "-1" : operation.EPO_SRCIDENT,
                                                                operation.OPE_AMOUNT,
                                                                iOt);

                                                break;

                                            case ChargeOperationsType.BalanceTransfer:
                                            case ChargeOperationsType.BalanceReception:
                                                sb.AppendFormat("<userope json:Array='true'>" +
                                                                "<ot>{6}</ot>" +
                                                                "<tranatype>{0}</tranatype>" +
                                                                "<show_details>0</show_details>" +
                                                                "<d>{1}</d>" +
                                                                "<q_user>{2}</q_user>" +
                                                                "<cur_user>{3}</cur_user>" +
                                                                "<bal_before>{4}</bal_before>" +
                                                                "<u_aux>{5}</u_aux>",
                                                                (operation.OPE_TYPE == (int)ChargeOperationsType.BalanceTransfer ? 2 : 1),
                                                                operCorrectedTime.ToString("HHmmssddMMyy"),
                                                                (operation.OPE_TYPE == (int)ChargeOperationsType.BalanceTransfer ? -operation.OPE_TOTAL_AMOUNT : operation.OPE_TOTAL_AMOUNT),
                                                                operation.OPE_AMOUNT_CUR_ISO_CODE,
                                                                operation.OPE_BALANCE_BEFORE,
                                                                operation.OPE_ADDITIONAL_USR_USERNAME,
                                                                iOt);

                                                break;

                                            case ChargeOperationsType.TollPayment:
                                            case ChargeOperationsType.TollLock:
                                            case ChargeOperationsType.TollUnlock:
                                                sb.AppendFormat("<userope json:Array='true'>" +
                                                                "<ot>{13}</ot>" +
                                                                "<p>{0}</p>" +
                                                                "<show_details>0</show_details>" +
                                                                "<cityID>{1}</cityID>" +
                                                                "<cityShortDesc>{2}</cityShortDesc>" +
                                                                "<d>{3}</d>" +
                                                                "<q_city>{4}</q_city>" +
                                                                "<cur_city>{5}</cur_city>" +
                                                                "<q_user>{6}</q_user>" +
                                                                "<cur_user>{12}</cur_user>" +
                                                                "<tollq>{7}</tollq>" +
                                                                "<tollqvat>{8}</tollqvat>" +
                                                                "<tollid>{9}</tollid>" +
                                                                "<tolliddesc>{10}</tolliddesc>" +
                                                                "<bal_before>{11}</bal_before>" +
                                                                "<cityDesc>{14}</cityDesc>",
                                                                operation.USRP_PLATE,
                                                                operation.OPE_INS_ID,
                                                                operation.INS_SHORTDESC,
                                                                operCorrectedTime.ToString("HHmmssddMMyy"),
                                                                operation.OPE_TOTAL_AMOUNT,
                                                                operation.OPE_AMOUNT_CUR_ISO_CODE,
                                                                operation.OPE_FINAL_AMOUNT,
                                                                operation.OPE_AMOUNT,
                                                                Convert.ToInt32(Math.Round(operation.OPE_VAT ?? 0, MidpointRounding.AwayFromZero)),
                                                                operation.GRP_ID,
                                                                operation.GRP_DESCRIPTION,
                                                                operation.OPE_BALANCE_BEFORE,
                                                                operation.OPE_BALANCE_CUR_ISO_CODE,
                                                                iOt,
                                                                operation.INS_DESCRIPTION);

                                                break;

                                            case ChargeOperationsType.OffstreetEntry:
                                            case ChargeOperationsType.OffstreetExit:
                                            case ChargeOperationsType.OffstreetOverduePayment:

                                                string sIniDate = "";
                                                string sEndDate = "";
                                                if (operation.OPE_INIDATE.HasValue) sIniDate = operation.OPE_INIDATE.Value.ToString("HHmmssddMMyy");
                                                if (operation.OPE_ENDDATE.HasValue) sEndDate = operation.OPE_ENDDATE.Value.ToString("HHmmssddMMyy");

                                                sb.AppendFormat("<userope json:Array='true'>" +
                                                                "<ot>{15}</ot>" +
                                                                "<p>{0}</p>" +
                                                                "<show_details>0</show_details>" +
                                                                "<cityID>{1}</cityID>" +
                                                                "<cityShortDesc>{2}</cityShortDesc>" +
                                                                "<g>{3}</g>" +
                                                                "<ad>{4}</ad>" +
                                                                "<d>{5}</d>" +
                                                                "<q_city>{6}</q_city>" +
                                                                "<cur_city>{7}</cur_city>" +
                                                                "<q_user>{8}</q_user>" +
                                                                "<cur_user>{9}</cur_user>" +
                                                                "<t>{10}</t>" +
                                                                "<bd>{11}</bd>	" +
                                                                "<ed>{12}</ed>	" +
                                                                "<bal_before>{13}</bal_before>" +
                                                                "<st>{14}</st>" +
                                                                "<cityDesc>{16}</cityDesc>",
                                                                operation.USRP_PLATE,
                                                                operation.OPE_INS_ID,
                                                                operation.INS_SHORTDESC,
                                                                operation.GRP_DESCRIPTION,
                                                                operation.TAR_DESCRIPTION,
                                                                operCorrectedTime.ToString("HHmmssddMMyy"),
                                                                operation.OPE_TOTAL_AMOUNT,
                                                                operation.OPE_AMOUNT_CUR_ISO_CODE,
                                                                operation.OPE_FINAL_AMOUNT,
                                                                operation.OPE_BALANCE_CUR_ISO_CODE,
                                                                operation.OPE_TIME,
                                                                sIniDate,
                                                                sEndDate,
                                                                operation.OPE_BALANCE_BEFORE,
                                                                operation.OPE_SUSCRIPTION_TYPE,
                                                                iOt,
                                                                operation.INS_DESCRIPTION);

                                                break;

                                            default:
                                                break;

                                        }

                                        if (bAddOperation && iOt != (int)ChargeOperationsType.Permit)
                                        {
                                            sb.Append("</userope>");
                                        }
                                    }
                                }
                                parametersOut["useropers"] = sb.ToString();
                            }

                            oOperations.Clear();
                            oOperations = null;


                            xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "useropers" });

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryOperationList::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("QueryOperationList: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }

                            oUser = null;

                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryOperationList::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryOperationList::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

            }

            return xmlOut;
        }



        [WebMethod]
        public string QueryOperationListJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("QueryOperationListJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryOperationList(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                Logger_AddLogMessage(string.Format("QueryOperationListJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryOperationListJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }





        [WebMethod]
        public string GetUserAmountCurrency(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("GetUserAmountCurrency: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {


                    if ((parametersIn["subscription_type"] == null) ||
                        (parametersIn["ccode"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("GetUserAmountCurrency::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("GetUserAmountCurrency::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            PaymentSuscryptionType suscriptionType = PaymentSuscryptionType.pstPrepay;

                            try
                            {
                                int iSuscType = Convert.ToInt32(parametersIn["subscription_type"].ToString());
                                suscriptionType = (PaymentSuscryptionType)iSuscType;

                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("GetUserAmountCurrency::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            string sAppVersion = "1.0";
                            try
                            {
                                if (parametersIn["appvers"] != null)
                                    sAppVersion = parametersIn["appvers"].ToString();
                            }
                            catch
                            {
                            }

                            ulong ulAppVersion = AppUtilities.AppVersion(sAppVersion);


                            int iCountry = -1;
                            int iCurrencyId = -1;

                            string strCurrencyISOCode = "";
                            try
                            {
                                iCountry = Convert.ToInt32(parametersIn["ccode"].ToString());

                                if (ulAppVersion < _VERSION_2_0)
                                {
                                    iCountry = MEXICO_COUNTRY_ID;
                                }

                                iCurrencyId = infraestructureRepository.GetCountryCurrency(iCountry);
                                if (iCurrencyId <= 0)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Country_Code);
                                    Logger_AddLogMessage(string.Format("GetUserAmountCurrency::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                strCurrencyISOCode = infraestructureRepository.GetCurrencyIsoCode(iCurrencyId);


                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Country_Code);
                                Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            PaymentMeanType oPaymentMeanType = PaymentMeanType.pmtDebitCreditCard;
                            try
                            {
                                int iPaymentMeanType = Convert.ToInt32(parametersIn["paymeth"].ToString());
                                oPaymentMeanType = (PaymentMeanType)iPaymentMeanType;
                            }
                            catch
                            {
                                oPaymentMeanType = PaymentMeanType.pmtDebitCreditCard;
                            }


                            parametersOut = new SortedList();
                            parametersOut["r"] = (int)ResultType.Result_OK;
                            parametersOut["RefundMoney"] = "0";

                            if (suscriptionType == PaymentSuscryptionType.pstPerTransaction)
                            {
                                List<string> oPerTransactionParameters = new List<string>();

                                oPerTransactionParameters = ConfigurationManager.AppSettings["SuscriptionType2_AddPayMethChargeValue"].ToString().Split(';').ToList();

                                for (int i = 0; i < oPerTransactionParameters.Count; i++)
                                {
                                    if (oPerTransactionParameters[i] == strCurrencyISOCode)
                                    {
                                        parametersOut["curr"] = strCurrencyISOCode;
                                        parametersOut["q"] = Convert.ToInt32(oPerTransactionParameters[i + 1]);
                                        parametersOut["RefundMoney"] = "1";
                                        break;
                                    }

                                }

                                if (parametersOut["curr"].ToString() != strCurrencyISOCode)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    return xmlOut;
                                }


                            }
                            else
                            {

                                parametersOut["curr"] = strCurrencyISOCode;
                                parametersOut["q"] = "0";
                                parametersOut["layout"] = "0";
                                OPERATOR oOperator = customersRepository.GetDefaultOperator();
                                if (oOperator != null) parametersOut["layout"] = oOperator.OPR_FEE_LAYOUT;
                                parametersOut["rechdefvalues_base"] = "";
                                parametersOut["rechdefvalues_fee"] = "";
                                parametersOut["rechdefvalues_vat"] = "";
                                parametersOut["rechdefvalues_subtotal"] = "";
                                parametersOut["rechdefvalues"] = "";
                                parametersOut["val_autamo"] = "";
                                parametersOut["val_autbelow"] = "";

                                decimal dPercVAT1;
                                decimal dPercVAT2;
                                decimal dPercFEE;
                                decimal dPercFEETopped;
                                decimal dFixedFEE;
                                int? iPaymentTypeId = (int)oPaymentMeanType;
                                int? iPaymentSubtypeId = null;

                                if (!customersRepository.GetFinantialParams(strCurrencyISOCode, "", iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.BalanceRecharge,
                                                                            out dPercVAT1, out dPercVAT2, out dPercFEE, out dPercFEETopped, out dFixedFEE))
                                {
                                    rt = ResultType.Result_Error_Generic;
                                    Logger_AddLogMessage(string.Format("GetUserAmountCurrency::Error: Error getting finantial parameters. Result = {0}", rt.ToString()), LogLevels.logERROR);
                                }

                                int iQFEE = 0;
                                decimal dQFEE = 0;
                                int iQVAT = 0;
                                int iQTotal = 0;
                                int iPartialVAT1;
                                int iPartialPercFEE;
                                int iPartialFixedFEE;
                                int iPartialPercFEEVAT;
                                int iPartialFixedFEEVAT;
                                int iQSubTotal;

                                int i = 0;
                                foreach (CURRENCY_RECHARGE_VALUE oRechargeValue in infraestructureRepository
                                                    .getCURRENCY_RECHARGE_VALUEs(iCurrencyId)
                                                    .Where(s => s.CURV_VALUE_TYPE == (int)RechargeValuesTypes.rvt_SignUp)
                                                    .OrderBy(s => s.CURV_VALUE))
                                {
                                    iQTotal = customersRepository.CalculateFEE(oRechargeValue.CURV_VALUE, dPercVAT1, dPercVAT2, dPercFEE, dPercFEETopped, dFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                                    dQFEE = Math.Round(oRechargeValue.CURV_VALUE * dPercFEE, MidpointRounding.AwayFromZero);
                                    if (dPercFEETopped > 0 && iQFEE > dPercFEETopped) dQFEE = dPercFEETopped;
                                    dQFEE += dFixedFEE;
                                    iQFEE = Convert.ToInt32(Math.Round(dQFEE, MidpointRounding.AwayFromZero));

                                    iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                    iQSubTotal = oRechargeValue.CURV_VALUE + iQFEE;

                                    parametersOut["rechdefvalues_base"] += string.Format("<value json:Array='true'>{0}</value>", oRechargeValue.CURV_VALUE);
                                    parametersOut["rechdefvalues_fee"] += string.Format("<value json:Array='true'>{0}</value>", iQFEE);
                                    parametersOut["rechdefvalues_vat"] += string.Format("<value json:Array='true'>{0}</value>", iQVAT);
                                    parametersOut["rechdefvalues_subtotal"] += string.Format("<value json:Array='true'>{0}</value>", iQSubTotal);
                                    parametersOut["rechdefvalues"] += string.Format("<value json:Array='true'>{0}</value>", iQTotal);

                                    if (i == 0)
                                    {

                                        string strCulture = "";


                                        if (parametersIn["lang"] != null)
                                        {
                                            try
                                            {
                                                int iLangIndex = Convert.ToInt32(parametersIn["lang"].ToString());
                                                if (iLangIndex <= UserDeviceLangs.Length)
                                                {
                                                    strCulture = UserDeviceLangs[iLangIndex - 1];
                                                }
                                            }
                                            catch
                                            { }


                                        }

                                        parametersOut["IsServFeeToBeAdded"] = (iQFEE != 0 ? "TRUE" : "FALSE");
                                        parametersOut["IsCCFeeToBeAdded"] = "FALSE";
                                        parametersOut["IsTAXToBeAdded"] = (iQVAT != 0 ? "TRUE" : "FALSE");

                                        if (!string.IsNullOrEmpty(strCulture))
                                        {
                                            parametersOut["ServFeeLbl"] = infraestructureRepository.GetLiteral(oOperator.OPR_SERVICE_FEE_LIT_ID ?? 0, strCulture);
                                            parametersOut["CCFeeLbl"] = infraestructureRepository.GetLiteral(oOperator.OPR_SERVICE_FEECC_LIT_ID ?? 0, strCulture);
                                            parametersOut["TAXLbl"] = infraestructureRepository.GetLiteral(oOperator.OPR_SERVICE_VAT_LIT_ID ?? 0, strCulture);
                                            parametersOut["SubtotalLbl"] = infraestructureRepository.GetLiteral(oOperator.OPR_SERVICE_SUBTOTAL_LIT_ID ?? 0, strCulture);
                                            parametersOut["TOLTALLbl"] = infraestructureRepository.GetLiteral(oOperator.OPR_SERVICE_TOTAL_LIT_ID ?? 0, strCulture);
                                        }
                                    }

                                    i++;
                                }


                                foreach (CURRENCY_RECHARGE_VALUE oRechargeValue in infraestructureRepository
                                                .getCURRENCY_RECHARGE_VALUEs(iCurrencyId)
                                                .Where(s => s.CURV_VALUE_TYPE == (int)RechargeValuesTypes.rvt_AutomaticRecharge)
                                                .OrderBy(s => s.CURV_VALUE))
                                {
                                    parametersOut["val_autamo"] = parametersOut["val_autamo"] + string.Format("<value json:Array='true'>{0}</value>", oRechargeValue.CURV_VALUE);
                                }

                                foreach (CURRENCY_RECHARGE_VALUE oRechargeValue in infraestructureRepository
                                                .getCURRENCY_RECHARGE_VALUEs(iCurrencyId)
                                                .Where(s => s.CURV_VALUE_TYPE == (int)RechargeValuesTypes.rvt_AutomaticRechargeBelow)
                                                .OrderBy(s => s.CURV_VALUE))
                                {
                                    parametersOut["val_autbelow"] = parametersOut["val_autbelow"] + string.Format("<value json:Array='true'>{0}</value>", oRechargeValue.CURV_VALUE);
                                }




                            }


                            xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "rechdefvalues_base", "rechdefvalues_fee", "rechdefvalues_vat", "rechdefvalues_subtotal", "rechdefvalues", "val_autamo", "val_autbelow" });

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("GetUserAmountCurrency::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("GetUserAmountCurrency: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }


                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("GetUserAmountCurrency::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("GetUserAmountCurrency::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

            }

            return xmlOut;
        }



        [WebMethod]
        public string GetUserAmountCurrencyJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("GetUserAmountCurrencyJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = GetUserAmountCurrency(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("GetUserAmountCurrencyJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("GetUserAmountCurrencyJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }





        [WebMethod]
        public string GetSubPayOptions(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("GetSubPayOptions: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    string strCalculatedHash = CalculateHash(strHashString, strHash);

                    if (strCalculatedHash != strHash)
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                        Logger_AddLogMessage(string.Format("GetSubPayOptions::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {


                        string strCulture = "";
                        if (parametersIn["lang"] != null)
                        {
                            try
                            {
                                int iLangIndex = Convert.ToInt32(parametersIn["lang"].ToString());
                                if (iLangIndex <= UserDeviceLangs.Length)
                                {
                                    strCulture = UserDeviceLangs[iLangIndex - 1];
                                }
                            }
                            catch
                            { }
                        }

                        string sAppVersion = "1.0";
                        try
                        {
                            if (parametersIn["appvers"] != null)
                                sAppVersion = parametersIn["appvers"].ToString();
                        }
                        catch
                        {
                        }

                        ulong ulAppVersion = AppUtilities.AppVersion(sAppVersion);

                        int iCountry = -1;
                        try
                        {
                            iCountry = Convert.ToInt32(parametersIn["ccode"].ToString());
                            string strPrefix = infraestructureRepository.GetCountryTelephonePrefix(iCountry);
                            if (strPrefix.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Country_Code);
                                Logger_AddLogMessage(string.Format("GetSubPayOptions::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                        }
                        catch
                        {
                            iCountry = -1;

                            if (ulAppVersion >= _VERSION_2_0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                Logger_AddLogMessage(string.Format("GetSubPayOptions::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                        }

                        parametersOut = new SortedList();
                        parametersOut["r"] = (int)ResultType.Result_OK;

                        decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();
                        if (parametersIn["appcode"] != null)
                        {
                            try
                            {
                                string strAppCode = parametersIn["appcode"].ToString();
                                dSourceApp = geograficAndTariffsRepository.GetSourceApp(strAppCode);
                            }
                            catch { }
                        }

                        if (!GetSubPayOptions(iCountry, ulAppVersion, strCulture, dSourceApp, ref parametersOut))
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                            Logger_AddLogMessage(string.Format("GetSubPayOptions::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            return xmlOut;
                        }


                        xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "subscription_type", "payment_method" });

                        if (xmlOut.Length == 0)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                            Logger_AddLogMessage(string.Format("GetSubPayOptions::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            Logger_AddLogMessage(string.Format("GetSubPayOptions: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("GetSubPayOptions::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("GetSubPayOptions::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }


        [WebMethod]
        public string GetSubPayOptionsJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("GetSubPayOptionsJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = GetSubPayOptions(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("GetSubPayOptionsJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("GetSubPayOptionsJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }


        [WebMethod]
        public string DeleteLicensePlate(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("DeleteLicensePlate: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    if ((parametersIn[ConstantsEntity.PARAMETER_U] == null) ||
                        (parametersIn[ConstantsEntity.PARAMETER_SESSION_ID] == null) ||
                        (parametersIn[ConstantsEntity.PARAMETER_LICENSE] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("DeleteLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {

                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("DeleteLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            rt = GetUserData(ref oUser, parametersIn);




                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("DeleteLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            string sAppVersion = string.Empty;
                            try
                            {
                                if (parametersIn[ConstantsEntity.PARAMETER_APP_VERS] != null)
                                    sAppVersion = parametersIn[ConstantsEntity.PARAMETER_APP_VERS].ToString();
                                else
                                    sAppVersion = parametersIn[ConstantsEntity.PARAMETER_VERS].ToString();
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("DeleteLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            ulong ulAppVersion = AppUtilities.AppVersion(sAppVersion);

                            string sLicense = parametersIn[ConstantsEntity.PARAMETER_LICENSE].ToString();
                            if (string.IsNullOrEmpty(sLicense))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("DeleteLicensePlate::Error: xmlIn={0}, xmlOut={1}, License is NULL", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            //**********************************************************************
                            //Se verifica si la matricula pertenece a un servicio para elimiarlo.
                            //**********************************************************************
                            USER_PLATE oUserPlate = null;
                            try
                            {
                                customersRepository.GetPlateFromUser(ref oUser, sLicense, out oUserPlate);
                            }
                            catch //(Exception ex)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("DeleteLicensePlate::Error:customersRepository.GetPlateFromUser xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            string sCity = String.Empty;
                            DateTime? dtNow = DateTime.Now;
                            decimal? dInsId = null;

                            if (ulAppVersion >= _VERSION_3_5)
                            {
                                if (parametersIn.ContainsKey(ConstantsEntity.PARAMETER_CITY_ID) && !string.IsNullOrEmpty(parametersIn[ConstantsEntity.PARAMETER_CITY_ID].ToString()))
                                {
                                    sCity = parametersIn[ConstantsEntity.PARAMETER_CITY_ID].ToString();
                                    dInsId = Helpers.ValidateStringToDecimal(sCity);
                                }
                                else
                                {
                                    dInsId = (oUser.INSTALLATION != null ? (decimal?)oUser.INSTALLATION.INS_ID : null);
                                }

                                if (dInsId.HasValue)
                                {
                                    dtNow = geograficAndTariffsRepository.getInstallationDateTime(dInsId.Value);
                                }
                            }

                            //SERVICES_USER_PLATE oServicesUserPlate=null;
                            //if(oUserPlate!=null)
                            //{
                            //    customersRepository.IsServicePlateOfUser(oUser, sLicense, out oServicesUserPlate, (dInsId.HasValue ? dInsId.Value : oUser.INSTALLATION.INS_ID));
                            //}

                            bool bRet = customersRepository.DeletePlate(ref oUser, sLicense);
                            //if (bRet && oServicesUserPlate!=null && oUserPlate!=null)
                            //{
                            //    customersRepository.DeleteForceServicePlate(oUserPlate, sLicense, dtNow);
                            //}


                            if (ulAppVersion >= _VERSION_3_5)
                            {
                                List<USERS_FAVOURITES_AREA> oFavouriteAreas = null;
                                bool bRes = customersRepository.GetFavouriteAreasFromUser(ref oUser, null, out oFavouriteAreas);
                                if (bRet && bRes && oFavouriteAreas != null && oFavouriteAreas.Count > 0)
                                {

                                    foreach (USERS_FAVOURITES_AREA ofa in oFavouriteAreas)
                                    {
                                        if (ofa.USRA_PLATE.Equals(sLicense))
                                        {
                                            customersRepository.DeleteFavouriteAreasFromUser(ref oUser, ofa);
                                        }
                                    }


                                }
                            }

                            if (bRet && oUserPlate != null)
                            {
                                customersRepository.DeleteForceServicePlate(oUserPlate, sLicense, dtNow);
                            }


                            parametersOut = new SortedList();
                            if (bRet)
                                parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                            else
                                parametersOut["r"] = "0";

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("DeleteLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("DeleteLicensePlate: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                            oUser = null;
                        }
                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("DeleteLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("DeleteLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }


        [WebMethod]
        public string DeleteLicensePlateJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("DeleteLicensePlateJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = DeleteLicensePlate(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("DeleteLicensePlateJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("DeleteLicensePlateJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string AddLicensePlate(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("AddLicensePlate: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["license"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("AddLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {

                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("AddLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            rt = GetUserData(ref oUser, parametersIn);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("AddLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            string strPlate = NormalizePlate(parametersIn["license"].ToString());

                            decimal? dInsId = null;
                            if (parametersIn["cityID"] != null)
                            {
                                try
                                {
                                    decimal dTryInsId = Convert.ToDecimal(parametersIn["cityID"].ToString());
                                    dInsId = dTryInsId;
                                }
                                catch
                                {
                                    dInsId = null;
                                }
                            }

                            if (strPlate.Length > 0)
                            {
                                string strPlateSharing = infraestructureRepository.GetParameterValue("PlateSharing");
                                bool bPlateSharing = true;

                                if (!string.IsNullOrEmpty(strPlateSharing))
                                {
                                    bPlateSharing = (strPlateSharing != "0");
                                }

                                if (!customersRepository.IsPlateOfUser(ref oUser, strPlate))
                                {
                                    if (bPlateSharing || !customersRepository.IsPlateAssignedToAnotherUser(ref oUser, strPlate))
                                    {
                                        if (!customersRepository.AddPlateToUser(ref oUser, strPlate))
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("AddLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                    }
                                    else
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Plate_Is_Assigned_To_Another_User);
                                        Logger_AddLogMessage(string.Format("AddLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;

                                    }
                                }
                            }
                            else
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("AddLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            if (dInsId.HasValue)
                            {
                                INSTALLATION oInstallation = null;
                                DateTime? dtinstDateTime = null;
                                if (geograficAndTariffsRepository.getInstallation(dInsId, null, null,
                                                                             ref oInstallation,
                                                                             ref dtinstDateTime))
                                {
                                    if ((oInstallation.INS_INVALID_PLATE_FORMAT_WARNING ?? 0) == 1 && !string.IsNullOrEmpty(oInstallation.INS_VALID_PLATE_REGEX))
                                    {
                                        System.Text.RegularExpressions.Regex oRegex = new System.Text.RegularExpressions.Regex(oInstallation.INS_VALID_PLATE_REGEX);
                                        System.Text.RegularExpressions.Match oMatch = oRegex.Match(strPlate);
                                        parametersOut["lpwarn"] = (oMatch.Success ? (oMatch.Value == strPlate ? 0 : 1) : 1);
                                    }
                                }
                            }

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("AddLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("AddLicensePlate: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                            oUser = null;
                        }
                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("AddLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("AddLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }


        [WebMethod]
        public string AddLicensePlateJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("AddLicensePlateJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = AddLicensePlate(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("AddLicensePlateJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("AddLicensePlateJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }



        [WebMethod]
        public string GetListOfCities(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("GetListOfCities: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    string strCalculatedHash = CalculateHash(strHashString, strHash);

                    if (strCalculatedHash != strHash)
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                        Logger_AddLogMessage(string.Format("GetListOfCities::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {

                        decimal? dLatitude = null;
                        decimal? dLongitude = null;

                        NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                        numberFormatProvider.NumberDecimalSeparator = ".";

                        string sValue = "";

                        try
                        {
                            sValue = parametersIn["gps_lat"].ToString();
                            if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                            decimal dTryLatitude = Convert.ToDecimal(parametersIn["gps_lat"].ToString(), numberFormatProvider);
                            dLatitude = dTryLatitude;
                        }
                        catch
                        {
                            dLatitude = null;
                        }

                        try
                        {
                            sValue = parametersIn["gps_long"].ToString();
                            if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                            decimal dTryLongitude = Convert.ToDecimal(parametersIn["gps_long"].ToString(), numberFormatProvider);
                            dLongitude = dTryLongitude;
                        }
                        catch
                        {
                            dLongitude = null;
                        }

                        var installations = geograficAndTariffsRepository.getInstallationsList();
                        INSTALLATION oGpsInstallation = null;
                        DateTime? dInsDatetime = null;
                        if (!geograficAndTariffsRepository.getInstallation(null, dLatitude, dLongitude, ref oGpsInstallation, ref dInsDatetime))
                        {
                            oGpsInstallation = null;
                        }
                        else
                        {
                            Logger_AddLogMessage(string.Format("GetListOfCities::GPS Installation Found: {0}", oGpsInstallation.INS_DESCRIPTION), LogLevels.logDEBUG);
                        }

                        parametersOut = new SortedList();
                        parametersOut["r"] = (int)ResultType.Result_OK;

                        parametersOut["cities"] = "";
                        foreach (INSTALLATION oInstallation in installations)
                        {
                            parametersOut["cities"] += string.Format("<city json:Array='true' id=\"{0}\">{1}</city>", Convert.ToInt64(oInstallation.INS_ID), oInstallation.INS_DESCRIPTION);
                        }

                        parametersOut["gpscity"] = (oGpsInstallation != null ? Convert.ToInt64(oGpsInstallation.INS_ID).ToString() : "-1");
                        parametersOut["ccode"] = (oGpsInstallation != null ? Convert.ToInt64(oGpsInstallation.COUNTRy.COU_ID).ToString() : "-1");
                        //parametersOut["gpscity"] = "-1";

                        string strIsGPSMandatory = infraestructureRepository.GetParameterValue("GetListOfCities_isGPSMandatory");
                        string strLoginAccuracy = infraestructureRepository.GetParameterValue("GetListOfCities_LoginAccuracy");
                        string strGPSLoginTimeout = infraestructureRepository.GetParameterValue("GetListOfCities_GPSLoginTimeout");
                        string strComboCityCrit = infraestructureRepository.GetParameterValue("GetListOfCities_ComboCityCrit");


                        if (!string.IsNullOrEmpty(strIsGPSMandatory))
                            parametersOut["isGPSMandatory"] = strIsGPSMandatory;
                        if (!string.IsNullOrEmpty(strLoginAccuracy))
                            parametersOut["LoginAccuracy"] = strLoginAccuracy;
                        if (!string.IsNullOrEmpty(strGPSLoginTimeout))
                            parametersOut["GPSLoginTimeout"] = strGPSLoginTimeout;
                        if (!string.IsNullOrEmpty(strComboCityCrit))
                            parametersOut["ComboCityCrit"] = strComboCityCrit;

                        xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "cities" });

                        if (xmlOut.Length == 0)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                            Logger_AddLogMessage(string.Format("GetListOfCities::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            Logger_AddLogMessage(string.Format("GetListOfCities: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                        }
                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("GetListOfCities::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }


            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("GetListOfCities::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }

        [WebMethod]
        public string GetListOfCitiesJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("GetListOfCitiesJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = GetListOfCities(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("GetListOfCitiesJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("GetListOfCitiesJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }



        [WebMethod]
        public string ChangeSubscriptionType(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ChangeSubscriptionType: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["subscription_type"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ChangeSubscriptionType::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {

                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ChangeSubscriptionType::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            rt = GetUserData(ref oUser, parametersIn);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("ChangeSubscriptionType::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            PaymentSuscryptionType? suscriptionType = (PaymentSuscryptionType?)oUser.USR_SUSCRIPTION_TYPE;
                            string sSuscriptionType = "";
                            RefundBalanceType eRefundBalType = RefundBalanceType.rbtAmount;
                            customersRepository.GetUserPossibleSuscriptionTypes(ref oUser, infraestructureRepository, out sSuscriptionType, out eRefundBalType);


                            try
                            {
                                if (((int)PaymentSuscryptionType.pstPrepay).ToString() == sSuscriptionType)
                                {
                                    suscriptionType = PaymentSuscryptionType.pstPrepay;
                                }
                                else if (((int)PaymentSuscryptionType.pstPerTransaction).ToString() == sSuscriptionType)
                                {
                                    suscriptionType = PaymentSuscryptionType.pstPerTransaction;
                                }
                                else
                                {

                                    string sSuscType = parametersIn["subscription_type"] != null ? parametersIn["subscription_type"].ToString() : "";
                                    int iSuscType = -1;

                                    try
                                    {
                                        if (!string.IsNullOrEmpty(sSuscType))
                                        {
                                            iSuscType = Convert.ToInt32(sSuscType);
                                        }
                                    }
                                    catch
                                    {
                                    }

                                    if (iSuscType != -1)
                                    {
                                        suscriptionType = (PaymentSuscryptionType)iSuscType;
                                    }
                                }

                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ChangeSubscriptionType::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }



                            bool bRet = true;
                            if ((PaymentSuscryptionType?)oUser.USR_SUSCRIPTION_TYPE != suscriptionType)
                            {
                                bRet = customersRepository.SetUserSuscriptionType(ref oUser, suscriptionType.Value);
                            }


                            parametersOut = new SortedList();
                            if (bRet)
                                parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                            else
                                parametersOut["r"] = "0";

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ChangeSubscriptionType::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("ChangeSubscriptionType: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                            oUser = null;
                        }
                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ChangeSubscriptionType::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ChangeSubscriptionType::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }


        [WebMethod]
        public string ChangeSubscriptionTypeJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ChangeSubscriptionTypeJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ChangeSubscriptionType(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ChangeSubscriptionTypeJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ChangeSubscriptionTypeJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }



        [WebMethod]
        public string ChangeSubscriptionTypeInternal(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ChangeSubscriptionTypeInternal: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    if ((parametersIn["u"] == null) ||
                        (parametersIn["subscription_type"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ChangeSubscriptionTypeInternal::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {

                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ChangeSubscriptionTypeInternal::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            if (!customersRepository.GetUserData(ref oUser, parametersIn["u"].ToString()))
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("ChangeSubscriptionTypeInternal::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            PaymentSuscryptionType? suscriptionType = (PaymentSuscryptionType?)oUser.USR_SUSCRIPTION_TYPE;
                            string sSuscriptionType = "";
                            RefundBalanceType eRefundBalType = RefundBalanceType.rbtAmount;
                            customersRepository.GetUserPossibleSuscriptionTypes(ref oUser, infraestructureRepository, out sSuscriptionType, out eRefundBalType);


                            try
                            {
                                if (((int)PaymentSuscryptionType.pstPrepay).ToString() == sSuscriptionType)
                                {
                                    suscriptionType = PaymentSuscryptionType.pstPrepay;
                                }
                                else if (((int)PaymentSuscryptionType.pstPerTransaction).ToString() == sSuscriptionType)
                                {
                                    suscriptionType = PaymentSuscryptionType.pstPerTransaction;
                                }
                                else
                                {

                                    string sSuscType = parametersIn["ChangeSubscriptionTypeInternal"] != null ? parametersIn["subscription_type"].ToString() : "";
                                    int iSuscType = -1;

                                    try
                                    {
                                        if (!string.IsNullOrEmpty(sSuscType))
                                        {
                                            iSuscType = Convert.ToInt32(sSuscType);
                                        }
                                    }
                                    catch
                                    {
                                    }

                                    if (iSuscType != -1)
                                    {
                                        suscriptionType = (PaymentSuscryptionType)iSuscType;
                                    }
                                }

                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ChangeSubscriptionTypeInternal::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }



                            bool bRet = true;
                            if ((PaymentSuscryptionType?)oUser.USR_SUSCRIPTION_TYPE != suscriptionType)
                            {
                                bRet = customersRepository.SetUserSuscriptionType(ref oUser, suscriptionType.Value);
                            }


                            parametersOut = new SortedList();
                            if (bRet)
                                parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                            else
                                parametersOut["r"] = "0";

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ChangeSubscriptionTypeInternal::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("ChangeSubscriptionTypeInternal: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                            oUser = null;
                        }
                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ChangeSubscriptionType::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ChangeSubscriptionTypeInternal::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }


        [WebMethod]
        public string ChangeSubscriptionTypeInternalJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ChangeSubscriptionTypeJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ChangeSubscriptionTypeInternal(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ChangeSubscriptionTypeJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ChangeSubscriptionTypeInternalJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }





        [WebMethod]
        public string GetSplashCarrousel(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("GetSplashCarrousel: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    string strCalculatedHash = CalculateHash(strHashString, strHash);

                    if (strCalculatedHash != strHash)
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                        Logger_AddLogMessage(string.Format("GetSplashCarrousel::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {

                        int? ikeynotevers = null;
                        int? ilang = null;

                        NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                        numberFormatProvider.NumberDecimalSeparator = ".";

                        string sValue = "";

                        try
                        {
                            sValue = parametersIn["keynoteVers"].ToString();
                            if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                            int iTrykeynotevers = Convert.ToInt32(parametersIn["keynoteVers"].ToString(), numberFormatProvider);
                            ikeynotevers = iTrykeynotevers;
                        }
                        catch
                        {
                            ikeynotevers = 0;
                        }

                        string strCulture = "en-US";

                        try
                        {
                            sValue = parametersIn["lang"].ToString();
                            if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                            int iTrylang = Convert.ToInt32(parametersIn["lang"].ToString(), numberFormatProvider);
                            ilang = iTrylang;

                            if (ilang <= UserDeviceLangs.Length)
                            {
                                strCulture = UserDeviceLangs[ilang.Value - 1];
                            }

                        }
                        catch
                        {
                            ilang = 1;
                        }


                        decimal? dLatitude = null;
                        decimal? dLongitude = null;

                        try
                        {
                            sValue = parametersIn["gps_lat"].ToString();
                            if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                            decimal dTryLatitude = Convert.ToDecimal(parametersIn["gps_lat"].ToString(), numberFormatProvider);
                            dLatitude = dTryLatitude;
                        }
                        catch
                        {
                            dLatitude = null;
                        }

                        try
                        {
                            sValue = parametersIn["gps_long"].ToString();
                            if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                            decimal dTryLongitude = Convert.ToDecimal(parametersIn["gps_long"].ToString(), numberFormatProvider);
                            dLongitude = dTryLongitude;
                        }
                        catch
                        {
                            dLongitude = null;
                        }


                        string sAppVersion = "";
                        try
                        {
                            if (parametersIn["appvers"] != null)
                                sAppVersion = parametersIn["appvers"].ToString();
                            else
                                sAppVersion = parametersIn["vers"].ToString();
                        }
                        catch
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                            Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            return xmlOut;
                        }
                        if (!CheckVersionFormat(sAppVersion))
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                            Logger_AddLogMessage(string.Format("QueryLoginCity::Error: Invalid app version format: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            return xmlOut;
                        }

                        ulong ulAppVersion = AppUtilities.AppVersion(sAppVersion);

                        CARROUSEL_SCREEN_VERSION oCarrouselVersion = null;

                        decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();
                        if (parametersIn["appcode"] != null)
                        {
                            try
                            {
                                string strAppCode = parametersIn["appcode"].ToString();
                                dSourceApp = geograficAndTariffsRepository.GetSourceApp(strAppCode);
                            }
                            catch { }
                        }


                        if (infraestructureRepository.getCarrouselVersion(ikeynotevers.Value, ilang.Value, dSourceApp, out oCarrouselVersion))
                        {

                            parametersOut = new SortedList();

                            var installations = geograficAndTariffsRepository.getInstallationsList();
                            INSTALLATION oGpsInstallation = null;
                            DateTime? dInsDatetime = null;
                            if (!geograficAndTariffsRepository.getInstallation(null, dLatitude, dLongitude, ref oGpsInstallation, ref dInsDatetime))
                            {
                                oGpsInstallation = null;
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("GetSplashCarrousel::GPS Installation Found: {0}", oGpsInstallation.INS_DESCRIPTION), LogLevels.logDEBUG);
                            }

                            parametersOut["gpscity"] = (oGpsInstallation != null ? Convert.ToInt64(oGpsInstallation.INS_ID).ToString() : "-1");
                            parametersOut["ccode"] = (oGpsInstallation != null ? Convert.ToInt64(oGpsInstallation.COUNTRy.COU_ID).ToString() : "-1");

                            parametersOut["r"] = (int)ResultType.Result_OK;
                            parametersOut["keynoteVers"] = ikeynotevers;

                            if (oCarrouselVersion != null)
                            {
                                parametersOut["keynoteVers"] = oCarrouselVersion.CASCV_VERSION_NUMBER;
                                parametersOut["delay"] = oCarrouselVersion.CASCV_DELAY_BETWEEN_IMAGES;
                                parametersOut["images"] = "";


                                foreach (CARRAUSEL_SCREEN oImage in oCarrouselVersion.CARRAUSEL_SCREENs.OrderBy(r => r.CASCR_ORDER))
                                {
                                    parametersOut["images"] += "<image json:Array='true'>";
                                    parametersOut["images"] += string.Format("<url>{0}</url>", oImage.CASCR_URL);
                                    parametersOut["images"] += string.Format("<android_url>{0}</android_url>", oImage.CASCR_ANDROID_URL);
                                    parametersOut["images"] += string.Format("<title>{0}</title>", oImage.CASCR_TITLE);
                                    parametersOut["images"] += string.Format("<text>{0}</text>", oImage.CASCR_TEXT);
                                    parametersOut["images"] += string.Format("<bgColorDown>{0}</bgColorDown>", oImage.CASCR_BGCOLORDOWN);
                                    parametersOut["images"] += string.Format("<bgColorUp>{0}</bgColorUp>", oImage.CASCR_BGCOLORUP);
                                    parametersOut["images"] += "</image>";
                                }


                            }

                            string sLicenseTermsVersion = "";
                            string sLicenseTermsUrl = "";
                            string sConditionsUrl = "";
                            customersRepository.NeedDisplayLicenseTerms(null, strCulture, out sLicenseTermsVersion, out sLicenseTermsUrl, out sConditionsUrl);
                            parametersOut["legaltermsver"] = sLicenseTermsVersion;
                            parametersOut["url1"] = sLicenseTermsUrl;
                            parametersOut["url2"] = sConditionsUrl;


                            if (ulAppVersion >= _VERSION_2_6)
                            {

                                if ((parametersIn["InsVersion"] != null) &&
                                    (parametersIn["InsGeomVersion"] != null))
                                {

                                    MobileOS oMobileOS = MobileOS.Android;
                                    try
                                    {
                                        int iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                        oMobileOS = (MobileOS)iOSID;
                                    }
                                    catch
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("GetSplashCarrousel::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    long lCurrVersion = -1;

                                    try
                                    {
                                        lCurrVersion = Convert.ToInt64(parametersIn["InsVersion"].ToString());
                                        string strInsXML = GetInstallationsSync(lCurrVersion);
                                        parametersOut["InsSync"] = strInsXML;
                                    }
                                    catch { }


                                    lCurrVersion = -1;

                                    try
                                    {
                                        lCurrVersion = Convert.ToInt64(parametersIn["InsGeomVersion"].ToString());
                                        string strInsGeomXML = GetInstallationsGeometrySync(lCurrVersion, oMobileOS, sAppVersion);
                                        parametersOut["InsGeomSync"] = strInsGeomXML;

                                    }
                                    catch { }
                                }
                            }


                            xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "images", "InsSync", "InsGeomSync" });

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("GetSplashCarrousel::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("GetSplashCarrousel: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }


                        }
                        else
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                            Logger_AddLogMessage(string.Format("GetSplashCarrousel::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }


                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("GetSplashCarrousel::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }


            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("GetSplashCarrousel::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }

        [WebMethod]
        public string GetSplashCarrouselJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("GetSplashCarrouselJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = GetSplashCarrousel(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("GetSplashCarrouselJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("GetSplashCarrouselJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }



        [WebMethod]
        public string GetInstallationsDataMovements(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("GetInstallationsDataMovements: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    string strCalculatedHash = CalculateHash(strHashString, strHash);

                    if (strCalculatedHash != strHash)
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                        Logger_AddLogMessage(string.Format("GetInstallationsDataMovements::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string sAppVersion = "";
                        try
                        {
                            if (parametersIn["appvers"] != null)
                                sAppVersion = parametersIn["appvers"].ToString();
                            else
                                sAppVersion = parametersIn["vers"].ToString();
                        }
                        catch
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                            Logger_AddLogMessage(string.Format("GetInstallationsDataMovements::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            return xmlOut;
                        }
                        if (!CheckVersionFormat(sAppVersion))
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                            Logger_AddLogMessage(string.Format("GetInstallationsDataMovements::Error: Invalid app version format: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            return xmlOut;
                        }

                        ulong ulAppVersion = AppUtilities.AppVersion(sAppVersion);

                        if (ulAppVersion >= _VERSION_2_6)
                        {

                            if ((parametersIn["InsVersion"] == null) ||
                                (parametersIn["InsGeomVersion"] == null))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                Logger_AddLogMessage(string.Format("GetInstallationsDataMovements::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }
                        }

                        parametersOut = new SortedList();
                        parametersOut["r"] = (int)ResultType.Result_OK;

                        if (ulAppVersion >= _VERSION_2_6)
                        {
                            MobileOS oMobileOS = MobileOS.Android;
                            try
                            {
                                int iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                oMobileOS = (MobileOS)iOSID;
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("GetInstallationsDataMovements::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            long lCurrVersion = -1;
                            if (parametersIn["InsVersion"] != null)
                            {
                                try
                                {
                                    lCurrVersion = Convert.ToInt64(parametersIn["InsVersion"].ToString());
                                }
                                catch { }
                            }

                            string strInsXML = GetInstallationsSync(lCurrVersion);


                            lCurrVersion = -1;
                            if (parametersIn["InsGeomVersion"] != null)
                            {
                                try
                                {
                                    lCurrVersion = Convert.ToInt64(parametersIn["InsGeomVersion"].ToString());
                                }
                                catch { }
                            }

                            string strInsGeomXML = GetInstallationsGeometrySync(lCurrVersion, oMobileOS, sAppVersion);


                            parametersOut["InsSync"] = strInsXML;
                            parametersOut["InsGeomSync"] = strInsGeomXML;
                        }


                        xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "InsSync", "InsGeomSync" });

                        if (xmlOut.Length == 0)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                            Logger_AddLogMessage(string.Format("GetInstallationsDataMovements::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            string trcMsg = PrettyXml(xmlOut);
                            if (trcMsg.Length > 1000)
                            {
                                StringBuilder sb = new StringBuilder(trcMsg, 0, 1000, 1200);
                                sb.Append("\r\n...");
                                sb.Append("\r\n---------------------------------------------------------------------------");
                                sb.Append("\r\n...");
                                Logger_AddLogMessage(string.Format("GetInstallationsDataMovements: {0}", sb.ToString()), LogLevels.logINFO);


                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("GetInstallationsDataMovements: xmlOut={0}", trcMsg), LogLevels.logINFO);
                            }
                        }
                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("GetInstallationsDataMovements::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }


            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("GetInstallationsDataMovements::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }

        [WebMethod]
        public string GetInstallationsDataMovementsJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("GetInstallationsDataMovementsJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = GetInstallationsDataMovements(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("GetInstallationsDataMovementsJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("GetInstallationsDataMovementsJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }




        [WebMethod]
        public string QueryOccupation(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("QueryOccupation: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["cityID"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("DeleteLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {

                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("QueryOccupation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            rt = GetUserData(ref oUser, parametersIn);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryOccupation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            decimal? dInstallationId = null;

                            try
                            {
                                decimal dTryInstallationId = Convert.ToDecimal(parametersIn["cityID"].ToString());
                                dInstallationId = dTryInstallationId;
                            }
                            catch
                            {
                                dInstallationId = null;
                            }

                            MobileOS oMobileOS = MobileOS.Android;
                            try
                            {
                                int iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                oMobileOS = (MobileOS)iOSID;
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryOccupation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            IEnumerable<stZone> zones = null;
                            if (dInstallationId.HasValue)
                                zones = geograficAndTariffsRepository.getInstallationGroupHierarchy(dInstallationId.Value, new List<GroupType>() { GroupType.OnStreetZone, GroupType.OnStreetLot }, null, (oMobileOS == MobileOS.iOS || oMobileOS == MobileOS.Android));



                            parametersOut = new SortedList();
                            parametersOut["r"] = (int)ResultType.Result_OK;

                            parametersOut["ZoneOcup"] = GetOccupationXml(zones, "zone");

                            xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "ZoneOcup" });

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryOccupation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("QueryOccupation: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                            oUser = null;
                        }
                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryOccupation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }


            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryOccupation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }


        [WebMethod]
        public string QueryOccupationJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("QueryOccupationJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryOccupation(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("QueryOccupationJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryOccupationJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }





        [WebMethod]
        public string ModifyCCData(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ModifyCCData: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    PaymentMeanCreditCardProviderType CCProvider;

                    try
                    {
                        int iCCProvider = Convert.ToInt32(parametersIn["ccprovider"].ToString());
                        CCProvider = (PaymentMeanCreditCardProviderType)iCCProvider;
                    }
                    catch
                    {
                        Logger_AddLogMessage(string.Format("ModifyCCData::Invalid ccprovider. Setting to 1(Credit Call)"), LogLevels.logDEBUG); ;
                        CCProvider = PaymentMeanCreditCardProviderType.pmccpCreditCall;
                    }


                    if (((CCProvider == PaymentMeanCreditCardProviderType.pmccpCreditCall) &&
                                ((parametersIn["ekashu_transaction_id"] == null) ||
                                (parametersIn["ekashu_reference"] == null) ||
                                (parametersIn["ekashu_auth_code"] == null) ||
                                (parametersIn["ekashu_auth_result"] == null) ||
                                (parametersIn["ekashu_card_hash"] == null) ||
                                (parametersIn["ekashu_card_reference"] == null) ||
                                (parametersIn["ekashu_card_scheme"] == null) ||
                                (parametersIn["ekashu_date_time_local_fmt"] == null) ||
                                (parametersIn["ekashu_masked_card_number"] == null) ||
                                (parametersIn["ekashu_expires_end_month"] == null) ||
                                (parametersIn["ekashu_expires_end_year"] == null))) ||
                        ((CCProvider == PaymentMeanCreditCardProviderType.pmccpIECISA) &&
                                ((parametersIn["iecisa_CF_TicketNumber"] == null) ||
                                (parametersIn["iecisa_CF_AuthCode"] == null) ||
                                (parametersIn["iecisa_CF_Result"] == null) ||
                                (parametersIn["iecisa_CF_TransactionID"] == null) ||
                                (parametersIn["iecisa_TransactionID"] == null) ||
                                (parametersIn["iecisa_CF_Token"] == null) ||
                                (parametersIn["iecisa_CF_CardHash"] == null) ||
                                (parametersIn["iecisa_CF_PAN"] == null) ||
                                (parametersIn["iecisa_GatewayDate"] == null) ||
                                (parametersIn["iecisa_CF_ExpirationDate"] == null))) ||
                        ((CCProvider == PaymentMeanCreditCardProviderType.pmccpStripe) &&
                                ((parametersIn["stripe_customer_id"] == null) ||
                                (parametersIn["stripe_card_reference"] == null) ||
                                (parametersIn["stripe_card_scheme"] == null) ||
                                (parametersIn["stripe_masked_card_number"] == null) ||
                                (parametersIn["stripe_expires_end_month"] == null) ||
                                (parametersIn["stripe_expires_end_year"] == null) ||
                                (parametersIn["stripe_transaction_id"] == null) ||
                                (parametersIn["stripe_date_time_utc"] == null))) ||
                        ((CCProvider == PaymentMeanCreditCardProviderType.pmccpMoneris) &&
                                ((parametersIn["moneris_transaction_id"] == null) ||
                                (parametersIn["moneris_reference"] == null) ||
                                (parametersIn["moneris_auth_code"] == null) ||
                                (parametersIn["moneris_auth_result"] == null) ||
                                (parametersIn["moneris_card_hash"] == null) ||
                                (parametersIn["moneris_card_reference"] == null) ||
                                (parametersIn["moneris_card_scheme"] == null) ||
                                (parametersIn["moneris_date_time_local_fmt"] == null) ||
                                (parametersIn["moneris_masked_card_number"] == null) ||
                                (parametersIn["moneris_expires_end_month"] == null) ||
                                (parametersIn["moneris_expires_end_year"] == null))) ||
                        ((CCProvider == PaymentMeanCreditCardProviderType.pmccpPayu) &&
                                ((parametersIn["payu_transaction_id"] == null) ||
                                (parametersIn["payu_reference"] == null) ||
                                (parametersIn["payu_auth_code"] == null) ||
                                (parametersIn["payu_card_hash"] == null) ||
                                (parametersIn["payu_card_reference"] == null) ||
                                (parametersIn["payu_card_scheme"] == null) ||
                                (parametersIn["payu_date_time_local_fmt"] == null) ||
                                //(parametersIn["payu_name"] == null) ||
                                //(parametersIn["payu_document_id"] == null) ||
                                (parametersIn["payu_masked_card_number"] == null))) ||
                        ((CCProvider == PaymentMeanCreditCardProviderType.pmccpTransbank) &&
                                ((parametersIn["transbank_card_hash"] == null) ||
                                (parametersIn["transbank_card_reference"] == null) ||
                                (parametersIn["transbank_card_scheme"] == null) ||
                                (parametersIn["transbank_masked_card_number"] == null))) ||
                        ((CCProvider == PaymentMeanCreditCardProviderType.pmccpBSRedsys) &&
                                ((parametersIn["bsredsys_transaction_id"] == null) ||
                                (parametersIn["bsredsys_reference"] == null) ||
                                //(parametersIn["bsredsys_auth_code"] == null) ||
                                //(parametersIn["bsredsys_auth_result"] == null) ||
                                (parametersIn["bsredsys_card_hash"] == null) ||
                                (parametersIn["bsredsys_card_reference"] == null) ||
                                //(parametersIn["bsredsys_card_scheme"] == null) ||
                                (parametersIn["bsredsys_date_time_local_fmt"] == null) ||
                                (parametersIn["bsredsys_masked_card_number"] == null) ||
                                (parametersIn["bsredsys_expires_end_month"] == null) ||
                                (parametersIn["bsredsys_expires_end_year"] == null))) ||
                        ((CCProvider == PaymentMeanCreditCardProviderType.pmccpPaysafe) &&
                                ((parametersIn["paysafe_transaction_id"] == null) ||
                                (parametersIn["paysafe_reference"] == null) ||
                                //(parametersIn["paysafe_auth_code"] == null) ||
                                //(parametersIn["paysafe_auth_result"] == null) ||
                                (parametersIn["paysafe_card_hash"] == null) ||
                                (parametersIn["paysafe_card_reference"] == null) ||
                                //(parametersIn["paysafe_card_scheme"] == null) ||
                                (parametersIn["paysafe_date_time_local_fmt"] == null) ||
                                (parametersIn["paysafe_masked_card_number"] == null) ||
                                (parametersIn["paysafe_expires_end_month"] == null) ||
                                (parametersIn["paysafe_expires_end_year"] == null))) ||
                          ((CCProvider == PaymentMeanCreditCardProviderType.pmccpMercadoPago) &&                              
                                ((parametersIn["mercadopago_card_hash"] == null) ||
                                (parametersIn["mercadopago_card_reference"] == null) ||
                                (parametersIn["mercadopago_card_scheme"] == null) ||
                                (parametersIn["mercadopago_card_type"] == null) ||
                                (parametersIn["mercadopago_masked_card_number"] == null) ||
                                (parametersIn["mercadopago_expires_end_month"] == null) ||
                                (parametersIn["mercadopago_expires_end_year"] == null) ||
                                (parametersIn["mercadopago_date_time_local_fmt"] == null) ||
                                (parametersIn["mercadopago_reference"] == null) ||
                                (parametersIn["mercadopago_transaction_id"] == null) ||
                                (parametersIn["mercadopago_document_id"] == null) ||
                                (parametersIn["mercadopago_document_type"] == null) ||
                                (parametersIn["mercadopago_installaments"] == null) ||
                                (parametersIn["mercadopago_cvv_length"] == null))) ||
                        (parametersIn["ccchargedquantity"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();

                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion, ref dSourceApp);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            ulong ulAppVersion = AppUtilities.AppVersion(strAppVersion);

                            if ((CCProvider == PaymentMeanCreditCardProviderType.pmccpPayu) && (parametersIn["payu_cvc"] == null) && (ulAppVersion >= _VERSION_2_7_2))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }

                            PaymentSuscryptionType? suscriptionType = (PaymentSuscryptionType?)oUser.USR_SUSCRIPTION_TYPE;

                            INSTALLATION oInstallation = null;
                            DateTime? dtInsDateTime = null;
                            bool bValidCurrency = false;
                            if (!geograficAndTariffsRepository.getInstallation(dInsId, null, null, oUser.USR_CUR_ID, ref oInstallation, ref dtInsDateTime, out bValidCurrency))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_City);
                                Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            else if (!bValidCurrency)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Incompatible_City_With_UserCurrency);
                                Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            if (oInstallation.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG == null)
                            {

                                string sSuscriptionType = "";
                                RefundBalanceType eRefundBalType = RefundBalanceType.rbtAmount;
                                customersRepository.GetUserPossibleSuscriptionTypes(ref oUser, infraestructureRepository, out sSuscriptionType, out eRefundBalType);

                                try
                                {

                                    if (((int)PaymentSuscryptionType.pstPrepay).ToString() == sSuscriptionType)
                                    {
                                        suscriptionType = PaymentSuscryptionType.pstPrepay;
                                    }
                                    else if (((int)PaymentSuscryptionType.pstPerTransaction).ToString() == sSuscriptionType)
                                    {
                                        suscriptionType = PaymentSuscryptionType.pstPerTransaction;
                                    }
                                    else
                                    {

                                        string sSuscType = parametersIn["subscription_type"] != null ? parametersIn["subscription_type"].ToString() : "";
                                        int iSuscType = -1;

                                        try
                                        {
                                            if (!string.IsNullOrEmpty(sSuscType))
                                            {
                                                iSuscType = Convert.ToInt32(sSuscType);
                                            }
                                        }
                                        catch
                                        {
                                        }

                                        if (iSuscType != -1)
                                        {
                                            suscriptionType = (PaymentSuscryptionType)iSuscType;
                                        }
                                    }

                                }
                                catch
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                if (!suscriptionType.HasValue)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_User_Has_no_Suscription_Type);
                                    Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                            }
                            else
                            {
                                suscriptionType = PaymentSuscryptionType.pstPerTransaction;
                            }

                            xmlOut = ModifyCCData(xmlIn, parametersIn, CCProvider, PaymentMeanRechargeCreationType.pmrctChangePaymentMeanRecharge, suscriptionType, oInstallation,
                                                    oInstallation.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG, dSourceApp, ref oUser, ref parametersOut);

                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string ModifyCCDataJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ModifyCCData(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ModifyCCDataJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }



        [WebMethod]
        public string ModifyCCDataNewUser(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";
                decimal couID = -1;

                bool bContainsCountryRedirection = (xmlIn.Contains(TAG_COUNTRIES_REDIRECTIONS) ? true : false);

                if (bContainsCountryRedirection)
                {
                    xmlIn = RemoveNodeXML(xmlIn, TAG_COUNTRIES_REDIRECTIONS);
                }


                if (ValidServerExternal(xmlIn, ref couID) && !bContainsCountryRedirection)
                {
                    try
                    {
                        COUNTRIES_REDIRECTION oCountriesRedirections = FindCountriesRedirections(-1, Convert.ToInt32(couID));
                        //ExternalIntegraMobileWS.integraMobileWS oExternalIntegraMobileWS = StarExternalIntegraMobileWS(oCountriesRedirections);
                        xmlIn = AddNodeXML(xmlIn, TAG_COUNTRIES_REDIRECTIONS, oCountriesRedirections.COURE_COUNTRY_REDIRECTION_WS_URL);
                        //xmlOut = oExternalIntegraMobileWS.ModifyCCDataNewUser(xmlIn);
                    }
                    catch (Exception)
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ModifyCCDataNewUser::oExternalIntegraMobileWS::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                }
                else
                {
                    Logger_AddLogMessage(string.Format("ModifyCCDataNewUser: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                    ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                    if (rt == ResultType.Result_OK)
                    {

                        PaymentMeanCreditCardProviderType CCProvider;

                        try
                        {
                            int iCCProvider = Convert.ToInt32(parametersIn["ccprovider"].ToString());
                            CCProvider = (PaymentMeanCreditCardProviderType)iCCProvider;
                        }
                        catch
                        {
                            Logger_AddLogMessage(string.Format("ModifyCCDataNewUser::Invalid ccprovider. Setting to 1(Credit Call)"), LogLevels.logDEBUG); ;
                            CCProvider = PaymentMeanCreditCardProviderType.pmccpCreditCall;
                        }


                        if (((CCProvider == PaymentMeanCreditCardProviderType.pmccpCreditCall) &&
                                    ((parametersIn["ekashu_transaction_id"] == null) ||
                                    (parametersIn["ekashu_reference"] == null) ||
                                    (parametersIn["ekashu_auth_code"] == null) ||
                                    (parametersIn["ekashu_auth_result"] == null) ||
                                    (parametersIn["ekashu_card_hash"] == null) ||
                                    (parametersIn["ekashu_card_reference"] == null) ||
                                    (parametersIn["ekashu_card_scheme"] == null) ||
                                    (parametersIn["ekashu_date_time_local_fmt"] == null) ||
                                    (parametersIn["ekashu_masked_card_number"] == null) ||
                                    (parametersIn["ekashu_expires_end_month"] == null) ||
                                    (parametersIn["ekashu_expires_end_year"] == null))) ||
                            ((CCProvider == PaymentMeanCreditCardProviderType.pmccpIECISA) &&
                                    ((parametersIn["iecisa_CF_TicketNumber"] == null) ||
                                    (parametersIn["iecisa_CF_AuthCode"] == null) ||
                                    (parametersIn["iecisa_CF_Result"] == null) ||
                                    (parametersIn["iecisa_CF_TransactionID"] == null) ||
                                    (parametersIn["iecisa_TransactionID"] == null) ||
                                    (parametersIn["iecisa_CF_Token"] == null) ||
                                    (parametersIn["iecisa_CF_CardHash"] == null) ||
                                    (parametersIn["iecisa_CF_PAN"] == null) ||
                                    (parametersIn["iecisa_GatewayDate"] == null) ||
                                    (parametersIn["iecisa_CF_ExpirationDate"] == null))) ||
                            ((CCProvider == PaymentMeanCreditCardProviderType.pmccpStripe) &&
                                    ((parametersIn["stripe_customer_id"] == null) ||
                                    (parametersIn["stripe_card_reference"] == null) ||
                                    (parametersIn["stripe_card_scheme"] == null) ||
                                    (parametersIn["stripe_masked_card_number"] == null) ||
                                    (parametersIn["stripe_expires_end_month"] == null) ||
                                    (parametersIn["stripe_expires_end_year"] == null) ||
                                    (parametersIn["stripe_transaction_id"] == null) ||
                                    (parametersIn["stripe_date_time_utc"] == null))) ||
                            ((CCProvider == PaymentMeanCreditCardProviderType.pmccpMoneris) &&
                                    ((parametersIn["moneris_transaction_id"] == null) ||
                                    (parametersIn["moneris_reference"] == null) ||
                                    (parametersIn["moneris_auth_code"] == null) ||
                                    (parametersIn["moneris_auth_result"] == null) ||
                                    (parametersIn["moneris_card_hash"] == null) ||
                                    (parametersIn["moneris_card_reference"] == null) ||
                                    (parametersIn["moneris_card_scheme"] == null) ||
                                    (parametersIn["moneris_date_time_local_fmt"] == null) ||
                                    (parametersIn["moneris_masked_card_number"] == null) ||
                                    (parametersIn["moneris_expires_end_month"] == null) ||
                                    (parametersIn["moneris_expires_end_year"] == null))) ||
                            ((CCProvider == PaymentMeanCreditCardProviderType.pmccpPayu) &&
                                    ((parametersIn["payu_transaction_id"] == null) ||
                                    (parametersIn["payu_reference"] == null) ||
                                    (parametersIn["payu_auth_code"] == null) ||
                                    (parametersIn["payu_card_hash"] == null) ||
                                    (parametersIn["payu_card_reference"] == null) ||
                                    (parametersIn["payu_card_scheme"] == null) ||
                                    (parametersIn["payu_date_time_local_fmt"] == null) ||
                                    //(parametersIn["payu_name"] == null) ||
                                    //(parametersIn["payu_document_id"] == null) ||
                                    (parametersIn["payu_masked_card_number"] == null))) ||
                            ((CCProvider == PaymentMeanCreditCardProviderType.pmccpTransbank) &&
                                    ((parametersIn["transbank_card_hash"] == null) ||
                                    (parametersIn["transbank_card_reference"] == null) ||
                                    (parametersIn["transbank_card_scheme"] == null) ||
                                    (parametersIn["transbank_masked_card_number"] == null))) ||
                            ((CCProvider == PaymentMeanCreditCardProviderType.pmccpBSRedsys) &&
                                    ((parametersIn["bsredsys_transaction_id"] == null) ||
                                    (parametersIn["bsredsys_reference"] == null) ||
                                    //(parametersIn["bsredsys_auth_code"] == null) ||
                                    //(parametersIn["bsredsys_auth_result"] == null) ||
                                    (parametersIn["bsredsys_card_hash"] == null) ||
                                    (parametersIn["bsredsys_card_reference"] == null) ||
                                    //(parametersIn["bsredsys_card_scheme"] == null) ||
                                    (parametersIn["bsredsys_date_time_local_fmt"] == null) ||
                                    (parametersIn["bsredsys_masked_card_number"] == null) ||
                                    (parametersIn["bsredsys_expires_end_month"] == null) ||
                                    (parametersIn["bsredsys_expires_end_year"] == null))) ||
                             ((CCProvider == PaymentMeanCreditCardProviderType.pmccpMercadoPago) &&
                                    ((parametersIn["mercadopago_card_hash"] == null) ||
                                    (parametersIn["mercadopago_card_reference"] == null) ||
                                    (parametersIn["mercadopago_card_scheme"] == null) ||
                                    (parametersIn["mercadopago_card_type"] == null) ||
                                    (parametersIn["mercadopago_masked_card_number"] == null) ||
                                    (parametersIn["mercadopago_expires_end_month"] == null) ||
                                    (parametersIn["mercadopago_expires_end_year"] == null) ||
                                    (parametersIn["mercadopago_date_time_local_fmt"] == null) ||
                                    (parametersIn["mercadopago_reference"] == null) ||
                                    (parametersIn["mercadopago_transaction_id"] == null) ||
                                    (parametersIn["mercadopago_document_id"] == null) ||
                                    (parametersIn["mercadopago_document_type"] == null) ||
                                    (parametersIn["mercadopago_installaments"] == null) ||
                                    (parametersIn["mercadopago_cvv_length"] == null))) ||
                               (parametersIn["signup_guid"] == null) ||
                               (parametersIn["u"] == null) ||
                               (parametersIn["ccchargedquantity"] == null))
                        // TODO: BSRedsys
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                            Logger_AddLogMessage(string.Format("ModifyCCDataNewUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            string strCalculatedHash = CalculateHash(strHashString, strHash);

                            if (strCalculatedHash != strHash)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                                Logger_AddLogMessage(string.Format("ModifyCCDataNewUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {

                                USER oUser = null;

                                if (customersRepository.GetUserData(ref oUser, parametersIn["u"].ToString()))
                                {
                                    string strAppVersion = "";
                                    try
                                    {
                                        if (parametersIn["appvers"] != null)
                                            strAppVersion = parametersIn["appvers"].ToString();

                                    }
                                    catch
                                    {
                                    }


                                    decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();
                                    if (parametersIn["appcode"] != null)
                                    {
                                        try
                                        {
                                            string strAppCode = parametersIn["appcode"].ToString();
                                            dSourceApp = geograficAndTariffsRepository.GetSourceApp(strAppCode);
                                        }
                                        catch { }
                                    }


                                    if (!string.IsNullOrEmpty(strAppVersion))
                                    {
                                        ulong ulAppVersion = AppUtilities.AppVersion(strAppVersion);

                                        if ((CCProvider == PaymentMeanCreditCardProviderType.pmccpPayu) && (parametersIn["payu_cvc"] == null) && (ulAppVersion >= _VERSION_2_7_2))
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                            Logger_AddLogMessage(string.Format("ModifyCCDataNewUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        }
                                    }

                                    if (oUser != null)
                                    {
                                        if (oUser.USR_SIGNUP_GUID == parametersIn["signup_guid"].ToString())
                                        {
                                            PaymentSuscryptionType? suscriptionType = (PaymentSuscryptionType?)oUser.USR_SUSCRIPTION_TYPE;
                                            string sSuscriptionType = "";
                                            RefundBalanceType eRefundBalType = RefundBalanceType.rbtAmount;

                                            customersRepository.GetUserPossibleSuscriptionTypes(ref oUser, infraestructureRepository, out sSuscriptionType, out eRefundBalType);

                                            try
                                            {
                                                if (((int)PaymentSuscryptionType.pstPrepay).ToString() == sSuscriptionType)
                                                {
                                                    suscriptionType = PaymentSuscryptionType.pstPrepay;
                                                }
                                                else if (((int)PaymentSuscryptionType.pstPerTransaction).ToString() == sSuscriptionType)
                                                {
                                                    suscriptionType = PaymentSuscryptionType.pstPerTransaction;
                                                }
                                                else
                                                {

                                                    string sSuscType = parametersIn["subscription_type"] != null ? parametersIn["subscription_type"].ToString() : "";
                                                    int iSuscType = -1;

                                                    try
                                                    {
                                                        if (!string.IsNullOrEmpty(sSuscType))
                                                        {
                                                            iSuscType = Convert.ToInt32(sSuscType);
                                                        }
                                                    }
                                                    catch
                                                    {
                                                    }

                                                    if (iSuscType != -1)
                                                    {
                                                        suscriptionType = (PaymentSuscryptionType)iSuscType;
                                                    }
                                                }

                                            }
                                            catch
                                            {
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                                Logger_AddLogMessage(string.Format("ModifyCCDataNewUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                return xmlOut;
                                            }

                                            if (!suscriptionType.HasValue)
                                            {
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_User_Has_no_Suscription_Type);
                                                Logger_AddLogMessage(string.Format("ModifyCCDataNewUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                return xmlOut;
                                            }

                                            xmlOut = ModifyCCData(xmlIn, parametersIn, CCProvider, PaymentMeanRechargeCreationType.pmrctUserCreationRecharge, suscriptionType,
                                                                    null, null, dSourceApp, ref oUser, ref parametersOut);
                                            oUser = null;
                                        }
                                        else
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthentication);
                                            Logger_AddLogMessage(string.Format("ModifyCCDataNewUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        }
                                    }
                                    else
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_User);
                                        Logger_AddLogMessage(string.Format("ModifyCCDataNewUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    }
                                }
                                else
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_User);
                                    Logger_AddLogMessage(string.Format("ModifyCCDataNewUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }


                            }

                        }
                    }
                    else
                    {
                        xmlOut = GenerateXMLErrorResult(rt);
                        Logger_AddLogMessage(string.Format("ModifyCCDataNewUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ModifyCCDataNewUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }


        [WebMethod]
        public string ModifyCCDataNewUserJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataNewUserJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ModifyCCDataNewUser(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataNewUserSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ModifyCCDataNewUserJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }


        [WebMethod]
        public string ModifyCCDataInternal(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ModifyCCDataInternal: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    PaymentMeanCreditCardProviderType CCProvider;

                    try
                    {
                        int iCCProvider = Convert.ToInt32(parametersIn["ccprovider"].ToString());
                        CCProvider = (PaymentMeanCreditCardProviderType)iCCProvider;
                    }
                    catch
                    {
                        Logger_AddLogMessage(string.Format("ModifyCCDataInternal::Invalid ccprovider. Setting to 1(Credit Call)"), LogLevels.logDEBUG); ;
                        CCProvider = PaymentMeanCreditCardProviderType.pmccpCreditCall;
                    }


                    if (((CCProvider == PaymentMeanCreditCardProviderType.pmccpCreditCall) &&
                                ((parametersIn["ekashu_transaction_id"] == null) ||
                                (parametersIn["ekashu_reference"] == null) ||
                                (parametersIn["ekashu_auth_code"] == null) ||
                                (parametersIn["ekashu_auth_result"] == null) ||
                                (parametersIn["ekashu_card_hash"] == null) ||
                                (parametersIn["ekashu_card_reference"] == null) ||
                                (parametersIn["ekashu_card_scheme"] == null) ||
                                (parametersIn["ekashu_date_time_local_fmt"] == null) ||
                                (parametersIn["ekashu_masked_card_number"] == null) ||
                                (parametersIn["ekashu_expires_end_month"] == null) ||
                                (parametersIn["ekashu_expires_end_year"] == null))) ||
                        ((CCProvider == PaymentMeanCreditCardProviderType.pmccpIECISA) &&
                                ((parametersIn["iecisa_CF_TicketNumber"] == null) ||
                                (parametersIn["iecisa_CF_AuthCode"] == null) ||
                                (parametersIn["iecisa_CF_Result"] == null) ||
                                (parametersIn["iecisa_CF_TransactionID"] == null) ||
                                (parametersIn["iecisa_TransactionID"] == null) ||
                                (parametersIn["iecisa_CF_Token"] == null) ||
                                (parametersIn["iecisa_CF_CardHash"] == null) ||
                                (parametersIn["iecisa_CF_PAN"] == null) ||
                                (parametersIn["iecisa_GatewayDate"] == null) ||
                                (parametersIn["iecisa_CF_ExpirationDate"] == null))) ||
                        ((CCProvider == PaymentMeanCreditCardProviderType.pmccpStripe) &&
                                ((parametersIn["stripe_customer_id"] == null) ||
                                (parametersIn["stripe_card_reference"] == null) ||
                                (parametersIn["stripe_card_scheme"] == null) ||
                                (parametersIn["stripe_masked_card_number"] == null) ||
                                (parametersIn["stripe_expires_end_month"] == null) ||
                                (parametersIn["stripe_expires_end_year"] == null) ||
                                (parametersIn["stripe_transaction_id"] == null) ||
                                (parametersIn["stripe_date_time_utc"] == null))) ||
                        ((CCProvider == PaymentMeanCreditCardProviderType.pmccpMoneris) &&
                                ((parametersIn["moneris_transaction_id"] == null) ||
                                (parametersIn["moneris_reference"] == null) ||
                                (parametersIn["moneris_auth_code"] == null) ||
                                (parametersIn["moneris_auth_result"] == null) ||
                                (parametersIn["moneris_card_hash"] == null) ||
                                (parametersIn["moneris_card_reference"] == null) ||
                                (parametersIn["moneris_card_scheme"] == null) ||
                                (parametersIn["moneris_date_time_local_fmt"] == null) ||
                                (parametersIn["moneris_masked_card_number"] == null) ||
                                (parametersIn["moneris_expires_end_month"] == null) ||
                                (parametersIn["moneris_expires_end_year"] == null))) ||
                        ((CCProvider == PaymentMeanCreditCardProviderType.pmccpPayu) &&
                                ((parametersIn["payu_transaction_id"] == null) ||
                                (parametersIn["payu_reference"] == null) ||
                                (parametersIn["payu_auth_code"] == null) ||
                                (parametersIn["payu_card_hash"] == null) ||
                                (parametersIn["payu_card_reference"] == null) ||
                                (parametersIn["payu_card_scheme"] == null) ||
                                (parametersIn["payu_date_time_local_fmt"] == null) ||
                                //(parametersIn["payu_name"] == null) ||
                                //(parametersIn["payu_document_id"] == null) ||
                                (parametersIn["payu_masked_card_number"] == null))) ||
                        ((CCProvider == PaymentMeanCreditCardProviderType.pmccpTransbank) &&
                                ((parametersIn["transbank_card_hash"] == null) ||
                                (parametersIn["transbank_card_reference"] == null) ||
                                (parametersIn["transbank_card_scheme"] == null) ||
                                (parametersIn["transbank_masked_card_number"] == null))) ||
                        ((CCProvider == PaymentMeanCreditCardProviderType.pmccpBSRedsys) &&
                                ((parametersIn["bsredsys_transaction_id"] == null) ||
                                (parametersIn["bsredsys_reference"] == null) ||
                                //(parametersIn["bsredsys_auth_code"] == null) ||
                                //(parametersIn["bsredsys_auth_result"] == null) ||
                                (parametersIn["bsredsys_card_hash"] == null) ||
                                (parametersIn["bsredsys_card_reference"] == null) ||
                                //(parametersIn["bsredsys_card_scheme"] == null) ||
                                (parametersIn["bsredsys_date_time_local_fmt"] == null) ||
                                (parametersIn["bsredsys_masked_card_number"] == null) ||
                                (parametersIn["bsredsys_expires_end_month"] == null) ||
                                (parametersIn["bsredsys_expires_end_year"] == null))) ||
                        ((CCProvider == PaymentMeanCreditCardProviderType.pmccpPaysafe) &&
                                ((parametersIn["paysafe_transaction_id"] == null) ||
                                (parametersIn["paysafe_reference"] == null) ||
                                //(parametersIn["paysafe_auth_code"] == null) ||
                                //(parametersIn["paysafe_auth_result"] == null) ||
                                (parametersIn["paysafe_card_hash"] == null) ||
                                (parametersIn["paysafe_card_reference"] == null) ||
                                //(parametersIn["paysafe_card_scheme"] == null) ||
                                (parametersIn["paysafe_date_time_local_fmt"] == null) ||
                                (parametersIn["paysafe_masked_card_number"] == null) ||
                                (parametersIn["paysafe_expires_end_month"] == null) ||
                                (parametersIn["paysafe_expires_end_year"] == null))) ||
                        ((CCProvider == PaymentMeanCreditCardProviderType.pmccpMercadoPago) &&
                                ((parametersIn["mercadopago_card_hash"] == null) ||
                                (parametersIn["mercadopago_card_reference"] == null) ||
                                (parametersIn["mercadopago_card_scheme"] == null) ||
                                (parametersIn["mercadopago_card_type"] == null) ||
                                (parametersIn["mercadopago_masked_card_number"] == null) ||
                                (parametersIn["mercadopago_expires_end_month"] == null) ||
                                (parametersIn["mercadopago_expires_end_year"] == null) ||
                                (parametersIn["mercadopago_date_time_local_fmt"] == null) ||
                                (parametersIn["mercadopago_reference"] == null) ||
                                (parametersIn["mercadopago_transaction_id"] == null) ||
                                (parametersIn["mercadopago_document_id"] == null) ||
                                (parametersIn["mercadopago_document_type"] == null) ||
                                (parametersIn["mercadopago_installaments"] == null) ||
                                (parametersIn["mercadopago_cvv_length"] == null))) ||
                                (parametersIn["u"] == null) ||
                                (parametersIn["ccchargedquantity"] == null))
                    // TODO: BSRedsys
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ModifyCCDataInternal::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ModifyCCDataInternal::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {


                            USER oUser = null;

                            if (customersRepository.GetUserData(ref oUser, parametersIn["u"].ToString()))
                            {
                                string strAppVersion = "";
                                try
                                {
                                    if (parametersIn["appvers"] != null)
                                        strAppVersion = parametersIn["appvers"].ToString();

                                }
                                catch
                                {
                                }


                                decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();
                                if (parametersIn["appcode"] != null)
                                {
                                    try
                                    {
                                        string strAppCode = parametersIn["appcode"].ToString();
                                        dSourceApp = geograficAndTariffsRepository.GetSourceApp(strAppCode);
                                    }
                                    catch { }
                                }


                                if (!string.IsNullOrEmpty(strAppVersion))
                                {
                                    ulong ulAppVersion = AppUtilities.AppVersion(strAppVersion);

                                    if ((CCProvider == PaymentMeanCreditCardProviderType.pmccpPayu) && (parametersIn["payu_cvc"] == null) && (ulAppVersion >= _VERSION_2_7_2))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ModifyCCDataInternal::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    }
                                }

                                if (oUser != null)
                                {

                                    PaymentSuscryptionType? suscriptionType = (PaymentSuscryptionType?)oUser.USR_SUSCRIPTION_TYPE;
                                    string sSuscriptionType = "";
                                    RefundBalanceType eRefundBalType = RefundBalanceType.rbtAmount;

                                    customersRepository.GetUserPossibleSuscriptionTypes(ref oUser, infraestructureRepository, out sSuscriptionType, out eRefundBalType);

                                    try
                                    {
                                        if (((int)PaymentSuscryptionType.pstPrepay).ToString() == sSuscriptionType)
                                        {
                                            suscriptionType = PaymentSuscryptionType.pstPrepay;
                                        }
                                        else if (((int)PaymentSuscryptionType.pstPerTransaction).ToString() == sSuscriptionType)
                                        {
                                            suscriptionType = PaymentSuscryptionType.pstPerTransaction;
                                        }
                                        else
                                        {

                                            string sSuscType = parametersIn["subscription_type"] != null ? parametersIn["subscription_type"].ToString() : "";
                                            int iSuscType = -1;

                                            try
                                            {
                                                if (!string.IsNullOrEmpty(sSuscType))
                                                {
                                                    iSuscType = Convert.ToInt32(sSuscType);
                                                }
                                            }
                                            catch
                                            {
                                            }

                                            if (iSuscType != -1)
                                            {
                                                suscriptionType = (PaymentSuscryptionType)iSuscType;
                                            }
                                        }

                                    }
                                    catch
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ModifyCCDataInternal::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    if (!suscriptionType.HasValue)
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_User_Has_no_Suscription_Type);
                                        Logger_AddLogMessage(string.Format("ModifyCCDataInternal::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }


                                    decimal? dInstallationId = null;

                                    try
                                    {
                                        decimal dTryInstallationId = Convert.ToDecimal(parametersIn["cityID"].ToString());
                                        dInstallationId = dTryInstallationId;
                                    }
                                    catch
                                    {
                                        dInstallationId = null;
                                    }




                                    INSTALLATION oInstallation = null;
                                    DateTime? dtInsDateTime = null;
                                    bool bValidCurrency = false;
                                    CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG oInsGatewayConfig = null;



                                    if (dInstallationId.HasValue)
                                    {
                                        if (!geograficAndTariffsRepository.getInstallation(dInstallationId, null, null, oUser.USR_CUR_ID, ref oInstallation, ref dtInsDateTime, out bValidCurrency))
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_City);
                                            Logger_AddLogMessage(string.Format("ModifyCCDataInternal::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                        else if (!bValidCurrency)
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Incompatible_City_With_UserCurrency);
                                            Logger_AddLogMessage(string.Format("ModifyCCDataInternal::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                        oInsGatewayConfig = oInstallation.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG;

                                    }

                                    xmlOut = ModifyCCData(xmlIn, parametersIn, CCProvider, PaymentMeanRechargeCreationType.pmrctUserCreationRecharge, suscriptionType,
                                                            oInstallation, oInsGatewayConfig, dSourceApp, ref oUser, ref parametersOut);
                                    oUser = null;

                                }
                                else
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_User);
                                    Logger_AddLogMessage(string.Format("ModifyCCDataInternal::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }
                            }
                            else
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_User);
                                Logger_AddLogMessage(string.Format("ModifyCCDataInternal::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }


                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ModifyCCDataInternal::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ModifyCCDataInternal::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string ModifyCCDataInternalJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataInternalJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ModifyCCDataInternal(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataInternalSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ModifyCCDataInternalJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }





        [WebMethod]
        public string GetUserBalance(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("GetUserBalance: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("GetUserBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {

                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("GetUserBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            rt = GetUserData(ref oUser, parametersIn);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("GetUserBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                            parametersOut["sessiontimeout"] = ConfigurationManager.AppSettings["SessionTimeoutInMinutes"].ToString();
                            parametersOut["cur"] = infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID));
                            parametersOut["bal"] = oUser.USR_BALANCE.ToString();
                            parametersOut["time_bal"] = oUser.USR_TIME_BALANCE.ToString();
                            parametersOut["curid"] = oUser.CURRENCy.CUR_ID;


                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("GetUserBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("GetUserBalance: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                            oUser = null;
                        }
                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("GetUserBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("GetUserBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }


        [WebMethod]
        public string GetUserBalanceJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("GetUserBalanceJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = GetUserBalance(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("GetUserBalanceJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("GetUserBalanceJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }


        [WebMethod]
        public string DeleteUser(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("DeleteUser: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("DeleteUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {

                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("DeleteUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            string strAppVersion = "";
                            decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();

                            USER oUser = null;
                            rt = GetUserData(ref oUser, parametersIn, out strAppVersion, ref dSourceApp);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("DeleteUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            string strUsername = oUser.USR_USERNAME;

                            if (!customersRepository.DeleteUser(ref oUser))
                            {

                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("DeleteUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            FormAuthMemberShip.MembershipService.DeleteUser(strUsername);

                            if (!string.IsNullOrEmpty(ResourceExtension.GetLiteral("DeleteUserEmail_Body")))
                            {
                                string culture = oUser.USR_CULTURE_LANG;
                                CultureInfo ci = new CultureInfo(culture);
                                Thread.CurrentThread.CurrentUICulture = ci;
                                Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);
                                integraMobile.WS.Properties.Resource.Culture = ci;


                                string strSourceAppEmailPrefix = GetEmailSourceAppEmailPrefix(dSourceApp);


                                infraestructureRepository.SendEmailTo(oUser.USR_EMAIL, ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "DeleteUserEmail_Subject"),
                                                                        string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "DeleteUserEmail_Body"), oUser.USR_EMAIL,
                                                                            GetEmailFooter(ref oUser, dSourceApp)), dSourceApp);


                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("DeleteUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("DeleteUser: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                            oUser = null;
                        }
                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("DeleteUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("DeleteUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }


        [WebMethod]
        public string DeleteUserJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("DeleteUserJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = DeleteUser(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("DeleteUserJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("DeleteUserJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }



        [WebMethod]
        public string DeleteUserCCData(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("DeleteUserCCData: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("DeleteUserCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {

                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("DeleteUserCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            rt = GetUserData(ref oUser, parametersIn);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("DeleteUserCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            if (!customersRepository.DeleteUserCCData(ref oUser))
                            {

                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("DeleteUserCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("DeleteUserCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("DeleteUserCCData: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                            oUser = null;
                        }
                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("DeleteUserCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("DeleteUserCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }


        [WebMethod]
        public string DeleteUserCCDataJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("DeleteUserCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = DeleteUserCCData(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("DeleteUserCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("DeleteUserCCDataJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }



        [WebMethod]
        public int HealthCheck()
        {
            int iRes = -1;
            try
            {
                iRes = customersRepository.HealthCheck();
                Logger_AddLogMessage(string.Format("HealthCheck({0}): iRes = {1}, ", _ipsString, iRes), LogLevels.logINFO);
            }
            catch (Exception e)
            {
                iRes = -1;
                Logger_AddLogException(e, string.Format("HealthCheck({0})::Error: {1}", _ipsString, e.Message), LogLevels.logERROR);
            }

            return iRes;
        }

        [WebMethod]
        public int HealthCheckDisc(string strDisc)
        {
            int iRes = -1;
            try
            {
                iRes = customersRepository.HealthCheck();
                Logger_AddLogMessage(string.Format("HealthCheck({2}-{0}): iRes = {1}, ", _ipsString, iRes, strDisc), LogLevels.logINFO);
            }
            catch (Exception e)
            {
                iRes = -1;
                Logger_AddLogException(e, string.Format("HealthCheck({2}-{0})::Error: {1}", _ipsString, e.Message, strDisc), LogLevels.logERROR);
            }

            return iRes;
        }

        //[WebMethod]
        public string CalculateMessageWithHash(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("CalculateMessageWithHash: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    string strCalculatedHash = CalculateHash(strHashString, strHash);
                    XmlDocument xmldoc = new XmlDocument();
                    xmldoc.LoadXml(xmlIn);


                    XmlNodeList Nodes = xmldoc.SelectNodes("//" + _xmlTagName + IN_SUFIX);
                    XmlElement node = xmldoc.CreateElement("ah");
                    node.InnerXml = strCalculatedHash;
                    Nodes[0].AppendChild(node);

                    xmlOut = xmldoc.OuterXml;


                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("CalculateMessageWithHash::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("CalculateMessageWithHash::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;

        }
        //[WebMethod]
        public string CalculateMessageWithHashJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("CalculateMessageWithHashJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = CalculateMessageWithHash(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("CalculateMessageWithHashJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("CalculateMessageWithHashJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }

        //[WebMethod]
        public string CalculateHash(string strInput, string strHash)
        {
            string strRes = "";
            try
            {
                if ((ConfigurationManager.AppSettings["CheckSessionAndHash"].ToString() == "0") && (strHash.Length > 0))
                {
                    strRes = strHash;
                }
                else
                {

                    byte[] inputBytes = System.Text.Encoding.UTF8.GetBytes(strInput);
                    byte[] hash = null;

                    MACTripleDES _mac3des = null;
                    HMACSHA256 _hmacsha256 = null;

                    if (ConfigurationManager.AppSettings["AuthHashAlgorithmMobile"].ToString() == "HMACSHA256")
                    {
                        _hmacsha256 = new HMACSHA256(_normKey);
                    }
                    else if (ConfigurationManager.AppSettings["AuthHashAlgorithmMobile"].ToString() == "MACTripleDES")
                    {
                        _mac3des = new MACTripleDES(_normKey);
                    }

                    if (_mac3des != null)
                    {
                        hash = _mac3des.ComputeHash(inputBytes);

                    }
                    else if (_hmacsha256 != null)
                    {
                        hash = _hmacsha256.ComputeHash(inputBytes);
                    }


                    if (hash.Length >= 8)
                    {
                        StringBuilder sb = new StringBuilder();
                        for (int i = hash.Length - 8; i < hash.Length; i++)
                        {
                            sb.Append(hash[i].ToString("X2"));
                        }
                        strRes = sb.ToString();
                    }
                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "CalculateHash::Exception", LogLevels.logERROR);

            }


            return strRes;
        }


        protected string CalculatePaymentGatewayHash(string strInput, string strHashSeed)
        {
            string strRes = "";
            try
            {

                byte[] _normKey = null;
                HMACSHA256 _hmacsha256 = null;
                int iKeyLength = 64;

                byte[] keyBytes = System.Text.Encoding.UTF8.GetBytes(strHashSeed);
                _normKey = new byte[iKeyLength];
                int iSum = 0;

                for (int i = 0; i < iKeyLength; i++)
                {
                    if (i < keyBytes.Length)
                    {
                        iSum += keyBytes[i];
                    }
                    else
                    {
                        iSum += i;
                    }
                    _normKey[i] = Convert.ToByte((iSum * BIG_PRIME_NUMBER_PAYMENT_GATEWAY) % (Byte.MaxValue + 1));

                }

                _hmacsha256 = new HMACSHA256(_normKey);

                byte[] inputBytes = System.Text.Encoding.UTF8.GetBytes(strInput);
                byte[] hash = null;


                hash = _hmacsha256.ComputeHash(inputBytes);


                if (hash.Length >= 8)
                {
                    StringBuilder sb = new StringBuilder();
                    for (int i = hash.Length - 8; i < hash.Length; i++)
                    {
                        sb.Append(hash[i].ToString("X2"));
                    }
                    strRes = sb.ToString();
                }


            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "CalculatePaymentGatewayHash::Exception", LogLevels.logERROR);

            }


            return strRes;
        }

        /*
         *  QueryCarExitforPayment
         *
        <ipark_in>
            <u>user login </u>
            <IMEI> imei or null if it’s a device without modem </IMEI>  -- optional or null able
            <WIFIMAC> wifi mac </WIFIMAC>		                --  optional or nullable   
            <SessionID>dc952a84d38c9df22844897d8c2e5df25a0748168560b4f2</SessionID>   
            <g> off street zone identification </g>
            <ope_id> Operation unique ID: number/barcode/ticket ID </ope_id>
            <ope_id_type> 1: MEYPAR id, 2: I@ id QR </ope_id_type>
            <p>plate</p>
            <d>Current date (in format hh24missddMMYY) </d>
        <ipark_in>
         * 
         * 
        <ipark_out>
	        <r>Result of the method</r>
            <g> off street zone identification </g>
            <ope_id> Operation unique ID: number/barcode/ticket ID </ope_id>
            <ope_id_type> 1: MEYPAR id, 2: I@ id QR </ope_id_type>
            <p>plate</p>
            <op> 1: there is an overpayment because user did not leave in the courtesy time/ 0: first payment >/op>
            <q>Amount of money paid in Cents</q>
	     	<cur> installation/city currency</cur>	
            <t>Time in minutes obtained paying <q> cents</t>
            <bd>Initial date (in format hh24missddMMYY) of the parking:  exacty is the <d> tag value provided in NotifyCarEntry method</bd> ? Mandotory
            <ed>End date (in format hh24missddMMYY) </ed> ?Mandatory
            <tar_id> tariff id that could be different from the entry one because user parked in  another place</tar_id>
            <med> maximum exit date for leaving the parking once has been paid  </med>
            <vers> 1.0 </vers>				-- Web Service Version
            <ah>authentication hash</ah>
        </ipark_out>
         * 
         * 
        Result of the method:
            a)	-38: Operation not found.
            b)	1: Operation Successful ? the payment was made
            c)	-9: Generic Error (for example database or execution error.)
            d)	-19 Invalid Input Parameter 
            e)	-20 Missing Input Parameter 
            f)	-39: Operation already closed
         *
         */
        [WebMethod]
        public string QueryCarExitforPayment(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("QueryCarExitforPayment: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["g"] == null) ||
                        (parametersIn["ope_id"] == null) ||
                        //(parametersIn["ope_id_type"] == null) ||
                        (parametersIn["p"] == null) ||
                        (parametersIn["d"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            rt = GetUserData(ref oUser, parametersIn);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            decimal? dGroupId = null;
                            DateTime? dtgroupDateTime = null;
                            try
                            {
                                decimal dTryGroupId = Convert.ToDecimal(parametersIn["g"].ToString());
                                dGroupId = dTryGroupId;
                            }
                            catch
                            {
                                dGroupId = null;
                            }

                            GROUPS_OFFSTREET_WS_CONFIGURATION oOffstreetWsConfiguration = null;
                            if (!geograficAndTariffsRepository.getOffStreetConfiguration(dGroupId, null, null, ref oOffstreetWsConfiguration, ref dtgroupDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            GROUP oGroup = null;
                            DateTime? dtinstDateTime = null;
                            if (!geograficAndTariffsRepository.getGroup(dGroupId,
                                                                        ref oGroup,
                                                                        ref dtinstDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            if (oGroup.GRP_TYPE != (int)GroupType.OffStreet)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            string sOpeId = parametersIn["ope_id"].ToString();
                            OffstreetOperationIdType oOpeType = OffstreetOperationIdType.MeyparId;
                            if (parametersIn.ContainsKey("ope_id_type") && parametersIn["ope_id_type"] != null)
                            {
                                try
                                {
                                    oOpeType = (OffstreetOperationIdType)Convert.ToInt32(parametersIn["ope_id_type"].ToString());
                                }
                                catch
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }

                            string sPlate = NormalizePlate(parametersIn["p"].ToString());

                            if (sPlate.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }

                            string strPlateSharing = infraestructureRepository.GetParameterValue("PlateSharing");
                            bool bPlateSharing = true;

                            if (!string.IsNullOrEmpty(strPlateSharing))
                            {
                                bPlateSharing = (strPlateSharing != "0");
                            }

                            if (!customersRepository.IsPlateOfUser(ref oUser, sPlate))
                            {
                                if (bPlateSharing || !customersRepository.IsPlateAssignedToAnotherUser(ref oUser, sPlate))
                                {
                                    if (!customersRepository.AddPlateToUser(ref oUser, sPlate))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }
                                else
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Plate_Is_Assigned_To_Another_User);
                                    Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }
                            }


                            DateTime dtCurrentDateTime;
                            try
                            {
                                dtCurrentDateTime = DateTime.ParseExact(parametersIn["d"].ToString(), "HHmmssddMMyy", CultureInfo.InvariantCulture);
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            parametersOut = new SortedList();
                            rt = ResultType.Result_OK;

                            // Get last offstreet operation with the same group id and logical id (<g> and <ope_id>)
                            OPERATIONS_OFFSTREET oLastParkOp = null;
                            if (!customersRepository.GetLastOperationOffstreetData(oGroup.GRP_ID, sOpeId, out oLastParkOp))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            if (oLastParkOp != null && (oLastParkOp.OPEOFF_TYPE == (int)OffstreetOperationType.Exit || oLastParkOp.OPEOFF_TYPE == (int)OffstreetOperationType.OverduePayment) &&
                                                       oLastParkOp.OPEOFF_EXIT_LIMIT_DATE.HasValue && oLastParkOp.OPEOFF_EXIT_LIMIT_DATE.Value >= dtgroupDateTime.Value)
                            {
                                //xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_OperationAlreadyClosed);
                                parametersOut = new SortedList();
                                parametersOut["r"] = Convert.ToInt32(ResultType.Result_Error_OperationAlreadyClosed).ToString();
                                parametersOut["med"] = oLastParkOp.OPEOFF_EXIT_LIMIT_DATE.Value.ToString("HHmmssddMMyy");
                                xmlOut = GenerateXMLOuput(parametersOut);
                                Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            if (oLastParkOp != null && (oLastParkOp.OPEOFF_TYPE == (int)OffstreetOperationType.Exit || oLastParkOp.OPEOFF_TYPE == (int)OffstreetOperationType.OverduePayment) &&
                                                       oLastParkOp.USER_PLATE.USRP_PLATE != sPlate)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Plate);
                                Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOp = 0;
                            int iTotalAmount = 0;
                            decimal dVAT = 0;
                            string sCurIsoCode = oOffstreetWsConfiguration.GROUP.INSTALLATION.CURRENCy.CUR_ISO_CODE;
                            int iTime = 0;
                            DateTime dtEntryDate = DateTime.Now;
                            DateTime dtEndDate = DateTime.Now;
                            DateTime dtMaxExitDate = DateTime.Now;
                            string sTariff = "";
                            long lEllapsedTime;

                            ThirdPartyOffstreet oThirdPartyOffstreet = new ThirdPartyOffstreet();

                            int iWSTimeout = infraestructureRepository.GetRateWSTimeout(oGroup.INSTALLATION.INS_ID);


                            switch ((QueryExitOffstreetWSSignatureType)oOffstreetWsConfiguration.GOWC_QUERY_EXIT_WS_SIGNATURE_TYPE)
                            {
                                case QueryExitOffstreetWSSignatureType.test:
                                    {
                                        if (oLastParkOp != null && oLastParkOp.OPEOFF_TYPE != (int)OffstreetOperationType.Entry)
                                            iOp = 1;
                                        else
                                            iOp = 0;
                                        dVAT = oOffstreetWsConfiguration.GROUP.INSTALLATION.INS_PERC_VAT1;
                                        iTime = 60;
                                        dtEntryDate = dtgroupDateTime.Value.AddHours(-1);
                                        dtEndDate = dtgroupDateTime.Value;
                                        sTariff = "Tarifa Normal";
                                        dtMaxExitDate = dtgroupDateTime.Value.AddMinutes(20);
                                        lEllapsedTime = 0;
                                        parametersOut["op"] = iOp;
                                        switch (sOpeId.Substring(sOpeId.Length - 1, 1))
                                        {
                                            case "0":
                                                iTotalAmount = 0;
                                                break;
                                            default:
                                                iTotalAmount = 500;
                                                break;
                                        }
                                        parametersOut["q"] = iTotalAmount;
                                        parametersOut["cur"] = sCurIsoCode;
                                        parametersOut["t"] = iTime;
                                        parametersOut["bd"] = dtEntryDate.ToString("HHmmssddMMyy");
                                        parametersOut["ed"] = dtEndDate.ToString("HHmmssddMMyy");
                                        parametersOut["tar_id"] = sTariff;
                                        parametersOut["med"] = dtMaxExitDate.ToString("HHmmssddMMyy");
                                        parametersOut["parking_id"] = 1;
                                        sOpeId = dtEndDate.ToString("yyyyMMddHHmmssffff");
                                        parametersOut["ope_id"] = sOpeId;
                                        oOpeType = OffstreetOperationIdType.MeyparId;
                                        parametersOut["ope_id_type"] = (int)oOpeType;
                                        sPlate = oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).Count() > 0 ? oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).First().USRP_PLATE : "1111AAA";
                                        parametersOut["plate"] = sPlate;



                                        rt = ResultType.Result_OK;
                                    }
                                    break;

                                case QueryExitOffstreetWSSignatureType.meypar:
                                    {
                                        rt = oThirdPartyOffstreet.MeyparQueryCarExitforPayment(oOffstreetWsConfiguration, sOpeId, oOpeType, ref sPlate, dtgroupDateTime.Value, iWSTimeout /*dtCurrentDateTime*/,
                                                                                               ref parametersOut, out iOp, out iTotalAmount, out dVAT, out sCurIsoCode, out iTime,
                                                                                               out dtEntryDate, out dtEndDate, out sTariff, out dtMaxExitDate, out lEllapsedTime);


                                        if (rt != ResultType.Result_OK)
                                        {
                                            xmlOut = GenerateXMLErrorResult(rt);
                                            Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                    }
                                    break;

                                case QueryExitOffstreetWSSignatureType.iparkcontrol:
                                    {
                                        rt = oThirdPartyOffstreet.iParkControlQueryCarExitforPayment(oOffstreetWsConfiguration, sOpeId, oOpeType, ref sPlate, dtgroupDateTime.Value, iWSTimeout /*dtCurrentDateTime*/,
                                                                                               ref parametersOut, out iOp, out iTotalAmount, out dVAT, out sCurIsoCode, out iTime,
                                                                                               out dtEntryDate, out dtEndDate, out sTariff, out dtMaxExitDate, out lEllapsedTime);


                                        if (rt != ResultType.Result_OK)
                                        {
                                            xmlOut = GenerateXMLErrorResult(rt);
                                            Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                    }
                                    break;

                                case QueryExitOffstreetWSSignatureType.meyparAdventa:
                                    {
                                        rt = oThirdPartyOffstreet.MeyparAdventaQueryAmount(oOffstreetWsConfiguration, sOpeId, oOpeType, ref sPlate, dtgroupDateTime.Value, iWSTimeout /*dtCurrentDateTime*/,
                                                                                               ref parametersOut, out iOp, out iTotalAmount, out dVAT, out sCurIsoCode, out iTime,
                                                                                               out dtEntryDate, out dtEndDate, out sTariff, out dtMaxExitDate, out lEllapsedTime);


                                        if (rt != ResultType.Result_OK)
                                        {
                                            xmlOut = GenerateXMLErrorResult(rt);
                                            Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                    }
                                    break;

                                default:
                                    rt = ResultType.Result_Error_Generic;
                                    break;

                            }


                            if (rt == ResultType.Result_OK)
                            {
                                OffstreetOperationType operationType = (iOp == 0 ? OffstreetOperationType.Exit : OffstreetOperationType.OverduePayment);

                                double dChangeToApply = 1.0;

                                if (sCurIsoCode.ToUpper() != oOffstreetWsConfiguration.GROUP.INSTALLATION.CURRENCy.CUR_ISO_CODE)
                                {
                                    // ...
                                }

                                DateTime? dtUTCDateTime = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oOffstreetWsConfiguration.GROUP.INSTALLATION.INS_ID, dtgroupDateTime.Value);
                                DateTime? dtUTCEntryDate = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oOffstreetWsConfiguration.GROUP.INSTALLATION.INS_ID, dtEntryDate);
                                DateTime? dtUTCEndDate = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oOffstreetWsConfiguration.GROUP.INSTALLATION.INS_ID, dtEndDate);
                                DateTime? dtMaxExitUTCDate = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oOffstreetWsConfiguration.GROUP.INSTALLATION.INS_ID, dtMaxExitDate);

                                int iAmount;
                                decimal dVAT1;
                                decimal dVAT2;
                                decimal dPercFEE;
                                decimal dPercFEETopped;
                                decimal dFixedFEE;
                                int iPartialVAT1;
                                int iPartialPercFEE;
                                int iPartialFixedFEE;
                                int iPartialPercFEEVAT;
                                int iPartialFixedFEEVAT;
                                int? iPaymentTypeId = null;
                                int? iPaymentSubtypeId = null;
                                if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                                {
                                    iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                                    iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                                }

                                if (dVAT != 0)
                                {

                                    iAmount = customersRepository.CalculateFEEReverse(iTotalAmount, dVAT, 0, 0, 0, 0, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE);
                                }
                                else
                                    iAmount = iTotalAmount;

                                if (!customersRepository.GetFinantialParams(oUser, oGroup, (PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE, iPaymentTypeId, iPaymentSubtypeId,
                                                                            out dVAT1, out dVAT2, out dPercFEE, out dPercFEETopped, out dFixedFEE))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error getting installation FEE parameters: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                dVAT1 = dVAT;
                                iPartialVAT1 = iTotalAmount - iAmount;

                                int iQFEE = 0;
                                decimal dQFEE = 0;
                                int iQFEEChange = 0;
                                decimal dQVAT = 0;
                                int iQTotal = 0;
                                int iQTotalChange = 0;
                                int iQSubTotal = 0;
                                int iQSubTotalChange = 0;

                                iQTotal = customersRepository.CalculateFEE(iAmount, dVAT1, dVAT2, dPercFEE, dPercFEETopped, dFixedFEE,
                                                                           iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE,
                                                                           out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                                dQFEE = Math.Round(iAmount * dPercFEE, MidpointRounding.AwayFromZero);
                                if (dPercFEETopped > 0 && iQFEE > dPercFEETopped) dQFEE = dPercFEETopped;
                                dQFEE += dFixedFEE;
                                iQFEE = Convert.ToInt32(Math.Round(dQFEE, MidpointRounding.AwayFromZero));






                                dQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                iQSubTotal = iAmount + iQFEE;

                                if (oOffstreetWsConfiguration.GROUP.INSTALLATION.CURRENCy.CUR_ISO_CODE != infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)))
                                {
                                    dChangeToApply = GetChangeToApplyFromInstallationCurToUserCur(oOffstreetWsConfiguration.GROUP.INSTALLATION, oUser);
                                    if (dChangeToApply < 0)
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                                    numberFormatProvider.NumberDecimalSeparator = ".";
                                    parametersOut["chng"] = dChangeToApply.ToString(numberFormatProvider);

                                    double dChangeFee = 0;
                                    int iQChange = ChangeQuantityFromInstallationCurToUserCur(iAmount,
                                                                                              dChangeToApply, oOffstreetWsConfiguration.GROUP.INSTALLATION, oUser, out dChangeFee);

                                    iQFEEChange = ChangeQuantityFromInstallationCurToUserCur(iQFEE, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);
                                    iQSubTotalChange = ChangeQuantityFromInstallationCurToUserCur(iQSubTotal, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);
                                    iQTotalChange = ChangeQuantityFromInstallationCurToUserCur(iQTotal, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                                    parametersOut["qch"] = iQChange.ToString();
                                    parametersOut["qch_fee"] = iQFEEChange.ToString();
                                    parametersOut["qch_subtotal"] = iQSubTotalChange.ToString();
                                    parametersOut["qch_total"] = iQTotalChange.ToString();
                                    parametersOut["q"] = iAmount.ToString();
                                    parametersOut["q_fee"] = iQFEE.ToString();
                                    parametersOut["q_vat"] = dQVAT.ToString();
                                    parametersOut["q_subtotal"] = iQSubTotal.ToString();
                                    parametersOut["q_total"] = iQTotal.ToString();
                                }
                                else
                                {
                                    parametersOut["q"] = iAmount.ToString();
                                    parametersOut["q_fee"] = iQFEE.ToString();
                                    parametersOut["q_vat"] = dQVAT.ToString();
                                    parametersOut["q_subtotal"] = iQSubTotal.ToString();
                                    parametersOut["q_total"] = iQTotal.ToString();
                                }

                                int iPercFEETopped = Convert.ToInt32(Math.Round(dPercFEETopped, MidpointRounding.AwayFromZero));
                                int iFixedFEE = Convert.ToInt32(Math.Round(dFixedFEE, MidpointRounding.AwayFromZero));

                                if (!customersRepository.AddSessionOperationOffstreetInfo(ref oUser, parametersIn["SessionID"].ToString(), operationType, sOpeId, sPlate, oGroup.GRP_ID, sTariff,
                                                                                                                   iAmount, iPartialVAT1, iTime, dtUTCDateTime.Value, dtUTCEntryDate.Value, dtUTCEndDate.Value, dtMaxExitUTCDate.Value, dtgroupDateTime.Value, dChangeToApply,
                                                                                                                   dVAT1, dVAT2, dPercFEE, iPercFEETopped, iFixedFEE, null, null))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                            }

                            if (rt == ResultType.Result_OK && iTotalAmount == 0)
                            {
                                rt = ResultType.Result_Error_Offstreet_OperationInFreePass;
                            }

                            int iMinutesToExit = 0;

                            if (parametersOut.ContainsKey("med"))
                            {

                                try
                                {
                                    dtMaxExitDate = DateTime.ParseExact(parametersOut["med"].ToString(), "HHmmssddMMyy", CultureInfo.InvariantCulture);
                                    iMinutesToExit = Convert.ToInt32((dtMaxExitDate - dtgroupDateTime.Value).TotalMinutes);
                                }
                                catch
                                {

                                }
                            }

                            parametersOut["r"] = Convert.ToInt32(rt).ToString();
                            parametersOut["maxminexit"] = iMinutesToExit;
                            parametersOut["g"] = oGroup.GRP_ID.ToString();
                            parametersOut["ope_id"] = sOpeId;
                            parametersOut["ope_id_type"] = (int)oOpeType;
                            parametersOut["p"] = sPlate;
                            parametersOut["layout"] = oOffstreetWsConfiguration.GOWC_FEE_LAYOUT;



                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("QueryCarExitforPayment: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }


                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

            }

            return xmlOut;
        }

        [WebMethod]
        public string QueryCarExitforPaymentJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("QueryCarExitforPaymentJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryCarExitforPayment(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);

                //Logger_AddLogMessage(string.Format("QueryCarExitforPaymentJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryCarExitforPaymentJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        /*
         *  ConfirmCarPayment 
         *  
        <ipark_in>
            <u>user login or generated user id for anonymous operations</u>
            <SessionID>dc952a84d38c9df22844897d8c2e5df25a0748168560b4f2</SessionID>
            <g> off street zone identification </g>
            <ope_id> Operation unique ID: number/barcode/ticket ID </ope_id>
            <ope_id_type> 1: MEYPAR id, 2: I@ id QR </ope_id_type>
            <vers> 1.0 </vers>				-- Web Service Version
            <ah>authentication hash</ah>
        </ ipark _in>
         *      
        <ipark_out>
	        <r>Result of the method</r>
            <opnum> operation number </opnum>
        </ipark_out>
         * 
        Result of the method:
         a.	Result: is an integer containing a Boolean value. 0 if an error has occurred
         * saving the operation or 1 if the operation has been stored correctly.      
         *
         */
        [WebMethod]
        public string ConfirmCarPayment(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ConfirmCarPayment: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["g"] == null) ||
                        (parametersIn["ope_id"] == null) ||
                        (parametersIn["ope_id_type"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            string strAppVersion = "";
                            decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();

                            rt = GetUserData(ref oUser, parametersIn, out strAppVersion, ref dSourceApp);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            decimal? dGroupId = null;
                            try
                            {
                                decimal dTryGroupId = Convert.ToDecimal(parametersIn["g"].ToString());
                                dGroupId = dTryGroupId;
                            }
                            catch
                            {
                                dGroupId = null;
                            }

                            GROUPS_OFFSTREET_WS_CONFIGURATION oParkingConfiguration = null;
                            DateTime? dtgroupDateTime = null;
                            if (!geograficAndTariffsRepository.getOffStreetConfiguration(dGroupId, null, null, ref oParkingConfiguration, ref dtgroupDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            GROUP oGroup = null;
                            DateTime? dtinstDateTime = null;
                            if (!geograficAndTariffsRepository.getGroup(dGroupId,
                                                                        ref oGroup,
                                                                        ref dtinstDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            if (oGroup.GRP_TYPE != (int)GroupType.OffStreet)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            string sOpeId = parametersIn["ope_id"].ToString();
                            OffstreetOperationIdType oOpeIdType = OffstreetOperationIdType.MeyparId;
                            try
                            {
                                oOpeIdType = (OffstreetOperationIdType)Convert.ToInt32(parametersIn["ope_id_type"].ToString());
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            string sPlate = "";
                            int iAmount;
                            string sCurIsoCode = oParkingConfiguration.GROUP.INSTALLATION.CURRENCy.CUR_ISO_CODE;
                            int iTime;
                            string sTariff;
                            string sGate = "";
                            double dChangeToApply = 1.0;
                            DateTime dtSavedInstallationTime = DateTime.UtcNow;
                            OffstreetOperationType operationType = OffstreetOperationType.Exit;
                            DateTime dtUTCEntryDate = DateTime.UtcNow;
                            DateTime dtUTCEndDate = DateTime.UtcNow;
                            DateTime dtUTCExitLimitDate = DateTime.UtcNow;
                            decimal dPercVAT1;
                            decimal dPercVAT2;
                            decimal dPercFEE;
                            int iPercFEETopped;
                            int iFixedFEE;
                            int iPartialVAT1;
                            int iPartialPercFEE;
                            int iPartialFixedFEE;
                            int iPartialPercFEEVAT;
                            int iPartialFixedFEEVAT;
                            int iTotalQuantity;
                            string sDiscounts;
                            DateTime dtSessionUTCDate;
                            string strQPlusVATQs = "";


                            if (!customersRepository.CheckSessionOperationOffstreetInfo(ref oUser, parametersIn["SessionID"].ToString(), dGroupId.Value, sOpeId, out sPlate, out dtSavedInstallationTime, out operationType, out iAmount, out iPartialVAT1, out iTime, out sTariff, out dChangeToApply, out dtSessionUTCDate, out dtUTCEntryDate, out dtUTCEndDate, out dtUTCExitLimitDate,
                                                                                        out dPercVAT1, out dPercVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE,
                                                                                        out sDiscounts, out strQPlusVATQs))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_OperationExpired);
                                Logger_AddLogMessage(string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            decimal? dLatitude = null;
                            decimal? dLongitude = null;
                            GetLatLon(parametersIn, out dLatitude, out dLongitude);



                            string strPlateSharing = infraestructureRepository.GetParameterValue("PlateSharing");
                            bool bPlateSharing = true;

                            if (!string.IsNullOrEmpty(strPlateSharing))
                            {
                                bPlateSharing = (strPlateSharing != "0");
                            }

                            if (!customersRepository.IsPlateOfUser(ref oUser, sPlate))
                            {
                                if (bPlateSharing || !customersRepository.IsPlateAssignedToAnotherUser(ref oUser, sPlate))
                                {
                                    if (!customersRepository.AddPlateToUser(ref oUser, sPlate))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }
                                else
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Plate_Is_Assigned_To_Another_User);
                                    Logger_AddLogMessage(string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }
                            }

                            var session = oUser.MOBILE_SESSIONs.Where(r => r.MOSE_SESSIONID == parametersIn["SessionID"].ToString()
                                                              && r.MOSE_USR_ID == oUser.USR_ID).First();

                            iTotalQuantity = customersRepository.CalculateFEE(iAmount, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE,
                                                                              iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE,
                                                                              out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                            //int iQT = (iPartialPercFEE - iPartialPercFEEVAT) + (iPartialFixedFEE - iPartialFixedFEEVAT);                            
                            //int iIVA = iPartialPercFEEVAT + iPartialFixedFEEVAT;

                            DateTime? dtEntryDate = geograficAndTariffsRepository.ConvertUTCToInstallationDateTime(oParkingConfiguration.GROUP.GRP_INS_ID, dtUTCEntryDate);
                            DateTime dtPaymentDate = dtSavedInstallationTime;
                            DateTime? dtEndDate = geograficAndTariffsRepository.ConvertUTCToInstallationDateTime(oParkingConfiguration.GROUP.GRP_INS_ID, dtUTCEndDate);
                            DateTime? dtExitLimitDate = geograficAndTariffsRepository.ConvertUTCToInstallationDateTime(oParkingConfiguration.GROUP.GRP_INS_ID, dtUTCExitLimitDate);

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            integraMobile.WS.integraCommonService oCommonService = CommonService();



                            string str3DSURL = null;
                            string strMD = parametersIn["moneris_md"] != null ? parametersIn["moneris_md"].ToString() : "";
                            string strCAVV = parametersIn["moneris_cavv"] != null ? parametersIn["moneris_cavv"].ToString() : "";
                            string strECI = parametersIn["moneris_eci"] != null ? parametersIn["moneris_eci"].ToString() : "";

                            string strBSRedsys3DSTransID = parametersIn["bsredsys_3ds_trans_id"] != null ? parametersIn["bsredsys_3ds_trans_id"].ToString() : "";
                            string strBSRedsys3DSPares = parametersIn["bsredsys_3ds_pares"] != null ? parametersIn["bsredsys_3ds_pares"].ToString() : "";
                            string strBSRedsys3DSCres = parametersIn["bsredsys_3ds_cres"] != null ? parametersIn["bsredsys_3ds_cres"].ToString() : "";
                            string strBSRedsys3DSMethodData = parametersIn["bsredsys_3ds_methoddata"] != null ? parametersIn["bsredsys_3ds_methoddata"].ToString() : "";

                            string strMercadoPagoToken = parametersIn["mercadopago_token"] != null ? parametersIn["mercadopago_token"].ToString() : "";

                            string strMPProTransactionId = parametersIn["mercadopago_transaction_id"] != null ? parametersIn["mercadopago_transaction_id"].ToString() : "";
                            string strMPProReference = parametersIn["mercadopago_reference"] != null ? parametersIn["mercadopago_reference"].ToString() : "";
                            string strMPProCardHash = parametersIn["mercadopago_card_hash"] != null ? parametersIn["mercadopago_card_hash"].ToString() : "";
                            string strMPProCardReference = parametersIn["mercadopago_card_reference"] != null ? parametersIn["mercadopago_card_reference"].ToString() : "";
                            string strMPProCardScheme = parametersIn["mercadopago_card_scheme"] != null ? parametersIn["mercadopago_card_scheme"].ToString() : "";
                            string strMPProGatewayDate = parametersIn["mercadopago_date_time_local_fmt"] != null ? parametersIn["mercadopago_date_time_local_fmt"].ToString() : "";
                            string strMPProMaskedCardNumber = parametersIn["mercadopago_masked_card_number"] != null ? parametersIn["mercadopago_masked_card_number"].ToString() : "";
                            string strMPProExpMonth = parametersIn["mercadopago_expires_end_month"] != null ? parametersIn["mercadopago_expires_end_month"].ToString() : "";
                            string strMPProExpYear = parametersIn["mercadopago_expires_end_year"] != null ? parametersIn["mercadopago_expires_end_year"].ToString() : "";
                            string strMPProCardType = parametersIn["mercadopago_card_type"] != null ? parametersIn["mercadopago_card_type"].ToString() : "";
                            string strMPProDocumentID = parametersIn["mercadopago_document_id"] != null ? parametersIn["mercadopago_document_id"].ToString() : "";
                            string strMPProDocumentType = parametersIn["mercadopago_document_type"] != null ? parametersIn["mercadopago_document_type"].ToString() : "";
                            string strMPProInstallaments = parametersIn["mercadopago_installaments"] != null ? parametersIn["mercadopago_installaments"].ToString() : "";
                            string strMPProCVVLength = parametersIn["mercadopago_cvv_length"] != null ? parametersIn["mercadopago_cvv_length"].ToString() : "";


                            bool bPaymentInPerson = true;

                            rt = oCommonService.ConfirmCarPayment(oParkingConfiguration, oGroup, oUser,
                                                                 sOpeId, oOpeIdType, sPlate, sTariff, sGate,
                                                                 operationType, iAmount, iTime, dChangeToApply, sCurIsoCode,
                                                                 dtEntryDate.Value, dtPaymentDate, dtEndDate.Value, dtExitLimitDate.Value,
                                                                 session.MOSE_OS.Value, session.MOSE_ID, dLatitude, dLongitude, strAppVersion,
                                                                 dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE,
                                                                 iPartialVAT1, iPartialPercFEE, iPartialFixedFEE, iTotalQuantity,
                                                                 sDiscounts, strMD, strCAVV, strECI,
                                                                 strBSRedsys3DSTransID, strBSRedsys3DSPares, strBSRedsys3DSCres, strBSRedsys3DSMethodData,                        
                                                                 strMercadoPagoToken,
                                                                 strMPProTransactionId,
                                                                 strMPProReference,
                                                                 strMPProCardHash,
                                                                 strMPProCardReference,
                                                                 strMPProCardScheme,
                                                                 strMPProGatewayDate,
                                                                 strMPProMaskedCardNumber,
                                                                 strMPProExpMonth,
                                                                 strMPProExpYear,
                                                                 strMPProCardType,
                                                                 strMPProDocumentID,
                                                                 strMPProDocumentType,
                                                                 strMPProInstallaments,
                                                                 strMPProCVVLength,
                                                                 dSourceApp, bPaymentInPerson,
                                                                 null, null,
                                                                 ref parametersOut, out str3DSURL);
                            if (rt == ResultType.Result_OK)
                            {
                                customersRepository.DeleteSessionOperationOffstreetInfo(ref oUser, parametersIn["SessionID"].ToString());
                            }
                            else
                            {
                                if (rt == ResultType.Result_3DS_Validation_Needed)
                                {
                                    parametersOut["r"] = Convert.ToInt32(rt).ToString();
                                    parametersOut["ThreeDSURL"] = str3DSURL;
                                    CUSTOMER_PAYMENT_MEAN oUserPaymentMean = customersRepository.GetUserPaymentMean(ref oUser, (INSTALLATION)null);
                                    parametersOut["cc_provider"] = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_PROVIDER;

                                    xmlOut = GenerateXMLOuput(parametersOut);

                                    if (xmlOut.Length == 0)
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    }
                                    else
                                    {
                                        Logger_AddLogMessage(string.Format("ConfirmCarPayment: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                    }

                                    oUser = null;
                                    return xmlOut;

                                }
                                else
                                {
                                    xmlOut = GenerateXMLErrorResult(rt);
                                    Logger_AddLogMessage(string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }



                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("ConfirmCarPayment: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }


                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;

        }

        [WebMethod]
        public string ConfirmCarPaymentJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ConfirmCarPaymentJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ConfirmCarPayment(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);

                //Logger_AddLogMessage(string.Format("ConfirmCarPaymentJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("NotifyCarPaymentJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }

        [WebMethod]
        public string QueryCarDiscountforPayment(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["g"] == null) ||
                        (parametersIn["ope_id"] == null) ||
                        (parametersIn["ope_id_type"] == null) ||
                        (parametersIn["dc_id"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            rt = GetUserData(ref oUser, parametersIn);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            decimal? dGroupId = null;
                            DateTime? dtgroupDateTime = null;
                            try
                            {
                                decimal dTryGroupId = Convert.ToDecimal(parametersIn["g"].ToString());
                                dGroupId = dTryGroupId;
                            }
                            catch
                            {
                                dGroupId = null;
                            }

                            GROUPS_OFFSTREET_WS_CONFIGURATION oOffstreetWsConfiguration = null;
                            if (!geograficAndTariffsRepository.getOffStreetConfiguration(dGroupId, null, null, ref oOffstreetWsConfiguration, ref dtgroupDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            GROUP oGroup = null;
                            DateTime? dtinstDateTime = null;
                            if (!geograficAndTariffsRepository.getGroup(dGroupId,
                                                                        ref oGroup,
                                                                        ref dtinstDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            if (oGroup.GRP_TYPE != (int)GroupType.OffStreet)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            string sOpeId = parametersIn["ope_id"].ToString();
                            OffstreetOperationIdType oOpeType = OffstreetOperationIdType.MeyparId;
                            if (parametersIn.ContainsKey("ope_id_type") && parametersIn["ope_id_type"] != null)
                            {
                                try
                                {
                                    oOpeType = (OffstreetOperationIdType)Convert.ToInt32(parametersIn["ope_id_type"].ToString());
                                }
                                catch
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }

                            string sDiscId = parametersIn["dc_id"].ToString();

                            string sPlate = "";
                            int iInitialAmount;
                            int iFinalAmount;
                            string sCurIsoCode = oOffstreetWsConfiguration.GROUP.INSTALLATION.CURRENCy.CUR_ISO_CODE;
                            int iTime;
                            string sTariff;
                            double dChangeToApply = 1.0;
                            DateTime dtSavedInstallationTime = DateTime.UtcNow;
                            OffstreetOperationType operationType = OffstreetOperationType.Exit;
                            DateTime dtUTCEntryDate = DateTime.UtcNow;
                            DateTime dtUTCEndDate = DateTime.UtcNow;
                            DateTime dtUTCExitLimitDate = DateTime.UtcNow;
                            decimal dPercVAT1;
                            decimal dPercVAT2;
                            decimal dPercFEE;
                            int iPercFEETopped;
                            int iFixedFEE;
                            int iPartialVAT1;
                            int iPartialPercFEE;
                            int iPartialFixedFEE;
                            int iPartialPercFEEVAT;
                            int iPartialFixedFEEVAT;
                            string sDiscounts;
                            DateTime dtSessionUTCDate;
                            string strQPlusVATQs = "";

                            if (!customersRepository.CheckSessionOperationOffstreetInfo(ref oUser, parametersIn["SessionID"].ToString(), dGroupId.Value, sOpeId, out sPlate, out dtSavedInstallationTime, out operationType, out iFinalAmount, out iPartialVAT1, out iTime, out sTariff, out dChangeToApply, out dtSessionUTCDate, out dtUTCEntryDate, out dtUTCEndDate, out dtUTCExitLimitDate,
                                                                                        out dPercVAT1, out dPercVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE,
                                                                                        out sDiscounts, out strQPlusVATQs))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_OperationExpired);
                                Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }



                            parametersOut = new SortedList();
                            rt = ResultType.Result_OK;

                            // Get last offstreet operation with the same group id and logical id (<g> and <ope_id>)
                            OPERATIONS_OFFSTREET oLastParkOp = null;
                            if (!customersRepository.GetLastOperationOffstreetData(oGroup.GRP_ID, sOpeId, out oLastParkOp))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            if (oLastParkOp != null && (oLastParkOp.OPEOFF_TYPE == (int)OffstreetOperationType.Exit || oLastParkOp.OPEOFF_TYPE == (int)OffstreetOperationType.OverduePayment) &&
                                                       oLastParkOp.OPEOFF_EXIT_LIMIT_DATE.HasValue && oLastParkOp.OPEOFF_EXIT_LIMIT_DATE.Value >= dtgroupDateTime.Value)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_OperationAlreadyClosed);
                                Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOp = 0;
                            int iInitialTotalAmount = 0;
                            int iFinalTotalAmount = 0;
                            decimal dVAT = 0;
                            DateTime dtEntryDate = DateTime.Now;
                            DateTime dtEndDate = DateTime.Now;
                            DateTime dtMaxExitDate = DateTime.Now;
                            long lEllapsedTime;

                            ThirdPartyOffstreet oThirdPartyOffstreet = new ThirdPartyOffstreet();

                            int iWSTimeout = infraestructureRepository.GetRateWSTimeout(oGroup.INSTALLATION.INS_ID);


                            switch ((QueryExitOffstreetWSSignatureType)oOffstreetWsConfiguration.GOWC_QUERY_EXIT_WS_SIGNATURE_TYPE)
                            {
                                case QueryExitOffstreetWSSignatureType.test:
                                    {
                                        //DateTime? dtEntryDateIns = geograficAndTariffsRepository.ConvertUTCToInstallationDateTime(oOffstreetWsConfiguration.GROUP.GRP_INS_ID, dtUTCEntryDate);
                                        //DateTime? dtEndDateIns = geograficAndTariffsRepository.ConvertUTCToInstallationDateTime(oOffstreetWsConfiguration.GROUP.GRP_INS_ID, dtUTCEndDate);

                                        if (oLastParkOp != null && oLastParkOp.OPEOFF_TYPE != (int)OffstreetOperationType.Entry)
                                            iOp = 1;
                                        else
                                            iOp = 0;
                                        dVAT = oOffstreetWsConfiguration.GROUP.INSTALLATION.INS_PERC_VAT1;
                                        iInitialTotalAmount = iFinalAmount + Convert.ToInt32(Math.Round(iFinalAmount * dVAT, MidpointRounding.AwayFromZero));
                                        iFinalTotalAmount = iInitialTotalAmount - 10;
                                        if (iFinalTotalAmount < 0)
                                            iFinalTotalAmount = 0;

                                        iInitialTotalAmount = 500;

                                        lEllapsedTime = 0;
                                        parametersOut["op"] = iOp;
                                        parametersOut["cur"] = sCurIsoCode;

                                        parametersOut["parking_id"] = 1;
                                        parametersOut["ope_id"] = sOpeId;
                                        oOpeType = OffstreetOperationIdType.MeyparId;
                                        parametersOut["ope_id_type"] = (int)oOpeType;
                                        rt = ResultType.Result_OK;

                                    }
                                    break;

                                case QueryExitOffstreetWSSignatureType.meypar:
                                    {
                                        rt = oThirdPartyOffstreet.MeyparQueryCarDiscountforPayment(oOffstreetWsConfiguration, sOpeId, oOpeType, sDiscId, dtgroupDateTime.Value, iWSTimeout /*dtCurrentDateTime*/,
                                                                                               ref parametersOut, out iOp, out iInitialTotalAmount, out iFinalTotalAmount, out dVAT, out sCurIsoCode, /*out iTime,
                                                                                               out dtEntryDate, out dtEndDate, out sTariff, out dtMaxExitDate,*/ out lEllapsedTime);


                                        if (rt != ResultType.Result_OK)
                                        {
                                            xmlOut = GenerateXMLErrorResult(rt);
                                            Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                    }
                                    break;

                                case QueryExitOffstreetWSSignatureType.meyparAdventa:
                                    {
                                        rt = oThirdPartyOffstreet.MeyparAdventaQueryCarDiscountforPayment(oOffstreetWsConfiguration, sOpeId, oOpeType, sDiscId, dtgroupDateTime.Value /*dtCurrentDateTime*/, iFinalAmount, iWSTimeout,
                                                                                                          ref parametersOut, out iOp, out iInitialTotalAmount, out iFinalTotalAmount, out dVAT, out sCurIsoCode, out lEllapsedTime);


                                        if (rt != ResultType.Result_OK)
                                        {
                                            xmlOut = GenerateXMLErrorResult(rt);
                                            Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                        else
                                        {
                                            iInitialAmount = iFinalAmount;
                                            dVAT = dPercVAT1;
                                        }

                                    }
                                    break;

                                default:
                                    rt = ResultType.Result_Error_Generic;
                                    break;

                            }


                            if (rt == ResultType.Result_OK)
                            {

                                if (sCurIsoCode.ToUpper() != oOffstreetWsConfiguration.GROUP.INSTALLATION.CURRENCy.CUR_ISO_CODE)
                                {
                                    // ...
                                }

                                int? iPaymentTypeId = null;
                                int? iPaymentSubtypeId = null;
                                if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                                {
                                    iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                                    iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                                }

                                if (dVAT != 0)
                                {
                                    iInitialAmount = customersRepository.CalculateFEEReverse(iInitialTotalAmount, dVAT, 0, 0, 0, 0, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE);
                                    iFinalAmount = customersRepository.CalculateFEEReverse(iFinalTotalAmount, dVAT, 0, 0, 0, 0, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE);
                                }
                                else
                                {
                                    iInitialAmount = iInitialTotalAmount;
                                    iFinalAmount = iFinalTotalAmount;
                                }

                                decimal dPercFEETopped;
                                decimal dFixedFEE;

                                if (!customersRepository.GetFinantialParams(oUser, oGroup, (PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE, iPaymentTypeId, iPaymentSubtypeId,
                                                                            out dPercVAT1, out dPercVAT2, out dPercFEE, out dPercFEETopped, out dFixedFEE))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error getting installation FEE parameters: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                dPercVAT1 = dVAT;
                                iPartialVAT1 = iFinalTotalAmount - iFinalAmount;

                                if (!string.IsNullOrEmpty(sDiscounts))
                                    sDiscounts += ";";
                                sDiscounts += sDiscId;



                                int iQFEE = 0;
                                decimal dQFEE = 0;
                                int iQFEEChange = 0;
                                decimal dQVAT = 0;
                                int iQTotal = 0;
                                int iQTotalChange = 0;
                                int iQSubTotal = 0;
                                int iQSubTotalChange = 0;

                                iQTotal = customersRepository.CalculateFEE(iFinalAmount, dPercVAT1, dPercVAT2, dPercFEE, dPercFEETopped, dFixedFEE,
                                                                           iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE,
                                                                           out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                                dQFEE = Math.Round(iFinalAmount * dPercFEE, MidpointRounding.AwayFromZero);
                                if (dPercFEETopped > 0 && iQFEE > dPercFEETopped) dQFEE = dPercFEETopped;
                                dQFEE += dFixedFEE;
                                iQFEE = Convert.ToInt32(Math.Round(dQFEE, MidpointRounding.AwayFromZero));

                                dQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                iQSubTotal = iFinalAmount + iQFEE;

                                if (oOffstreetWsConfiguration.GROUP.INSTALLATION.CURRENCy.CUR_ISO_CODE != infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)))
                                {
                                    if (dChangeToApply < 0)
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                                    numberFormatProvider.NumberDecimalSeparator = ".";
                                    parametersOut["chng"] = dChangeToApply.ToString(numberFormatProvider);

                                    double dChangeFee = 0;
                                    int iQChange = ChangeQuantityFromInstallationCurToUserCur(iInitialAmount,
                                                                                              dChangeToApply, oOffstreetWsConfiguration.GROUP.INSTALLATION, oUser, out dChangeFee);

                                    parametersOut["qi"] = iInitialAmount.ToString();
                                    parametersOut["qich"] = iQChange.ToString();

                                    iQChange = ChangeQuantityFromInstallationCurToUserCur(iFinalAmount,
                                                                                          dChangeToApply, oOffstreetWsConfiguration.GROUP.INSTALLATION, oUser, out dChangeFee);

                                    iQFEEChange = ChangeQuantityFromInstallationCurToUserCur(iQFEE, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);
                                    iQSubTotalChange = ChangeQuantityFromInstallationCurToUserCur(iQSubTotal, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);
                                    iQTotalChange = ChangeQuantityFromInstallationCurToUserCur(iQTotal, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                                    parametersOut["qfch"] = iQChange.ToString();
                                    parametersOut["qfch_fee"] = iQFEEChange.ToString();
                                    parametersOut["qfch_subtotal"] = iQSubTotalChange.ToString();
                                    parametersOut["qfch_total"] = iQTotalChange.ToString();
                                    parametersOut["qf"] = iFinalAmount.ToString();
                                    parametersOut["qf_fee"] = iQFEE.ToString();
                                    parametersOut["qf_vat"] = dQVAT.ToString();
                                    parametersOut["qf_subtotal"] = iQSubTotal.ToString();
                                    parametersOut["qf_total"] = iQTotal.ToString();
                                }
                                else
                                {
                                    parametersOut["qi"] = iInitialAmount.ToString();
                                    parametersOut["qf"] = iFinalAmount.ToString();
                                    parametersOut["qf_fee"] = iQFEE.ToString();
                                    parametersOut["qf_vat"] = dQVAT.ToString();
                                    parametersOut["qf_subtotal"] = iQSubTotal.ToString();
                                    parametersOut["qf_total"] = iQTotal.ToString();
                                }



                                if (!customersRepository.AddSessionOperationOffstreetInfo(ref oUser, parametersIn["SessionID"].ToString(), operationType, sOpeId, sPlate, oGroup.GRP_ID, sTariff,
                                                                                         iFinalAmount, iPartialVAT1, iTime, dtSessionUTCDate, dtUTCEntryDate, dtUTCEndDate, dtUTCExitLimitDate, dtSavedInstallationTime, dChangeToApply,
                                                                                         dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, sDiscounts, null))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }


                            parametersOut["r"] = Convert.ToInt32(rt).ToString();
                            parametersOut["g"] = oGroup.GRP_ID.ToString();
                            parametersOut["ope_id"] = sOpeId;
                            parametersOut["ope_id_type"] = (int)oOpeType;
                            parametersOut["dc_id"] = sDiscId;

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }


                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

            }

            return xmlOut;
        }

        [WebMethod]
        public string QueryCarDiscountforPaymentJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("QueryCarDiscountforPaymentJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryCarDiscountforPayment(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);

                //Logger_AddLogMessage(string.Format("QueryCarDiscountforPaymentJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryCarDiscountforPaymentJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        /*
         *  ConfirmCarEntryManual 
         *  
        <ipark_in>
            <u>user login or generated user id for anonymous operations</u>
            <SessionID>dc952a84d38c9df22844897d8c2e5df25a0748168560b4f2</SessionID>
            <g> off street zone identification </g>
            <ope_id> Operation unique ID: number/barcode/ticket ID </ope_id>
            <ope_id_type> 1: MEYPAR id, 2: I@ id QR </ope_id_type>
            <p> plate </p>
            <d> date entry of the car in format hh24missddMMYY </d> -- real information
            <gate_id> gate identification </gate_id> -- optional
            <tar_id> tariff </tar_id> -- optional
            <space_desc> space where user parked the car </space_desc>
            <vers> 1.0 </vers>				-- Web Service Version
            <ah>authentication hash</ah>
        </ ipark _in>
         *      
        <ipark_out>
	        <r>Result of the method</r>
            <dentry> real entry date for the user </dentry>
            <gate_id> gate identification </gate_id>
            <tar_id> tariff </tar_id>
        </ipark_out>
         * 
        Result of the method:
         a.	Result: is an integer containing a Boolean value. 0 if an error has occurred
         * saving the operation or 1 if the operation has been stored correctly.      
         *
         */
        [WebMethod]
        public string ConfirmCarEntryManual(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ConfirmCarEntryManual: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["g"] == null) ||
                        (parametersIn["ope_id"] == null) ||
                        (parametersIn["ope_id_type"] == null) ||
                        (parametersIn["p"] == null) ||
                        (parametersIn["d"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            string strAppVersion = "";
                            decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();

                            rt = GetUserData(ref oUser, parametersIn, out strAppVersion, ref dSourceApp);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            decimal? dGroupId = null;
                            try
                            {
                                decimal dTryGroupId = Convert.ToDecimal(parametersIn["g"].ToString());
                                dGroupId = dTryGroupId;
                            }
                            catch
                            {
                                dGroupId = null;
                            }

                            GROUPS_OFFSTREET_WS_CONFIGURATION oParkingConfiguration = null;
                            DateTime? dtgroupDateTime = null;
                            if (!geograficAndTariffsRepository.getOffStreetConfiguration(dGroupId, null, null, ref oParkingConfiguration, ref dtgroupDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            GROUP oGroup = null;
                            DateTime? dtinstDateTime = null;
                            if (!geograficAndTariffsRepository.getGroup(dGroupId,
                                                                        ref oGroup,
                                                                        ref dtinstDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            if (oGroup.GRP_TYPE != (int)GroupType.OffStreet)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            string sOpeId = parametersIn["ope_id"].ToString();
                            OffstreetOperationIdType oOpeType = OffstreetOperationIdType.MeyparId;
                            try
                            {
                                oOpeType = (OffstreetOperationIdType)Convert.ToInt32(parametersIn["ope_id_type"].ToString());
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            string sPlate = NormalizePlate(parametersIn["p"].ToString());

                            if (sPlate.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }


                            string strPlateSharing = infraestructureRepository.GetParameterValue("PlateSharing");
                            bool bPlateSharing = true;

                            if (!string.IsNullOrEmpty(strPlateSharing))
                            {
                                bPlateSharing = (strPlateSharing != "0");
                            }

                            if (!customersRepository.IsPlateOfUser(ref oUser, sPlate))
                            {
                                if (bPlateSharing || !customersRepository.IsPlateAssignedToAnotherUser(ref oUser, sPlate))
                                {
                                    if (!customersRepository.AddPlateToUser(ref oUser, sPlate))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }
                                else
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Plate_Is_Assigned_To_Another_User);
                                    Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }
                            }

                            DateTime dtCurrentDate;
                            try
                            {
                                dtCurrentDate = DateTime.ParseExact(parametersIn["d"].ToString(), "HHmmssddMMyy", CultureInfo.InvariantCulture);
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            string sTariff = (parametersIn["tar_id"] ?? "").ToString();
                            string sGate = (parametersIn["gate_id"] ?? "").ToString();
                            string sSpaceDesc = (parametersIn["space_desc"] ?? "").ToString();

                            decimal? dLatitude = null;
                            decimal? dLongitude = null;
                            GetLatLon(parametersIn, out dLatitude, out dLongitude);

                            int iAmount = 0;
                            int iTime = 0;

                            double dChangeToApply = 1.0;

                            DateTime dtEntryDate = dtgroupDateTime.Value;
                            DateTime dtNotifyEntryDate = dtgroupDateTime.Value;
                            DateTime? dtPaymentDate = null;
                            DateTime? dtEndDate = null;
                            DateTime? dtExitLimitDate = null;
                            //DateTime? dtExitDate = null;

                            string sGateOut = "";
                            string sTariffOut = "";

                            // Get last offstreet operation with the same group id and logical id (<g> and <ope_id>)
                            OPERATIONS_OFFSTREET oLastParkOp = null;
                            if (!customersRepository.GetLastOperationOffstreetData(oGroup.GRP_ID, sOpeId, out oLastParkOp))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            if (oLastParkOp != null && oLastParkOp.OPEOFF_TYPE != (int)OffstreetOperationType.Entry)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_OperationAlreadyClosed);
                                Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            // Check if entry operation already exists
                            bool bEntryExist = (oLastParkOp != null && oLastParkOp.OPEOFF_TYPE == (int)OffstreetOperationType.Entry);

                            parametersOut = new SortedList();
                            rt = ResultType.Result_OK;
                            int iWSTimeout = infraestructureRepository.GetRateWSTimeout(oGroup.INSTALLATION.INS_ID);


                            if (!bEntryExist)
                            {

                                ThirdPartyOffstreet oThirdPartyOffstreet = null;
                                //long lEllapsedTime = -1;

                                oThirdPartyOffstreet = new ThirdPartyOffstreet();

                                switch ((ConfirmEntryOffstreetWSSignatureType)oParkingConfiguration.GOWC_ENTRY_WS_SIGNATURE_TYPE)
                                {
                                    case ConfirmEntryOffstreetWSSignatureType.test:
                                        {
                                            dtEntryDate = dtNotifyEntryDate;
                                            sGateOut = sGate;
                                            sTariffOut = sTariff;
                                            rt = ResultType.Result_OK;
                                        }
                                        break;

                                    case ConfirmEntryOffstreetWSSignatureType.meypar:
                                        {
                                            rt = oThirdPartyOffstreet.MeyparNotifyCarEntryManual(oParkingConfiguration.GOWC_GRP_ID, sOpeId, oOpeType, sPlate, dtNotifyEntryDate, sGate, sTariff, iWSTimeout,
                                                                                                    ref parametersOut, out dtEntryDate, out sGateOut, out sTariffOut);
                                        }
                                        break;

                                    case ConfirmEntryOffstreetWSSignatureType.no_call:
                                        rt = ResultType.Result_OK;
                                        break;

                                    default:
                                        rt = ResultType.Result_Error_Generic;
                                        break;
                                }

                                if (rt != ResultType.Result_OK)
                                {
                                    xmlOut = GenerateXMLErrorResult(rt);
                                    Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                                else
                                {

                                    int iCurrencyChargedQuantity = 0;
                                    decimal dOperationID = -1;
                                    decimal? dRechargeId;
                                    bool bRestoreBalanceInCaseOfRefund = true;
                                    int? iBalanceAfterRecharge = null;

                                    var session = oUser.MOBILE_SESSIONs.Where(r => r.MOSE_SESSIONID == parametersIn["SessionID"].ToString()
                                                                      && r.MOSE_USR_ID == oUser.USR_ID).First();


                                    string str3DSURL = null;
                                    string strMD = parametersIn["moneris_md"] != null ? parametersIn["moneris_md"].ToString() : "";
                                    string strCAVV = parametersIn["moneris_cavv"] != null ? parametersIn["moneris_cavv"].ToString() : "";
                                    string strECI = parametersIn["moneris_eci"] != null ? parametersIn["moneris_eci"].ToString() : "";

                                    string strBSRedsys3DSTransID = parametersIn["bsredsys_3ds_trans_id"] != null ? parametersIn["bsredsys_3ds_trans_id"].ToString() : "";
                                    string strBSRedsys3DSPares = parametersIn["bsredsys_3ds_pares"] != null ? parametersIn["bsredsys_3ds_pares"].ToString() : "";
                                    string strBSRedsys3DSCres = parametersIn["bsredsys_3ds_cres"] != null ? parametersIn["bsredsys_3ds_cres"].ToString() : "";
                                    string strBSRedsys3DSMethodData = parametersIn["bsredsys_3ds_methoddata"] != null ? parametersIn["bsredsys_3ds_methoddata"].ToString() : "";

                                    string strMercadoPagoToken = parametersIn["mercadopago_token"] != null ? parametersIn["mercadopago_token"].ToString() : "";

                                    string strMPProTransactionId = parametersIn["mercadopago_transaction_id"] != null ? parametersIn["mercadopago_transaction_id"].ToString() : "";
                                    string strMPProReference = parametersIn["mercadopago_reference"] != null ? parametersIn["mercadopago_reference"].ToString() : "";
                                    string strMPProCardHash = parametersIn["mercadopago_card_hash"] != null ? parametersIn["mercadopago_card_hash"].ToString() : "";
                                    string strMPProCardReference = parametersIn["mercadopago_card_reference"] != null ? parametersIn["mercadopago_card_reference"].ToString() : "";
                                    string strMPProCardScheme = parametersIn["mercadopago_card_scheme"] != null ? parametersIn["mercadopago_card_scheme"].ToString() : "";
                                    string strMPProGatewayDate = parametersIn["mercadopago_date_time_local_fmt"] != null ? parametersIn["mercadopago_date_time_local_fmt"].ToString() : "";
                                    string strMPProMaskedCardNumber = parametersIn["mercadopago_masked_card_number"] != null ? parametersIn["mercadopago_masked_card_number"].ToString() : "";
                                    string strMPProExpMonth = parametersIn["mercadopago_expires_end_month"] != null ? parametersIn["mercadopago_expires_end_month"].ToString() : "";
                                    string strMPProExpYear = parametersIn["mercadopago_expires_end_year"] != null ? parametersIn["mercadopago_expires_end_year"].ToString() : "";
                                    string strMPProCardType = parametersIn["mercadopago_card_type"] != null ? parametersIn["mercadopago_card_type"].ToString() : "";
                                    string strMPProDocumentID = parametersIn["mercadopago_document_id"] != null ? parametersIn["mercadopago_document_id"].ToString() : "";
                                    string strMPProDocumentType = parametersIn["mercadopago_document_type"] != null ? parametersIn["mercadopago_document_type"].ToString() : "";
                                    string strMPProInstallaments = parametersIn["mercadopago_installaments"] != null ? parametersIn["mercadopago_installaments"].ToString() : "";
                                    string strMPProCVVLength = parametersIn["mercadopago_cvv_length"] != null ? parametersIn["mercadopago_cvv_length"].ToString() : "";


                                    bool bPaymentInPerson = true;


                                    integraMobile.WS.integraCommonService oCommonService = CommonService();
                                    long lEllapsedTime = 0;
                                    rt = oCommonService.ChargeOffstreetOperation(OffstreetOperationType.Entry, sPlate, dChangeToApply, iAmount, iTime,
                                                                  dtEntryDate, dtNotifyEntryDate, dtPaymentDate, dtEndDate, dtExitLimitDate,
                                                                  oParkingConfiguration, oGroup, sOpeId, sTariffOut, sGateOut, "", false,
                                                                  ref oUser, session.MOSE_OS.Value, session.MOSE_ID, dLatitude, dLongitude, strAppVersion,
                                                                  0, 0, 0, 0, 0,
                                                                  0, 0, 0, 0,
                                                                  null, strMD, strCAVV, strECI,
                                                                  strBSRedsys3DSTransID, strBSRedsys3DSPares, strBSRedsys3DSCres, strBSRedsys3DSMethodData,
                                                                  strMercadoPagoToken,
                                                                  strMPProTransactionId,
                                                                  strMPProReference,
                                                                  strMPProCardHash,
                                                                  strMPProCardReference,
                                                                  strMPProCardScheme,
                                                                  strMPProGatewayDate,
                                                                  strMPProMaskedCardNumber,
                                                                  strMPProExpMonth,
                                                                  strMPProExpYear,
                                                                  strMPProCardType,
                                                                  strMPProDocumentID,
                                                                  strMPProDocumentType,
                                                                  strMPProInstallaments,
                                                                  strMPProCVVLength,
                                                                  dSourceApp, bPaymentInPerson, null,
                                                                  ref parametersOut, out iCurrencyChargedQuantity, out dOperationID,
                                                                  out dRechargeId, out iBalanceAfterRecharge, out bRestoreBalanceInCaseOfRefund, out str3DSURL, out lEllapsedTime);

                                    if (rt != ResultType.Result_OK)
                                    {

                                        if (rt == ResultType.Result_3DS_Validation_Needed)
                                        {
                                            parametersOut["r"] = Convert.ToInt32(rt).ToString();
                                            parametersOut["ThreeDSURL"] = str3DSURL;
                                            CUSTOMER_PAYMENT_MEAN oUserPaymentMean = customersRepository.GetUserPaymentMean(ref oUser, (INSTALLATION)null);
                                            parametersOut["cc_provider"] = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_PROVIDER;

                                            xmlOut = GenerateXMLOuput(parametersOut);

                                            if (xmlOut.Length == 0)
                                            {
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            }
                                            else
                                            {
                                                Logger_AddLogMessage(string.Format("ConfirmCarEntryManual: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                            }

                                            oUser = null;
                                            return xmlOut;

                                        }
                                        else
                                        {
                                            xmlOut = GenerateXMLErrorResult(rt);
                                            Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                    }

                                    parametersOut["utc_offset"] = geograficAndTariffsRepository.GetInstallationUTCOffSetInMinutes(oGroup.INSTALLATION.INS_ID);

                                }


                                if (Convert.ToInt32(parametersOut["r"]) == Convert.ToInt32(ResultType.Result_OK))
                                {
                                    try
                                    {
                                        /*OPERATIONS_OFFSTREET oParkOp = null;
                                        if (customersRepository.GetOperationOffstreetData(ref oUser, dOperationID, out oParkOp))
                                        {
                                            string culture = oUser.USR_CULTURE_LANG;
                                            CultureInfo ci = new CultureInfo(culture);
                                            Thread.CurrentThread.CurrentUICulture = ci;
                                            Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);

                                            string strParkingEmailSubject = ResourceExtension.GetLiteral("ConfirmOffstreet_EmailHeader;*/
                                        /*
                                            * ID: {0}<br>
                                            * Matr&iacute;cula: {1}<br>
                                            * Ciudad: {2}<br>
                                            * Zona: {3}<br>
                                            * Tarifa: {4}<br>
                                            * Fecha de emisi&ocuate;: {5:HH:mm:ss dd/MM/yyyy}<br>
                                            * Aparcamiento Comienza:  {6:HH:mm:ss dd/MM/yyyy}<br><b>
                                            * Aparcamiento Finaliza:  {7:HH:mm:ss dd/MM/yyyy}</b><br>
                                            * Cantidad Pagada: {8} 
                                            */
                                        /*string strParkingEmailBody = string.Format(ResourceExtension.GetLiteral("ConfirmOffstreet_EmailBody,
                                            oParkOp.OPEOFF_ID,
                                            oParkOp.USER_PLATE.USRP_PLATE,
                                            oParkOp.INSTALLATION.INS_DESCRIPTION,
                                            oParkOp.GROUP.GRP_DESCRIPTION,
                                            oParkOp.OPEOFF_TARIFF,
                                            oParkOp.OPEOFF_PAYMENT_DATE,
                                            oParkOp.OPEOFF_ENTRY_DATE,
                                            oParkOp.OPEOFF_EXIT_DATE,
                                            (oParkOp.OPEOFF_AMOUNT_CUR_ID == oParkOp.OPEOFF_BALANCE_CUR_ID ?
                                                string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(oParkOp.OPEOFF_AMOUNT) / 100, oParkOp.CURRENCy.CUR_ISO_CODE) :
                                                string.Format("{0:0.00} {1} / {2:0.00} {3}", Convert.ToDouble(oParkOp.OPEOFF_AMOUNT) / 100, oParkOp.CURRENCy.CUR_ISO_CODE,
                                                                                            Convert.ToDouble(oParkOp.OPEOFF_FINAL_AMOUNT) / 100, oParkOp.CURRENCy1.CUR_ISO_CODE)),
                                            oParkOp.OPEOFF_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPrepay ?
                                                    string.Format("{0} {1:0.00} {2}", ResourceExtension.GetLiteral("Confirm_EmailBody_Balance,
                                                                Convert.ToDouble(oUser.USR_BALANCE) / 100,
                                                                infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))) : "",
                                            ConfigurationManager.AppSettings["EmailSignatureURL"],
                                            ConfigurationManager.AppSettings["EmailSignatureGraphic"]);


                                        SendEmail(ref oUser, strParkingEmailSubject, strParkingEmailBody);
                                    }*/
                                    }
                                    catch { }

                                }
                            }
                            else
                            {
                                dtEntryDate = oLastParkOp.OPEOFF_ENTRY_DATE;
                                sGateOut = oLastParkOp.OPEOFF_GATE ?? "";
                                sTariffOut = oLastParkOp.OPEOFF_TARIFF ?? "";
                                if (!string.IsNullOrWhiteSpace(sSpaceDesc) && string.IsNullOrWhiteSpace(oLastParkOp.OPEOFF_SPACE_DESCRIPTION))
                                {
                                    if (!customersRepository.UpdateOperationOffstreetSpaceData(oLastParkOp.OPEOFF_ID, sSpaceDesc, out oLastParkOp))
                                    {
                                        rt = ResultType.Result_Error_Generic;
                                    }
                                }
                                else
                                {
                                    rt = ResultType.Result_Error_OperationEntryAlreadyExists;
                                }
                            }

                            parametersOut["r"] = Convert.ToInt32(rt).ToString();
                            parametersOut["dentry"] = dtEntryDate.ToString("HHmmssddMMyy");
                            parametersOut["gate_id"] = sGateOut;
                            parametersOut["tar_id"] = sTariffOut;

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("ConfirmCarEntryManual: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }


                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;

        }

        [WebMethod]
        public string ConfirmCarEntryManualJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ConfirmCarEntryManualJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ConfirmCarEntryManual(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);

                //Logger_AddLogMessage(string.Format("ConfirmCarEntryManualJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ConfirmCarEntryManualJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }

        [WebMethod]
        public string ModifyPhone(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ModifyPhone: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null) ||
                        (parametersIn["phone"] == null) ||
                        (parametersIn["email"] == null)
                        )
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ModifyPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ModifyPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            string strSignupScreenType = infraestructureRepository.GetParameterValue("SignUpScreenType");
                            SignupScreenType eSignupScreenType = SignupScreenType.Iparkme;

                            if (!string.IsNullOrEmpty(strSignupScreenType))
                            {
                                try
                                {
                                    eSignupScreenType = (SignupScreenType)Convert.ToInt32(strSignupScreenType);
                                }
                                catch { }
                            }


                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("ModifyPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            int? iCountry = null;
                            if (parametersIn.ContainsKey("ccode"))
                            {
                                try
                                {
                                    iCountry = Convert.ToInt32(parametersIn["ccode"].ToString());
                                    string strPrefix = infraestructureRepository.GetCountryTelephonePrefix(iCountry.Value);
                                    if (strPrefix.Length == 0)
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Country_Code);
                                        Logger_AddLogMessage(string.Format("ModifyPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }
                                catch
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Country_Code);
                                    Logger_AddLogMessage(string.Format("ModifyPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }
                            else
                            {
                                iCountry = oUser.USR_MAIN_TEL_COUNTRY.HasValue ? Convert.ToInt32(oUser.USR_MAIN_TEL_COUNTRY.Value) : (int?)null;
                            }

                            string sTelephone = parametersIn["phone"].ToString();
                            string sEmail = parametersIn["email"].ToString();

                            // Verificar phone
                            if ((oUser.USR_MAIN_TEL_COUNTRY != iCountry) ||
                                (oUser.USR_MAIN_TEL != sTelephone))
                            {
                                if ((eSignupScreenType == SignupScreenType.Iparkme) && (iCountry.HasValue) && (!string.IsNullOrEmpty(sTelephone)))
                                {
                                    if (customersRepository.ExistMainTelephone(iCountry.Value, sTelephone))
                                    {

                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Mobile_Phone_Already_Exist);
                                        Logger_AddLogMessage(string.Format("ModifyPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }
                            }

                            // Verificar email
                            // ...

                            bool bUsernameEqualsEmail = (ConfigurationManager.AppSettings["UsernameEqualsToEmail"].ToString() == "1");

                            bool bEmailHasChanged = (oUser.USR_EMAIL != sEmail);
                            string strOldUsername = oUser.USR_USERNAME;

                            if (!customersRepository.ModifyUserEmailOrTelephone(ref oUser, iCountry, sTelephone, sEmail, bUsernameEqualsEmail))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ModifyPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            else
                            {

                                if (bEmailHasChanged)
                                {

                                    if (bUsernameEqualsEmail)
                                    {
                                        string currentPassword = "";
                                        if (!FormAuthMemberShip.MembershipService.GetPassword(strOldUsername, ref currentPassword))
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("ModifyPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                        else
                                        {
                                            //FormAuthMemberShip.FormsService.SignOut();
                                            bool bDeleted = FormAuthMemberShip.MembershipService.DeleteUser(strOldUsername);

                                            if (bDeleted)
                                            {
                                                FormAuthMemberShip.MembershipService.CreateUser(sEmail, currentPassword, sEmail);
                                            }
                                        }

                                    }
                                    else
                                    {
                                        FormAuthMemberShip.MembershipService.ChangeEmail(oUser.USR_USERNAME, sEmail);
                                    }

                                }


                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ModifyPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("ModifyPhone: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ModifyPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ModifyPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string ModifyPhoneJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ModifyPhone(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ModifyPhoneJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }


        [WebMethod]
        public string ModifyAccountData(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ModifyAccountData: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ModifyAccountData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ModifyAccountData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            string strSignupScreenType = infraestructureRepository.GetParameterValue("SignUpScreenType");
                            SignupScreenType eSignupScreenType = SignupScreenType.Iparkme;

                            if (!string.IsNullOrEmpty(strSignupScreenType))
                            {
                                try
                                {
                                    eSignupScreenType = (SignupScreenType)Convert.ToInt32(strSignupScreenType);
                                }
                                catch { }
                            }


                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("ModifyAccountData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            int? iCountry = null;

                            string sTelephone = parametersIn["phone"] != null ? parametersIn["phone"].ToString().Trim() : "";

                            if (parametersIn.ContainsKey("ccode"))
                            {
                                try
                                {
                                    iCountry = Convert.ToInt32(parametersIn["ccode"].ToString());
                                    string strPrefix = infraestructureRepository.GetCountryTelephonePrefix(iCountry.Value);
                                    if (strPrefix.Length == 0)
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Country_Code);
                                        Logger_AddLogMessage(string.Format("ModifyAccountData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }
                                catch
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Country_Code);
                                    Logger_AddLogMessage(string.Format("ModifyAccountData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                if (string.IsNullOrEmpty(sTelephone))
                                {
                                    iCountry = null;
                                }
                            }



                            string sFirstName = parametersIn["firstname"] != null ? parametersIn["firstname"].ToString().Trim() : "";
                            string sSurname = parametersIn["surname"] != null ? parametersIn["surname"].ToString().Trim() : "";


                            bool bChangePhone = false;


                            if (iCountry.HasValue && !string.IsNullOrEmpty(sTelephone))
                            {

                                // Verificar phone
                                if ((oUser.USR_MAIN_TEL_COUNTRY != iCountry) ||
                                    (oUser.USR_MAIN_TEL != sTelephone))
                                {
                                    if (eSignupScreenType == SignupScreenType.Iparkme)
                                    {
                                        if (customersRepository.ExistMainTelephone(iCountry.Value, sTelephone))
                                        {

                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Mobile_Phone_Already_Exist);
                                            Logger_AddLogMessage(string.Format("ModifyAccountData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                        bChangePhone = true;
                                    }
                                }
                            }
                            else
                            {
                                iCountry = (int?)oUser.USR_MAIN_TEL_COUNTRY;
                                sTelephone = oUser.USR_MAIN_TEL;
                            }



                            if (bChangePhone || oUser.CUSTOMER.CUS_FIRST_NAME != sFirstName || oUser.CUSTOMER.CUS_SURNAME1 != sSurname)
                            {
                                if (!customersRepository.ModifyAccountData(ref oUser, iCountry, sTelephone, sFirstName, sSurname))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("ModifyAccountData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }


                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ModifyAccountData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("ModifyAccountData: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ModifyAccountData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ModifyAccountData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string ModifyAccountDataJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ModifyAccountData(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ModifyAccountDataJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }







        [WebMethod]
        public string GetPhone(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("GetPhone: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null)
                        )
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("GetPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("GetPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("GetPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                            parametersOut["ccode"] = oUser.USR_MAIN_TEL_COUNTRY.HasValue ? oUser.USR_MAIN_TEL_COUNTRY.ToString() : "";
                            parametersOut["phone"] = oUser.USR_MAIN_TEL;

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("GetPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("GetPhone: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("GetPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("GetPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string GetPhoneJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = GetPhone(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("GetPhoneJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string ModifyEmail(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ModifyEmail: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null) ||
                        (parametersIn["email"] == null) ||
                        (parametersIn["newemail"] == null)
                        )
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ModifyEmail::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ModifyEmail::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("ModifyEmail::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            string sEmail = parametersIn["newemail"].ToString();

                            // Verify email
                            if (oUser.USR_EMAIL != sEmail)
                            {
                                if (customersRepository.ExistEmail(sEmail))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Email_Already_Exist);
                                    Logger_AddLogMessage(string.Format("ModifyEmail::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }
                            }

                            bool bUsernameEqualsEmail = (ConfigurationManager.AppSettings["UsernameEqualsToEmail"].ToString() == "1");

                            bool bEmailHasChanged = (oUser.USR_EMAIL != sEmail);
                            string strOldUsername = oUser.USR_USERNAME;

                            if (!customersRepository.ModifyUserEmailOrTelephone(ref oUser, oUser.USR_MAIN_TEL_COUNTRY, oUser.USR_MAIN_TEL, sEmail, bUsernameEqualsEmail))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ModifyEmail::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            else
                            {

                                if (bEmailHasChanged)
                                {

                                    if (bUsernameEqualsEmail)
                                    {
                                        string currentPassword = "";
                                        if (!FormAuthMemberShip.MembershipService.GetPassword(strOldUsername, ref currentPassword))
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("ModifyEmail::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                        else
                                        {
                                            //FormAuthMemberShip.FormsService.SignOut();
                                            bool bDeleted = FormAuthMemberShip.MembershipService.DeleteUser(strOldUsername);

                                            if (bDeleted)
                                            {
                                                FormAuthMemberShip.MembershipService.CreateUser(sEmail, currentPassword, sEmail);
                                            }
                                        }

                                    }
                                    else
                                    {
                                        FormAuthMemberShip.MembershipService.ChangeEmail(oUser.USR_USERNAME, sEmail);
                                    }

                                }


                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            parametersOut["u"] = oUser.USR_USERNAME;
                            parametersOut["exist_email"] = (infraestructureRepository.IsInternalEmail(oUser.USR_USERNAME) ? 0 : 1);

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ModifyEmail::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("ModifyEmail: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ModifyEmail::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ModifyEmail::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string ModifyEmailJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ModifyEmail(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ModifyEmailJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string ModifyPassword(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ModifyPassword: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null) ||
                        (parametersIn["oldpassw"] == null) ||
                        (parametersIn["newpassw"] == null)
                        )
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ModifyPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ModifyPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("ModifyPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            string sOldPassword = parametersIn["oldpassw"].ToString();
                            string sNewPassword = parametersIn["newpassw"].ToString();

                            // Verify old password
                            string currentPassword = "";
                            if (!FormAuthMemberShip.MembershipService.GetPassword(oUser.USR_USERNAME, ref currentPassword))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ModifyPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            else
                            {
                                if (currentPassword != sOldPassword && sOldPassword != sNewPassword)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ModifyPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }



                            if (!FormAuthMemberShip.MembershipService.ChangePassword(oUser.USR_USERNAME, sOldPassword, sNewPassword))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ModifyPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ModifyPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("ModifyPassword: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ModifyPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ModifyPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string ModifyPasswordJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ModifyPassword(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ModifyPasswordJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string ModifyBillingInfo(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }


            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ModifyBillingInfo: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null) ||
                        (parametersIn["coname"] == null) ||
                        (parametersIn["coaddr"] == null) ||
                        //(parametersIn["coaddrno"] == null) ||
                        (parametersIn["coaddrpcode"] == null) ||
                        (parametersIn["coaddrcity"] == null) ||
                        (parametersIn["coaddrvat"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ModifyBillingInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ModifyBillingInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("ModifyBillingInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            string sConame = parametersIn["coname"].ToString();
                            string sCoaddr = parametersIn["coaddr"].ToString();

                            int iCoaddrno = 1;
                            if (parametersIn["coaddrno"] != null)
                            {
                                try
                                {
                                    iCoaddrno = Convert.ToInt32(parametersIn["coaddrno"].ToString());
                                }
                                catch
                                {

                                }
                            }

                            string sCoaddrpcode = parametersIn["coaddrpcode"].ToString();
                            string sCoaddrcity = parametersIn["coaddrcity"].ToString();
                            string sCoaddrvat = parametersIn["coaddrvat"].ToString();

                            if (!customersRepository.ModifyUserBillingInfo(ref oUser, sConame, sCoaddr, iCoaddrno, sCoaddrpcode, sCoaddrcity, sCoaddrvat, false))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ModifyBillingInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ModifyBillingInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("ModifyBillingInfo: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ModifyBillingInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ModifyBillingInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string ModifyBillingInfoJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ModifyBillingInfo(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ModifyBillingInfoJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }



        [WebMethod]
        public string ShopKeeperRequest(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ShopKeeperRequest: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null) ||
                        (parametersIn["coname"] == null) ||
                        (parametersIn["coaddr"] == null) ||
                        (parametersIn["coaddrno"] == null) ||
                        (parametersIn["coaddrpcode"] == null) ||
                        (parametersIn["coaddrcity"] == null) ||
                        (parametersIn["coaddrvat"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ShopKeeperRequest::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ShopKeeperRequest::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";

                            decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();

                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion, ref dSourceApp);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("ShopKeeperRequest::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            string sConame = parametersIn["coname"].ToString();
                            string sCoaddr = parametersIn["coaddr"].ToString();

                            int iCoaddrno = 0;
                            if (parametersIn["coaddrno"] != null)
                            {
                                try
                                {
                                    iCoaddrno = Convert.ToInt32(parametersIn["coaddrno"].ToString());
                                }
                                catch { }
                            }

                            string sCoaddrpcode = parametersIn["coaddrpcode"].ToString();
                            string sCoaddrcity = parametersIn["coaddrcity"].ToString();
                            string sCoaddrvat = parametersIn["coaddrvat"].ToString();

                            if (!customersRepository.ModifyUserBillingInfo(ref oUser, sConame, sCoaddr, iCoaddrno, sCoaddrpcode, sCoaddrcity, sCoaddrvat, true))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ShopKeeperRequest::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            string strSourceAppEmailPrefix = GetEmailSourceAppEmailPrefix(dSourceApp);


                            string culture = oUser.USR_CULTURE_LANG;
                            CultureInfo ci = new CultureInfo(culture);
                            Thread.CurrentThread.CurrentUICulture = ci;
                            Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);
                            integraMobile.WS.Properties.Resource.Culture = ci;


                            string strShopKeeperRequestSubject = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "CommerceSubscriptionRequest_Header"));
                            string strShopKeeperRequestBody = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "CommerceSubscriptionRequest"),
                                                       GetEmailFooter(ref oUser, dSourceApp));


                            SendEmail(ref oUser, strShopKeeperRequestSubject, strShopKeeperRequestBody, dSourceApp);

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ShopKeeperRequest::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("ShopKeeperRequest: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ShopKeeperRequest::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ShopKeeperRequest::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string ShopKeeperRequestJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ShopKeeperRequest(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ShopKeeperRequestJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }





        [WebMethod]
        public string GetBillingInfo(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("GetBillingInfo: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("GetBillingInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("GetBillingInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("GetBillingInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            parametersOut["coname"] = oUser.CUSTOMER.CUS_NAME;
                            parametersOut["coaddr"] = oUser.CUSTOMER.CUS_STREET;
                            parametersOut["coaddrno"] = oUser.CUSTOMER.CUS_STREE_NUMBER.ToString();
                            parametersOut["coaddrpcode"] = oUser.CUSTOMER.CUS_ZIPCODE;
                            parametersOut["coaddrcity"] = oUser.CUSTOMER.CUS_CITY;
                            parametersOut["coaddrvat"] = oUser.CUSTOMER.CUS_DOC_ID;

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("GetBillingInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("GetBillingInfo: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("GetBillingInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("GetBillingInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string GetBillingInfoJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = GetBillingInfo(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("GetBillingInfoJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string GetUserInfo(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("GetUserInfo: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("GetUserInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("GetUserInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("GetUserInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            parametersOut["ccode"] = oUser.CUSTOMER.CUS_COU_ID.ToString();
                            parametersOut["ccodephone"] = oUser.USR_MAIN_TEL_COUNTRY.HasValue ? oUser.USR_MAIN_TEL_COUNTRY.Value.ToString() : "";
                            parametersOut["phone"] = oUser.USR_MAIN_TEL;
                            parametersOut["coname"] = oUser.CUSTOMER.CUS_NAME;
                            parametersOut["coaddr"] = oUser.CUSTOMER.CUS_STREET;
                            parametersOut["coaddrno"] = oUser.CUSTOMER.CUS_STREE_NUMBER.ToString();
                            parametersOut["coaddrpcode"] = oUser.CUSTOMER.CUS_ZIPCODE;
                            parametersOut["coaddrcity"] = oUser.CUSTOMER.CUS_CITY;
                            parametersOut["coaddrvat"] = oUser.CUSTOMER.CUS_DOC_ID;
                            parametersOut["firstname"] = oUser.CUSTOMER.CUS_FIRST_NAME;
                            parametersOut["surname"] = oUser.CUSTOMER.CUS_SURNAME1;


                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("GetUserInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("GetUserInfo: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("GetUserInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("GetUserInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string GetUserInfoJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = GetUserInfo(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("GetUserInfoJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string InviteFriend(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("InviteFriend: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null) ||
                        (parametersIn["friendemail"] == null)
                        )
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("InviteFriend::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("InviteFriend::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();


                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion, ref dSourceApp);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("InviteFriend::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            string sFriendEmail = parametersIn["friendemail"].ToString().ToLower().Trim();

                            string sFriendMessage = "";
                            if (parametersIn[""] != null)
                            {
                                try
                                {
                                    sFriendMessage = parametersIn["friendmsg"].ToString();
                                }
                                catch { }
                            }

                            if (customersRepository.ExistEmail(sFriendEmail))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Email_Already_Exist);
                                Logger_AddLogMessage(string.Format("InviteFriend::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            string culture = oUser.USR_CULTURE_LANG;
                            CultureInfo ci = new CultureInfo(culture);
                            Thread.CurrentThread.CurrentUICulture = ci;
                            Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);
                            integraMobile.WS.Properties.Resource.Culture = ci;


                            string strSubject = string.Empty;
                            string strMessageBody = string.Empty;
                            CAMPAING_USER_ASSIGNATION campaingUserAssignations = null;

                            string strSourceAppEmailPrefix = GetEmailSourceAppEmailPrefix(dSourceApp);


                            if (customersRepository.UserHasCampaign(oUser, ref campaingUserAssignations))
                            {
                                if (campaingUserAssignations != null && campaingUserAssignations.CAUS_CAMP_ID > 0)
                                {
                                    strSubject = ResourceExtension.GetLiteral(string.Format(strSourceAppEmailPrefix + "InvitedAFriendByCampaing_EmailHeader_{0}", campaingUserAssignations.CAUS_CAMP_ID));
                                    strMessageBody = string.Format(ResourceExtension.GetLiteral(string.Format(strSourceAppEmailPrefix + "InvitedAFriendByCampaing_EmailBody_{0}", campaingUserAssignations.CAUS_CAMP_ID)), oUser.USR_EMAIL);
                                }
                            }
                            else
                            {
                                strSubject = ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "InviteFriend_Email_Subject");
                                strMessageBody = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "InviteFriend_Email_Body"),
                                                                        ConfigurationManager.AppSettings["InviteFriend_WebBaseURL"] ?? "#",
                                                                        oUser.USR_USERNAME, oUser.USR_EMAIL, sFriendMessage,
                                                                        GetEmailFooter(ref oUser, dSourceApp));
                            }

                            long lSenderId = infraestructureRepository.SendEmailTo(sFriendEmail, strSubject, strMessageBody, dSourceApp);

                            if (lSenderId <= 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("InviteFriend::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }

                            if (!customersRepository.InsertUserFriend(ref oUser, sFriendEmail, lSenderId))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("InviteFriend::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(rt).ToString();

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("InviteFriend::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("InviteFriend: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("InviteFriend::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("InviteFriend::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string InviteFriendJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = InviteFriend(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("InviteFriendJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string GetFavouritesAreas(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("GetFavouritesAreas: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null)
                        )
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("GetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("GetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("GetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            List<USERS_FAVOURITES_AREA> oFavouriteAreas = null;
                            if (!customersRepository.GetFavouriteAreasFromUser(ref oUser, null, out oFavouriteAreas))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("GetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(rt).ToString();

                            string sAppVersion = Helpers.ValidateAppVersionParameterIn(parametersIn, ConstantsEntity.PARAMETER_APP_VERS, ConstantsEntity.PARAMETER_VERS, ref xmlOut);
                            if (!string.IsNullOrEmpty(xmlOut))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("GetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            if (!CheckVersionFormat(sAppVersion))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("GetFavouritesAreas::Error: Invalid app version format: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            ulong ulAppVersion = AppUtilities.AppVersion(sAppVersion);

                            string sFavAreas = "";
                            foreach (var oFavArea in oFavouriteAreas)
                            {
                                if (ulAppVersion >= _VERSION_3_5)
                                {
                                    sFavAreas += string.Format("<favarea><city>{0}</city><sector>{1}</sector><rate>{2}</rate><plate>{3}</plate><amount>{4}</amount></favarea>", oFavArea.USRA_INS_ID, oFavArea.USRA_GRP_ID, oFavArea.USRA_TAR_ID, oFavArea.USRA_PLATE, oFavArea.USRA_AMOUNT);
                                    parametersOut["favareas"] = string.Format("<favarea><city>{0}</city><sector>{1}</sector><rate>{2}</rate><plate>{3}</plate><amount>{4}</amount></favarea>", oFavArea.USRA_INS_ID, oFavArea.USRA_GRP_ID, oFavArea.USRA_TAR_ID, oFavArea.USRA_PLATE, oFavArea.USRA_AMOUNT);
                                }
                                else
                                {
                                    sFavAreas += string.Format("<favarea><city>{0}</city><sector>{1}</sector><rate>{2}</rate></favarea>", oFavArea.USRA_INS_ID, oFavArea.USRA_GRP_ID, oFavArea.USRA_TAR_ID);
                                    parametersOut["favareas"] = string.Format("<favarea><city>{0}</city><sector>{1}</sector><rate>{2}</rate></favarea>", oFavArea.USRA_INS_ID, oFavArea.USRA_GRP_ID, oFavArea.USRA_TAR_ID);
                                }
                            }

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("GetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("GetFavouritesAreas: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("GetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("GetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string GetFavouritesAreasJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = GetFavouritesAreas(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("GetFavouritesAreasJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string SetFavouritesAreas(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("SetFavouritesAreas: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters2(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null)
                        )
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("SetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("SetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("SetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            List<USERS_FAVOURITES_AREA> oFavouriteAreas = new List<USERS_FAVOURITES_AREA>();

                            string sSufix = "";
                            SortedList oParameters = null;
                            while (parametersIn.ContainsKey("favareas_favarea" + sSufix))
                            {
                                rt = FindParameters(parametersIn["favareas_favarea" + sSufix].ToString(), out oParameters);
                                if (rt == ResultType.Result_OK)
                                {
                                    string sAppVersion = Helpers.ValidateAppVersionParameterIn(parametersIn, ConstantsEntity.PARAMETER_APP_VERS, ConstantsEntity.PARAMETER_VERS, ref xmlOut);
                                    if (!string.IsNullOrEmpty(xmlOut))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("SetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                    if (!CheckVersionFormat(sAppVersion))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("SetFavouritesAreas::Error: Invalid app version format: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    ulong ulAppVersion = AppUtilities.AppVersion(sAppVersion);

                                    if (ulAppVersion >= _VERSION_3_5)
                                    {
                                        oFavouriteAreas.Add(new USERS_FAVOURITES_AREA()
                                        {
                                            USRA_USR_ID = oUser.USR_ID,
                                            USRA_INS_ID = Convert.ToDecimal(oParameters["city"]),
                                            USRA_GRP_ID = Convert.ToDecimal(oParameters["sector"]),
                                            USRA_TAR_ID = Convert.ToDecimal(oParameters["rate"]),
                                            USRA_PLATE = Convert.ToString(oParameters["plate"]),
                                            USRA_AMOUNT = Convert.ToInt32(oParameters["amount"])
                                        });
                                    }
                                    else
                                    {
                                        oFavouriteAreas.Add(new USERS_FAVOURITES_AREA()
                                        {
                                            USRA_USR_ID = oUser.USR_ID,
                                            USRA_INS_ID = Convert.ToDecimal(oParameters["city"]),
                                            USRA_GRP_ID = Convert.ToDecimal(oParameters["sector"]),
                                            USRA_TAR_ID = Convert.ToDecimal(oParameters["rate"])
                                        });
                                    }
                                    sSufix = (sSufix == "" ? "1" : Convert.ToString(Convert.ToInt32(sSufix) + 1));
                                }
                                else
                                {
                                    xmlOut = GenerateXMLErrorResult(rt);
                                    Logger_AddLogMessage(string.Format("SetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }

                            if (!customersRepository.SetFavouriteAreasFromUser(ref oUser, oFavouriteAreas))
                            {
                                rt = ResultType.Result_Error_Generic;
                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(rt).ToString();

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("SetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("SetFavouritesAreas: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("SetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("SetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string SetFavouritesAreasJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = SetFavouritesAreas(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("SetFavouritesAreasJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string GetPreferredPlates(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("GetPreferredPlates: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null)
                        )
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("GetPreferredPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("GetPreferredPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("GetPreferredPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            List<USERS_PREFERRED_PLATE> oPreferredPlates = null;
                            if (!customersRepository.GetPreferredPlatesFromUser(ref oUser, null, out oPreferredPlates))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("GetPreferredPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            string sPrefPlates = "";
                            foreach (var oPrefPlate in oPreferredPlates)
                            {
                                sPrefPlates += string.Format("<prefplate><city>{0}</city><lp>{1}</lp></prefplate>", oPrefPlate.USRL_INS_ID, oPrefPlate.USER_PLATE.USRP_PLATE);
                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(rt).ToString();

                            parametersOut["prefplates"] = sPrefPlates;

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("GetPreferredPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("GetPreferredPlates: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("GetPreferredPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("GetPreferredPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string GetPreferredPlatesJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = GetPreferredPlates(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("GetPreferredPlatesJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string SetPreferredPlates(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("SetPreferredPlates: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters2(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null)
                        )
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("SetPreferredPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("SetPreferredPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("SetPreferredPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            List<USERS_PREFERRED_PLATE> oPreferredPlates = new List<USERS_PREFERRED_PLATE>();

                            string sSufix = "";
                            SortedList oParameters = null;
                            while (parametersIn.ContainsKey("prefplates_prefplate" + sSufix))
                            {
                                rt = FindParameters(parametersIn["prefplates_prefplate" + sSufix].ToString(), out oParameters);
                                if (rt == ResultType.Result_OK)
                                {
                                    USER_PLATE oUserPlate = null;
                                    if (customersRepository.GetPlateFromUser(ref oUser, oParameters["lp"].ToString(), out oUserPlate))
                                    {
                                        oPreferredPlates.Add(new USERS_PREFERRED_PLATE()
                                        {
                                            USRL_USR_ID = oUser.USR_ID,
                                            USRL_INS_ID = Convert.ToDecimal(oParameters["city"]),
                                            USRL_USRP_ID = oUserPlate.USRP_ID
                                        });
                                        sSufix = (sSufix == "" ? "1" : Convert.ToString(Convert.ToInt32(sSufix) + 1));
                                    }
                                    else
                                        rt = ResultType.Result_Error_Invalid_Input_Parameter;
                                }

                                if (rt != ResultType.Result_OK)
                                {
                                    xmlOut = GenerateXMLErrorResult(rt);
                                    Logger_AddLogMessage(string.Format("SetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }

                            if (!customersRepository.SetPreferredPlatesFromUser(ref oUser, oPreferredPlates))
                            {
                                rt = ResultType.Result_Error_Generic;
                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(rt).ToString();

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("SetPreferredPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("SetPreferredPlates: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("SetPreferredPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("SetPreferredPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string SetPreferredPlatesJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = SetPreferredPlates(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("SetPreferredPlatesJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string PAGQueryLogin(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("PAGQueryLogin: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null) ||
                        (parametersIn["upagatelia"] == null) ||
                        (parametersIn["paswpagatelia"] == null) ||
                        (parametersIn["d"] == null)
                        )
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("PAGQueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("PAGQueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("PAGQueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            DateTime dtQuery;
                            try
                            {
                                dtQuery = DateTime.ParseExact(parametersIn["d"].ToString(), "HHmmssddMMyy",
                                                              CultureInfo.InvariantCulture);
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("PAGQueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            string sPagateliaUser = parametersIn["upagatelia"].ToString();
                            string sPagateliaPwd = parametersIn["paswpagatelia"].ToString();

                            decimal? dLatitude = null;
                            decimal? dLongitude = null;
                            GetLatLon(parametersIn, out dLatitude, out dLongitude);

                            // ***
                            string sPagateliaSessionID; // = GenerateNewGuid();
                            decimal? dPagateliaBalance;
                            string sPagateliaCurIsoCode;
                            //int iPagateliaBalance = GetRandomNumber(20, 60);

                            // External ws 3rdPAGQueryLogin
                            ThirdPartyPagatelia oThirdPartyPagatelia = new ThirdPartyPagatelia();

                            rt = oThirdPartyPagatelia.QueryLogin(sPagateliaUser, sPagateliaPwd, dtQuery, dLatitude, dLongitude, out sPagateliaSessionID, out dPagateliaBalance, out sPagateliaCurIsoCode);
                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("PAGQueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            // save pagatelia user/pwd to oUser
                            if (!customersRepository.SetUserPagateliaLastCredentials(ref oUser, sPagateliaUser, sPagateliaPwd))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("PAGQueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(rt).ToString();

                            parametersOut["PagateliaSessionID"] = sPagateliaSessionID;
                            if (dPagateliaBalance.HasValue) parametersOut["pagatelia_balance"] = Convert.ToInt32(Math.Round(dPagateliaBalance.Value * 100, MidpointRounding.AwayFromZero));
                            parametersOut["cur"] = sPagateliaCurIsoCode;

                            string sXmlRechPagValues = "";
                            foreach (CURRENCY_RECHARGE_VALUE oRechargeValue in infraestructureRepository
                                                .getCURRENCY_RECHARGE_VALUEs(infraestructureRepository.Currencies.Where(r => r.CUR_ISO_CODE == sPagateliaCurIsoCode.ToUpper()).FirstOrDefault().CUR_ID)
                                                .Where(s => s.CURV_VALUE_TYPE == (int)RechargeValuesTypes.rvt_RechargePagatelia)
                                                .OrderBy(s => s.CURV_VALUE))
                            {
                                sXmlRechPagValues += string.Format("<value>{0}</value>", oRechargeValue.CURV_VALUE);
                            }
                            parametersOut["rechpagvalues"] = sXmlRechPagValues;

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("PAGQueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("PAGQueryLogin: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("PAGQueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("PAGQueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string PAGQueryLoginJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = PAGQueryLogin(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("PAGQueryLoginJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string UpdateNBlockBalanceforToll(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("UpdateNBlockBalanceforToll: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters2(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null)
                        )
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("UpdateNBlockBalanceforToll::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("UpdateNBlockBalanceforToll::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();

                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion, ref dSourceApp);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("UpdateNBlockBalanceforToll::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            decimal? dLatitude = null;
                            decimal? dLongitude = null;
                            GetLatLon(parametersIn, out dLatitude, out dLongitude);

                            string sQr = null;
                            if (parametersIn["qr"] != null) sQr = parametersIn["qr"].ToString();

                            INSTALLATION oInstallation = null;
                            DateTime? dtinstDateTime = null;
                            if (!geograficAndTariffsRepository.getInstallation(dInsId,
                                                                               dLatitude,
                                                                               dLongitude,
                                                                               ref oInstallation,
                                                                               ref dtinstDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("UpdateNBlockBalanceforToll::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            parametersOut = new SortedList();

                            decimal dMovementID = 0;
                            int iTollAmount;
                            int iTotalQuantity;
                            int iPartialVAT1;
                            int iPartialPercFEE;
                            int iPartialFixedFEE;
                            int iPartialPercFEEVAT;
                            int iPartialFixedFEEVAT;
                            int iPartialBonusFEE;
                            int iPartialBonusFEEVAT;
                            DateTime? dtOpeDateUTC = DateTime.UtcNow;

                            bool bExistTollMovement = false;
                            TOLL_MOVEMENT oTollMovement = null;
                            if (!string.IsNullOrEmpty(sQr))
                            {
                                oTollMovement = customersRepository.GetTollMovementsByQr(sQr)
                                                                   .OrderByDescending(t => t.TOLM_DATE)
                                                                   .FirstOrDefault();
                                bExistTollMovement = (oTollMovement != null);
                            }

                            if (!bExistTollMovement)
                            {
                                DateTime dtOpeDate = dtinstDateTime.Value;
                                string sPlate = null;
                                string sTollTariff = null;
                                TOLL oToll = null;
                                string sExternalId = null;
                                bool bOnline = true;
                                iTollAmount = oInstallation.INS_TOLL_BLOCKING_AMOUNT ?? 0;

                                if (!string.IsNullOrEmpty(sQr))
                                {
                                    bOnline = false;
                                    integraMobile.Infrastructure.QrDecoder.QrTollData oQrData = null;
                                    if (integraMobile.Infrastructure.QrDecoder.QrDecoderUtil.QRDecode(sQr, out oQrData))
                                        sPlate = oQrData.Plate;
                                }

                                ResultType rtRes = ResultType.Result_OK;

                                double dChangeToApply = 1.0;
                                //DateTime dtSavedInstallationTime = DateTime.UtcNow;                            
                                decimal dVAT1;
                                decimal dVAT2;
                                decimal dPercFEE;
                                int iPercFEETopped;
                                int iFixedFEE;
                                decimal dPercBonus = 0;

                                int? iPaymentTypeId = null;
                                int? iPaymentSubtypeId = null;
                                if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                                {
                                    iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                                    iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                                }

                                dVAT1 = 0;
                                dVAT2 = 0;
                                dPercFEE = 0;
                                iPercFEETopped = 0;
                                iFixedFEE = 0;

                                iPartialVAT1 = 0;
                                iPartialPercFEEVAT = 0;
                                iPartialFixedFEEVAT = 0;
                                iPartialBonusFEEVAT = 0;
                                iTotalQuantity = 0;
                                /*if (!customersRepository.GetFinantialParams(oUser, oToll, (PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE, iPaymentTypeId, iPaymentSubtypeId,
                                                                            out dVAT1, out dVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE))
                                {
                                    rtRes = ResultType.Result_Error_Generic;
                                    Logger_AddLogMessage("3rdPTryTollPayment::Error getting finantial parameters", LogLevels.logERROR);
                                }*/

                                if (rtRes == ResultType.Result_OK)
                                {

                                    int iCurrencyChargedQuantity = 0;
                                    decimal? dRechargeId;
                                    bool bRestoreBalanceInCaseOfRefund = true;
                                    int? iBalanceAfterRecharge = null;
                                    DateTime? dtUTCInsertionDate = null;


                                    iTotalQuantity = customersRepository.CalculateFEE(iTollAmount, dVAT1, dVAT2, dPercFEE, iPercFEETopped, iFixedFEE, dPercBonus,
                                                                                      out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialBonusFEE,
                                                                                      out iPartialPercFEEVAT, out iPartialFixedFEEVAT, out iPartialBonusFEEVAT);

                                    int iQT = (iPartialPercFEE - iPartialPercFEEVAT) + (iPartialFixedFEE - iPartialFixedFEEVAT);
                                    int iQC = iPartialBonusFEE - iPartialBonusFEEVAT;
                                    int iIVA = iPartialPercFEEVAT + iPartialFixedFEEVAT - iPartialBonusFEEVAT;

                                    integraMobile.WS.integraCommonService oCommonService = CommonService();

                                    integraMobile.ExternalWS.ResultType rtIntegraMobileWS =
                                        oCommonService.ChargeTollMovement(sPlate, dChangeToApply, iTollAmount, dtOpeDate, sTollTariff,
                                                                oInstallation, oToll, ref oUser, iOSID,
                                                                dVAT1, dVAT2, dPercFEE, iPercFEETopped, iFixedFEE,
                                                                iPartialVAT1, iPartialPercFEE, iPartialFixedFEE, iTotalQuantity,
                                                                sExternalId, bOnline, ChargeOperationsType.TollLock, sQr, null, dSourceApp,
                                                                ref parametersOut,
                                                                out iCurrencyChargedQuantity, out dMovementID, out dtUTCInsertionDate, out dRechargeId, out iBalanceAfterRecharge,
                                                                out bRestoreBalanceInCaseOfRefund, out dtOpeDateUTC);

                                    rt = Convert_integraMobileExternalWSResultType_TO_ResultType(rtIntegraMobileWS);

                                    if (rt != ResultType.Result_OK)
                                    {
                                        xmlOut = GenerateXMLErrorResult(rt);
                                        Logger_AddLogMessage(string.Format("3rdPTryTollPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                }

                            }
                            else
                            {
                                dMovementID = oTollMovement.TOLM_ID;
                                iTollAmount = oTollMovement.TOLM_AMOUNT;
                                iTotalQuantity = customersRepository.CalculateFEE(iTollAmount, oTollMovement.TOLM_PERC_VAT1 ?? 0, oTollMovement.TOLM_PERC_VAT2 ?? 0, oTollMovement.TOLM_PERC_FEE ?? 0, (int)(oTollMovement.TOLM_PERC_FEE_TOPPED ?? 0), (int)(oTollMovement.TOLM_FIXED_FEE ?? 0), 0,
                                                                                  out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialBonusFEE,
                                                                                  out iPartialPercFEEVAT, out iPartialFixedFEEVAT, out iPartialBonusFEEVAT);
                                dtOpeDateUTC = oTollMovement.TOLM_UTC_DATE;
                            }

                            parametersOut["r"] = Convert.ToInt32(rt).ToString();

                            parametersOut["balcur"] = oUser.USR_CUR_ID.ToString();
                            parametersOut["newbal"] = oUser.USR_BALANCE;
                            parametersOut["tollq"] = iTollAmount;
                            parametersOut["tollqvat"] = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT - iPartialBonusFEEVAT;
                            parametersOut["tollqtotal"] = iTotalQuantity;
                            parametersOut["block_id"] = dMovementID;
                            parametersOut["blockutcdate"] = dtOpeDateUTC.Value.ToString("HHmmssddMMyy");

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("UpdateNBlockBalanceforToll::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("UpdateNBlockBalanceforToll: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("UpdateNBlockBalanceforToll::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("UpdateNBlockBalanceforToll::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string UpdateNBlockBalanceforTollJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = UpdateNBlockBalanceforToll(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("UpdateNBlockBalanceforTollJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }


        [WebMethod]
        public string ModifyOperationPlates(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ModifyOperationPlates: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters2(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        //(parametersIn["SessionID"] == null) ||
                        (parametersIn["ope_id"] == null) ||
                        (parametersIn["p"] == null)
                        )
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ModifyOperationPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ModifyOperationPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            decimal? dOperationId = null;
                            try
                            {
                                decimal dTryOperationId = Convert.ToDecimal(parametersIn["ope_id"].ToString());
                                dOperationId = dTryOperationId;
                            }
                            catch
                            {
                                dOperationId = null;
                            }
                            if (!dOperationId.HasValue)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_OperationNotFound);
                                Logger_AddLogMessage(string.Format("ModifyOperationPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            string strPlate = NormalizePlate(parametersIn["p"].ToString());
                            if (strPlate.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ModifyOperationPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            List<string> oAdditionalPlates = new List<string>();
                            string sKey = "";
                            string sAddPlate = "";
                            for (int i = 2; i <= 10; i += 1)
                            {
                                sKey = string.Format("p{0}", i);
                                if (parametersIn[sKey] != null && parametersIn[sKey].ToString() != "")
                                {
                                    sAddPlate = NormalizePlate(parametersIn[sKey].ToString());
                                    if (sAddPlate.Length > 0)
                                        oAdditionalPlates.Add(sAddPlate);
                                }
                            }

                            USER oUser = null;

                            if (parametersIn["SessionID"] == null)
                            {
                                if (!customersRepository.GetUserData(ref oUser, parametersIn["u"].ToString(), true))
                                    rt = ResultType.Result_Error_Invalid_User;
                            }
                            else
                            {
                                decimal? dInsId = null;
                                string strCulture = "";
                                string strAppVersion = "";
                                rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);
                            }

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("ModifyOperationPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            OPERATION oOperation = backOfficeRepository.GetOperations(t => t.OPE_ID == dOperationId.Value && t.OPE_USR_ID == oUser.USR_ID).FirstOrDefault();
                            if (oOperation == null)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_OperationNotFound);
                                Logger_AddLogMessage(string.Format("ModifyOperationPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            USER_PLATE oOrgUserPlate = oOperation.USER_PLATE;
                            USER_PLATE oOrgUserPlate2 = oOperation.USER_PLATE1;
                            USER_PLATE oOrgUserPlate3 = oOperation.USER_PLATE2;
                            USER_PLATE oOrgUserPlate4 = oOperation.USER_PLATE3;
                            USER_PLATE oOrgUserPlate5 = oOperation.USER_PLATE4;
                            USER_PLATE oOrgUserPlate6 = oOperation.USER_PLATE5;
                            USER_PLATE oOrgUserPlate7 = oOperation.USER_PLATE6;
                            USER_PLATE oOrgUserPlate8 = oOperation.USER_PLATE7;
                            USER_PLATE oOrgUserPlate9 = oOperation.USER_PLATE8;
                            USER_PLATE oOrgUserPlate10 = oOperation.USER_PLATE9;

                            string sOrgPlate = (oOrgUserPlate != null ? oOrgUserPlate.USRP_PLATE : null);
                            List<string> oOrgAdditionalPlates = new List<string>();
                            if (oOrgUserPlate2 != null) oOrgAdditionalPlates.Add(oOrgUserPlate2.USRP_PLATE);
                            if (oOrgUserPlate3 != null) oOrgAdditionalPlates.Add(oOrgUserPlate3.USRP_PLATE);
                            if (oOrgUserPlate4 != null) oOrgAdditionalPlates.Add(oOrgUserPlate4.USRP_PLATE);
                            if (oOrgUserPlate5 != null) oOrgAdditionalPlates.Add(oOrgUserPlate5.USRP_PLATE);
                            if (oOrgUserPlate6 != null) oOrgAdditionalPlates.Add(oOrgUserPlate6.USRP_PLATE);
                            if (oOrgUserPlate7 != null) oOrgAdditionalPlates.Add(oOrgUserPlate7.USRP_PLATE);
                            if (oOrgUserPlate8 != null) oOrgAdditionalPlates.Add(oOrgUserPlate8.USRP_PLATE);
                            if (oOrgUserPlate9 != null) oOrgAdditionalPlates.Add(oOrgUserPlate9.USRP_PLATE);
                            if (oOrgUserPlate10 != null) oOrgAdditionalPlates.Add(oOrgUserPlate10.USRP_PLATE);


                            bool bExternModify1 = false;
                            bool bExternModify2 = false;
                            bool bExternModify3 = false;

                            int iWSTimeout = infraestructureRepository.GetRateWSTimeout(oOperation.INSTALLATION.INS_ID);
                            long lEllapsedTime = 0;


                            rt = ModifyOperationPlatesExtern(1, oOperation, strPlate, oAdditionalPlates, iWSTimeout, out bExternModify1, out lEllapsedTime);

                            if (rt != ResultType.Result_OK)
                            {
                                //backOfficeRepository.UpdateOperationPlates(ref oOperation, sOrgPlate, oOrgAdditionalPlates);
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("ModifyOperationPlates::Error in WS 1 Confirmation"), LogLevels.logWARN);
                                Logger_AddLogMessage(string.Format("ModifyOperationPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            iWSTimeout -= (int)lEllapsedTime;
                            rt = ModifyOperationPlatesExtern(2, oOperation, strPlate, oAdditionalPlates, iWSTimeout, out bExternModify2, out lEllapsedTime);
                            if (rt != ResultType.Result_OK)
                            {
                                //backOfficeRepository.UpdateOperationPlates(ref oOperation, sOrgPlate, oOrgAdditionalPlates);
                                iWSTimeout -= (int)lEllapsedTime;
                                if (bExternModify1)
                                    ModifyOperationPlatesExtern(1, oOperation, sOrgPlate, oOrgAdditionalPlates, iWSTimeout, out bExternModify1, out lEllapsedTime);

                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("ModifyOperationPlates::Error in WS 2 Confirmation"), LogLevels.logWARN);
                                Logger_AddLogMessage(string.Format("ModifyOperationPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            iWSTimeout -= (int)lEllapsedTime;
                            rt = ModifyOperationPlatesExtern(3, oOperation, strPlate, oAdditionalPlates, iWSTimeout, out bExternModify3, out lEllapsedTime);
                            if (rt != ResultType.Result_OK)
                            {
                                iWSTimeout -= (int)lEllapsedTime;
                                //backOfficeRepository.UpdateOperationPlates(ref oOperation, sOrgPlate, oOrgAdditionalPlates);
                                if (bExternModify1)
                                    ModifyOperationPlatesExtern(1, oOperation, sOrgPlate, oOrgAdditionalPlates, iWSTimeout, out bExternModify1, out lEllapsedTime);
                                iWSTimeout -= (int)lEllapsedTime;
                                if (bExternModify2)
                                    ModifyOperationPlatesExtern(2, oOperation, sOrgPlate, oOrgAdditionalPlates, iWSTimeout, out bExternModify2, out lEllapsedTime);

                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("ModifyOperationPlates::Error in WS 2 Confirmation"), LogLevels.logWARN);
                                Logger_AddLogMessage(string.Format("ModifyOperationPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            if (!backOfficeRepository.UpdateOperationPlates(ref oOperation, strPlate, oAdditionalPlates))
                            {
                                iWSTimeout -= (int)lEllapsedTime;
                                if (bExternModify1)
                                    ModifyOperationPlatesExtern(1, oOperation, sOrgPlate, oOrgAdditionalPlates, iWSTimeout, out bExternModify1, out lEllapsedTime);
                                iWSTimeout -= (int)lEllapsedTime;
                                if (bExternModify2)
                                    ModifyOperationPlatesExtern(2, oOperation, sOrgPlate, oOrgAdditionalPlates, iWSTimeout, out bExternModify2, out lEllapsedTime);
                                iWSTimeout -= (int)lEllapsedTime;
                                if (bExternModify3)
                                    ModifyOperationPlatesExtern(3, oOperation, sOrgPlate, oOrgAdditionalPlates, iWSTimeout, out bExternModify2, out lEllapsedTime);

                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ModifyOperationPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(rt).ToString();

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ModifyOperationPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("ModifyOperationPlates: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ModifyOperationPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ModifyOperationPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }


        [WebMethod]
        public string ModifyOperationPlatesJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ModifyOperationPlates(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ModifyOperationPlatesJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string GetInstallationsJSON(string jsonIn) 
        {
            string jsonOut = "";
            Stopwatch watch = null;

            try
            {
                watch = Stopwatch.StartNew();
                //Logger_AddLogMessage(string.Format("QueryLoginCityJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = GetInstallations(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                Logger_AddLogMessage(string.Format("QueryLoginCityJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryLoginCityJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            if (watch != null)
            {
                Logger_AddLogMessage(string.Format("QueryLoginCityJSON: Tiempo de ejecución: {0}", watch.ElapsedMilliseconds), LogLevels.logINFO);
            }

            return jsonOut;
        }

        [WebMethod]
        public string GetInstallations(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = new SortedList();
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("GetInstallations: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if (parametersIn["u"] == null)
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("GetInstallations::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("GetInstallations::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            rt = GetUserDataStateless(ref oUser, parametersIn);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("GetInstallations::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            decimal? dInstallationId = null;
                            decimal? dLatitude = null;
                            decimal? dLongitude = null;

                            try
                            {
                                decimal dTryInstallationId = Convert.ToDecimal(parametersIn["cityID"].ToString());
                                dInstallationId = dTryInstallationId;
                            }
                            catch
                            {
                                dInstallationId = null;
                            }
                            string sValue = "";
                            NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                            numberFormatProvider.NumberDecimalSeparator = ".";
                            try
                            {
                                sValue = parametersIn["gps_lat"].ToString();
                                if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                                decimal dTryLatitude = Convert.ToDecimal(parametersIn["gps_lat"].ToString(), numberFormatProvider);
                                dLatitude = dTryLatitude;
                            }
                            catch
                            {
                                dLatitude = null;
                            }

                            try
                            {
                                sValue = parametersIn["gps_long"].ToString();
                                if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                                decimal dTryLongitude = Convert.ToDecimal(parametersIn["gps_long"].ToString(), numberFormatProvider);
                                dLongitude = dTryLongitude;
                            }
                            catch
                            {
                                dLongitude = null;
                            }

                            bool bValidCurrency = true;
                            INSTALLATION oInstallation = null;
                            DateTime? dtInsDateTime = null;
                            if (!geograficAndTariffsRepository.getInstallation(dInstallationId,
                                                                 dLatitude,
                                                                 dLongitude, oUser.USR_CUR_ID,
                                                                 true,
                                                                 ref oInstallation,
                                                                 ref dtInsDateTime,
                                                                 out bValidCurrency))
                            {
                                rt = ResultType.Result_Error_Invalid_City;
                            }

                            if (rt == ResultType.Result_OK && !bValidCurrency)
                            {
                                rt = ResultType.Result_Error_Incompatible_City_With_UserCurrency;
                            }

                            if (rt != ResultType.Result_OK)
                            {
                                try
                                {
                                    IEnumerable<
                                        INSTALLATION> insList = geograficAndTariffsRepository.getInstallationsList(oUser.USR_CUR_ID);
                                    foreach (INSTALLATION installation in insList)
                                    {
                                        parametersOut["cities"] += string.Format("<city json:Array='true' id=\"{0}\">{1}</city>", Convert.ToInt64(installation.INS_ID), installation.INS_DESCRIPTION);
                                    }
                                    parametersOut["usr_cur_id"] = oUser.USR_CUR_ID;
                                    parametersOut["usr_cou_id"] = oUser.USR_COU_ID;
                                }
                                catch (Exception e)
                                {
                                    Logger_AddLogException(e, string.Format("GetInstallations::Error = {0}", rt.ToString()), LogLevels.logERROR);
                                    parametersOut["cities"] = null;
                                }

                                Logger_AddLogMessage(string.Format("GetInstallations::Error: {0}", rt.ToString()), LogLevels.logERROR);

                            }
                            else if(oInstallation != null)
                            {
                                parametersOut["cities"] += string.Format("<city json:Array='true' id=\"{0}\">{1}</city>", Convert.ToInt64(oInstallation.INS_ID), oInstallation.INS_DESCRIPTION);
                            }

                            xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "cities" });

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("v::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("GetInstallations: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("GetPreferredPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("GetPreferredPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }

        [WebMethod]
        public string GetInstallationPolygonsJSON(string jsonIn)
        {
            string jsonOut = "";
            Stopwatch watch = null;

            try
            {
                watch = Stopwatch.StartNew();
                //Logger_AddLogMessage(string.Format("QueryLoginCityJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = GetInstallationPolygons(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                Logger_AddLogMessage(string.Format("QueryLoginCityJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryLoginCityJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            if (watch != null)
            {
                Logger_AddLogMessage(string.Format("QueryLoginCityJSON: Tiempo de ejecución: {0}", watch.ElapsedMilliseconds), LogLevels.logINFO);
            }

            return jsonOut;
        }

        [WebMethod]
        public string GetInstallationPolygons(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = new SortedList();
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("GetInstallationPolygons: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if (parametersIn["u"] == null)
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("GetInstallationPolygons::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("GetInstallationPolygons::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            rt = GetUserDataStateless(ref oUser, parametersIn);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("GetInstallationPolygons::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            bool bValidCurrency = true;
                            INSTALLATION oInstallation = null;
                            DateTime? dtInsDateTime = null;
                            if (!geograficAndTariffsRepository.getInstallation(null,
                                                                 null,
                                                                 null, oUser.USR_CUR_ID,
                                                                 true,
                                                                 ref oInstallation,
                                                                 ref dtInsDateTime,
                                                                 out bValidCurrency))
                            {
                                rt = ResultType.Result_Error_Invalid_City;
                            }

                            if (rt == ResultType.Result_OK && !bValidCurrency)
                            {
                                rt = ResultType.Result_Error_Incompatible_City_With_UserCurrency;
                            }

                            if (rt != ResultType.Result_OK)
                            {
                                try
                                {
                                    IEnumerable<
                                        INSTALLATION> insList = geograficAndTariffsRepository.getInstallationsList(oUser.USR_CUR_ID);

                                    foreach (INSTALLATION installation in insList)
                                    {
                                        parametersOut["cities"] += GetCityPolygons(installation, Convert.ToInt32(parametersIn["lang"]),ref xmlOut,ref xmlIn);
                                    }
                                    parametersOut["usr_cur_id"] = oUser.USR_CUR_ID;
                                    parametersOut["usr_cou_id"] = oUser.USR_COU_ID;
                                }
                                catch (Exception e)
                                {
                                    Logger_AddLogException(e, string.Format("GetInstallationPolygons::Error = {0}", rt.ToString()), LogLevels.logERROR);
                                    parametersOut["cities"] = null;
                                }

                                Logger_AddLogMessage(string.Format("GetInstallationPolygons::Error: {0}", rt.ToString()), LogLevels.logERROR);

                            }
                            else if (oInstallation != null)
                            {
                                parametersOut["cities"] = GetCityPolygons(oInstallation, Convert.ToInt32(parametersIn["lang"]), ref xmlOut, ref xmlIn);
                            }

                            xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "cities", "citypolygons" });

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("v::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("GetInstallationPolygons: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("GetInstallationPolygons::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("GetInstallationPolygons::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        #region Services Methods
        /***************************************************************/
        /***************************************************************/
        /***************************************************************/
        /***************************************************************/
        [WebMethod]
        public string DeleteServicePlateJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("DeleteServicePlateJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = DeleteServicePlate(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("DeleteServicePlateJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("DeleteServicePlateJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string DeleteServicePlate(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("DeleteServicePlate: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    StringBuilder listNameParameterInvalid = new StringBuilder();
                    List<String> listNameParameter = new List<String>();

                    listNameParameter.Add(ConstantsEntity.PARAMETER_U);
                    listNameParameter.Add(ConstantsEntity.PARAMETER_SESSION_ID);
                    listNameParameter.Add(ConstantsEntity.PARAMETER_LICENSE);
                    listNameParameter.Add(ConstantsEntity.PARAMETER_CITY_ID);

                    listNameParameterInvalid = Helpers.ValidateStringIsNullOrEmptyParameterInList(parametersIn, listNameParameter);

                    if (listNameParameterInvalid.Length > 0)
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("DeleteServicePlate::Error: ParametersInvalid={0}, xmlIn={1}, xmlOut={2}, ", listNameParameterInvalid.ToString(), PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {

                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("DeleteServicePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            rt = GetUserData(ref oUser, parametersIn);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("DeleteServicePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            string sLicense = parametersIn[ConstantsEntity.PARAMETER_LICENSE].ToString();
                            //**********************************************************************
                            //Se verifica si la matricula pertenece a un servicio para elimiarlo.
                            //**********************************************************************
                            USER_PLATE oUserPlate = null;
                            customersRepository.GetPlateFromUser(ref oUser, sLicense, out oUserPlate);
                            decimal? dInsId = Helpers.ValidateStringToDecimal(parametersIn[ConstantsEntity.PARAMETER_CITY_ID].ToString());
                            DateTime? dtNow;
                            if (dInsId.HasValue)
                            {
                                dtNow = geograficAndTariffsRepository.getInstallationDateTime(dInsId.Value);
                            }
                            else
                            {
                                dtNow = DateTime.Now;
                            }

                            SERVICES_USER_PLATE oServicesUserPlate = null;
                            if (oUserPlate != null)
                            {
                                customersRepository.IsServicePlateOfUser(oUser, sLicense, out oServicesUserPlate, dInsId.Value);
                            }

                            bool bRet = customersRepository.DeletePlate(ref oUser, sLicense);
                            if (bRet && oServicesUserPlate != null && oUserPlate != null)
                            {
                                customersRepository.DeleteForceServicePlate(oUserPlate, sLicense, dtNow);
                            }




                            parametersOut = new SortedList();
                            if (bRet)
                                parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                            else
                                parametersOut["r"] = "0";

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("DeleteServicePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("DeleteServicePlate: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                            oUser = null;
                        }
                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("DeleteServicePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("DeleteServicePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }

        [WebMethod]
        public string AddServicePlateJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("AddServicePlateJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = AddServicePlate(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("AddServicePlateJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("AddServicePlateJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string AddServicePlate(string xmlIn)
        {
            string xmlOut = "";

            string sMethodName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            xmlOut = TestRedirection(xmlIn, sMethodName);
            if (!string.IsNullOrEmpty(xmlOut))
            {
                return xmlOut;
            }

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("AddServicePlate: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    StringBuilder listNameParameterInvalid = new StringBuilder();
                    List<String> listNameParameter = new List<String>();

                    listNameParameter.Add(ConstantsEntity.PARAMETER_U);
                    listNameParameter.Add(ConstantsEntity.PARAMETER_SESSION_ID);
                    listNameParameter.Add(ConstantsEntity.PARAMETER_LICENSE);
                    listNameParameter.Add(ConstantsEntity.PARAMETER_CITY_ID);
                    listNameParameter.Add(ConstantsEntity.PARAMETER_ID_SERVICE_TYPE);
                    listNameParameter.Add(ConstantsEntity.PARAMETER_TYPE_OF_SERVICE_TYPE);

                    listNameParameterInvalid = Helpers.ValidateStringIsNullOrEmptyParameterInList(parametersIn, listNameParameter);

                    if (listNameParameterInvalid.Length > 0)
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("AddServicePlate::Error: ParametersInvalid={0}, xmlIn={1}, xmlOut={2}, ", listNameParameterInvalid.ToString(), PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {

                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("AddServicePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            return xmlOut;
                        }
                        else
                        {

                            USER oUser = null;
                            rt = GetUserData(ref oUser, parametersIn);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("AddServicePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            string strPlate = NormalizePlate(parametersIn[ConstantsEntity.PARAMETER_LICENSE].ToString());

                            decimal? dInsId = Helpers.ValidateInputParameterToDecimal(parametersIn, ConstantsEntity.PARAMETER_CITY_ID);

                            DateTime? dtNow = dInsId.HasValue ? geograficAndTariffsRepository.getInstallationDateTime(dInsId.Value) : DateTime.UtcNow;

                            decimal? dIdServiceType = Helpers.ValidateInputParameterToDecimal(parametersIn, ConstantsEntity.PARAMETER_ID_SERVICE_TYPE);

                            INSTALLATIONS_SERVICE oINSTALLATIONS_SERVICE = null;
                            if (dIdServiceType.HasValue && dInsId.HasValue)
                            {
                                oINSTALLATIONS_SERVICE = customersRepository.GetInstallationsService(dInsId.Value, dIdServiceType.Value, dtNow.Value);
                            }


                            if (oINSTALLATIONS_SERVICE != null)
                            {
                                if (strPlate.Length > 0)
                                {
                                    string strPlateSharing = infraestructureRepository.GetParameterValue("PlateSharing");
                                    bool bPlateSharing = true;

                                    if (!string.IsNullOrEmpty(strPlateSharing))
                                    {
                                        bPlateSharing = (strPlateSharing != "0");
                                    }

                                    if (!customersRepository.IsPlateOfUser(ref oUser, strPlate))
                                    {
                                        /*************************************************************************/
                                        /*************** SI NO EXISTE LA MATRICULA SE DA EL ALTA  ****************/
                                        /*************************************************************************/
                                        if (bPlateSharing || !customersRepository.IsPlateAssignedToAnotherUser(ref oUser, strPlate))
                                        {
                                            if (!customersRepository.AddPlateToUser(ref oUser, strPlate))
                                            {
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                Logger_AddLogMessage(string.Format("AddServicePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                return xmlOut;
                                            }
                                        }
                                        else
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Plate_Is_Assigned_To_Another_User);
                                            Logger_AddLogMessage(string.Format("AddServicePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;

                                        }
                                    }
                                }
                                else
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("AddServicePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                /*************************************************************************/
                                /************************ DAR EL ALTA AL SERVICIO ************************/
                                /*************************************************************************/
                                if (oUser.USER_PLATEs.Count > 0)
                                {
                                    //Verificamos que se encuentra la matricula para 
                                    USER_PLATE oUserPlate = (USER_PLATE)oUser.USER_PLATEs.FirstOrDefault(x => x.USRP_PLATE.ToUpper().Equals(strPlate.ToUpper()) && x.USRP_ENABLED == 1);
                                    SERVICES_USER_PLATE oServiceplate = null;
                                    if (oUserPlate != null)
                                    {


                                        if (customersRepository.IsServicePlateOfUser(oUser, strPlate, out oServiceplate, dInsId.Value))
                                        {
                                            if (oServiceplate != null)
                                            {
                                                //la matricula ya tiene asignada un servicio                                        
                                                if (oServiceplate.SERUP_ENABLED == 1 && Convert.ToInt32(oServiceplate.SERUP_SERSTA_ID) == 1)
                                                {
                                                    //1	Pendiente de aprobación
                                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_ServiceLicenseStatusPendingApproval);
                                                    Logger_AddLogMessage(string.Format("AddServicePlate::Error:: Service License Status Pending Approval:: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                    return xmlOut;
                                                }
                                                else if (oServiceplate.SERUP_ENABLED == 1 && Convert.ToInt32(oServiceplate.SERUP_SERSTA_ID) == 3)
                                                {
                                                    //3	Rechazada
                                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_ServiceLicensePlateRejectedState);
                                                    Logger_AddLogMessage(string.Format("AddServicePlate::Error:: Service License Plate Rejected State:: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                    return xmlOut;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            ServicesPlateParameterInEntity addServicesPlateParameterInEntity = null;
                                            ServicesUserPlatesEntity oServicesUserPlate = new ServicesUserPlatesEntity(xmlIn, ref addServicesPlateParameterInEntity, oUser);
                                            oServicesUserPlate.SERUP_INS_ID = dInsId;
                                            oServicesUserPlate.SERUP_SERTYP_ID = dIdServiceType;
                                            TypeTypeServicesEnum oVerifiTypeTypeServicesEnum = ServicesUserPlatesEntity.GetTypeTypeServicesEnum(oServicesUserPlate);
                                            if (oVerifiTypeTypeServicesEnum == TypeTypeServicesEnum.None)
                                            {
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                                Logger_AddLogMessage(string.Format("AddServicePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                return xmlOut;
                                            }
                                            //se Agrega la matricula al servicio
                                            decimal? idService = null;

                                            if (!customersRepository.AddServicesPlate(oServicesUserPlate, oUser, strPlate, Convert.ToDecimal(addServicesPlateParameterInEntity.IdServiceType), dtNow.Value, out idService))
                                            {
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                Logger_AddLogMessage(string.Format("AddServicePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                return xmlOut;
                                            }
                                            else
                                            {
                                                //Se guardar las fotos del servicio
                                                if (idService.HasValue && (addServicesPlateParameterInEntity.PhotoList != null && addServicesPlateParameterInEntity.PhotoList.Photo.Count() > 0))
                                                {
                                                    String path = Helpers.PathConstruction(dInsId, null, null, oServicesUserPlate.SERUP_USRP_ID, null);

                                                    foreach (PhotoEntity photoEntity in addServicesPlateParameterInEntity.PhotoList.Photo)
                                                    {
                                                        ServicesPhotosEntity oServicesPhotosEntity = new ServicesPhotosEntity(photoEntity);
                                                        String imageName = string.Empty;
                                                        String imagePath = string.Empty;
                                                        String thumbPath = string.Empty;
                                                        if (Helpers.UploadImage(SettingsApp.ServicePlatePath, oServicesPhotosEntity.Image, path, ref imageName, ref imagePath, ref thumbPath))
                                                        {
                                                            oServicesPhotosEntity.SERPHO_SERUP_ID = idService.Value;
                                                            oServicesPhotosEntity.SERPHO_NAME = imageName;
                                                            oServicesPhotosEntity.SERPHO_PATH = imagePath;
                                                            oServicesPhotosEntity.SERPHO_THUMB_PATH = thumbPath;
                                                            if (!customersRepository.AddPhotosServicesPlate(oServicesPhotosEntity))
                                                            {
                                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                                Logger_AddLogMessage(string.Format("AddServicePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                                return xmlOut;
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    if (addServicesPlateParameterInEntity.PhotoList == null)
                                                    {
                                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                                        Logger_AddLogMessage(string.Format("AddServicePlate::Error: ParametersInvalid={0}, xmlIn={1}, xmlOut={2}, ", " - PhotoList is null", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                    }
                                                    else if (addServicesPlateParameterInEntity.PhotoList != null && addServicesPlateParameterInEntity.PhotoList.Photo.Count() == 0)
                                                    {
                                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                                        Logger_AddLogMessage(string.Format("AddServicePlate::Error: ParametersInvalid={0}, xmlIn={1}, xmlOut={2}, ", " - Photo is null", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                    }
                                                }
                                            }
                                        }
                                    }

                                }

                                parametersOut = new SortedList();
                                parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();



                                // ------------------------------------
                                // Codigo para agregar el InfoTar
                                //------------------------------------
                                string strXmlTariffs = string.Empty;
                                string sAppVersion = string.Empty;
                                IEnumerable<stTariff> tariffs;
                                try
                                {
                                    if (parametersIn[ConstantsEntity.PARAMETER_APP_VERS] != null)
                                        sAppVersion = parametersIn[ConstantsEntity.PARAMETER_APP_VERS].ToString();
                                    else
                                        sAppVersion = parametersIn[ConstantsEntity.PARAMETER_VERS].ToString();
                                }
                                catch
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("AddServicePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                                if (!CheckVersionFormat(sAppVersion))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("AddServicePlate::Error: Invalid app version format: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                ulong ulAppVersion = AppUtilities.AppVersion(sAppVersion);
                                if (ulAppVersion < _VERSION_999_99_9)
                                {
                                    tariffs = geograficAndTariffsRepository.getInstallationTariffs(dInsId.Value, Convert.ToDecimal(parametersIn[ConstantsEntity.PARAMETER_LANG]));
                                    MobileOS oMobileOS = MobileOS.Android;
                                    if (oMobileOS.Equals(MobileOS.Android) || oMobileOS.Equals(MobileOS.iOS))
                                    {
                                        tariffs = tariffs.Where(x => x.tariffType.Equals(TariffType.RegularTariff));
                                    }
                                    tariffs = tariffs.Where(tariff => (tariff.ulMinVersion == 0 || tariff.ulMinVersion <= ulAppVersion) &&
                                                                      (tariff.ulMaxVersion == 0 || tariff.ulMaxVersion > ulAppVersion));
                                    List<LiteralTariffLanguage> oListLiteralsTariffByLanguage = customersRepository.GetLiteralsTariffByLanguage(Convert.ToDecimal(parametersIn[ConstantsEntity.PARAMETER_LANG]), tariffs);

                                    INSTALLATION oInstallation = null;
                                    DateTime? dtinstDateTime = null;
                                    decimal? dLatitude = null;
                                    decimal? dLongitude = null;

                                    geograficAndTariffsRepository.getInstallation(dInsId, dLatitude, dLongitude, ref oInstallation, ref dtinstDateTime);
                                    //Addservice
                                    TypeTypeServicesEnum oTypeTypeServicesEnum = TypeTypeServicesEnum.None;
                                    bool bServicePlateDUM = false;
                                    bool bServicePlatePMR = false;
                                    if (ulAppVersion >= _VERSION_3_4)
                                    {
                                        oTypeTypeServicesEnum = ExistServiceType(oUser, string.Empty, oInstallation.INS_ID, dtinstDateTime, ref bServicePlateDUM, ref bServicePlatePMR, xmlIn, ref xmlOut);
                                        if (!string.IsNullOrEmpty(xmlOut))
                                            return xmlOut;
                                    }
                                    if (!GenerateXMLTariffs(tariffs, oListLiteralsTariffByLanguage, ulAppVersion, /*bServicePlateDUM, bServicePlatePMR, */oTypeTypeServicesEnum, ref strXmlTariffs))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("AddServicePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                }
                                else
                                {
                                    long lCurrVersion = -1;
                                    if (parametersIn[ConstantsEntity.PARAMETER_TAR_VERSION] != null)
                                    {
                                        try
                                        {
                                            lCurrVersion = Convert.ToInt64(parametersIn[ConstantsEntity.PARAMETER_TAR_VERSION].ToString());
                                        }
                                        catch { }
                                    }


                                    tariffs = geograficAndTariffsRepository.getInstallationTariffs2(dInsId.Value, Convert.ToDecimal(parametersIn[ConstantsEntity.PARAMETER_LANG]));

                                    if (!GenerateXMLTariffs2(tariffs, ulAppVersion, ref strXmlTariffs))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("AddServicePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }
                                parametersOut["InfoTAR"] = strXmlTariffs;
                                xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "InfoTAR" });
                            }
                            else
                            {
                                //No existen servicios asociados a la ciudad
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_NoServicesAssociatedWithCity);
                                Logger_AddLogMessage(string.Format("AddServicePlate::Error:: No Services Associated With City:: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("AddServicePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("AddServicePlate: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }

                            oUser = null;
                        }
                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("AddServicePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("AddServicePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }



        /***************************************************************/
        /***************************************************************/
        /***************************************************************/
        #endregion
        #endregion

        #region Private methods

        private string GetCityPolygons(INSTALLATION installation,int lang, ref string xmlOut, ref string xmlIn) 
        {
            var installationList = new StringBuilder();
            installationList.Append("<city xmlns:json='http://james.newtonking.com/projects/json' json:Array='true'>");
            installationList.AppendFormat("<Id>{0}</Id>", Convert.ToInt64(installation.INS_ID));
            installationList.AppendFormat("<Description>{0}</Description>", (!string.IsNullOrEmpty(installation.INS_DESCRIPTION) ? installation.INS_DESCRIPTION : string.Empty));
            var oInstallationsPolygons = geograficAndTariffsRepository.GetInstallationsGeometries(installation.INS_ID);
            string strInstallationsPolygonsXML = "";
            if (!GenerateInstallationsGeometriesXML(oInstallationsPolygons, installation, ref strInstallationsPolygonsXML))
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogMessage(string.Format("QueryLoginCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                return xmlOut;
            }

            installationList.AppendFormat("<citypolygons>{0}</citypolygons>", strInstallationsPolygonsXML);
            installationList.Append("</city>");
            return installationList.ToString();
        }

        private static void InitializeStatic()
        {

            _ipsString = GetListOfIPS();

            int iKeyLength = 24;

            if (_hMacKey == null)
            {
                _hMacKey = ConfigurationManager.AppSettings["AuthHashKeyMobile"].ToString();
            }


            if (ConfigurationManager.AppSettings["AuthHashAlgorithmMobile"].ToString() == "HMACSHA256")
            {
                iKeyLength = 64;
            }
            else if (ConfigurationManager.AppSettings["AuthHashAlgorithmMobile"].ToString() == "MACTripleDES")
            {
                iKeyLength = 24;
            }



            if (_normKey == null)
            {
                byte[] keyBytes = System.Text.Encoding.UTF8.GetBytes(_hMacKey);
                _normKey = new byte[iKeyLength];
                int iSum = 0;

                for (int i = 0; i < iKeyLength; i++)
                {
                    if (i < keyBytes.Length)
                    {
                        iSum += keyBytes[i];
                    }
                    else
                    {
                        iSum += i;
                    }
                    _normKey[i] = Convert.ToByte((iSum * BIG_PRIME_NUMBER) % (Byte.MaxValue + 1));

                }
            }

        }

        private static string GetListOfIPS()
        {
            string strRes = "";
            try
            {

                int nIP = 0;

                foreach (NetworkInterface ni in NetworkInterface.GetAllNetworkInterfaces())
                {
                    if (ni.NetworkInterfaceType == NetworkInterfaceType.Wireless80211 || ni.NetworkInterfaceType == NetworkInterfaceType.Ethernet)
                    {

                        foreach (UnicastIPAddressInformation ip in ni.GetIPProperties().UnicastAddresses)
                        {
                            if (ip.Address.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                            {
                                if (nIP == 0)
                                    strRes = ip.Address.ToString();
                                else
                                    strRes += string.Format(" ({0})", ip.Address.ToString());

                                nIP++;
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                strRes = "";
                Logger_AddLogException(e, "FindInputParameters::GetListOfIPS", LogLevels.logERROR);
                // ...
            }

            return strRes;
        }

        private ResultType FindInputParameters(string xmlIn, out SortedList parameters, out string strHash, out string strHashString)
        {
            ResultType rtRes = ResultType.Result_OK;
            parameters = new SortedList();
            strHash = "";
            strHashString = "";

            try
            {
                XmlDocument xmlInDoc = new XmlDocument();
                try
                {
                    xmlInDoc.LoadXml(xmlIn);
                    XmlNodeList Nodes = xmlInDoc.SelectNodes("//" + _xmlTagName + IN_SUFIX + "/*");
                    foreach (XmlNode Node in Nodes)
                    {
                        switch (Node.Name)
                        {
                            case "ah":
                                strHash = Node.InnerText;
                                break;
                            default:
                                if (Node.HasChildNodes)
                                {
                                    if (Node.ChildNodes[0].HasChildNodes)
                                    {
                                        int i = 0;
                                        foreach (XmlNode ChildNode in Node.ChildNodes)
                                        {
                                            if (!ChildNode.ChildNodes[0].HasChildNodes)
                                            {
                                                if (parameters[Node.Name + "_" + ChildNode.Name + "_" + i.ToString()] == null)
                                                {
                                                    strHashString += ChildNode.InnerText;
                                                    parameters[Node.Name + "_" + ChildNode.Name] = ChildNode.InnerText.Trim();
                                                }
                                                else
                                                {
                                                    strHashString += ChildNode.InnerText;
                                                    parameters[Node.Name + "_" + ChildNode.Name + "_" + i.ToString()] = ChildNode.InnerText.Trim();
                                                }
                                            }
                                            else
                                            {
                                                int j = 0;
                                                foreach (XmlNode ChildNode2 in ChildNode.ChildNodes)
                                                {
                                                    if (!ChildNode2.HasChildNodes)
                                                    {
                                                        if (parameters[Node.Name + "_" + ChildNode.Name + "_" + i.ToString() + "_" + ChildNode2.Name] == null)
                                                        {
                                                            strHashString += ChildNode2.InnerText;
                                                            parameters[Node.Name + "_" + ChildNode.Name + "_" + i.ToString() + "_" + ChildNode2.Name] = ChildNode2.InnerText.Trim();
                                                        }
                                                        else
                                                        {
                                                            strHashString += ChildNode2.InnerText;
                                                            parameters[Node.Name + "_" + ChildNode.Name + "_" + i.ToString() + "_" + ChildNode2.Name + "_" + j.ToString()] = ChildNode2.InnerText.Trim();
                                                        }
                                                    }
                                                    else
                                                    {

                                                        if (!ChildNode2.ChildNodes[0].HasChildNodes)
                                                        {


                                                            if (parameters[Node.Name + "_" + ChildNode.Name + "_" + i.ToString() + "_" + ChildNode2.Name] == null)
                                                            {
                                                                strHashString += ChildNode2.InnerText;
                                                                parameters[Node.Name + "_" + ChildNode.Name + "_" + i.ToString() + "_" + ChildNode2.Name] = ChildNode2.InnerText.Trim();
                                                            }
                                                            else
                                                            {
                                                                strHashString += ChildNode2.InnerText;
                                                                parameters[Node.Name + "_" + ChildNode.Name + "_" + i.ToString() + "_" + ChildNode2.Name + "_" + j.ToString()] = ChildNode2.InnerText.Trim();
                                                            }
                                                        }
                                                        else
                                                        {
                                                            int k = 0;
                                                            foreach (XmlNode ChildNode3 in ChildNode2.ChildNodes)
                                                            {
                                                                if (!ChildNode3.HasChildNodes)
                                                                {
                                                                    if (parameters[Node.Name + "_" + ChildNode.Name + "_" + i.ToString() + "_" + ChildNode2.Name + "_" + j.ToString() + "_" + ChildNode3.Name] == null)
                                                                    {
                                                                        strHashString += ChildNode3.InnerText;
                                                                        parameters[Node.Name + "_" + ChildNode.Name + "_" + i.ToString() + "_" + ChildNode2.Name + "_" + j.ToString() + "_" + ChildNode3.Name] = ChildNode3.InnerText.Trim();
                                                                    }
                                                                    else
                                                                    {
                                                                        strHashString += ChildNode3.InnerText;
                                                                        parameters[Node.Name + "_" + ChildNode.Name + "_" + i.ToString() + "_" + ChildNode2.Name + "_" + j.ToString() + "_" + ChildNode3.Name + "_" + k.ToString()] = ChildNode3.InnerText.Trim();
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if (!ChildNode3.ChildNodes[0].HasChildNodes)
                                                                    {

                                                                        if (parameters[Node.Name + "_" + ChildNode.Name + "_" + i.ToString() + "_" + ChildNode2.Name + "_" + j.ToString() + "_" + ChildNode3.Name] == null)
                                                                        {
                                                                            strHashString += ChildNode3.InnerText;
                                                                            parameters[Node.Name + "_" + ChildNode.Name + "_" + i.ToString() + "_" + ChildNode2.Name + "_" + j.ToString() + "_" + ChildNode3.Name] = ChildNode3.InnerText.Trim();
                                                                        }
                                                                        else
                                                                        {
                                                                            strHashString += ChildNode3.InnerText;
                                                                            parameters[Node.Name + "_" + ChildNode.Name + "_" + i.ToString() + "_" + ChildNode2.Name + "_" + j.ToString() + "_" + ChildNode3.Name + "_" + k.ToString()] = ChildNode3.InnerText.Trim();
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        int l = 0;
                                                                        foreach (XmlNode ChildNode4 in ChildNode3.ChildNodes)
                                                                        {

                                                                            if (parameters[Node.Name + "_" + ChildNode.Name + "_" + i.ToString() + "_" + ChildNode2.Name + "_" + ChildNode3.Name + "_" + k.ToString() + "_" + ChildNode4.Name] == null)
                                                                            {
                                                                                strHashString += ChildNode4.InnerText;
                                                                                parameters[Node.Name + "_" + ChildNode.Name + "_" + i.ToString() + "_" + ChildNode2.Name + "_" + ChildNode3.Name + "_" + k.ToString() + "_" + ChildNode4.Name] = ChildNode4.InnerText.Trim();
                                                                            }
                                                                            else
                                                                            {
                                                                                strHashString += ChildNode4.InnerText;
                                                                                parameters[Node.Name + "_" + ChildNode.Name + "_" + i.ToString() + "_" + ChildNode2.Name + "_" + ChildNode3.Name + "_" + k.ToString() + "_" + ChildNode4.Name + "_" + l.ToString()] = ChildNode4.InnerText.Trim();
                                                                            }

                                                                        }

                                                                    }
                                                                    k++;
                                                                }
                                                            }

                                                        }
                                                        j++;
                                                    }
                                                }
                                            }
                                            i++;
                                            parameters[Node.Name + "_" + ChildNode.Name + "_num"] = i;
                                        }
                                    }
                                    else
                                    {
                                        strHashString += Node.InnerText;
                                        parameters[Node.Name] = Node.InnerText.Trim();
                                    }
                                }
                                else
                                {
                                    parameters[Node.Name] = null;
                                }
                                break;
                        }
                    }

                    if (Nodes.Count == 0)
                    {
                        Logger_AddLogMessage(string.Format("FindInputParameters: Bad Input XML: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logERROR);
                        rtRes = ResultType.Result_Error_Invalid_Input_Parameter;

                    }

                }
                catch
                {
                    Logger_AddLogMessage(string.Format("FindInputParameters: Bad Input XML: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logERROR);
                    rtRes = ResultType.Result_Error_Invalid_Input_Parameter;
                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "FindInputParameters::Exception", LogLevels.logERROR);

            }


            return rtRes;
        }

        private ResultType FindInputParameters2(string xmlIn, out SortedList parameters, out string strHash, out string strHashString)
        {
            ResultType rtRes = ResultType.Result_OK;
            parameters = new SortedList();
            strHash = "";
            strHashString = "";

            try
            {
                XmlDocument xmlInDoc = new XmlDocument();
                try
                {
                    xmlInDoc.LoadXml(xmlIn);
                    XmlNodeList Nodes = xmlInDoc.SelectNodes("//" + _xmlTagName + IN_SUFIX + "/*");
                    foreach (XmlNode Node in Nodes)
                    {
                        switch (Node.Name)
                        {
                            case "ah":
                                strHash = Node.InnerText;
                                break;
                            default:

                                if (Node.HasChildNodes)
                                {
                                    if (Node.ChildNodes[0].HasChildNodes)
                                    {
                                        foreach (XmlNode ChildNode in Node.ChildNodes)
                                        {
                                            strHashString += ChildNode.InnerText;
                                            string sValue = "";
                                            if (ChildNode.HasChildNodes)
                                                sValue = ChildNode.InnerXml.Trim();
                                            else
                                                sValue = ChildNode.InnerText.Trim();

                                            string sSufix = "";
                                            while (parameters.ContainsKey(Node.Name + "_" + ChildNode.Name + sSufix))
                                            {
                                                if (sSufix == "")
                                                    sSufix = "1";
                                                else
                                                    sSufix = Convert.ToString(Convert.ToInt32(sSufix) + 1);
                                            }
                                            parameters[Node.Name + "_" + ChildNode.Name + sSufix] = sValue;
                                        }
                                    }
                                    else
                                    {
                                        strHashString += Node.InnerText;
                                        parameters[Node.Name] = Node.InnerText.Trim();
                                    }
                                }
                                else
                                {
                                    parameters[Node.Name] = null;
                                }

                                break;

                        }

                    }

                    if (Nodes.Count == 0)
                    {
                        Logger_AddLogMessage(string.Format("FindInputParameters2: Bad Input XML: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logERROR);
                        rtRes = ResultType.Result_Error_Invalid_Input_Parameter;

                    }


                }
                catch
                {
                    Logger_AddLogMessage(string.Format("FindInputParameters2: Bad Input XML: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logERROR);
                    rtRes = ResultType.Result_Error_Invalid_Input_Parameter;
                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "FindInputParameters2::Exception", LogLevels.logERROR);

            }


            return rtRes;
        }

        private ResultType FindParameters(string xmlIn, out SortedList parameters)
        {
            ResultType rtRes = ResultType.Result_OK;
            parameters = new SortedList();

            try
            {
                xmlIn = "<root>" + xmlIn + "</root>";
                XmlDocument xmlInDoc = new XmlDocument();
                try
                {
                    xmlInDoc.LoadXml(xmlIn);
                    XmlNodeList Nodes = xmlInDoc.SelectNodes("//root/*");
                    foreach (XmlNode Node in Nodes)
                    {
                        if (Node.HasChildNodes)
                        {
                            if (Node.ChildNodes[0].HasChildNodes)
                            {
                                foreach (XmlNode ChildNode in Node.ChildNodes)
                                {
                                    string sValue = "";
                                    if (ChildNode.HasChildNodes)
                                        sValue = ChildNode.InnerXml.Trim();
                                    else
                                        sValue = ChildNode.InnerText.Trim();

                                    string sSufix = "";
                                    while (parameters.ContainsKey(Node.Name + "_" + ChildNode.Name + sSufix))
                                    {
                                        if (sSufix == "")
                                            sSufix = "1";
                                        else
                                            sSufix = Convert.ToString(Convert.ToInt32(sSufix) + 1);
                                    }
                                    parameters[Node.Name + "_" + ChildNode.Name + sSufix] = sValue;
                                }
                            }
                            else
                            {
                                parameters[Node.Name] = Node.InnerText.Trim();
                            }
                        }
                        else
                        {
                            parameters[Node.Name] = null;
                        }
                    }

                    if (Nodes.Count == 0)
                    {
                        Logger_AddLogMessage(string.Format("FindParameters: Bad Input XML: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logERROR);
                        rtRes = ResultType.Result_Error_Invalid_Input_Parameter;

                    }


                }
                catch
                {
                    Logger_AddLogMessage(string.Format("FindParameters: Bad Input XML: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logERROR);
                    rtRes = ResultType.Result_Error_Invalid_Input_Parameter;
                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "FindParameters::Exception", LogLevels.logERROR);

            }


            return rtRes;
        }

        private string GenerateXMLOuput(SortedList parametersOut)
        {
            string strRes = "";
            try
            {
                XmlDocument xmlOutDoc = new XmlDocument();

                XmlDeclaration xmldecl;
                xmldecl = xmlOutDoc.CreateXmlDeclaration("1.0", null, null);
                xmldecl.Encoding = "UTF-8";
                xmlOutDoc.AppendChild(xmldecl);

                XmlElement root = xmlOutDoc.CreateElement(_xmlTagName + OUT_SUFIX);
                xmlOutDoc.AppendChild(root);
                XmlNode rootNode = xmlOutDoc.SelectSingleNode(_xmlTagName + OUT_SUFIX);

                foreach (DictionaryEntry item in parametersOut)
                {
                    try
                    {
                        XmlElement node = xmlOutDoc.CreateElement(item.Key.ToString());
                        node.InnerXml = item.Value.ToString().Trim();
                        rootNode.AppendChild(node);
                    }
                    catch //(Exception ex)
                    {
                        //Logger_AddLogException(e, "GenerateXMLOuput::Exception", LogLevels.logERROR);
                    }
                }

                strRes = xmlOutDoc.OuterXml;

                if (parametersOut["r"] != null)
                {
                    try
                    {
                        int ir = Convert.ToInt32(parametersOut["r"].ToString());
                        ResultType rt = (ResultType)ir;

                        if (ir < 0)
                        {
                            Logger_AddLogMessage(string.Format("Error = {0}", rt.ToString()), LogLevels.logERROR);
                        }
                    }
                    catch
                    {

                    }


                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "GenerateXMLOuput::Exception", LogLevels.logERROR);

            }


            return strRes;
        }

        private string GenerateXMLOuput(SortedList parametersOut, List<string> lstArrayNodes = null)
        {
            string strRes = "";
            try
            {
                XmlDocument xmlOutDoc = new XmlDocument();

                XmlDeclaration xmldecl;
                xmldecl = xmlOutDoc.CreateXmlDeclaration("1.0", null, null);
                xmldecl.Encoding = "UTF-8";
                xmlOutDoc.AppendChild(xmldecl);

                XmlElement root = xmlOutDoc.CreateElement(_xmlTagName + OUT_SUFIX);

                XmlAttribute jsonNS = xmlOutDoc.CreateAttribute("xmlns", "json", "http://www.w3.org/2000/xmlns/");
                jsonNS.Value = "http://james.newtonking.com/projects/json";


                xmlOutDoc.AppendChild(root);
                root.Attributes.Append(jsonNS);
                XmlNode rootNode = xmlOutDoc.SelectSingleNode(_xmlTagName + OUT_SUFIX);

                foreach (DictionaryEntry item in parametersOut)
                {
                    try
                    {
                        XmlElement node = xmlOutDoc.CreateElement(item.Key.ToString());

                        if (lstArrayNodes != null)
                        {
                            if (lstArrayNodes.Contains(item.Key.ToString()))
                            {
                                //node.Attributes.Append(jsonNS);
                                node.SetAttribute("xmlns:json", @"http://james.newtonking.com/projects/json");
                            }

                        }

                        if (item.Value == null)
                        {
                            node.InnerXml = "";
                        }
                        else
                        {
                            node.InnerXml = item.Value.ToString().Trim();
                        }

                        rootNode.AppendChild(node);
                    }
                    catch (Exception e)
                    {
                        Logger_AddLogException(e, string.Format("GenerateXMLOuput::Exception item={0}; value={1}", item.Key.ToString(), item.Value.ToString()), LogLevels.logERROR);
                    }
                }

                strRes = xmlOutDoc.OuterXml;

                if (parametersOut["r"] != null)
                {
                    try
                    {
                        int ir = Convert.ToInt32(parametersOut["r"].ToString());
                        ResultType rt = (ResultType)ir;

                        if (ir < 0)
                        {
                            Logger_AddLogMessage(string.Format("Error = {0}", rt.ToString()), LogLevels.logERROR);
                        }
                    }
                    catch
                    {

                    }


                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "GenerateXMLOuput::Exception", LogLevels.logERROR);

            }


            return strRes;
        }

        private string GenerateXMLErrorResult(ResultType rt)
        {
            string strRes = "";
            try
            {
                Logger_AddLogMessage(string.Format("Error = {0}", rt.ToString()), LogLevels.logERROR);

                XmlDocument xmlOutDoc = new XmlDocument();

                XmlDeclaration xmldecl;
                xmldecl = xmlOutDoc.CreateXmlDeclaration("1.0", null, null);
                xmldecl.Encoding = "UTF-8";
                xmlOutDoc.AppendChild(xmldecl);

                XmlElement root = xmlOutDoc.CreateElement(_xmlTagName + OUT_SUFIX);
                xmlOutDoc.AppendChild(root);
                XmlNode rootNode = xmlOutDoc.SelectSingleNode(_xmlTagName + OUT_SUFIX);
                XmlElement result = xmlOutDoc.CreateElement("r");
                result.InnerText = ((int)rt).ToString();
                rootNode.AppendChild(result);
                strRes = xmlOutDoc.OuterXml;

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "GenerateXMLErrorResult::Exception", LogLevels.logERROR);

            }


            return strRes;
        }
      

        private string GenerateXMLErrorResult(ResultType rt, DateTime date, decimal grpId, decimal? tarId, string lang)
        {
            string strRes = "";
            try
            {
                Logger_AddLogMessage(string.Format("Error = {0}", rt.ToString()), LogLevels.logERROR);

                XmlDocument xmlOutDoc = new XmlDocument();

                XmlDeclaration xmldecl;
                xmldecl = xmlOutDoc.CreateXmlDeclaration("1.0", null, null);
                xmldecl.Encoding = "UTF-8";
                xmlOutDoc.AppendChild(xmldecl);

                XmlElement root = xmlOutDoc.CreateElement(_xmlTagName + OUT_SUFIX);
                xmlOutDoc.AppendChild(root);
                XmlNode rootNode = xmlOutDoc.SelectSingleNode(_xmlTagName + OUT_SUFIX);
                XmlElement result = xmlOutDoc.CreateElement("r");
                result.InnerText = ((int)rt).ToString();
                rootNode.AppendChild(result);


                string sCustomErrorMessage = infraestructureRepository.GetCustomErrorMessage(date, Convert.ToInt32(rt), grpId, tarId, lang);

                if (!string.IsNullOrEmpty(sCustomErrorMessage))
                {
                    XmlElement message = xmlOutDoc.CreateElement("message");
                    message.InnerText = sCustomErrorMessage;
                    rootNode.AppendChild(message);
                }

                strRes = xmlOutDoc.OuterXml;

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "GenerateXMLErrorResult::Exception", LogLevels.logERROR);

            }


            return strRes;
        }


        private string GenerateJSONErrorResult(ResultType rt)
        {
            string jsonOut = "";
            try
            {

                string strXmlOut = GenerateXMLErrorResult(rt);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "GenerateJSONErrorResult::Exception", LogLevels.logERROR);

            }


            return jsonOut;
        }

        private ResultType GetQueryLoginData(ref USER oUser, SortedList parametersIn, ulong ulAppVersion, string sCulture, Stopwatch watch, out decimal? dInsId, ref SortedList parametersOut)
        {
            ResultType rt = ResultType.Result_OK;
            StringBuilder sb = new StringBuilder();
            dInsId = null;

            try
            {
                if (oUser != null)
                {
                    parametersOut["u"] = oUser.USR_USERNAME;
                    parametersOut["exist_email"] = (infraestructureRepository.IsInternalEmail(oUser.USR_USERNAME) ? 0 : 1);

                    parametersOut["sessiontimeout"] = ConfigurationManager.AppSettings["SessionTimeoutInMinutes"].ToString();
                    parametersOut["cur"] = infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID));
                    parametersOut["bal"] = oUser.USR_BALANCE.ToString();
                    parametersOut["time_bal"] = oUser.USR_TIME_BALANCE.ToString();
                    parametersOut["refund_balance_type"] = oUser.USR_REFUND_BALANCE_TYPE.ToString();
                    parametersOut["shopkeeperstatus"] = (oUser.USR_SHOPKEEPER_STATUS??0).ToString();



                    decimal? dInstallationId = null;
                    decimal? dLatitude = null;
                    decimal? dLongitude = null;
                    
                    try
                    {
                        decimal dTryInstallationId = Convert.ToDecimal(parametersIn["cityID"].ToString());
                        dInstallationId = dTryInstallationId;
                    }
                    catch
                    {
                        dInstallationId = null;
                    }

                    NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                    numberFormatProvider.NumberDecimalSeparator = ".";

                    string sValue = "";

                    try
                    {
                        sValue = parametersIn["gps_lat"].ToString();
                        if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                        decimal dTryLatitude = Convert.ToDecimal(parametersIn["gps_lat"].ToString(), numberFormatProvider);
                        dLatitude = dTryLatitude;
                    }
                    catch
                    {
                        dLatitude = null;
                    }

                    try
                    {
                        sValue = parametersIn["gps_long"].ToString();
                        if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                        decimal dTryLongitude = Convert.ToDecimal(parametersIn["gps_long"].ToString(), numberFormatProvider);
                        dLongitude = dTryLongitude;
                    }
                    catch
                    {
                        dLongitude = null;
                    }


                    INSTALLATION oInstallation = null;
                    DateTime? dtinstDateTime = null;
                    bool bValidCurrency = true;
                    if (!geograficAndTariffsRepository.getInstallation(dInstallationId,
                                                                 dLatitude,
                                                                 dLongitude, oUser.USR_CUR_ID,
                                                                 true,
                                                                 ref oInstallation,
                                                                 ref dtinstDateTime,
                                                                 out bValidCurrency))
                    {
                        rt = ResultType.Result_Error_Invalid_City;
                    }

                    if (rt == ResultType.Result_OK && !bValidCurrency)
                    {
                        rt = ResultType.Result_Error_Incompatible_City_With_UserCurrency;
                    }                  

                    if (rt != ResultType.Result_OK)
                    {
                        try
                        {
                            IEnumerable<INSTALLATION> insList = geograficAndTariffsRepository.getInstallationsList(oUser.USR_CUR_ID);
                            parametersOut["usr_cur_id"] = oUser.USR_CUR_ID;
                            parametersOut["usr_cou_id"] = oUser.USR_COU_ID;
                        }
                        catch (Exception e)
                        {
                            Logger_AddLogException(e, string.Format("GetQueryLoginData::Error = {0}", rt.ToString()), LogLevels.logERROR);
                            parametersOut["cities"] = null;
                        }

                        Logger_AddLogMessage(string.Format("GetQueryLoginData::Error: {0}", rt.ToString()), LogLevels.logERROR);
                        return rt;

                    }

                    dInsId = oInstallation.INS_ID;
                    parametersOut["cityID"] = oInstallation.INS_ID.ToString();
                    parametersOut["cityShortDesc"] = oInstallation.INS_SHORTDESC;
                    parametersOut["cityDatetime"] = ((DateTime)dtinstDateTime).ToString("HHmmssddMMyy");
                    parametersOut["cityVERS"] = oInstallation.INS_VERSION.ToString();
                    parametersOut["tarVERS"] = oInstallation.INS_TAR_VERSION.ToString();
                    parametersOut["cur_city"] = oInstallation.CURRENCy.CUR_ISO_CODE;
                    parametersOut["utc_offset"] = geograficAndTariffsRepository.GetInstallationUTCOffSetInMinutes(oInstallation.INS_ID);

                    string strBckWSURL = infraestructureRepository.GetParameterValue("QueryLogin_BckWSURL");
                    if (!string.IsNullOrEmpty(strBckWSURL))
                        parametersOut["bckwsurl"] = strBckWSURL;
                    decimal? dUserSignupSourceApp = oUser.USR_SIGNUP_SOAPP_ID;

                    GetUserPaymentData(ref oUser, ref oInstallation, ulAppVersion, dUserSignupSourceApp, ref parametersOut, sCulture);

                    parametersOut["StreetSectionsPackageURL"] = infraestructureRepository.GetParameterValue("StreetSectionsPackageURL");
                    decimal dLastStreetSectionPackage = -1;
                    infraestructureRepository.GetLastStreetSectionPackageId(oInstallation.INS_ID, out dLastStreetSectionPackage);
                    parametersOut["StreetSectionsPackageVersion"] = Convert.ToInt32(dLastStreetSectionPackage);

                    if (watch != null)
                    {
                        Logger_AddLogMessage(string.Format("QueryLoginCity:BeforeGetUserTicks: usuario:{0} / Tiempo de ejecución: {1}", oUser.USR_USERNAME, watch.ElapsedMilliseconds), LogLevels.logINFO);
                    }
                    //parametersOut["userMSG"] = "<usertick><f>1234567890</f><d>121406180213</d><lp>" + oUser.USER_PLATEs[0].USRP_PLATE + "</lp><q>300</q></usertick>";
                    if (!GetUserTicks(oUser,oInstallation,dtinstDateTime.Value,ref parametersOut))
                    {
                        Logger_AddLogMessage(string.Format("GetQueryLoginData::GetUserTicksError"), LogLevels.logERROR);
                    }



                    if (ulAppVersion >= _VERSION_3_4)
                    {
                        List<SERVICES_USER_PLATE> oservicePletList = customersRepository.GetServicePlateOfUser(oUser, oInstallation.INS_ID).ToList();                      

                        sb.Append("<userlp xmlns:json='http://james.newtonking.com/projects/json'>");
                        foreach (USER_PLATE oPlate in oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).OrderBy(t => t.USRP_PLATE))
                        {
                            //sb.Append("<lp xmlns:json='http://james.newtonking.com/projects/json'>");
                            sb.Append( "<lp json:Array='true'>");

                            var oservicePletListPlate = oservicePletList.Where(r => r.SERUP_USRP_ID == oPlate.USRP_ID).ToList();
                            SERVICES_USER_PLATE oservicePlet = oservicePletListPlate.FirstOrDefault(x => x.SERUP_INS_ID == oInstallation.INS_ID);

                            TypeTypeServicesEnum oTypeTypeServicesEnum =  ServicesUserPlatesEntity.GetTypeTypeServicesEnum(oservicePlet);
                            INSTALLATIONS_SERVICE oINSTALLATIONS_SERVICE = null;
                            if(oTypeTypeServicesEnum != TypeTypeServicesEnum.None)
                            {
                                oINSTALLATIONS_SERVICE = customersRepository.GetInstallationsServiceByTypeServiceType(oInstallation.INS_ID, oTypeTypeServicesEnum, (dtinstDateTime.HasValue?dtinstDateTime.Value: DateTime.UtcNow));
                            }
                            
                            sb.AppendFormat("<plate>{0}</plate>", oPlate.USRP_PLATE);
                            if (oINSTALLATIONS_SERVICE!=null && oINSTALLATIONS_SERVICE.INSSER_INS_ID == oservicePlet.SERUP_INS_ID)
                            {
                                sb.AppendFormat("<IdServicioType>{0}</IdServicioType>", (oINSTALLATIONS_SERVICE != null ? Convert.ToString(oINSTALLATIONS_SERVICE.INSSER_SERTYP_ID) : string.Empty));
                                sb.AppendFormat("<StatusService>{0}</StatusService>", ((oINSTALLATIONS_SERVICE != null && oservicePlet != null) ? Convert.ToString(oservicePlet.SERUP_SERSTA_ID) : string.Empty));
                                sb.AppendFormat("<TypeOfServiceType>{0}</TypeOfServiceType>", ((oINSTALLATIONS_SERVICE != null && oTypeTypeServicesEnum != TypeTypeServicesEnum.None) ? Convert.ToString((int)oTypeTypeServicesEnum) : string.Empty));
                            }
                            else
                            {
                                sb.AppendFormat("<IdServicioType>{0}</IdServicioType>", string.Empty);
                                sb.AppendFormat("<StatusService>{0}</StatusService>",  string.Empty);
                                sb.AppendFormat("<TypeOfServiceType>{0}</TypeOfServiceType>", string.Empty);
                            }

                            sb.Append( "</lp>");
                            
                        }
                        sb.Append( "</userlp>");

                    }
                    else
                    {
                        sb.Append("<userlp xmlns:json='http://james.newtonking.com/projects/json'>");
                        foreach (USER_PLATE oPlate in oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).OrderBy(t => t.USRP_PLATE))
                        {
                            sb.AppendFormat("<lp json:Array='true' >{0}</lp>", oPlate.USRP_PLATE);
                        }
                        sb.Append( "</userlp>");
                    }

                    sb.Append( "<userlpwarn xmlns:json='http://james.newtonking.com/projects/json'>");
                    int iFormatWarning = 0;
                    foreach (USER_PLATE oPlate in oUser.USER_PLATEs.Where(r=>r.USRP_ENABLED==1).OrderBy(t => t.USRP_PLATE))
                    {
                        if ((oInstallation.INS_INVALID_PLATE_FORMAT_WARNING ?? 0) == 1 && !string.IsNullOrEmpty(oInstallation.INS_VALID_PLATE_REGEX))
                        {
                            System.Text.RegularExpressions.Regex oRegex = new System.Text.RegularExpressions.Regex(oInstallation.INS_VALID_PLATE_REGEX);
                            System.Text.RegularExpressions.Match oMatch = oRegex.Match(oPlate.USRP_PLATE);
                            iFormatWarning = (oMatch.Success ? (oMatch.Value == oPlate.USRP_PLATE ? 0 : 1) : 1);
                        }
                        sb.AppendFormat("<lpwarn json:Array='true' >{0}</lpwarn>", iFormatWarning);                          
                    }
                    sb.Append( "</userlpwarn>");

                    sb.Append( "<confirmationtodelete>" + (ConfigurationManager.AppSettings["confirmationToDeleteUserPlate"] ?? "0") + "</confirmationtodelete>");


                    decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();
                    string strAppCode = "";
                    if (parametersIn["appcode"] != null)
                    {
                        try
                        {
                            strAppCode = parametersIn["appcode"].ToString();
                            dSourceApp = geograficAndTariffsRepository.GetSourceApp(strAppCode);
                        }
                        catch { }
                    }
                    else
                    {
                        strAppCode = geograficAndTariffsRepository.GetSourceAppCode(dSourceApp);

                    }

                    sb.Append("<ZendeskHelpHelpLabels xmlns:json='http://james.newtonking.com/projects/json'>");
                    sb.AppendFormat("<ZendeskHelpHelpLabel json:Array='true'>{0}_{1}</ZendeskHelpHelpLabel>", strAppCode, oUser.COUNTRy.COU_CODE);
                    sb.Append("</ZendeskHelpHelpLabels>");

                    PaymentSuscryptionType? eUserSuscryptionType = null;
                    if (oUser.USR_SUSCRIPTION_TYPE.HasValue)
                        eUserSuscryptionType = (PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE.Value;

                    if (oInstallation.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG != null)
                    {
                        eUserSuscryptionType = PaymentSuscryptionType.pstPerTransaction;
                        if (oUser.USR_BALANCE > 0)
                        {
                            // TODO: tag to inform that user balance is not valid for this installation
                            parametersOut["bal_available"] = 0;                            
                        }
                    }


                    if (watch != null)
                    {
                        Logger_AddLogMessage(string.Format("QueryLoginCity:BeforePayment: usuario:{0} / Tiempo de ejecución: {1}", oUser.USR_USERNAME, watch.ElapsedMilliseconds), LogLevels.logINFO);
                    }

                    if (!eUserSuscryptionType.HasValue)
                    {
                        sb.Append( "<paymeth>" +
                                       Convert.ToInt32(payMethods.Without_SuscriptionType).ToString() +
                                       "</paymeth><ccpan></ccpan><cctype></cctype>");
                    }
                    else
                    {
                        bool bPaymentMeanInvalidated = false;
                        CUSTOMER_PAYMENT_MEAN oUserPaymentMean = customersRepository.GetUserPaymentMean(ref oUser, oInstallation, out bPaymentMeanInvalidated);

                        if (eUserSuscryptionType.Value == PaymentSuscryptionType.pstPrepay)
                        {
                            if (oUserPaymentMean != null)
                            {

                                if ((oUserPaymentMean.CUSPM_ENABLED == 1) && (oUserPaymentMean.CUSPM_VALID == 1))
                                {
                                    if ((PaymentMeanType)oUserPaymentMean.CUSPM_PAT_ID == PaymentMeanType.pmtDebitCreditCard)
                                    {

                                        int cctype = (int)customersRepository.GetCreditCardType(oUserPaymentMean);

                                        if (oUserPaymentMean.CUSPM_AUTOMATIC_RECHARGE == 1)
                                        {
                                            sb.Append( "<paymeth>" +
                                                Convert.ToInt32(payMethods.Prepay_Credit_Card_Automatic).ToString() +
                                                "</paymeth><ccpan>" + oUserPaymentMean.CUSPM_TOKEN_MASKED_CARD_NUMBER + "</ccpan><cctype>"+cctype.ToString()+"</cctype>");

                                            if (oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG != null)
                                                sb.Append("<ccprovider>" + oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_PROVIDER + "</ccprovider>");

                                            sb.AppendFormat("<autbelow>{0}</autbelow><autamo>{1}</autamo>",
                                                oUserPaymentMean.CUSPM_RECHARGE_WHEN_AMOUNT_IS_LESS,
                                                oUserPaymentMean.CUSPM_AMOUNT_TO_RECHARGE);


                                        }
                                        else
                                        {
                                            sb.Append( "<paymeth>" +
                                                Convert.ToInt32(payMethods.Prepay_Credit_Card_Manual).ToString() +
                                                "</paymeth><ccpan>" + oUserPaymentMean.CUSPM_TOKEN_MASKED_CARD_NUMBER + "</ccpan><cctype>" + cctype.ToString() + "</cctype>");

                                            if (oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG != null)
                                                sb.Append("<ccprovider>" + oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_PROVIDER + "</ccprovider>");

                                        }
                                       
                                    }
                                    else if ((PaymentMeanType)oUserPaymentMean.CUSPM_PAT_ID == PaymentMeanType.pmtPaypal)
                                    {
                                        if (oUserPaymentMean.CUSPM_AUTOMATIC_RECHARGE == 1)
                                        {
                                            sb.Append( "<paymeth>" +
                                                Convert.ToInt32(payMethods.Prepay_Paypal_Automatic).ToString() +
                                                "</paymeth><ccpan></ccpan><cctype></cctype>");

                                            sb.AppendFormat("<autbelow>{0}</autbelow><autamo>{1}</autamo>",
                                                oUserPaymentMean.CUSPM_RECHARGE_WHEN_AMOUNT_IS_LESS,
                                                oUserPaymentMean.CUSPM_AMOUNT_TO_RECHARGE);

                                        }
                                        else
                                        {
                                            sb.Append( "<paymeth>" +
                                                Convert.ToInt32(payMethods.Prepay_Paypal_Manual).ToString() +
                                                "</paymeth><ccpan></ccpan><cctype></cctype>");

                                        }

                                    }
                                }
                                else
                                {
                                    sb.Append( "<paymeth>" +
                                        Convert.ToInt32(payMethods.Prepay_Without_Paymethod_Currently).ToString() +
                                        "</paymeth><ccpan></ccpan><cctype></cctype>");

                                }



                            }
                            else
                            {
                                if (!bPaymentMeanInvalidated)
                                {
                                    if (oUser.CUSTOMER.CUSTOMER_PAYMENT_MEANs.Count() > 0)
                                    {
                                        sb.Append( "<paymeth>" +
                                            Convert.ToInt32(payMethods.Prepay_Without_Paymethod_Currently).ToString() +
                                            "</paymeth><ccpan></ccpan><cctype></cctype>");
                                    }
                                    else
                                    {
                                        sb.Append( "<paymeth>" +
                                            Convert.ToInt32(payMethods.Prepay_New_User_Without_Paymethod_Currently).ToString() +
                                            "</paymeth><ccpan></ccpan><cctype></cctype>");
                                    }
                                }
                                else
                                {
                                    // TODO: ***
                                    sb.Append( "<paymeth>" +
                                            Convert.ToInt32(payMethods.Prepay_New_User_Without_Paymethod_Currently/*.Invalidated_Paymethod*/).ToString() +
                                            "</paymeth><ccpan></ccpan><cctype></cctype>");
                                }
                            }
                        }
                        else if (eUserSuscryptionType.Value == PaymentSuscryptionType.pstPerTransaction)
                        {

                            if (oUserPaymentMean != null)
                            {

                                if ((oUserPaymentMean.CUSPM_ENABLED == 1) && (oUserPaymentMean.CUSPM_VALID == 1))
                                {
                                    if ((PaymentMeanType)oUserPaymentMean.CUSPM_PAT_ID == PaymentMeanType.pmtDebitCreditCard)
                                    {
                                        int cctype = (int)customersRepository.GetCreditCardType(oUserPaymentMean);

                                        /*bool bValidToken = true;
                                        if (oInstallation.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG != null)
                                        {
                                            bValidToken = (oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_CTG_ID == oInstallation.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_CTG_ID);
                                            if (!bValidToken)
                                            {
                                                // TODO: delete user payment_mean ??
                                            }
                                        }
                                        if (bValidToken)
                                        {*/
                                            sb.Append( "<paymeth>" +
                                                  Convert.ToInt32(payMethods.PayPerTransaction_Credit_Card).ToString() +
                                                  "</paymeth><ccpan>" + oUserPaymentMean.CUSPM_TOKEN_MASKED_CARD_NUMBER + "</ccpan><cctype>" + cctype.ToString() + "</cctype>");

                                        if (oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG != null)
                                            sb.Append("<ccprovider>" + oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_PROVIDER + "</ccprovider>");
                                        /*}
                                        else
                                        {
                                            if (oUser.CUSTOMER.CUSTOMER_PAYMENT_MEANs.Count() > 0)
                                            {
                                                sb.Append( "<paymeth>" +
                                                                                   Convert.ToInt32(payMethods.PayPerTransaction_Without_Paymethod_Currently).ToString() +
                                                                                   "</paymeth><ccpan></ccpan>";
                                            }
                                            else
                                            {
                                                sb.Append( "<paymeth>" +
                                                    Convert.ToInt32(payMethods.PayPerTransaction_New_User_Without_Paymethod_Currently).ToString() +
                                                    "</paymeth><ccpan></ccpan>";
                                            }
                                        }*/
                                    }
                                    else if ((PaymentMeanType)oUserPaymentMean.CUSPM_PAT_ID == PaymentMeanType.pmtPaypal)
                                    {
                                        sb.Append( "<paymeth>" +
                                              Convert.ToInt32(payMethods.PayPerTransaction_Paypal).ToString() +
                                              "</paymeth><ccpan></ccpan><cctype></cctype>");
                                    }
                                }
                                else
                                {
                                   
                                    if (oUser.CUSTOMER.CUSTOMER_PAYMENT_MEANs.Count() > 0)
                                    {
                                        sb.Append( "<paymeth>" +
                                                                           Convert.ToInt32(payMethods.PayPerTransaction_Without_Paymethod_Currently).ToString() +
                                                                           "</paymeth><ccpan></ccpan>");
                                    }
                                    else
                                    {
                                        sb.Append( "<paymeth>" +
                                            Convert.ToInt32(payMethods.PayPerTransaction_New_User_Without_Paymethod_Currently).ToString() +
                                            "</paymeth><ccpan></ccpan><cctype></cctype>");
                                    }

                                }                              

                            }
                            else
                            {
                                if (!bPaymentMeanInvalidated)
                                {
                                    if (oUser.CUSTOMER.CUSTOMER_PAYMENT_MEANs.Count() > 0)
                                    {
                                        sb.Append( "<paymeth>" +
                                            Convert.ToInt32(payMethods.PayPerTransaction_Without_Paymethod_Currently).ToString() +
                                            "</paymeth><ccpan></ccpan><cctype></cctype>");
                                    }
                                    else
                                    {
                                        sb.Append( "<paymeth>" +
                                            Convert.ToInt32(payMethods.PayPerTransaction_New_User_Without_Paymethod_Currently).ToString() +
                                            "</paymeth><ccpan></ccpan><cctype></cctype>");

                                    }
                                }
                                else
                                {
                                    // TODO: ***
                                    sb.Append( "<paymeth>" +
                                            Convert.ToInt32(payMethods.PayPerTransaction_Without_Paymethod_Currently /*.Invalidated_Paymethod*/).ToString() +
                                            "</paymeth><ccpan></ccpan><cctype></cctype>");
                                }
                            }


                        }
                    }


                    if (watch != null)
                    {
                        Logger_AddLogMessage(string.Format("QueryLoginCity:BeforeRechargeValues: usuario:{0} / Tiempo de ejecución: {1}", oUser.USR_USERNAME, watch.ElapsedMilliseconds), LogLevels.logINFO);
                    }

                    sb.Append( "<val_autbelow xmlns:json='http://james.newtonking.com/projects/json'>");

                    decimal dCurID = oUser.USR_CUR_ID;
                    foreach (CURRENCY_RECHARGE_VALUE oRechargeValue in infraestructureRepository
                                                       .getCURRENCY_RECHARGE_VALUEs(dCurID)
                                                       .Where(s => s.CURV_VALUE_TYPE == (int)RechargeValuesTypes.rvt_AutomaticRechargeBelow)
                                                       .OrderBy(s => s.CURV_VALUE))                    
                    {
                        sb.AppendFormat("<value json:Array='true'>{0}</value>", oRechargeValue.CURV_VALUE);
                    }

                    sb.Append( "</val_autbelow>");
                    sb.Append( "<val_autamo xmlns:json='http://james.newtonking.com/projects/json'>");

                    foreach (CURRENCY_RECHARGE_VALUE oRechargeValue in infraestructureRepository
                                                       .getCURRENCY_RECHARGE_VALUEs(dCurID)
                                                       .Where(s => s.CURV_VALUE_TYPE == (int)RechargeValuesTypes.rvt_AutomaticRecharge)
                                                       .OrderBy(s => s.CURV_VALUE))
                    {
                        sb.AppendFormat("<value json:Array='true'>{0}</value>", oRechargeValue.CURV_VALUE);
                    }

                    sb.Append( "</val_autamo>");

                    sb.Append( "<coname>" + XmlEscape(oUser.CUSTOMER.CUS_NAME) + "</coname>");
                    sb.Append( "<coaddr>" + XmlEscape(oUser.CUSTOMER.CUS_STREET) + "</coaddr>");
                    sb.Append( "<coaddrno>" + oUser.CUSTOMER.CUS_STREE_NUMBER.ToString() + "</coaddrno>");
                    sb.Append( "<coaddrpcode>" + XmlEscape(oUser.CUSTOMER.CUS_ZIPCODE) + "</coaddrpcode>");
                    sb.Append( "<coaddrcity>" + XmlEscape(oUser.CUSTOMER.CUS_CITY) + "</coaddrcity>");
                    sb.Append( "<coaddrvat>" + XmlEscape(oUser.CUSTOMER.CUS_DOC_ID) + "</coaddrvat>");
                    sb.Append( "<ccode>" + (oUser.USR_COU_ID.ToString())+"</ccode>");
                    sb.Append( "<ccodephone>" + XmlEscape(oUser.USR_MAIN_TEL_COUNTRY.HasValue ? oUser.USR_MAIN_TEL_COUNTRY.Value.ToString() : "") + "</ccodephone>");
                    sb.Append( "<phone>" + XmlEscape(oUser.USR_MAIN_TEL) + "</phone>");
                    sb.Append( "<firstname>" + XmlEscape(oUser.CUSTOMER.CUS_FIRST_NAME) + "</firstname>");
                    sb.Append( "<surname>" + XmlEscape(oUser.CUSTOMER.CUS_SURNAME1) + "</surname>");

                    sb.Append( "<seextime>" + (ConfigurationManager.AppSettings["UserData_SeexTime"] ?? "600") + "</seextime>");

                    sb.Append(
                                       "<userparks xmlns:json='http://james.newtonking.com/projects/json'>");
                    try
                    {
                        if (ulAppVersion < _VERSION_3_1)
                        {
                            int iNumRows = 0;
                            if (watch != null)
                            {
                                Logger_AddLogMessage(string.Format("QueryLoginCity:BeforeGetUserPlateLastOperation: usuario:{0} / Tiempo de ejecución: {1}", oUser.USR_USERNAME, watch.ElapsedMilliseconds), LogLevels.logINFO);
                            }
                            var oPlatesOperations = customersRepository.GetUserPlateLastOperation(ref oUser, out iNumRows);

                            if (watch != null)
                            {
                                Logger_AddLogMessage(string.Format("QueryLoginCity:AfterGetUserPlateLastOperation: usuario:{0} / Tiempo de ejecución: {1}", oUser.USR_USERNAME, watch.ElapsedMilliseconds), LogLevels.logINFO);
                            }

                            if (iNumRows > 0)
                            {

                                foreach (OPERATION oper in oPlatesOperations)
                                {
                                    if ((oper.OPE_DATE <= dtinstDateTime)
                                        && (oper.OPE_ENDDATE >= dtinstDateTime))
                                    {
                                        sb.Append(
                                            "<userpark json:Array='true'>");
                                        sb.AppendFormat("<p>{0}</p>", oper.USER_PLATE.USRP_PLATE);
                                        sb.AppendFormat("<g>{0}</g>", oper.OPE_GRP_ID);
                                        if (oper.STREET_SECTION != null)
                                            sb.AppendFormat("<sts>{0}</sts>", oper.STREET_SECTION.STRSE_ID);
                                        sb.AppendFormat("<ad>{0}</ad>", oper.OPE_TAR_ID);
                                        sb.AppendFormat("<d>{0}</d>", oper.OPE_DATE.ToString("HHmmssddMMyy"));
                                        sb.AppendFormat("<q>{0}</q>", oper.OPE_AMOUNT);
                                        sb.AppendFormat("<t>{0}</t>", oper.OPE_TIME);
                                        sb.AppendFormat("<sd>{0}</sd>", oper.OPE_INIDATE.ToString("HHmmssddMMyy"));
                                        sb.AppendFormat("<ed>{0}</ed>", oper.OPE_ENDDATE.ToString("HHmmssddMMyy"));

                                        sb.Append(
                                            "</userpark>");

                                    }

                                }

                            }
                        }
                        else
                        {
                            string strCulture = UserDeviceLangs[0];
                            if (parametersIn["lang"] != null)                    
                            {
                                try
                                {
                                    int iLangIndex = Convert.ToInt32(parametersIn["lang"].ToString());
                                    if (iLangIndex <= UserDeviceLangs.Length)
                                    {
                                        strCulture = UserDeviceLangs[iLangIndex - 1];
                                    }
                                }
                                catch
                                { }
                            }

                            if (watch != null)
                            {
                                Logger_AddLogMessage(string.Format("QueryLoginCity:BeforeGetUserCurrentParkingOperations: usuario:{0} / Tiempo de ejecución: {1}", oUser.USR_USERNAME, watch.ElapsedMilliseconds), LogLevels.logINFO);
                            }
                            sb.Append( GetUserCurrentParkingOperations(ref oUser, oInstallation.INS_ID, strCulture, ulAppVersion, watch));

                            if (watch != null)
                            {
                                Logger_AddLogMessage(string.Format("QueryLoginCity:AfterGetUserCurrentParkingOperations: usuario:{0} / Tiempo de ejecución: {1}", oUser.USR_USERNAME, watch.ElapsedMilliseconds), LogLevels.logINFO);
                            }
                        }

                    }
                    catch (Exception e)
                    {
                        Logger_AddLogException(e, "QueryLogin::Exception:", LogLevels.logERROR);

                    }

                    sb.Append(
                    "</userparks>");
                    /*
                    sb.Append(
                                       "<useroffparks xmlns:json='http://james.newtonking.com/projects/json'>");

                    try
                    {
                        int iNumRows = 0;
                        
                        var oPlatesOperationsOffstreet = customersRepository.GetUserPlateLastOperationOffstreet(ref oUser, out iNumRows);


                        
                        if (iNumRows > 0)
                        {
                            foreach (OPERATIONS_OFFSTREET oper in oPlatesOperationsOffstreet)
                            {
                                if (oper.OPEOFF_TYPE == (int) OffstreetOperationType.Entry) {

                                    decimal? dGroupId = oper.OPEOFF_GRP_ID;
                                    DateTime? dtGroupDateTime = null;
                                    GROUPS_OFFSTREET_WS_CONFIGURATION oOffstreetWsConfiguration = null;
                                    if (geograficAndTariffsRepository.getOffStreetConfiguration(dGroupId, null, null, ref oOffstreetWsConfiguration, ref dtGroupDateTime))
                                    {

                                        sb.Append(
                                            "<useropenoffpark json:Array='true'>");
                                        sb.AppendFormat("<parkid>{0}</parkid>", oOffstreetWsConfiguration.GOWC_GRP_ID);
                                        sb.AppendFormat("<lp>{0}</lp>", oper.USER_PLATE.USRP_PLATE);
                                        sb.AppendFormat("<d>{0}</d>", oper.OPEOFF_ENTRY_DATE.ToString("HHmmssddMMyy"));
                                        sb.AppendFormat("<ope_id>{0}</ope_id>", oper.OPEOFF_LOGICAL_ID);
                                        //sb.AppendFormat("<ope_id_type>{0}</ope_id_type>", (int) OffstreetOperationIdType.MeyparId);
                                        sb.Append(
                                            "</useropenoffpark>");
                                    }
                                }

                            }
                        }

                    }
                    catch (Exception e)
                    {
                        Logger_AddLogException(e, "QueryLogin::Exception:", LogLevels.logERROR);

                    }

                    sb.Append(
                    "</useroffparks>");

                    sb.Append(
                                       "<usertolls xmlns:json='http://james.newtonking.com/projects/json'>");
                    try
                    {
                        int iNumRows = 0;


                        var oPlatesTollMovements = customersRepository.GetUserPlateLastTollMovement(ref oUser, out iNumRows);



                        if (iNumRows > 0)
                        {

                            foreach (TOLL_MOVEMENT oper in oPlatesTollMovements)
                            {
                                sb.Append(
                                    "<usertoll json:Array='true'>");
                                sb.AppendFormat("<p>{0}</p>", oper.USER_PLATE.USRP_PLATE);
                                sb.AppendFormat("<ad>{0}</ad>", oper.TOLM_TOL_TARIFF);
                                sb.AppendFormat("<d>{0}</d>", oper.TOLM_DATE.ToString("HHmmssddMMyy"));
                                sb.AppendFormat("<q>{0}</q>", oper.TOLM_AMOUNT);

                                sb.Append(
                                    "</usertoll>");

                            }

                        }

                    }
                    catch (Exception e)
                    {
                        Logger_AddLogException(e, "QueryLogin::Exception:", LogLevels.logERROR);

                    }

                    sb.Append(
                    "</usertolls>");
                    */
                    List<USERS_PREFERRED_PLATE> oPreferredPlates = null;
                    if (!customersRepository.GetPreferredPlatesFromUser(ref oUser, null, out oPreferredPlates))
                    {
                        rt = ResultType.Result_Error_Generic;
                        Logger_AddLogMessage(string.Format("GetQueryLoginData::Error: {0}", rt.ToString()), LogLevels.logERROR);
                        return rt;
                    }
                    string sPrefPlates = "";
                    foreach (var oPrefPlate in oPreferredPlates)
                    {
                        sPrefPlates += string.Format("<prefplate json:Array='true'><city>{0}</city><lp>{1}</lp></prefplate>", oPrefPlate.USRL_INS_ID, oPrefPlate.USER_PLATE.USRP_PLATE);
                    }

                    if (watch != null)
                    {
                        Logger_AddLogMessage(string.Format("QueryLoginCity:AfterGetPreferredPlatesFromUser: usuario:{0} / Tiempo de ejecución: {1}", oUser.USR_USERNAME, watch.ElapsedMilliseconds), LogLevels.logINFO);
                    }

                    List<USERS_FAVOURITES_AREA> oFavouriteAreas = null;
                    if (!customersRepository.GetFavouriteAreasFromUser(ref oUser, dInstallationId, out oFavouriteAreas))
                    {
                        rt = ResultType.Result_Error_Generic;
                        Logger_AddLogMessage(string.Format("GetQueryLoginData::Error: {0}", rt.ToString()), LogLevels.logERROR);
                        return rt;
                    }
                    string sFavAreas = "";
                    foreach (var oFavArea in oFavouriteAreas)
                    {
                        if (ulAppVersion >= _VERSION_3_5)
                        {
                            sFavAreas += string.Format("<favarea json:Array='true'><city>{0}</city><sector>{1}</sector><rate>{2}</rate><plate>{3}</plate><amount>{4}</amount></favarea>", oFavArea.USRA_INS_ID, oFavArea.USRA_GRP_ID, oFavArea.USRA_TAR_ID, oFavArea.USRA_PLATE, oFavArea.USRA_AMOUNT);
                        }
                        else
                        {
                            sFavAreas += string.Format("<favarea json:Array='true'><city>{0}</city><sector>{1}</sector><rate>{2}</rate></favarea>", oFavArea.USRA_INS_ID, oFavArea.USRA_GRP_ID, oFavArea.USRA_TAR_ID);
                        }
                    }
                    if (watch != null)
                    {
                        Logger_AddLogMessage(string.Format("QueryLoginCity:AfterGetFavouriteAreasFromUser: usuario:{0} / Tiempo de ejecución: {1}", oUser.USR_USERNAME, watch.ElapsedMilliseconds), LogLevels.logINFO);
                    }

                    sb.Append( "<userpreferences>");

                    sb.Append( "<prefplates xmlns:json='http://james.newtonking.com/projects/json'>" + sPrefPlates + "</prefplates>");
                    sb.Append( "<favareas xmlns:json='http://james.newtonking.com/projects/json'>" + sFavAreas + "</favareas>");

                    string strMostUsedPlate = "";
                    string strLastUsedPlate = "";
                    decimal? dMostUsedZone = null;
                    decimal? dLastUsedZone = null;
                    decimal? dMostUsedTariff = null;
                    decimal? dLastUsedTariff = null;




                    if (customersRepository.GetOperationsPlatesAndZonesStatistics(ref  oUser,
                                                                    out strMostUsedPlate,
                                                                    out strLastUsedPlate,
                                                                    out dMostUsedZone,
                                                                    out dLastUsedZone,
                                                                    out dMostUsedTariff,
                                                                    out dLastUsedTariff))
                    {

                        sb.AppendFormat("<lup>{0}</lup>", strLastUsedPlate);
                        sb.AppendFormat("<mup>{0}</mup>", strMostUsedPlate);
                        sb.AppendFormat("<luz>{0}</luz>", dLastUsedZone == null ? "" : dLastUsedZone.ToString());
                        sb.AppendFormat("<muz>{0}</muz>", dMostUsedZone == null ? "" : dMostUsedZone.ToString());
                        sb.AppendFormat("<tarifluz>{0}</tarifluz>", dLastUsedTariff == null ? "" : dLastUsedTariff.ToString());
                        sb.AppendFormat("<tarifmuz>{0}</tarifmuz>", dMostUsedTariff == null ? "" : dMostUsedTariff.ToString());

                    }

                    sb.Append( "</userpreferences>");


                    parametersOut["userDATA"] = sb.ToString();

                    if (watch != null)
                    {
                        Logger_AddLogMessage(string.Format("QueryLoginCity:AfterGetOperationsPlatesAndZonesStatistics: usuario:{0} / Tiempo de ejecución: {1}", oUser.USR_USERNAME, watch.ElapsedMilliseconds), LogLevels.logINFO);
                    }


                }
                else
                {
                    rt = ResultType.Result_Error_Invalid_User;
                    Logger_AddLogMessage(string.Format("GetQueryLoginData::Error: {0}", rt.ToString()), LogLevels.logERROR);

                }
            }
            catch (Exception e)
            {
                rt = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, string.Format("GetQueryLoginData::Error = {0}", rt.ToString()), LogLevels.logERROR);
                

            }

            return rt;

        }

        private bool GetUserPaymentData(ref USER oUser, ref INSTALLATION oInstallation,  ulong ulAppVersion, decimal? dSourceApp, ref SortedList parametersOut, string sCulture)
        {

            bool bRes = true;

            try
            {
                bool bCreditCardAllowed = false;
                bool bPaypalAllowed = false;
                bool bGooglePayAllowed = false;
                bool bApplePayAllowed = false;


                if ((oUser.USR_IS_ANONYMOUS??0)==1)
                {
                    bCreditCardAllowed = ((oInstallation.INS_WEB_PORTAL_ANONYMOUS_PAYMENT_CARD_ENABLED ?? 1) == 1);
                    bPaypalAllowed = ((oInstallation.INS_WEB_PORTAL_ANONYMOUS_PAYMENT_PAYPAL_ENABLED ?? 1) == 1);
                    bGooglePayAllowed = ((oInstallation.INS_WEB_PORTAL_ANONYMOUS_PAYMENT_GOOGLE_PAY_ENABLED ?? 1) == 1);
                    bApplePayAllowed = ((oInstallation.INS_WEB_PORTAL_ANONYMOUS_PAYMENT_APPLE_PAY_ENABLED ?? 1) == 1);

                }
                else
                {
                    bCreditCardAllowed = true;
                    bPaypalAllowed = true;
                }


                if (bCreditCardAllowed)
                {
                    List<CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG> oCreditCardConfigsList = null;

                    CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG oCreditCardConfig = oInstallation.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG;
                    if (oCreditCardConfig != null &&
                        !(oCreditCardConfig.CPTGC_ENABLED != 0 && oCreditCardConfig.CPTGC_PAT_ID == (int)PaymentMeanType.pmtDebitCreditCard))
                    {
                        oCreditCardConfig = null;
                    }
                    if (oCreditCardConfig == null)
                    {

                        oCreditCardConfigsList = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                                                                     .Where(r => r.CPTGC_ENABLED != 0 &&
                                                                                 r.CPTGC_IS_INTERNAL != 0 &&
                                                                                 r.CPTGC_INTERNAL_SOAPP_ID.HasValue &&
                                                                                 r.CPTGC_INTERNAL_SOAPP_ID == dSourceApp.Value &&
                                                                                 r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtDebitCreditCard))
                                                                     .OrderBy(r => r.CPTGC_ORDER)
                                                                     .ToList();

                        if (!oCreditCardConfigsList.Any())
                        {
                            oCreditCardConfigsList = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                                                                   .Where(r => r.CPTGC_ENABLED != 0 &&
                                                                               r.CPTGC_IS_INTERNAL != 0 &&
                                                                               !r.CPTGC_INTERNAL_SOAPP_ID.HasValue &&
                                                                               r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtDebitCreditCard))
                                                                   .OrderBy(r => r.CPTGC_ORDER)
                                                                   .ToList();

                        }


                    }
                    else
                    {
                        oCreditCardConfigsList = new List<CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG>() { oCreditCardConfig };
                    }


                    if (oCreditCardConfigsList.Any())
                    {
                        oCreditCardConfig = oCreditCardConfigsList.First();

                        PaymentMeanCreditCardProviderType eProviderType = (PaymentMeanCreditCardProviderType)oCreditCardConfig.CPTGC_PROVIDER;
                        parametersOut["ccprovider"] = (int)eProviderType;

                        switch (eProviderType)
                        {
                            case PaymentMeanCreditCardProviderType.pmccpCreditCall:
                                parametersOut["creditcall_token_url"] = oCreditCardConfig.CPTGC_FORM_URL;
                                parametersOut["creditcall_guid"] = oCreditCardConfig.CREDIT_CALL_CONFIGURATION.CCCON_GUID;
                                parametersOut["creditcall_hash_seed_key"] = oCreditCardConfig.CREDIT_CALL_CONFIGURATION.CCCON_HASH_SEED;
                                break;
                            case PaymentMeanCreditCardProviderType.pmccpIECISA:
                                parametersOut["iecisa_token_url"] = oCreditCardConfig.CPTGC_FORM_URL;
                                parametersOut["iecisa_guid"] = oCreditCardConfig.IECISA_CONFIGURATION.IECCON_GUID;
                                parametersOut["iecisa_hash_seed_key"] = oCreditCardConfig.IECISA_CONFIGURATION.IECCON_HASH_SEED;
                                break;

                            case PaymentMeanCreditCardProviderType.pmccpStripe:
                                parametersOut["stripe_token_url"] = oCreditCardConfig.CPTGC_FORM_URL;
                                parametersOut["stripe_guid"] = oCreditCardConfig.STRIPE_CONFIGURATION.STRCON_GUID;
                                parametersOut["stripe_hash_seed_key"] = oCreditCardConfig.STRIPE_CONFIGURATION.STRCON_HASH_SEED;
                                break;
                            case PaymentMeanCreditCardProviderType.pmccpMoneris:
                                parametersOut["moneris_token_url"] = oCreditCardConfig.CPTGC_FORM_URL;
                                parametersOut["moneris_guid"] = oCreditCardConfig.MONERIS_CONFIGURATION.MONCON_GUID;
                                parametersOut["moneris_hash_seed_key"] = oCreditCardConfig.MONERIS_CONFIGURATION.MONCON_HASH_SEED;
                                break;

                            case PaymentMeanCreditCardProviderType.pmccpPayu:
                                parametersOut["payu_token_url"] = oCreditCardConfig.CPTGC_FORM_URL;
                                parametersOut["payu_guid"] = oCreditCardConfig.PAYU_CONFIGURATION.PAYUCON_GUID;
                                parametersOut["payu_hash_seed_key"] = oCreditCardConfig.PAYU_CONFIGURATION.PAYUCON_HASH_SEED;
                                break;

                            case PaymentMeanCreditCardProviderType.pmccpTransbank:
                                parametersOut["transbank_token_url"] = oCreditCardConfig.CPTGC_FORM_URL;
                                parametersOut["transbank_guid"] = oCreditCardConfig.TRANSBANK_CONFIGURATION.TRBACON_GUID;
                                parametersOut["transbank_hash_seed_key"] = oCreditCardConfig.TRANSBANK_CONFIGURATION.TRBACON_HASH_SEED;
                                break;

                            case PaymentMeanCreditCardProviderType.pmccpBSRedsys:
                                parametersOut["bsredsys_token_url"] = oCreditCardConfig.CPTGC_FORM_URL;
                                parametersOut["bsredsys_guid"] = oCreditCardConfig.BSREDSYS_CONFIGURATION.BSRCON_GUID;
                                parametersOut["bsredsys_hash_seed_key"] = oCreditCardConfig.BSREDSYS_CONFIGURATION.BSRCON_HASH_SEED;
                                break;

                            case PaymentMeanCreditCardProviderType.pmccpPaysafe:
                                parametersOut["paysafe_token_url"] = oCreditCardConfig.CPTGC_FORM_URL;
                                parametersOut["paysafe_guid"] = oCreditCardConfig.PAYSAFE_CONFIGURATION.PYSCON_GUID;
                                parametersOut["paysafe_hash_seed_key"] = oCreditCardConfig.PAYSAFE_CONFIGURATION.PYSCON_HASH_SEED;
                                break;

                            case PaymentMeanCreditCardProviderType.pmccpMercadoPago:
                                parametersOut["mercadopago_token_url"] = oCreditCardConfig.CPTGC_FORM_URL;
                                parametersOut["mercadopago_guid"] = oCreditCardConfig.MERCADOPAGO_CONFIGURATION.MEPACON_GUID;
                                parametersOut["mercadopago_hash_seed_key"] = oCreditCardConfig.MERCADOPAGO_CONFIGURATION.MEPACON_HASH_SEED;
                                break;


                            default:
                                break;
                        }

                        StringBuilder sb = new StringBuilder();
                        foreach (var oConfig in oCreditCardConfigsList)
                        {
                            sb.Append("<ccpaydata json:Array='true'>");

                            eProviderType = (PaymentMeanCreditCardProviderType)oConfig.CPTGC_PROVIDER;
                            sb.AppendFormat("<ccprovider>{0}</ccprovider>", (int)eProviderType);

                            string sLiteral = "";
                            if (oConfig.CPTGC_DESC1_LIT_ID.HasValue)
                            {
                                sLiteral = infraestructureRepository.GetLiteral(oConfig.CPTGC_DESC1_LIT_ID.Value, sCulture);
                            }
                            sb.AppendFormat("<desclit1>{0}</desclit1>", sLiteral);
                            sLiteral = "";
                            if (oConfig.CPTGC_DESC2_LIT_ID.HasValue)
                            {
                                sLiteral = infraestructureRepository.GetLiteral(oConfig.CPTGC_DESC2_LIT_ID.Value, sCulture);
                            }
                            sb.AppendFormat("<desclit2>{0}</desclit2>", sLiteral);

                            sb.AppendFormat("<rechdefvaluePT>{0}</rechdefvaluePT>", oConfig.CPTGC_RECHARGE_DEF_VALUE ?? 0);
                            sb.AppendFormat("<showOrder>{0}</showOrder>", oConfig.CPTGC_ORDER);
                            sb.AppendFormat("<icon>{0}</icon>", oConfig.CPTGC_ICON_REF);

                            switch (eProviderType)
                            {
                                case PaymentMeanCreditCardProviderType.pmccpCreditCall:
                                    sb.AppendFormat("<token_url>{0}</token_url>", oConfig.CPTGC_FORM_URL);
                                    sb.AppendFormat("<guid>{0}</guid>", oConfig.CREDIT_CALL_CONFIGURATION.CCCON_GUID);
                                    sb.AppendFormat("<hash_seed_key>{0}</hash_seed_key>", oConfig.CREDIT_CALL_CONFIGURATION.CCCON_HASH_SEED);
                                    break;
                                case PaymentMeanCreditCardProviderType.pmccpIECISA:
                                    sb.AppendFormat("<token_url>{0}</token_url>", oConfig.CPTGC_FORM_URL);
                                    sb.AppendFormat("<guid>{0}</guid>", oConfig.IECISA_CONFIGURATION.IECCON_GUID);
                                    sb.AppendFormat("<hash_seed_key>{0}</hash_seed_key>", oConfig.IECISA_CONFIGURATION.IECCON_HASH_SEED);
                                    break;

                                case PaymentMeanCreditCardProviderType.pmccpStripe:
                                    sb.AppendFormat("<token_url>{0}</token_url>", oConfig.CPTGC_FORM_URL);
                                    sb.AppendFormat("<guid>{0}</guid>", oConfig.STRIPE_CONFIGURATION.STRCON_GUID);
                                    sb.AppendFormat("<hash_seed_key>{0}</hash_seed_key>", oConfig.STRIPE_CONFIGURATION.STRCON_HASH_SEED);
                                    break;
                                case PaymentMeanCreditCardProviderType.pmccpMoneris:
                                    sb.AppendFormat("<token_url>{0}</token_url>", oConfig.CPTGC_FORM_URL);
                                    sb.AppendFormat("<guid>{0}</guid>", oConfig.MONERIS_CONFIGURATION.MONCON_GUID);
                                    sb.AppendFormat("<hash_seed_key>{0}</hash_seed_key>", oConfig.MONERIS_CONFIGURATION.MONCON_HASH_SEED);
                                    break;

                                case PaymentMeanCreditCardProviderType.pmccpPayu:
                                    sb.AppendFormat("<token_url>{0}</token_url>", oConfig.CPTGC_FORM_URL);
                                    sb.AppendFormat("<guid>{0}</guid>", oConfig.PAYU_CONFIGURATION.PAYUCON_GUID);
                                    sb.AppendFormat("<hash_seed_key>{0}</hash_seed_key>", oConfig.PAYU_CONFIGURATION.PAYUCON_HASH_SEED);
                                    break;

                                case PaymentMeanCreditCardProviderType.pmccpTransbank:
                                    sb.AppendFormat("<token_url>{0}</token_url>", oConfig.CPTGC_FORM_URL);
                                    sb.AppendFormat("<guid>{0}</guid>", oConfig.TRANSBANK_CONFIGURATION.TRBACON_GUID);
                                    sb.AppendFormat("<hash_seed_key>{0}</hash_seed_key>", oConfig.TRANSBANK_CONFIGURATION.TRBACON_HASH_SEED);
                                    break;

                                case PaymentMeanCreditCardProviderType.pmccpBSRedsys:
                                    sb.AppendFormat("<token_url>{0}</token_url>", oConfig.CPTGC_FORM_URL);
                                    sb.AppendFormat("<guid>{0}</guid>", oConfig.BSREDSYS_CONFIGURATION.BSRCON_GUID);
                                    sb.AppendFormat("<hash_seed_key>{0}</hash_seed_key>", oConfig.BSREDSYS_CONFIGURATION.BSRCON_HASH_SEED);
                                    break;

                                case PaymentMeanCreditCardProviderType.pmccpPaysafe:
                                    sb.AppendFormat("<token_url>{0}</token_url>", oConfig.CPTGC_FORM_URL);
                                    sb.AppendFormat("<guid>{0}</guid>", oConfig.PAYSAFE_CONFIGURATION.PYSCON_GUID);
                                    sb.AppendFormat("<hash_seed_key>{0}</hash_seed_key>", oConfig.PAYSAFE_CONFIGURATION.PYSCON_HASH_SEED);
                                    break;

                                case PaymentMeanCreditCardProviderType.pmccpMercadoPago:
                                    sb.AppendFormat("<token_url>{0}</token_url>", oConfig.CPTGC_FORM_URL);
                                    sb.AppendFormat("<guid>{0}</guid>", oConfig.MERCADOPAGO_CONFIGURATION.MEPACON_GUID);
                                    sb.AppendFormat("<hash_seed_key>{0}</hash_seed_key>", oConfig.MERCADOPAGO_CONFIGURATION.MEPACON_HASH_SEED);
                                    break;


                                case PaymentMeanCreditCardProviderType.pmccpMercadoPagoPro:
                                    sb.AppendFormat("<token_url>{0}</token_url>", oConfig.CPTGC_FORM_URL);
                                    sb.AppendFormat("<guid>{0}</guid>", oConfig.MERCADOPAGO_CONFIGURATION.MEPACON_GUID);
                                    sb.AppendFormat("<hash_seed_key>{0}</hash_seed_key>", oConfig.MERCADOPAGO_CONFIGURATION.MEPACON_HASH_SEED);
                                    break;

                                default:
                                    break;
                            }

                            sb.Append("</ccpaydata>");
                        }

                        parametersOut["ccpaymentsdata"] = sb.ToString();
                    }
                    else
                    {
                        bCreditCardAllowed = false;
                    }

                    /*if (oCreditCardConfig != null)
                    {
                        PaymentMeanCreditCardProviderType eProviderType = (PaymentMeanCreditCardProviderType)oCreditCardConfig.CPTGC_PROVIDER;
                        parametersOut["ccprovider"] = (int)eProviderType;

                        switch (eProviderType)
                        {
                            case PaymentMeanCreditCardProviderType.pmccpCreditCall:
                                parametersOut["creditcall_token_url"] = oCreditCardConfig.CPTGC_FORM_URL;
                                parametersOut["creditcall_guid"] = oCreditCardConfig.CREDIT_CALL_CONFIGURATION.CCCON_GUID;
                                parametersOut["creditcall_hash_seed_key"] = oCreditCardConfig.CREDIT_CALL_CONFIGURATION.CCCON_HASH_SEED;
                                break;
                            case PaymentMeanCreditCardProviderType.pmccpIECISA:
                                parametersOut["iecisa_token_url"] = oCreditCardConfig.CPTGC_FORM_URL;
                                parametersOut["iecisa_guid"] = oCreditCardConfig.IECISA_CONFIGURATION.IECCON_GUID;
                                parametersOut["iecisa_hash_seed_key"] = oCreditCardConfig.IECISA_CONFIGURATION.IECCON_HASH_SEED;
                                break;

                            case PaymentMeanCreditCardProviderType.pmccpStripe:
                                parametersOut["stripe_token_url"] = oCreditCardConfig.CPTGC_FORM_URL;
                                parametersOut["stripe_guid"] = oCreditCardConfig.STRIPE_CONFIGURATION.STRCON_GUID;
                                parametersOut["stripe_hash_seed_key"] = oCreditCardConfig.STRIPE_CONFIGURATION.STRCON_HASH_SEED;
                                break;
                            case PaymentMeanCreditCardProviderType.pmccpMoneris:
                                parametersOut["moneris_token_url"] = oCreditCardConfig.CPTGC_FORM_URL;
                                parametersOut["moneris_guid"] = oCreditCardConfig.MONERIS_CONFIGURATION.MONCON_GUID;
                                parametersOut["moneris_hash_seed_key"] = oCreditCardConfig.MONERIS_CONFIGURATION.MONCON_HASH_SEED;
                                break;

                            case PaymentMeanCreditCardProviderType.pmccpPayu:
                                parametersOut["payu_token_url"] = oCreditCardConfig.CPTGC_FORM_URL;
                                parametersOut["payu_guid"] = oCreditCardConfig.PAYU_CONFIGURATION.PAYUCON_GUID;
                                parametersOut["payu_hash_seed_key"] = oCreditCardConfig.PAYU_CONFIGURATION.PAYUCON_HASH_SEED;
                                break;

                            case PaymentMeanCreditCardProviderType.pmccpTransbank:
                                parametersOut["transbank_token_url"] = oCreditCardConfig.CPTGC_FORM_URL;
                                parametersOut["transbank_guid"] = oCreditCardConfig.TRANSBANK_CONFIGURATION.TRBACON_GUID;
                                parametersOut["transbank_hash_seed_key"] = oCreditCardConfig.TRANSBANK_CONFIGURATION.TRBACON_HASH_SEED;
                                break;

                            case PaymentMeanCreditCardProviderType.pmccpBSRedsys:
                                parametersOut["bsredsys_token_url"] = oCreditCardConfig.CPTGC_FORM_URL;
                                parametersOut["bsredsys_guid"] = oCreditCardConfig.BSREDSYS_CONFIGURATION.BSRCON_GUID;
                                parametersOut["bsredsys_hash_seed_key"] = oCreditCardConfig.BSREDSYS_CONFIGURATION.BSRCON_HASH_SEED;
                                break;

                            case PaymentMeanCreditCardProviderType.pmccpPaysafe:
                                parametersOut["paysafe_token_url"] = oCreditCardConfig.CPTGC_FORM_URL;
                                parametersOut["paysafe_guid"] = oCreditCardConfig.PAYSAFE_CONFIGURATION.PYSCON_GUID;
                                parametersOut["paysafe_hash_seed_key"] = oCreditCardConfig.PAYSAFE_CONFIGURATION.PYSCON_HASH_SEED;
                                break;

                            case PaymentMeanCreditCardProviderType.pmccpMercadoPago:
                                parametersOut["mercadopago_token_url"] = oCreditCardConfig.CPTGC_FORM_URL;
                                parametersOut["mercadopago_guid"] = oCreditCardConfig.MERCADOPAGO_CONFIGURATION.MEPACON_GUID;
                                parametersOut["mercadopago_hash_seed_key"] = oCreditCardConfig.MERCADOPAGO_CONFIGURATION.MEPACON_HASH_SEED;
                                break;


                            default:
                                break;
                        }

                    }
                    else
                    {
                        bCreditCardAllowed = false;
                    }*/


                }


                if (bPaypalAllowed)
                {
                    CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG oPaypalConfig = oInstallation.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG3;
                    if (oInstallation.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG3 == null)
                    {
                        oPaypalConfig = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                                 .Where(r => r.CPTGC_ENABLED != 0 &&
                                             r.CPTGC_IS_INTERNAL != 0 && 
                                             r.CPTGC_INTERNAL_SOAPP_ID.HasValue && 
                                             r.CPTGC_INTERNAL_SOAPP_ID == dSourceApp.Value &&
                                             r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtPaypal))
                                 .FirstOrDefault();

                        if (oPaypalConfig == null)
                        {

                            oPaypalConfig = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                              .Where(r => r.CPTGC_ENABLED != 0 &&
                                          r.CPTGC_IS_INTERNAL != 0 && 
                                          !r.CPTGC_INTERNAL_SOAPP_ID.HasValue &&
                                          r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtPaypal))
                              .FirstOrDefault();
                        }
                    }

                    if (oPaypalConfig != null)
                    {
                        if (ulAppVersion < _VERSION_3_8)
                        {
                            parametersOut["Paypal_Client_id"] = oPaypalConfig.PAYPAL_CONFIGURATION.PPCON_RESTAPI_CLIENT_ID;
                            parametersOut["Paypal_Environment"] = oPaypalConfig.PAYPAL_CONFIGURATION.PPCON_RESTAPI_ENVIRONMENT;
                        }
                        else
                        {
                            parametersOut["Paypal_url"] = oPaypalConfig.CPTGC_FORM_URL;
                            parametersOut["Paypal_guid"] = oPaypalConfig.PAYPAL_CONFIGURATION.PPCON_GUID;
                            parametersOut["Paypal_hash_seed_key"] = oPaypalConfig.PAYPAL_CONFIGURATION.PPCON_HASH_SEED;
                        }
                    }
                    else
                    {
                        bPaypalAllowed = false;
                    }
                    
                }


                if (bGooglePayAllowed)
                {
                    CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG oGooglePayConfig = oInstallation.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG2;
                    if (oInstallation.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG2 == null)
                    {
                        oGooglePayConfig = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                                 .Where(r => r.CPTGC_ENABLED != 0 &&
                                             r.CPTGC_IS_INTERNAL != 0 &&
                                             r.CPTGC_INTERNAL_SOAPP_ID.HasValue &&
                                             r.CPTGC_INTERNAL_SOAPP_ID == dSourceApp.Value &&
                                             r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtGooglePay))
                                 .FirstOrDefault();

                        if (oGooglePayConfig == null)
                        {

                            oGooglePayConfig = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                              .Where(r => r.CPTGC_ENABLED != 0 &&
                                          r.CPTGC_IS_INTERNAL != 0 &&
                                          !r.CPTGC_INTERNAL_SOAPP_ID.HasValue &&
                                          r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtGooglePay))
                              .FirstOrDefault();
                        }
                    }

                    if (oGooglePayConfig != null)
                    {
                        //parametersOut["GooglePay_Client_id"] = oGooglePayConfig.CPTGC_PP_RESTAPI_CLIENT_ID;
                        //parametersOut["GooglePay_Environment"] = oGooglePayConfig.CPTGC_PP_RESTAPI_ENVIRONMENT;
                    }
                    else
                    {
                        bGooglePayAllowed = false;
                    }

                }



                if (bApplePayAllowed)
                {
                    CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG oApplePayConfig = oInstallation.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG1;
                    if (oInstallation.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG1 == null)
                    {
                        oApplePayConfig = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                                 .Where(r => r.CPTGC_ENABLED != 0 &&
                                             r.CPTGC_IS_INTERNAL != 0 &&
                                             r.CPTGC_INTERNAL_SOAPP_ID.HasValue &&
                                             r.CPTGC_INTERNAL_SOAPP_ID == dSourceApp.Value &&
                                             r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtApplePay))
                                 .FirstOrDefault();

                        if (oApplePayConfig == null)
                        {

                            oApplePayConfig = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                              .Where(r => r.CPTGC_ENABLED != 0 &&
                                          r.CPTGC_IS_INTERNAL != 0 &&
                                          !r.CPTGC_INTERNAL_SOAPP_ID.HasValue &&
                                          r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtApplePay))
                              .FirstOrDefault();
                        }
                    }

                    if (oApplePayConfig != null)
                    {
                        //parametersOut["ApplePay_Client_id"] = oApplePayConfig.CPTGC_PP_RESTAPI_CLIENT_ID;
                        //parametersOut["ApplePay_Environment"] = oApplePayConfig.CPTGC_PP_RESTAPI_ENVIRONMENT;
                    }
                    else
                    {
                        bApplePayAllowed = false;
                    }

                }


                if ((oUser.USR_IS_ANONYMOUS ?? 0) == 1)
                {
                    parametersOut["CreditCardAnonymousEnabled"] = bCreditCardAllowed ? 1 : 0;
                    parametersOut["PaypalAnonymousEnabled"] = bPaypalAllowed ? 1 : 0;
                    parametersOut["GooglePayAnonymousEnabled"] = bGooglePayAllowed ? 1 : 0;
                    parametersOut["ApplePayAnonymousEnabled"] = bApplePayAllowed ? 1 : 0;
                }

            }
            catch
            { 
                bRes = false; 
            }

            return bRes;

        }

        private bool GenerateInstallationsPolygonsXML(IEnumerable<stCityPolygon> oInstallationsPolygons, ref string strInstallationsPolygonsXML)
        {
            bool bRes = true;
            StringBuilder strRegs = new StringBuilder();

            try
            {
                foreach (stCityPolygon cityP in oInstallationsPolygons)
                {
                    strRegs.Append("<citipolygon json:Array='true'>");
                    strRegs.AppendFormat("<colour>{0}</colour>", cityP.colour);
                    strRegs.Append("<polygon json:Array='true'>");
                    foreach (stGPSPolygon point in cityP.polygon)
                    {

                        foreach (stGPSPoint p in point.GPSpolygon)
                        {
                            strRegs.Append("<pos json:Array='true'>");
                            strRegs.AppendFormat("<ord>{0}</ord>", p.order);
                            strRegs.AppendFormat("<lat>{0}</lat>", p.dLatitude.ToString(CultureInfo.InvariantCulture));
                            strRegs.AppendFormat("<lon>{0}</lon>", p.dLongitude.ToString(CultureInfo.InvariantCulture));
                            strRegs.Append("</pos>");
                        }

                    }
                    strRegs.Append("</polygon>");
                    if (!String.IsNullOrEmpty(cityP.message))
                    {
                        try
                        {
                            strRegs.Append("<message>");
                            RootObject line = JsonConvert.DeserializeObject<RootObject>(cityP.message);

                            StringBuilder strUrls = new StringBuilder();

                            foreach (Line l in line.line)
                            {
                                strRegs.Append("<line json:Array='true'>");
                                strRegs.AppendFormat("<text>{0}</text>", l.text);
                                foreach (string oURLS in l.urls)
                                {
                                    strRegs.AppendFormat("<urls json:Array='true'>{0}</urls>", oURLS);
                                }
                                strRegs.Append("</line>");
                            }
                            strRegs.AppendFormat("</message>");
                        }
                        catch (Exception)
                        {
                            Logger_AddLogMessage(string.Format("GenerateInstallationsPolygonsXML::Error FORMAT: City={0}", cityP.citiPolygonId), LogLevels.logERROR);
                            bRes = false;
                        }
                    }

                    strRegs.Append("</citipolygon>");
                }
                strInstallationsPolygonsXML = strRegs.ToString();
            }
            catch (Exception)
            {
                bRes = false;
            }

            return bRes;
        }

        private bool GenerateInstallationsGeometriesXML(List<INSTALLATIONS_GEOMETRY> oInstallationsGeometries,INSTALLATION installation,  ref string strInstallationsPolygonsXML)
        {
            bool bRes = true;
            StringBuilder strRegs = new StringBuilder();

            try
            {
                
                TimeZoneInfo tzi = TimeZoneInfo.FindSystemTimeZoneById(installation.INS_TIMEZONE_ID);
                DateTime dtServerTime = DateTime.Now;
                DateTime dtLocalInstTime = TimeZoneInfo.ConvertTime(dtServerTime, TimeZoneInfo.Local, tzi);

                foreach (var cityP in oInstallationsGeometries.GroupBy(x => x.INSGE_POL_NUMBER))
                {
                    strRegs.Append("<citipolygon json:Array='true'>");
                    strRegs.AppendFormat("<polnumber>{0}</polnumber>", cityP.Key);
                    strRegs.Append("<polygon json:Array='true'>");
                    foreach (var point in cityP.OrderBy(x => x.INSGE_ORDER).Where(r => (r.INSGE_INI_APPLY_DATE <= dtLocalInstTime) &&
                                                  (r.INSGE_END_APPLY_DATE >= dtLocalInstTime)))
                    {
                            strRegs.Append("<pos json:Array='true'>");
                            strRegs.AppendFormat("<ord>{0}</ord>", point.INSGE_ORDER);
                            strRegs.AppendFormat("<lat>{0}</lat>", point.INSGE_LATITUDE.ToString(CultureInfo.InvariantCulture));
                            strRegs.AppendFormat("<lon>{0}</lon>", point.INSGE_LONGITUDE.ToString(CultureInfo.InvariantCulture));
                            strRegs.Append("</pos>");
                    }
                    strRegs.Append("</polygon>");
                    strRegs.Append("</citipolygon>");
                }
                strInstallationsPolygonsXML = strRegs.ToString();
            }
            catch (Exception)
            {
                bRes = false;
            }

            return bRes;
        }

        private string GetInstallationsGeometrySync(long lCurrVersion,  MobileOS oMobileOS, string sAppVersion)
        {
            string strRes = "";
            StringBuilder strRegs = new StringBuilder();

            try
            {
                NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                numberFormatProvider.NumberDecimalSeparator = ".";

                int? iMaxRegs = null;

                if ((oMobileOS == MobileOS.Android) || ((oMobileOS == MobileOS.iOS) && (AppUtilities.AppVersion(sAppVersion) >= _VERSION_3_6_5)))
                {
                    iMaxRegs = CMaxGeometryRegistries;
                    string sMaxRegs = infraestructureRepository.GetParameterValue("InstallationGeometry_Sync_MaxRegs");

                    try
                    {
                        if (!string.IsNullOrEmpty(sMaxRegs))
                        {
                            iMaxRegs = Convert.ToInt32(sMaxRegs);
                        }
                    }
                    catch { }




                    INSTALLATIONS_GEOMETRY_SYNC[] oArrSync;
                    if (geograficAndTariffsRepository.GetSyncInstallationGeometry(lCurrVersion, out oArrSync, iMaxRegs))
                    {
                        foreach (INSTALLATIONS_GEOMETRY_SYNC oSync in oArrSync)
                        {
                            strRegs.Append("<reg json:Array='true'>");
                            strRegs.AppendFormat("<version>{0}</version>", oSync.INSGE_VERSION);
                            strRegs.AppendFormat("<movtype>{0}</movtype>", oSync.INSGE_MOV_TYPE);
                            strRegs.AppendFormat("<id>{0}</id>", oSync.INSGE_ID);
                            strRegs.AppendFormat("<insid>{0}</insid>", oSync.INSGE_INS_ID);
                            strRegs.AppendFormat("<pol>{0}</pol>", oSync.INSGE_POL_NUMBER);
                            strRegs.AppendFormat("<order>{0}</order>", oSync.INSGE_ORDER);
                            strRegs.AppendFormat("<lat>{0}</lat>", oSync.INSGE_LATITUDE.ToString(numberFormatProvider));
                            strRegs.AppendFormat("<long>{0}</long>", oSync.INSGE_LONGITUDE.ToString(numberFormatProvider));
                            strRegs.AppendFormat("<inidate>{0}</inidate>", oSync.INSGE_INI_APPLY_DATE.ToString("HHmmssddMMyy"));
                            strRegs.AppendFormat("<enddate>{0}</enddate>", oSync.INSGE_END_APPLY_DATE.ToString("HHmmssddMMyy"));
                            strRegs.Append("</reg>");
                        }
                    }
                }

                strRes = strRegs.ToString();

            }
            catch (Exception)
            {
                strRes = "";
            }

            return strRes;
        }

        private string GetInstallationsSync(long lCurrVersion)
        {
            string strRes = "";
            StringBuilder strRegs = new StringBuilder();

            try
            {
                NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                numberFormatProvider.NumberDecimalSeparator = ".";

                INSTALLATIONS_SYNC[] oArrSync;
                if (geograficAndTariffsRepository.GetSyncInstallation(lCurrVersion, out oArrSync))
                {
                    foreach (INSTALLATIONS_SYNC oSync in oArrSync)
                    {
                        strRegs.Append("<reg json:Array='true'>");
                        strRegs.AppendFormat("<version>{0}</version>", oSync.INS_VERSION);
                        strRegs.AppendFormat("<movtype>{0}</movtype>", oSync.INS_MOV_TYPE);
                        strRegs.AppendFormat("<id>{0}</id>", oSync.INS_ID);
                        strRegs.AppendFormat("<desc>{0}</desc>", oSync.INS_DESCRIPTION);
                        strRegs.AppendFormat("<shortdesc>{0}</shortdesc>", oSync.INS_SHORTDESC);
                        strRegs.AppendFormat("<cou>{0}</cou>", oSync.INS_COU_ID);
                        strRegs.AppendFormat("<cur>{0}</cur>", oSync.INS_CUR_ID);
                        strRegs.AppendFormat("<enabled>{0}</enabled>", oSync.INS_ENABLED);
                        strRegs.Append("</reg>");
                    }
                }

                strRes = strRegs.ToString();

            }
            catch (Exception)
            {
                strRes = "";
            }

            return strRes;
        }

        private bool GenerateCityOptXML(INSTALLATION oInstallation, USER oUser, ulong ulAppVersion, string strCulture, ref string strXmlCityOpt, Stopwatch watch=null)
        {
            bool bRes = true;
            StringBuilder sb = new StringBuilder();
            strXmlCityOpt = "";

            try
            {
                decimal? dUserSignupSourceApp = oUser.USR_SIGNUP_SOAPP_ID;


                CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG oCreditCardConfig = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                                                                    .Where(r => r.CPTGC_ENABLED != 0 &&
                                                                                r.CPTGC_IS_INTERNAL != 0 &&
                                                                                r.CPTGC_INTERNAL_SOAPP_ID.HasValue &&
                                                                                r.CPTGC_INTERNAL_SOAPP_ID == dUserSignupSourceApp.Value &&
                                                                                r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtDebitCreditCard))
                                                                    .FirstOrDefault();

                if (oCreditCardConfig == null)
                {
                    oCreditCardConfig = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                                                           .Where(r => r.CPTGC_ENABLED != 0 &&
                                                                       r.CPTGC_IS_INTERNAL != 0 &&
                                                                       !r.CPTGC_INTERNAL_SOAPP_ID.HasValue &&
                                                                       r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtDebitCreditCard))
                                                           .FirstOrDefault();

                }


                CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG oPaypalConfig = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                                   .Where(r => r.CPTGC_ENABLED != 0 &&
                                               r.CPTGC_IS_INTERNAL != 0 && r.CPTGC_INTERNAL_SOAPP_ID.HasValue && r.CPTGC_INTERNAL_SOAPP_ID == dUserSignupSourceApp.Value &&
                                               r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtPaypal))
                                   .FirstOrDefault();

                if (oPaypalConfig == null)
                {

                    oPaypalConfig = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                      .Where(r => r.CPTGC_ENABLED != 0 &&
                                  r.CPTGC_IS_INTERNAL != 0 && !r.CPTGC_INTERNAL_SOAPP_ID.HasValue &&
                                  r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtPaypal))
                      .FirstOrDefault();
                }
              

                bool bMultiCoinBackwardsCompatibility = (infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)) == "MXN" || ulAppVersion >= _VERSION_2_0);

                sb.AppendFormat("<parken>{0}</parken>", oInstallation.INS_OPT_PARK);
                sb.AppendFormat("<leaven>{0}</leaven>", oInstallation.INS_OPT_UNPARK);
                sb.AppendFormat("<ticken>{0}</ticken>", oInstallation.INS_OPT_TICKET);
                sb.AppendFormat("<tickbyplateen>{0}</tickbyplateen>", oInstallation.INS_OPT_TICKET_BY_PLATE);
                sb.AppendFormat("<rechen>{0}</rechen>", oInstallation.INS_OPT_RECHARGE);
                sb.AppendFormat("<moren>{0}</moren>", oInstallation.INS_OPT_MORE_FUNCTS);
                sb.AppendFormat("<curopen>{0}</curopen>", oInstallation.INS_OPT_CUR_OPERS);
                sb.AppendFormat("<hisopen>{0}</hisopen>", oInstallation.INS_OPT_HIS_OPERS);
                sb.AppendFormat("<ocupen>{0}</ocupen>", oInstallation.INS_OPT_OCUP);
                sb.AppendFormat("<offstparkentryen>{0}</offstparkentryen>", oInstallation.INS_OPT_OFFSTREET_PARK_ENTRY);
                sb.AppendFormat("<offstparkexiten>{0}</offstparkexiten>", oInstallation.INS_OPT_OFFSTREET_PARK_EXIT);
                sb.AppendFormat("<offstparkoccup>{0}</offstparkoccup>", oInstallation.INS_OPT_OFFSTREET_PARK_OCUP);
                sb.AppendFormat("<tollen>{0}</tollen>", oInstallation.INS_OPT_TOLL);
                TollPaymentMode oPayMode = (TollPaymentMode)oInstallation.INS_TOLL_PAY_MODE; // Toll payment mode: 0 – only online allowed, 1 – offline allowed, 2 – offline conditioned to current balance > payment to be done, 3 – offline conditioned to average balance > payment to be done
                /*if (oPayMode != TollPaymentMode.Online )
                {
                    USER_AVERAGE_BALANCE oUserAvgBal = null;
                    if (customersRepository.GetUserAverageBalanceById(ref oUserAvgBal, oUser.USR_ID))                     
                    {
                        if (oUserAvgBal.USRB_AVERAGE_BALANCE < oInstallation.INS_TRUST_AVERAGE_BALANCE)
                            oPayMode = TollPaymentMode.Online;
                    }
                }*/
                sb.AppendFormat("<tollpaymode>{0}</tollpaymode>", (int)oPayMode);
                sb.AppendFormat("<tollpendingmsg>{0}</tollpendingmsg>", infraestructureRepository.GetLiteral(oInstallation.INS_TOLL_PENDING_MSG_LIT_ID ?? 0, strCulture));
                sb.AppendFormat("<parkpbpen>{0}</parkpbpen>", oInstallation.INS_OPT_PARKBYPLATE);
                sb.AppendFormat("<parkpblist>{0}</parkpblist>", oInstallation.INS_OPT_PARKBYPLATELISTTYPE);
                sb.AppendFormat("<parkbyspaceen>{0}</parkbyspaceen>", oInstallation.INS_OPT_PARKBYSPACE);
                sb.AppendFormat("<parkbyzasen>{0}</parkbyzasen>", oInstallation.INS_OPT_PARKBYZONEANDSECTOR);
                sb.AppendFormat("<parkbyqren>{0}</parkbyqren>", oInstallation.INS_OPT_PARKBYQR);
                sb.AppendFormat("<parkbymapen>{0}</parkbymapen>", oInstallation.INS_OPT_PARKBYMAP);
                sb.AppendFormat("<parkbyspformen>{0}</parkbyspformen >", oInstallation.INS_OPT_PARKBYSPACEFORMAT);
                sb.AppendFormat("<parkbyspform>{0}</parkbyspform>", oInstallation.INS_OPT_PARKBYSPACEFORMAT_FORMAT);
                sb.AppendFormat("<parkbyzaszoneman>{0}</parkbyzaszoneman>", oInstallation.INS_OPT_PARKISZONEMANDATORY);
                sb.AppendFormat("<parkbyzassectorman>{0}</parkbyzassectorman>", oInstallation.INS_OPT_PARKISSECTORMANDATORY);
                sb.AppendFormat("<parkbyzascrit>{0}</parkbyzascrit>", oInstallation.INS_OPT_PARKZONECRIT);
                sb.AppendFormat("<parkbyqrforman>{0}</parkbyqrforman>", oInstallation.INS_OPT_PARKPAYBYQRFORMATMANDATORY);
                sb.AppendFormat("<parkbyqrform>{0}</parkbyqrform>", oInstallation.INS_OPT_PARKPAYBYQRFORMAT);
                sb.AppendFormat("<parkmultarifnum>{0}</parkmultarifnum>", oInstallation.INS_OPT_PARKMULTITARIFF_NUM);
                sb.AppendFormat("<parkbycurrentlocen>{0}</parkbycurrentlocen>", oInstallation.INS_OPT_PARKBYCURRENTLOCEN);
                sb.AppendFormat("<parkbycurrentlocaccuracy>{0}</parkbycurrentlocaccuracy>", oInstallation.INS_OPT_PARKBYCURRENTLOCACCURACY);
                sb.AppendFormat("<parkbycurrentlocant>{0}</parkbycurrentlocant>", oInstallation.INS_OPT_PARKBYCURRENTLOCANT);
                sb.AppendFormat("<parkbyfavlocen>{0}</parkbyfavlocen>", oInstallation.INS_OPT_PARKBYFAVLOCEN);

                sb.AppendFormat("<ticknumen>{0}</ticknumen>", oInstallation.INS_OPT_TICKET_NUM);
                sb.AppendFormat("<tickqren>{0}</tickqren>", oInstallation.INS_OPT_TICKET_QR);
                sb.AppendFormat("<rechqren>{0}</rechqren>", oInstallation.INS_OPT_RECHARGE_QR); // ***
                sb.AppendFormat("<rechcoen>{0}</rechcoen>", oInstallation.INS_OPT_RECHARGE_CODE); // ***

                sb.AppendFormat("<rechsponen>{0}</rechsponen>", oInstallation.INS_OPT_RECHSPONEN);
                sb.AppendFormat("<rechpaypal>{0}</rechpaypal>", ((oInstallation.INS_OPT_RECHARGE_PAYPAL ?? 0) == 1 && bMultiCoinBackwardsCompatibility && oPaypalConfig != null) ? 1 : 0); // ***
                sb.AppendFormat("<rechoxxo>{0}</rechoxxo>", (((oInstallation.INS_OPT_RECHARGE_OXXO ?? 0) == 1) && (oUser.CURRENCy.CUR_ISO_CODE == "MXN") && (ulAppVersion >= _VERSION_2_7_2)) ? 1 : 0); // ***


                sb.AppendFormat("<isGPSForParkingMandatory>{0}</isGPSForParkingMandatory>", oInstallation.INS_OPT_ISGPSFORPARKINGMANDATORY);
                sb.AppendFormat("<GPSParktimeout>{0}</GPSParktimeout>", oInstallation.INS_OPT_GPSPARKTIMEOUT);
                if (!string.IsNullOrEmpty(oInstallation.INS_OPT_CONFIGMENU))
                    sb.AppendFormat("<ConfigMenu>{0}</ConfigMenu>", oInstallation.INS_OPT_CONFIGMENU);


                sb.AppendFormat("<rechdefen>{0}</rechdefen>", ((oInstallation.INS_OPT_RECHARGE_PAYMENT_MEAN) == 1 && bMultiCoinBackwardsCompatibility && oCreditCardConfig != null) ? 1 : 0);
                sb.AppendFormat("<rechtransf>{0}</rechtransf>", oInstallation.INS_OPT_TRANSFER_BALANCE ?? 0);
                sb.AppendFormat("<rechmodif>{0}</rechmodif>", ((oInstallation.INS_OPT_MODIFY_P ?? 0) == 1 && bMultiCoinBackwardsCompatibility && oCreditCardConfig != null) ? 1 : 0);
                sb.AppendFormat("<rechpagen>{0}</rechpagen>", oInstallation.INS_OPT_RECHARGE_PAGATELIA ?? 0); // ***
                sb.AppendFormat("<rechspoten>{0}</rechspoten>", oInstallation.INS_OPT_RECHARGE_SPOTYCOINS ?? 0); // ***

                sb.AppendFormat("<parkzoneqrformat>{0}</parkzoneqrformat>", oInstallation.INS_OPT_QRPARKZONEFORMAT);
                sb.AppendFormat("<tickqrformat>{0}</tickqrformat>", oInstallation.INS_OPT_QRTICKETFORMAT);
                sb.AppendFormat("<rechqrformat>{0}</rechqrformat >", oInstallation.INS_OPT_QRRECHARGEFORMAT);
                sb.AppendFormat("<shopkeeperpark>{0}</shopkeeperpark>", oInstallation.INS_OPT_SHOPKEEPER_PARK);
                sb.AppendFormat("<shopkeeperbaltrans>{0}</shopkeeperbaltrans>", oInstallation.INS_OPT_SHOPKEEPER_BALTRANS);

                decimal dShopKeeperParkPerc = oInstallation.INSTALLATION_SHOPKEEPER_PARAMETERs.FirstOrDefault() == null ? (decimal)0 : oInstallation.INSTALLATION_SHOPKEEPER_PARAMETERs.First().INSSHO_SHOW_PARK_PROFIT_PERC;
                decimal dShopKeeperBalTransPerc = oInstallation.INSTALLATION_SHOPKEEPER_PARAMETERs.FirstOrDefault() == null ? (decimal)0 : oInstallation.INSTALLATION_SHOPKEEPER_PARAMETERs.First().INSSHO_SHOW_BAL_TRANS_PROFIT_PERC;

                sb.AppendFormat("<shopkeeperparkcomissionperc>{0}</shopkeeperparkcomissionperc>", Convert.ToInt32(dShopKeeperParkPerc * 100));
                sb.AppendFormat("<shopkeeperbaltranscomissionperc>{0}</shopkeeperbaltranscomissionperc>", Convert.ToInt32(dShopKeeperBalTransPerc * 100));


                string strAllowNoPaymentMethod = infraestructureRepository.GetParameterValue("AllowNoPaymentMethod");
                sb.AppendFormat("<allownopaymethod>{0}</allownopaymethod >", strAllowNoPaymentMethod == "1" ? 1 : 0);


                string sSuscriptionType = "";
                RefundBalanceType eRefundBalType = RefundBalanceType.rbtAmount;
                customersRepository.GetUserPossibleSuscriptionTypes(ref oUser, infraestructureRepository, out sSuscriptionType, out eRefundBalType);

                sb.Append("<allowchangesubscriptiontype>" + (string.IsNullOrEmpty(sSuscriptionType) ? 1 : 0).ToString() + "</allowchangesubscriptiontype>");
                if (oCreditCardConfig != null)
                {
                    sb.AppendFormat("<per_transaction_minimum_charge_amount>{0}</per_transaction_minimum_charge_amount >", oCreditCardConfig.CPTGC_MIN_CHARGE ?? 0);
                    sb.AppendFormat("<per_transaction_minimum_charge_currency>{0}</per_transaction_minimum_charge_currency >", oUser.COUNTRy.CURRENCy.CUR_ISO_CODE);
                }


                sb.AppendFormat("<zone_searcher_min_zones>{0}</zone_searcher_min_zones>", oInstallation.INS_ZONE_SEARCHER_MIN_NUM ?? 5);


                string sXMKSubscriptionTypes = "";

                foreach (PaymentSuscryptionType oSuscriptionType in System.Enum.GetValues(typeof(PaymentSuscryptionType)))
                {
                    sXMKSubscriptionTypes += string.Format("<st json:Array='true' id= \"{0}\">", (int)oSuscriptionType);
                    if (sSuscriptionType != "")
                        sXMKSubscriptionTypes += (sSuscriptionType == (((int)oSuscriptionType).ToString()) ? "1" : "0");
                    else
                        sXMKSubscriptionTypes += "1";
                    sXMKSubscriptionTypes += "</st>";
                }

                sb.Append("<subscription_type xmlns:json='http://james.newtonking.com/projects/json'>" + sXMKSubscriptionTypes + "</subscription_type >");

                int iFeeLayout = 0;
                OPERATOR oOperator = customersRepository.GetDefaultOperator();
                if (oOperator != null) iFeeLayout = oOperator.OPR_FEE_LAYOUT;
                sb.AppendFormat("<layout>{0}</layout>", iFeeLayout);
                if (ulAppVersion >= _VERSION_2_8)
                {
                    sb.AppendFormat("<override_gps_position>{0}</override_gps_position>", (oInstallation.INS_OVERRIDE_GPS_POSITION.HasValue ? oInstallation.INS_OVERRIDE_GPS_POSITION.Value : 1));
                    sb.AppendFormat("<override_gps_position_precision_min_meter>{0}</override_gps_position_precision_min_meter>", (oInstallation.INS_OVERRIDE_GPS_POSITION_PRECISION_MIN_METERS.HasValue ? oInstallation.INS_OVERRIDE_GPS_POSITION_PRECISION_MIN_METERS.Value : 0));
                }
                decimal dCurID = oUser.USR_CUR_ID;

                /*strXmlCityOpt += "<rechdefvalues>";

                foreach (CURRENCY_RECHARGE_VALUE oRechargeValue in infraestructureRepository
                                   .Currencies
                                   .Where(r => r.CUR_ID == dCurID)
                                   .First().CURRENCY_RECHARGE_VALUEs
                                   .Where(s => s.CURV_VALUE_TYPE == (int)RechargeValuesTypes.rvt_ManualRecharge))               
                {
                    sb.AppendFormat("<value>{0}</value>", oRechargeValue.CURV_VALUE);
                }

                strXmlCityOpt += "</rechdefvalues>";*/

                //<userlp xmlns:json='http://james.newtonking.com/projects/json'>";
                //"<lp json:Array='true'>" + oPlate.USRP_PLATE + "</lp>";
                sb.AppendFormat("<warn_no_phone>{0}</warn_no_phone>", (oInstallation.INS_WARN_NO_PHONE.HasValue ? oInstallation.INS_WARN_NO_PHONE.Value : 0));
                string sLiteral = infraestructureRepository.GetLiteral(oInstallation.INS_CITY_LIT_FINE_NUMBER.HasValue ? oInstallation.INS_CITY_LIT_FINE_NUMBER.Value : 0, strCulture);
                sb.AppendFormat("<city_fine_number_lit>{0}</city_fine_number_lit>", !string.IsNullOrEmpty(sLiteral) ? sLiteral : " ");
                sb.AppendFormat("<show_stop_warning_msg>{0}</show_stop_warning_msg>", oInstallation.INS_SHOW_STOP_WARNING_MSG);
                sb.AppendFormat("<wstimeout>{0}</wstimeout>", infraestructureRepository.GetRateWSTimeout(oInstallation.INS_ID)+ infraestructureRepository.GetRateWSTimeoutIncreaseValue(oInstallation.INS_ID));

                decimal dPercVAT1;
                decimal dPercVAT2;
                decimal dPercFEE;
                decimal dPercFEETopped;
                decimal dFixedFEE;
                int? iPaymentTypeId = null;
                int? iPaymentSubtypeId = null;

                int iQFEE = 0;
                decimal dQFEE = 0;
                int iQVAT = 0;
                int iQTotal = 0;
                int iPartialVAT1;
                int iPartialPercFEE;
                int iPartialFixedFEE;
                int iPartialPercFEEVAT;
                int iPartialFixedFEEVAT;
                int iQSubTotal = 0;
                int iPayPerTransactionAmount = 0;


                List<string> oPerTransactionParameters = new List<string>();

                oPerTransactionParameters = ConfigurationManager.AppSettings["SuscriptionType2_AddPayMethChargeValue"].ToString().Split(';').ToList();

                for (int i = 0; i < oPerTransactionParameters.Count; i++)
                {
                    if (oPerTransactionParameters[i] == infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)))
                    {
                        iPayPerTransactionAmount = Convert.ToInt32(oPerTransactionParameters[i + 1]);
                        break;
                    }

                }


                decimal dShopKeeperBon = oInstallation.INS_SHOPKEEPER_RECHARGE_BONIFICATION_PERC.HasValue ? oInstallation.INS_SHOPKEEPER_RECHARGE_BONIFICATION_PERC.Value : 0;

                sb.Append("<rechdefvaluePT>" + iPayPerTransactionAmount.ToString() + "</rechdefvaluePT>");

                string sXmlRechdefvaluesAmountToRecharge = "";
                string sXmlRechdefvaluesBonificationAmount = "";
                string sXmlRechdefvaluesBase = "";
                string sXmlRechdefvaluesFee = "";
                string sXmlRechdefvaluesVat = "";
                string sXmlRechdefvaluesSubtotal = "";
                string sXmlRechdefvalues = "";


                if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                {
                    iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                    iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                }

                if (!customersRepository.GetFinantialParams(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)), "", iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.BalanceRecharge,
                                                            out dPercVAT1, out dPercVAT2, out dPercFEE, out dPercFEETopped, out dFixedFEE))
                {
                    bRes = false;
                    Logger_AddLogMessage(string.Format("GenerateCityOptXML::Error getting balance recharge finantial parameters."), LogLevels.logERROR);
                }



                foreach (CURRENCY_RECHARGE_VALUE oRechargeValue in infraestructureRepository
                                    .getCURRENCY_RECHARGE_VALUEs(dCurID)
                                    .Where(s => s.CURV_VALUE_TYPE == (int)RechargeValuesTypes.rvt_ManualRecharge)
                                    .OrderBy(s => s.CURV_VALUE))
                {
                    iQTotal = customersRepository.CalculateFEE(oRechargeValue.CURV_VALUE, dPercVAT1, dPercVAT2, dPercFEE, dPercFEETopped, dFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                    dQFEE = Math.Round(oRechargeValue.CURV_VALUE * dPercFEE, MidpointRounding.AwayFromZero);
                    if (dPercFEETopped > 0 && iQFEE > dPercFEETopped) dQFEE = dPercFEETopped;
                    dQFEE += dFixedFEE;
                    iQFEE = Convert.ToInt32(Math.Round(dQFEE, MidpointRounding.AwayFromZero));


                    iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                    iQSubTotal = oRechargeValue.CURV_VALUE + iQFEE;


                    int iAmountToBeAddedToBalance = oRechargeValue.CURV_VALUE;
                    decimal dbonQuantity = 0;

                    if ((dShopKeeperBon > 0) && (oUser.USR_SHOPKEEPER_STATUS.HasValue) && (oUser.USR_SHOPKEEPER_STATUS == (int)ShopKeeperStatus.ShopKeeperUser))
                    {
                        dbonQuantity = Math.Round(Convert.ToDecimal(oRechargeValue.CURV_VALUE) * dShopKeeperBon, MidpointRounding.AwayFromZero);
                        iAmountToBeAddedToBalance = Convert.ToInt32(dbonQuantity) + oRechargeValue.CURV_VALUE;
                    }


                    sXmlRechdefvaluesAmountToRecharge += string.Format("<value json:Array='true'>{0}</value>", iAmountToBeAddedToBalance);
                    sXmlRechdefvaluesBonificationAmount += string.Format("<value json:Array='true'>{0}</value>", -Convert.ToInt32(dbonQuantity));
                    sXmlRechdefvaluesBase += string.Format("<value json:Array='true'>{0}</value>", oRechargeValue.CURV_VALUE);
                    sXmlRechdefvaluesFee += string.Format("<value json:Array='true'>{0}</value>", iQFEE);
                    sXmlRechdefvaluesVat += string.Format("<value json:Array='true'>{0}</value>", iQVAT);
                    sXmlRechdefvaluesSubtotal += string.Format("<value json:Array='true'>{0}</value>", iQSubTotal);
                    sXmlRechdefvalues += string.Format("<value json:Array='true'>{0}</value>", iQTotal);
                }

                sb.Append("<rechdefvalues_amounttobeaddedtobalance  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechdefvaluesAmountToRecharge + "</rechdefvalues_amounttobeaddedtobalance>");
                sb.Append("<rechdefvalues_bonification  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechdefvaluesBonificationAmount + "</rechdefvalues_bonification>");
                sb.Append("<rechdefvalues_base  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechdefvaluesBase + "</rechdefvalues_base>");
                sb.Append("<rechdefvalues_fee  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechdefvaluesFee + "</rechdefvalues_fee>");
                sb.Append("<rechdefvalues_vat  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechdefvaluesVat + "</rechdefvalues_vat>");
                sb.Append("<rechdefvalues_subtotal  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechdefvaluesSubtotal + "</rechdefvalues_subtotal>");
                sb.Append("<rechdefvalues  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechdefvalues + "</rechdefvalues>");

                string sXmlRechChangeAmountToRecharge = "";
                string sXmlRechChangeBonificationAmount = "";
                string sXmlRechChangePayBase = "";
                string sXmlRechChangePayFee = "";
                string sXmlRechChangePayVat = "";
                string sXmlRechChangePaySubtotal = "";
                string sXmlRechChangePay = "";

                foreach (CURRENCY_RECHARGE_VALUE oRechargeValue in infraestructureRepository
                                    .getCURRENCY_RECHARGE_VALUEs(dCurID)
                                    .Where(s => s.CURV_VALUE_TYPE == (int)RechargeValuesTypes.rvt_RechargeChangePay)
                                    .OrderBy(s => s.CURV_VALUE))
                {

                    iQTotal = customersRepository.CalculateFEE(oRechargeValue.CURV_VALUE, dPercVAT1, dPercVAT2, dPercFEE, dPercFEETopped, dFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);


                    dQFEE = Math.Round(oRechargeValue.CURV_VALUE * dPercFEE, MidpointRounding.AwayFromZero);
                    if (dPercFEETopped > 0 && iQFEE > dPercFEETopped) dQFEE = dPercFEETopped;
                    dQFEE += dFixedFEE;
                    iQFEE = Convert.ToInt32(Math.Round(dQFEE, MidpointRounding.AwayFromZero));

                    iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                    iQSubTotal = oRechargeValue.CURV_VALUE + iQFEE;

                    int iAmountToBeAddedToBalance = oRechargeValue.CURV_VALUE;
                    decimal dbonQuantity = 0;

                    if ((dShopKeeperBon > 0) && (oUser.USR_SHOPKEEPER_STATUS.HasValue) && (oUser.USR_SHOPKEEPER_STATUS == (int)ShopKeeperStatus.ShopKeeperUser))
                    {
                        dbonQuantity = Math.Round(Convert.ToDecimal(oRechargeValue.CURV_VALUE) * dShopKeeperBon, MidpointRounding.AwayFromZero);
                        iAmountToBeAddedToBalance = Convert.ToInt32(dbonQuantity) + oRechargeValue.CURV_VALUE;
                    }


                    sXmlRechChangeAmountToRecharge += string.Format("<value json:Array='true'>{0}</value>", iAmountToBeAddedToBalance);
                    sXmlRechChangeBonificationAmount += string.Format("<value json:Array='true'>{0}</value>", -Convert.ToInt32(dbonQuantity));
                    sXmlRechChangePayBase += string.Format("<value json:Array='true'>{0}</value>", oRechargeValue.CURV_VALUE);
                    sXmlRechChangePayFee += string.Format("<value json:Array='true'>{0}</value>", iQFEE);
                    sXmlRechChangePayVat += string.Format("<value json:Array='true'>{0}</value>", iQVAT);
                    sXmlRechChangePaySubtotal += string.Format("<value json:Array='true'>{0}</value>", iQSubTotal);
                    sXmlRechChangePay += string.Format("<value json:Array='true'>{0}</value>", iQTotal);
                }

                sb.Append("<rechchangepay_amounttobeaddedtobalance  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechChangeAmountToRecharge + "</rechchangepay_amounttobeaddedtobalance>");
                sb.Append("<rechchangepay_bonification  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechChangeBonificationAmount + "</rechchangepay_bonification>");
                sb.Append("<rechchangepay_base  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechChangePayBase + "</rechchangepay_base>");
                sb.Append("<rechchangepay_fee  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechChangePayFee + "</rechchangepay_fee>");
                sb.Append("<rechchangepay_vat  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechChangePayVat + "</rechchangepay_vat>");
                sb.Append("<rechchangepay_subtotal  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechChangePaySubtotal + "</rechchangepay_subtotal>");
                sb.Append("<rechchangepay  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechChangePay + "</rechchangepay>");





                if (!customersRepository.GetFinantialParams(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)), "", (int)PaymentMeanType.pmtPaypal, null, ChargeOperationsType.BalanceRecharge,
                                                           out dPercVAT1, out dPercVAT2, out dPercFEE, out dPercFEETopped, out dFixedFEE))
                {
                    bRes = false;
                    Logger_AddLogMessage(string.Format("GenerateCityOptXML::Error getting balance recharge finantial parameters."), LogLevels.logERROR);
                }


                string sXmlRechPayPalAmountToRecharge = "";
                string sXmlRechPayPalBonificationAmount = "";
                string sXmlRechPayPalBase = "";
                string sXmlRechPayPalFee = "";
                string sXmlRechPayPalVat = "";
                string sXmlRechPayPalSubtotal = "";
                string sXmlRechPayPal = "";


                foreach (CURRENCY_RECHARGE_VALUE oRechargeValue in infraestructureRepository
                                    .getCURRENCY_RECHARGE_VALUEs(dCurID)
                                    .Where(s => s.CURV_VALUE_TYPE == (int)RechargeValuesTypes.rvt_RechargePaypal)
                                    .OrderBy(s => s.CURV_VALUE))
                {

                    iQTotal = customersRepository.CalculateFEE(oRechargeValue.CURV_VALUE, dPercVAT1, dPercVAT2, dPercFEE, dPercFEETopped, dFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);


                    dQFEE = Math.Round(oRechargeValue.CURV_VALUE * dPercFEE, MidpointRounding.AwayFromZero);
                    if (dPercFEETopped > 0 && iQFEE > dPercFEETopped) dQFEE = dPercFEETopped;
                    dQFEE += dFixedFEE;
                    iQFEE = Convert.ToInt32(Math.Round(dQFEE, MidpointRounding.AwayFromZero));

                    iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                    iQSubTotal = oRechargeValue.CURV_VALUE + iQFEE;


                    int iAmountToBeAddedToBalance = oRechargeValue.CURV_VALUE;
                    decimal dbonQuantity = 0;

                    if ((dShopKeeperBon > 0) && (oUser.USR_SHOPKEEPER_STATUS.HasValue) && (oUser.USR_SHOPKEEPER_STATUS == (int)ShopKeeperStatus.ShopKeeperUser))
                    {
                        dbonQuantity = Math.Round(Convert.ToDecimal(oRechargeValue.CURV_VALUE) * dShopKeeperBon, MidpointRounding.AwayFromZero);
                        iAmountToBeAddedToBalance = Convert.ToInt32(dbonQuantity) + oRechargeValue.CURV_VALUE;
                    }


                    sXmlRechPayPalAmountToRecharge += string.Format("<value json:Array='true'>{0}</value>", iAmountToBeAddedToBalance);
                    sXmlRechPayPalBonificationAmount += string.Format("<value json:Array='true'>{0}</value>", -Convert.ToInt32(dbonQuantity));
                    sXmlRechPayPalBase += string.Format("<value json:Array='true'>{0}</value>", oRechargeValue.CURV_VALUE);
                    sXmlRechPayPalFee += string.Format("<value json:Array='true'>{0}</value>", iQFEE);
                    sXmlRechPayPalVat += string.Format("<value json:Array='true'>{0}</value>", iQVAT);
                    sXmlRechPayPal += string.Format("<value json:Array='true'>{0}</value>", iQTotal);
                    sXmlRechPayPalSubtotal += string.Format("<value json:Array='true'>{0}</value>", iQSubTotal);

                }

                sb.Append("<rechPayPal_amounttobeaddedtobalance  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechPayPalAmountToRecharge + "</rechPayPal_amounttobeaddedtobalance>");
                sb.Append("<rechPayPal_bonification  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechPayPalBonificationAmount + "</rechPayPal_bonification>");
                sb.Append("<rechPayPal_base  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechPayPalBase + "</rechPayPal_base>");
                sb.Append("<rechPayPal_fee  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechPayPalFee + "</rechPayPal_fee>");
                sb.Append("<rechPayPal_vat  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechPayPalVat + "</rechPayPal_vat>");
                sb.Append("<rechPayPal_subtotal  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechPayPalSubtotal + "</rechPayPal_subtotal>");
                sb.Append("<rechPayPal  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechPayPal + "</rechPayPal>");

                if (!customersRepository.GetFinantialParams(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)), "", (int)PaymentMeanType.pmtOxxo, null, ChargeOperationsType.BalanceRecharge,
                                                           out dPercVAT1, out dPercVAT2, out dPercFEE, out dPercFEETopped, out dFixedFEE))
                {
                    bRes = false;
                    Logger_AddLogMessage(string.Format("GenerateCityOptXML::Error getting balance recharge finantial parameters for Oxxo."), LogLevels.logERROR);
                }


                string sXmlRechOxxoBase = "";
                string sXmlRechOxxoFee = "";
                string sXmlRechOxxoVat = "";
                string sXmlRechOxxoSubtotal = "";
                string sXmlRechOxxoBarCode = "";
                string sXmlRechOxxo = "";

                foreach (CURRENCY_RECHARGE_VALUE oRechargeValue in infraestructureRepository
                                    .getCURRENCY_RECHARGE_VALUEs(infraestructureRepository.Currencies.Where(r=> r.CUR_ISO_CODE=="MXN").FirstOrDefault().CUR_ID)
                                    .Where(s => s.CURV_VALUE_TYPE == (int)RechargeValuesTypes.rvt_OxxoRecharge)
                                    .OrderBy(s => s.CURV_VALUE))
                {

                    //iQTotal = customersRepository.CalculateFEE(oRechargeValue.CURV_VALUE, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);
                    int iQBase = customersRepository.CalculateFEEReverse(oRechargeValue.CURV_VALUE, dPercVAT1, dPercVAT2, dPercFEE, Convert.ToInt32(dPercFEETopped), Convert.ToInt32(dFixedFEE),
                        out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                    dQFEE = Math.Round(iQBase * dPercFEE, MidpointRounding.AwayFromZero);
                    if (dPercFEETopped > 0 && iQFEE > dPercFEETopped) dQFEE = dPercFEETopped;
                    dQFEE += dFixedFEE;
                    iQFEE = Convert.ToInt32(Math.Round(dQFEE, MidpointRounding.AwayFromZero));


                    iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                    iQSubTotal = iQBase /*oRechargeValue.CURV_VALUE*/ + iQFEE;


                    sXmlRechOxxoBase += string.Format("<value json:Array='true'>{0}</value>", iQBase /*oRechargeValue.CURV_VALUE*/);
                    sXmlRechOxxoFee += string.Format("<value json:Array='true'>{0}</value>", iQFEE);
                    sXmlRechOxxoVat += string.Format("<value json:Array='true'>{0}</value>", iQVAT);
                    sXmlRechOxxo += string.Format("<value json:Array='true'>{0}</value>", oRechargeValue.CURV_VALUE /*iQTotal*/);
                    sXmlRechOxxoSubtotal += string.Format("<value json:Array='true'>{0}</value>", iQSubTotal);
                    sXmlRechOxxoBarCode += string.Format("<value json:Array='true'>{0}</value>", GenerateOxxoCodeBar(oUser.USR_ID, oRechargeValue.CURV_VALUE /*iQTotal*/));


                }

                sb.Append("<rechOxxo_base  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechOxxoBase + "</rechOxxo_base>");
                sb.Append("<rechOxxo_fee  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechOxxoFee + "</rechOxxo_fee>");
                sb.Append("<rechOxxo_vat  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechOxxoVat + "</rechOxxo_vat>");
                sb.Append("<rechOxxo_subtotal  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechOxxoSubtotal + "</rechOxxo_subtotal>");
                sb.Append("<rechOxxo  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechOxxo + "</rechOxxo>");
                sb.Append("<rechOxxo_barcode  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechOxxoBarCode + "</rechOxxo_barcode>");

                if (ulAppVersion >= _VERSION_2_0)
                {
                    string sXmlBalanceTransfer = "";

                    foreach (CURRENCY_RECHARGE_VALUE oRechargeValue in infraestructureRepository
                                        .getCURRENCY_RECHARGE_VALUEs(dCurID)
                                        .Where(s => s.CURV_VALUE_TYPE == (int)RechargeValuesTypes.rvt_BalanceTransfer)
                                        .OrderBy(s => s.CURV_VALUE))
                    {

                        sXmlBalanceTransfer += string.Format("<value json:Array='true'>{0}</value>", oRechargeValue.CURV_VALUE);

                    }

                    sb.Append("<transferbalancevalues xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlBalanceTransfer + "</transferbalancevalues>");
                }



                if (ulAppVersion >= _VERSION_2_4)
                {
                    string sXmlBalanceTransferShopKeeper = "";
                    string sXmlBalanceTransferShopKeeperProfit = "";
                    string sXmlBalanceTransferShopKeeperToTransfer = "";
                    int iProfit = 0;
                    int iAmount = 0;

                    foreach (CURRENCY_RECHARGE_VALUE oRechargeValue in infraestructureRepository
                                        .getCURRENCY_RECHARGE_VALUEs(dCurID)
                                        .Where(s => s.CURV_VALUE_TYPE == (int)RechargeValuesTypes.rvt_ShopKeeperBalanceTransfer)
                                        .OrderBy(s => s.CURV_VALUE))
                    {



                        customersRepository.CalculateShopKeeperProfitReverse(oRechargeValue.CURV_VALUE, dShopKeeperBalTransPerc, out iProfit, out iAmount);

                        sXmlBalanceTransferShopKeeper += string.Format("<value json:Array='true'>{0}</value>", oRechargeValue.CURV_VALUE);
                        sXmlBalanceTransferShopKeeperProfit += string.Format("<value json:Array='true'>{0}</value>", iProfit);
                        sXmlBalanceTransferShopKeeperToTransfer += string.Format("<value json:Array='true'>{0}</value>", iAmount);

                    }

                    sb.Append("<shopkeepertransferbalancevalues xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlBalanceTransferShopKeeper + "</shopkeepertransferbalancevalues>");
                    sb.Append("<shopkeepertransferbalancevalues_profit xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlBalanceTransferShopKeeperProfit + "</shopkeepertransferbalancevalues_profit>");
                    sb.Append("<shopkeepertransferbalancevalues_totransfer xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlBalanceTransferShopKeeperToTransfer + "</shopkeepertransferbalancevalues_totransfer>");
                }

                sb.Append("<rechusersettings>");

                if (!customersRepository.GetFinantialParams(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)), "", iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.BalanceRecharge,
                                                            out dPercVAT1, out dPercVAT2, out dPercFEE, out dPercFEETopped, out dFixedFEE))
                {
                    bRes = false;
                    Logger_AddLogMessage(string.Format("GenerateCityOptXML::Error getting balance recharge finantial parameters."), LogLevels.logERROR);
                }

                var oLastRecharge = oUser.CUSTOMER_PAYMENT_MEANS_RECHARGEs.OrderByDescending(t => t.CUSPMR_UTC_DATE).FirstOrDefault();
                if (oLastRecharge != default(CUSTOMER_PAYMENT_MEANS_RECHARGE))
                {
                    iQFEE = 0;
                    iQVAT = 0;
                    iQTotal = 0;
                    iPartialVAT1 = 0;
                    iPartialPercFEE = 0;
                    iPartialFixedFEE = 0;
                    iPartialPercFEEVAT = 0;
                    iPartialFixedFEEVAT = 0;

                    iQTotal = customersRepository.CalculateFEE(oLastRecharge.CUSPMR_AMOUNT, oLastRecharge.CUSPMR_PERC_VAT1 ?? 0, oLastRecharge.CUSPMR_PERC_VAT2 ?? 0, oLastRecharge.CUSPMR_PERC_FEE ?? 0, Convert.ToInt32(oLastRecharge.CUSPMR_PERC_FEE_TOPPED ?? 0), Convert.ToInt32(oLastRecharge.CUSPMR_FIXED_FEE ?? 0), out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                    if (iQTotal != Convert.ToInt32(oLastRecharge.CUSPMR_TOTAL_AMOUNT_CHARGED))
                    {
                        Logger_AddLogMessage(string.Format("GenerateCityOptXML::Total amount charged {0} is distint from total calculated {1} for recharge id {2}.", oLastRecharge.CUSPMR_TOTAL_AMOUNT_CHARGED, iQTotal, oLastRecharge.CUSPMR_ID), LogLevels.logWARN);
                    }

                    dQFEE = Math.Round(oLastRecharge.CUSPMR_AMOUNT * (oLastRecharge.CUSPMR_PERC_FEE ?? 0), MidpointRounding.AwayFromZero);
                    if ((oLastRecharge.CUSPMR_PERC_FEE_TOPPED ?? 0) > 0 && dQFEE > (oLastRecharge.CUSPMR_PERC_FEE_TOPPED ?? 0)) dQFEE = oLastRecharge.CUSPMR_PERC_FEE_TOPPED ?? 0;
                    dQFEE += oLastRecharge.CUSPMR_FIXED_FEE ?? 0;
                    iQFEE = Convert.ToInt32(Math.Round(dQFEE, MidpointRounding.AwayFromZero));

                    iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                    iQSubTotal = oLastRecharge.CUSPMR_AMOUNT + iQFEE;


                    if (dCurID != oLastRecharge.CUSPMR_CUR_ID)
                    {

                    }

                    sb.AppendFormat("<rechdefvalue_base>{0}</rechdefvalue_base>", oLastRecharge.CUSPMR_AMOUNT);
                    sb.AppendFormat("<rechdefvalue_fee>{0}</rechdefvalue_fee>", iQFEE);
                    sb.AppendFormat("<rechdefvalue_vat>{0}</rechdefvalue_vat>", iQVAT);
                    sb.AppendFormat("<rechdefvalue_subtotal>{0}</rechdefvalue_subtotal>", iQSubTotal);
                    sb.AppendFormat("<rechdefvalue>{0}</rechdefvalue>", iQTotal);
                }
                else
                {
                    sb.Append("<rechdefvalue_base>0</rechdefvalue_base>");
                    sb.Append("<rechdefvalue_fee>0</rechdefvalue_fee>");
                    sb.Append("<rechdefvalue_vat>0</rechdefvalue_vat>");
                    sb.Append("<rechdefvalue_subtotal>0</rechdefvalue_subtotal>");
                    sb.Append("<rechdefvalue>0</rechdefvalue>");
                }

                sb.AppendFormat("<val_autamo>{0}</val_autamo>", (oUser.CUSTOMER_PAYMENT_MEAN != null && oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == 1 ? oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AMOUNT_TO_RECHARGE ?? 0 : 0));
                sb.AppendFormat("<val_autbelow>{0}</val_autbelow>", (oUser.CUSTOMER_PAYMENT_MEAN != null && oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == 1 ? oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_RECHARGE_WHEN_AMOUNT_IS_LESS ?? 0 : 0));

                sb.Append("</rechusersettings>");
                sb.Append(oInstallation.INS_PARKING_WARNING_XML_VALUES);

                sb.AppendFormat("<limit_zone_warning>{0}</limit_zone_warning>", oInstallation.INS_LIMIT_ZONE_WARNING ?? 0);
                sb.AppendFormat("<limit_zone_warning_meters>{0}</limit_zone_warning_meters>", oInstallation.INS_LIMIT_ZONE_WARNING_METERS ?? 0);

                sb.AppendFormat("<on_air>{0}</on_air>", (oInstallation.INS_MAP_SCREEN_TYPE == 1 ? 1 : 0) /*oInstallation.INS_ON_AIR*/);
                sb.AppendFormat("<map_screen_type>{0}</map_screen_type>", oInstallation.INS_MAP_SCREEN_TYPE);

                strXmlCityOpt = sb.ToString();

            }
            catch (Exception e)
            {
                bRes = false;
                Logger_AddLogException(e, string.Format("GenerateCityOptXML::Error"), LogLevels.logERROR);

            }

            return bRes;
        }

        private string GenerateXMLUsersWarnings(IEnumerable<USERS_WARNING> ListUsersWarning)
        {
            string strRes = "";
            StringBuilder strRegs = new StringBuilder();
            try
            {
                foreach (USERS_WARNING uw in ListUsersWarning)
                {
                    strRegs.Append("<warnings json:Array='true'>");
                    strRegs.AppendFormat("<user_id>{0}</user_id>", uw.UWA_USER_ID);
                    strRegs.AppendFormat("<url_image>{0}</url_image>", uw.UWA_URL_IMAGE);
                    strRegs.AppendFormat("<title>{0}</title>", uw.UWA_TITLE);
                    strRegs.AppendFormat("<text1>{0}</text1>", uw.UWA_TEXT1);
                    strRegs.AppendFormat("<text2>{0}</text2>", uw.UWA_TEXT2);
                    strRegs.AppendFormat("<button1_text>{0}</button1_text>", uw.UWA_BUTTON1_TEXT);
                    strRegs.AppendFormat("<button1_function>{0}</button1_function>", uw.UWA_BUTTON1_FUNCTION);
                    strRegs.AppendFormat("<button2_text>{0}</button2_text>", uw.UWA_BUTTON2_TEXT);
                    strRegs.AppendFormat("<status>{0}</status>", uw.UWA_STATUS);
                    strRegs.Append("</warnings>");
                }
                strRes = strRegs.ToString();

            }
            catch (Exception)
            {
                strRes = "";
            }

            return strRes;
        }

        private ResultType PerformPrepayRecharge(ref USER oUser, CUSTOMER_PAYMENT_MEAN oUserPaymentMean, int iOSType, bool bAutomatic, int iQuantity, 
                                                 int iAmountToBeAddedToBalance, bool bAutoconf,
                                                 decimal? dLatitude, decimal? dLongitude, string strAppVersion, 
                                                 PaymentMeanRechargeCreationType rechargeCreationType,
                                                 string strMD, string strCAVV, string strECI,
                                                 string strBSRedsys3DSTransID,string strBSRedsys3DSPares, string strBSRedsys3DSCres, 
                                                 string strBSRedsys3DSMethodData, string strMercadoPagoToken,
                                                 string strMPProDescription,
                                                 string strMPProTransactionId,
                                                 string strMPProReference,
                                                 string strMPProCardHash,
                                                 string strMPProCardReference,
                                                 string strMPProCardScheme,
                                                 string strMPProGatewayDate,
                                                 string strMPProMaskedCardNumber,
                                                 string strMPProExpMonth,
                                                 string strMPProExpYear,
                                                 string strMPProCardType,
                                                 string strMPProDocumentID,
                                                 string strMPProDocumentType,
                                                 string strMPProInstallaments,
                                                 string strMPProCVVLength,
                                                 decimal dSourceApp, bool bPaymentInPerson, CardPayment_Mode eCardPaymentMode,
                                                 out decimal? dRechargeId, out string str3DSURL, out long lEllapsedTime)
        {
            ResultType rtRes = ResultType.Result_Error_Generic;
            dRechargeId = null;
            str3DSURL = "";
            lEllapsedTime = 0;
            Stopwatch watch = Stopwatch.StartNew();

            try
            {

                if ((oUserPaymentMean != null) &&
                    (oUserPaymentMean.CUSPM_ENABLED == 1) &&
                    (oUserPaymentMean.CUSPM_VALID == 1))
                {

                    decimal dPercVAT1 = 0;
                    decimal dPercVAT2 = 0;
                    decimal dPercFEE = 0;
                    decimal dPercFEETopped = 0;
                    decimal dFixedFEE = 0;
                    int? iPaymentTypeId = null;
                    int? iPaymentSubtypeId = null;
                    if (oUserPaymentMean != null)
                    {
                        iPaymentTypeId = oUserPaymentMean.CUSPM_PAT_ID;
                        iPaymentSubtypeId = oUserPaymentMean.CUSPM_PAST_ID;
                    }

                    int iQuantityToRecharge = iQuantity;

                    decimal dCurrencyId = oUser.USR_CUR_ID;
                    string sCurrencyIsoCode = oUser.CURRENCy.CUR_ISO_CODE;
                    string sCurrencyIsoCodeNum = oUser.CURRENCy.CUR_ISO_CODE_NUM;

                    if ((PaymentMeanType)oUserPaymentMean.CUSPM_PAT_ID == PaymentMeanType.pmtDebitCreditCard)
                    {
                        if (oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_MIN_CHARGE.HasValue)
                        {
                            if (iQuantity < oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_MIN_CHARGE.Value)
                            {
                                iQuantityToRecharge = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_MIN_CHARGE.Value;
                            }
                        }

                        dCurrencyId = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_CUR_ID;
                        sCurrencyIsoCode = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CURRENCy.CUR_ISO_CODE;
                        sCurrencyIsoCodeNum = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CURRENCy.CUR_ISO_CODE_NUM;
                    }


                    int iPartialVAT1 = 0;
                    int iPartialPercFEE = 0;
                    int iPartialFixedFEE = 0;

                    int iTotalQuantity = 0;

                    NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                    numberFormatProvider.NumberDecimalSeparator = ".";
                    decimal dQuantity = 0;
                    decimal dQuantityToCharge = 0;


                    if (oUser.USR_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPrepay)
                    {

                        if (!customersRepository.GetFinantialParams(oUser, "", iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.BalanceRecharge,
                                                                    out dPercVAT1, out dPercVAT2, out dPercFEE, out dPercFEETopped, out dFixedFEE))
                        {
                            rtRes = ResultType.Result_Error_Generic;
                            Logger_AddLogMessage(string.Format("PerformPrepayRecharge::Error: Error getting finantial parameters. Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                        }


                        iTotalQuantity = customersRepository.CalculateFEE(iQuantityToRecharge, dPercVAT1, dPercVAT2, dPercFEE, dPercFEETopped, dFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE);

                        dQuantity = Convert.ToDecimal(iQuantityToRecharge, numberFormatProvider) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurrencyIsoCode);
                        dQuantityToCharge = Convert.ToDecimal(iTotalQuantity, numberFormatProvider) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurrencyIsoCode);
                    }
                    else
                    {
                        iPartialVAT1 = 0;
                        iPartialPercFEE = 0;
                        iPartialFixedFEE = 0;

                        iTotalQuantity = iQuantityToRecharge; // customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE);*/                    

                        dQuantity = Convert.ToDecimal(iQuantityToRecharge, numberFormatProvider) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurrencyIsoCode);
                        dQuantityToCharge = Convert.ToDecimal(iTotalQuantity, numberFormatProvider) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurrencyIsoCode);

                    }




                    if ((PaymentMeanType)oUserPaymentMean.CUSPM_PAT_ID == PaymentMeanType.pmtDebitCreditCard)
                    {
                        if (CheckCardPaymentMode(oUserPaymentMean, eCardPaymentMode, out eCardPaymentMode))
                        {
                            string strUserReference = null;
                            string strAuthCode = null;
                            string strAuthResult = null;
                            string strAuthResultDesc = "";
                            string strGatewayDate = null;
                            string strTransactionId = null;
                            string strCardScheme = null;
                            string strCFTransactionID = null;
                            string strBSRedsysProtocolVersion = null;
                            int? iBSRedsysNumInlineForms = null;
                            bool? bBSRedsys3DSFrictionless = null;

                            string strCardHash = oUserPaymentMean.CUSPM_TOKEN_CARD_HASH;
                            string strCardReference = oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE;
                            string strMaskedCardNumber = oUserPaymentMean.CUSPM_TOKEN_MASKED_CARD_NUMBER;
                            string strCardName = oUserPaymentMean.CUSPM_TOKEN_CARD_NAME;
                            string strCardDocumentID = oUserPaymentMean.CUSPM_TOKEN_CARD_DOCUMENT_ID;
                            DateTime? dtExpirationDate= oUserPaymentMean.CUSPM_TOKEN_CARD_EXPIRATION_DATE;


                            bool bPayIsCorrect = false;
                            PaymentMeanRechargeStatus rechargeStatus = (bAutoconf ? PaymentMeanRechargeStatus.Committed : PaymentMeanRechargeStatus.Authorized);

                            if ((PaymentMeanCreditCardProviderType)oUserPaymentMean.CUSPM_CREDIT_CARD_PAYMENT_PROVIDER ==
                                PaymentMeanCreditCardProviderType.pmccpCreditCall)
                            {
                                CardEasePayments cardPayment = new CardEasePayments();

                                bPayIsCorrect = cardPayment.AutomaticPayment(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CREDIT_CALL_CONFIGURATION.CCCON_TERMINAL_ID,
                                                                            oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CREDIT_CALL_CONFIGURATION.CCCON_TRANSACTION_KEY,
                                                                            oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CREDIT_CALL_CONFIGURATION.CCCON_CARDEASE_URL,
                                                                            oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CREDIT_CALL_CONFIGURATION.CCCON_CARDEASE_TIMEOUT,
                                                                            oUser.USR_EMAIL,
                                                                            dQuantityToCharge,
                                                                            sCurrencyIsoCode,
                                                                            oUserPaymentMean.CUSPM_TOKEN_CARD_HASH,
                                                                            oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                                                            bAutoconf,
                                                                            out strUserReference,
                                                                            out strAuthCode,
                                                                            out strAuthResult,
                                                                            out strGatewayDate,
                                                                            out strCardScheme,
                                                                            out strTransactionId);
                            }
                            else if ((PaymentMeanCreditCardProviderType)oUserPaymentMean.CUSPM_CREDIT_CARD_PAYMENT_PROVIDER ==
                                PaymentMeanCreditCardProviderType.pmccpIECISA)
                            {
                                int iQuantityToRechargeIECISA = Convert.ToInt32(dQuantityToCharge * infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurrencyIsoCode));
                                strUserReference = IECISAPayments.UserReference();
                                DateTime dtNow = DateTime.Now;

                                IECISAPayments.IECISAErrorCode eErrorCode;
                                DateTime dtUTCNow = DateTime.UtcNow;
                                IECISAPayments cardPayment = new IECISAPayments();
                                string strErrorMessage = "";

                                cardPayment.StartAutomaticTransaction(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_FORMAT_ID,
                                                   oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_CF_USER,
                                                   oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_CF_MERCHANT_ID,
                                                   oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_CF_INSTANCE,
                                                   oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_CF_CENTRE_ID,
                                                   oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_CF_POS_ID,
                                                   oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_SERVICE_URL,
                                                   oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_SERVICE_TIMEOUT,
                                                   oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_MAC_KEY,
                                                   oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_CUSTOMER_ID,
                                                   oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_CF_TEMPLATE,
                                                   oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                                   oUser.USR_EMAIL,
                                                   iQuantityToRechargeIECISA,
                                                   sCurrencyIsoCode,
                                                   sCurrencyIsoCodeNum,
                                                   dtNow,
                                                   out eErrorCode,
                                                   out strErrorMessage,
                                                   out strTransactionId,
                                                   out strUserReference);

                                if (eErrorCode != IECISAPayments.IECISAErrorCode.OK)
                                {
                                    string errorCode = eErrorCode.ToString();

                                    m_Log.LogMessage(LogLevels.logERROR, string.Format("PerformPrepayRecharge.StartWebTransaction : errorCode={0} ; errorMessage={1}",
                                              errorCode, strErrorMessage));


                                }
                                else
                                {
                                    string strRedirectURL = "";
                                    cardPayment.GetWebTransactionPaymentTypes(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_SERVICE_URL,
                                                                            oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_SERVICE_TIMEOUT,
                                                                            strTransactionId,
                                                                            out eErrorCode,
                                                                            out strErrorMessage,
                                                                            out strRedirectURL);
                                    if (eErrorCode != IECISAPayments.IECISAErrorCode.OK)
                                    {
                                        string errorCode = eErrorCode.ToString();

                                        m_Log.LogMessage(LogLevels.logERROR, string.Format("PerformPrepayRecharge.GetWebTransactionPaymentTypes : errorCode={0} ; errorMessage={1}",
                                                  errorCode, strErrorMessage));


                                    }
                                    else
                                    {
                                        customersRepository.StartRecharge(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_ID,
                                                                                  oUser.USR_EMAIL,
                                                                                  dtUTCNow,
                                                                                  dtNow,
                                                                                  iQuantityToRecharge,
                                                                                  dCurrencyId,
                                                                                  "",
                                                                                  strUserReference,
                                                                                  strTransactionId,
                                                                                  "",
                                                                                  "",
                                                                                  "",
                                                                                  PaymentMeanRechargeStatus.Committed);

                                        DateTime? dtTransactionDate = null;
                                        cardPayment.CompleteAutomaticTransaction(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_SERVICE_URL,
                                                               oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_SERVICE_TIMEOUT,
                                                               oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_MAC_KEY,
                                                               strTransactionId,
                                                              out eErrorCode,
                                                              out strErrorMessage,
                                                              out dtTransactionDate,
                                                              out strCFTransactionID,
                                                              out strAuthCode);


                                        if (eErrorCode != IECISAPayments.IECISAErrorCode.OK)
                                        {
                                            string errorCode = eErrorCode.ToString();

                                            m_Log.LogMessage(LogLevels.logERROR, string.Format("PerformPrepayRecharge.GetWebTransactionPaymentTypes : errorCode={0} ; errorMessage={1}",
                                                      errorCode, strErrorMessage));



                                        }
                                        else
                                        {

                                            strAuthResult = "succeeded";

                                            customersRepository.CompleteStartRecharge(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_ID,
                                                                                      oUser.USR_EMAIL,
                                                                                      strTransactionId,
                                                                                      strAuthResult,
                                                                                      strCFTransactionID,
                                                                                      dtTransactionDate.Value.ToString("HHmmssddMMyyyy"),
                                                                                      strAuthCode,
                                                                                      PaymentMeanRechargeStatus.Committed);
                                            strGatewayDate = dtTransactionDate.Value.ToString("HHmmssddMMyyyy");
                                            rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                            bPayIsCorrect = true;

                                        }
                                    }

                                }

                            }
                            else if ((PaymentMeanCreditCardProviderType)oUserPaymentMean.CUSPM_CREDIT_CARD_PAYMENT_PROVIDER ==
                               PaymentMeanCreditCardProviderType.pmccpStripe)
                            {

                                string result = "";
                                string errorMessage = "";
                                string errorCode = "";
                                string strPAN = "";
                                string strExpirationDateMonth = "";
                                string strExpirationDateYear = "";
                                string strCustomerId = oUserPaymentMean.CUSPM_TOKEN_CARD_HASH;

                                int iQuantityToRechargeStripe = Convert.ToInt32(dQuantityToCharge * infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurrencyIsoCode));
                                bPayIsCorrect = StripePayments.PerformCharge(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.STRIPE_CONFIGURATION.STRCON_SECRET_KEY,
                                                                            oUser.USR_EMAIL,
                                                                            oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                                                            ref strCustomerId,
                                                                            iQuantityToRechargeStripe,
                                                                            sCurrencyIsoCode,
                                                                            bAutoconf,
                                                                            out result,
                                                                            out errorCode,
                                                                            out errorMessage,
                                                                            out strCardScheme,
                                                                            out strPAN,
                                                                            out strExpirationDateMonth,
                                                                            out strExpirationDateYear,
                                                                            out strTransactionId,
                                                                            out strGatewayDate);

                                if (bPayIsCorrect)
                                {
                                    strUserReference = strTransactionId;
                                    strAuthCode = "";
                                    strAuthResult = "succeeded";
                                    strCardScheme = oUserPaymentMean.CUSPM_TOKEN_CARD_SCHEMA;

                                }
                            }
                            else if ((PaymentMeanCreditCardProviderType)oUserPaymentMean.CUSPM_CREDIT_CARD_PAYMENT_PROVIDER ==
                                         PaymentMeanCreditCardProviderType.pmccpMoneris)
                            {
                                MonerisPayments cardPayment = new MonerisPayments();
                                string errorMessage = "";
                                MonerisPayments.MonerisErrorCode eErrorCode = MonerisPayments.MonerisErrorCode.InternalError;

                                NumberFormatInfo provider = new NumberFormatInfo();
                                string strAmount = dQuantityToCharge.ToString("#" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurrencyIsoCode), provider);

                                strUserReference = MonerisPayments.UserReference();


                                if ((AppUtilities.AppVersion(strAppVersion) >= _VERSION_3_6) &&
                                    ((oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_3DS_TRANSACTIONS ?? 0) == 1) &&
                                    bPaymentInPerson && (iOSType != (int)MobileOS.Web))
                                {

                                    DateTime utcNow = DateTime.UtcNow;

                                    if (!string.IsNullOrEmpty(strMD) && !string.IsNullOrEmpty(strCAVV))
                                    {


                                        infraestructureRepository.UpdateMoneris3DSTransaction(strMD, oUser.USR_EMAIL, strCAVV, strECI, utcNow);

                                        bPayIsCorrect = cardPayment.AutomaticTransactionMPIStep3(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_API_STORE_ID,
                                                                                                oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_API_STORE_KEY,
                                                                                                strUserReference,
                                                                                                oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                                                                                oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE == oUserPaymentMean.CUSPM_TOKEN_CARD_HASH ? "" : oUserPaymentMean.CUSPM_TOKEN_CARD_HASH,
                                                                                                strAmount,
                                                                                                oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_PROCESING_COUNTRY,
                                                                                                "",
                                                                                                oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_CHECK_CARD_STATUS != 0,
                                                                                                oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_TEST_MODE != 0,
                                                                                                strCAVV, strECI,
                                                                                                out eErrorCode, out errorMessage, out strTransactionId, out strAuthCode, out strAuthResult, out strGatewayDate);

                                    }
                                    else
                                    {

                                        string strFormURL = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_FORM_URL;
                                        string strBaseURL = strFormURL.Substring(0, strFormURL.LastIndexOf("/"));
                                        string strReturnURL = strBaseURL + "/MonerisMPIResponse";
                                        string strInlineForm = "";
                                        string strMDStep1 = "";


                                        bPayIsCorrect = cardPayment.AutomaticTransactionMPIStep1(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_API_STORE_ID,
                                            oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_API_STORE_KEY,
                                            strUserReference,
                                            oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                            oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE == oUserPaymentMean.CUSPM_TOKEN_CARD_HASH ? "" : oUserPaymentMean.CUSPM_TOKEN_CARD_HASH,
                                            strAmount,
                                            oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_PROCESING_COUNTRY, "",
                                            oUserPaymentMean.CUSPM_TOKEN_CARD_SCHEMA,
                                            oUserPaymentMean.CUSPM_TOKEN_CARD_EXPIRATION_DATE.Value,
                                            strReturnURL, "Mozilla",
                                            oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_CHECK_CARD_STATUS != 0,
                                            oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_TEST_MODE != 0,
                                            out eErrorCode, out errorMessage, out strTransactionId, out strAuthCode, out strAuthResult, out strGatewayDate, out strInlineForm, out strMDStep1);


                                        if ((bPayIsCorrect) && (!string.IsNullOrEmpty(strInlineForm)))
                                        {
                                            decimal? dTransId = null;
                                            bPayIsCorrect = false;

                                            if (infraestructureRepository.AddMoneris3DSTransaction(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_ID,
                                                                                                   strMDStep1, oUser.USR_EMAIL, iQuantity, utcNow, strInlineForm, out dTransId))
                                            {


                                                string strHashString = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_GUID +
                                                    dTransId.ToString() +
                                                    strMDStep1 +
                                                    oUser.USR_EMAIL +
                                                    utcNow.ToString("HHmmssddMMyy") +
                                                    oUser.USR_CULTURE_LANG;

                                                string strCalcHash = CalculatePaymentGatewayHash(strHashString, oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_HASH_SEED);


                                                str3DSURL = string.Format("{0}/MonerisMPIRequest?Guid={1}&id={2}&MD={3}&Email={4}&UTCDate={5}&Culture={6}&Hash={7}",
                                                    strBaseURL,
                                                    oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_GUID,
                                                    dTransId.ToString(),
                                                    HttpUtility.UrlEncode(strMDStep1),
                                                    HttpUtility.UrlEncode(oUser.USR_EMAIL),
                                                    utcNow.ToString("HHmmssddMMyy"),
                                                    HttpUtility.UrlEncode(oUser.USR_CULTURE_LANG),
                                                    strCalcHash
                                                    );

                                                str3DSURL = XmlEscape(str3DSURL);

                                                return ResultType.Result_3DS_Validation_Needed;
                                            }
                                        }

                                    }

                                }

                                else
                                {

                                    string strFormURL = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_FORM_URL;
                                    string strBaseURL = strFormURL.Substring(0, strFormURL.LastIndexOf("/"));
                                    string strReturnURL = strBaseURL + "/MonerisMPIResponse";
                                    string strInlineForm = "";
                                    string strMDStep1 = "";


                                    bPayIsCorrect = cardPayment.AutomaticTransactionMPIStep1(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_API_STORE_ID,
                                        oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_API_STORE_KEY,
                                        strUserReference,
                                        oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                        oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE == oUserPaymentMean.CUSPM_TOKEN_CARD_HASH ? "" : oUserPaymentMean.CUSPM_TOKEN_CARD_HASH,
                                        strAmount,
                                        oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_PROCESING_COUNTRY, "",
                                        oUserPaymentMean.CUSPM_TOKEN_CARD_SCHEMA,
                                        oUserPaymentMean.CUSPM_TOKEN_CARD_EXPIRATION_DATE.Value,
                                        strReturnURL, "Mozilla",
                                        oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_CHECK_CARD_STATUS != 0,
                                        oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_TEST_MODE != 0,
                                        out eErrorCode, out errorMessage, out strTransactionId, out strAuthCode, out strAuthResult, out strGatewayDate, out strInlineForm, out strMDStep1);


                                    if ((bPayIsCorrect) && (!string.IsNullOrEmpty(strInlineForm)))
                                    {

                                        bPayIsCorrect = cardPayment.AutomaticTransaction(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_API_STORE_ID,
                                                                    oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_API_STORE_KEY,
                                                                    strUserReference,
                                                                    oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                                                    oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE == oUserPaymentMean.CUSPM_TOKEN_CARD_HASH ? "" : oUserPaymentMean.CUSPM_TOKEN_CARD_HASH,
                                                                    strAmount,
                                                                    oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_PROCESING_COUNTRY,
                                                                    "",
                                                                    oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_CHECK_CARD_STATUS != 0,
                                                                    oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_TEST_MODE != 0, "",
                                                                    out eErrorCode, out errorMessage, out strTransactionId, out strAuthCode, out strAuthResult, out strGatewayDate);
                                    }
                                }

                                if (bPayIsCorrect)
                                {
                                    bPayIsCorrect = !MonerisPayments.IsError(eErrorCode);
                                    rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                    DateTime dtNow = DateTime.Now;
                                    DateTime dtUTCNow = DateTime.UtcNow;
                                    strCardScheme = oUserPaymentMean.CUSPM_TOKEN_CARD_SCHEMA;
                                    customersRepository.StartRecharge(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_ID,
                                                                              oUser.USR_EMAIL,
                                                                              dtUTCNow,
                                                                              dtNow,
                                                                              iQuantityToRecharge,
                                                                              dCurrencyId,
                                                                              strAuthResult,
                                                                              strUserReference,
                                                                              strTransactionId,
                                                                              "",
                                                                              strGatewayDate,
                                                                              strAuthCode,
                                                                              PaymentMeanRechargeStatus.Committed);
                                }


                            }
                            else if ((PaymentMeanCreditCardProviderType)oUserPaymentMean.CUSPM_CREDIT_CARD_PAYMENT_PROVIDER ==
                                                       PaymentMeanCreditCardProviderType.pmccpPayu)
                            {
                                PayuPayments cardPayment = new PayuPayments();
                                string errorMessage = "";
                                PayuPayments.PayuErrorCode eErrorCode = PayuPayments.PayuErrorCode.InternalError;
                                DateTime? dtTransaction = null;


                                string strLang = ((oUser.USR_CULTURE_LANG.ToLower() ?? "").Length >= 2) ? oUser.USR_CULTURE_LANG.Substring(0, 2) : "es";


                                bPayIsCorrect = cardPayment.AutomaticTransaction(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.PAYU_CONFIGURATION.PAYUCON_API_URL,
                                                                        oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.PAYU_CONFIGURATION.PAYUCON_API_KEY,
                                                                        oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.PAYU_CONFIGURATION.PAYUCON_API_LOGIN,
                                                                        oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.PAYU_CONFIGURATION.PAYUCON_ACCOUNT_ID,
                                                                        oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.PAYU_CONFIGURATION.PAYUCON_MERCHANT_ID,
                                                                        oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.PAYU_CONFIGURATION.PAYUCON_SERVICE_TIMEOUT,
                                                                        oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.PAYU_CONFIGURATION.PAYUCON_COUNTRY,
                                                                        oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.PAYU_CONFIGURATION.PAYUCON_IS_TEST != 1 ? false : true,
                                                                        oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                                                        oUserPaymentMean.CUSPM_TOKEN_CARD_HASH,
                                                                        PayuPayments.Language(strLang),
                                                                        oUser.USR_EMAIL,
                                                                        dQuantityToCharge,
                                                                        sCurrencyIsoCode,
                                                                        "RECARGA IPARKME",
                                                                        "",
                                                                        oUserPaymentMean.CUSPM_TOKEN_CARD_SCHEMA,
                                                                        oUserPaymentMean.CUSPM_TOKEN_CARD_NAME,
                                                                        //oUserPaymentMean.CUSPM_TOKEN_CARD_DOCUMENT_ID,
                                                                        "",
                                                                        (!String.IsNullOrEmpty(oUserPaymentMean.CUSPM_CARD_SECURITY_CODE) ? DecryptCryptResult(oUserPaymentMean.CUSPM_CARD_SECURITY_CODE, ConfigurationManager.AppSettings["CryptKey"]) : String.Empty),
                                                                        out eErrorCode,
                                                                        out errorMessage,
                                                                        out strTransactionId,
                                                                        out strUserReference,
                                                                        out strAuthCode,
                                                                        out dtTransaction);

                                if (bPayIsCorrect)
                                {
                                    strGatewayDate = dtTransaction.Value.ToString("HHmmssddMMyy");
                                }


                                if (bPayIsCorrect)
                                {
                                    bPayIsCorrect = !PayuPayments.IsError(eErrorCode);
                                    rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                    DateTime dtNow = DateTime.Now;
                                    DateTime dtUTCNow = DateTime.UtcNow;
                                    strCardScheme = oUserPaymentMean.CUSPM_TOKEN_CARD_SCHEMA;
                                    customersRepository.StartRecharge(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_ID,
                                                                              oUser.USR_EMAIL,
                                                                              dtUTCNow,
                                                                              dtNow,
                                                                              iQuantityToRecharge,
                                                                              oUserPaymentMean.CURRENCy.CUR_ID,
                                                                              strAuthResult,
                                                                              strUserReference,
                                                                              strTransactionId,
                                                                              "",
                                                                              strGatewayDate,
                                                                              strAuthCode,
                                                                              PaymentMeanRechargeStatus.Committed);




                                }




                            }
                            else if ((PaymentMeanCreditCardProviderType)oUserPaymentMean.CUSPM_CREDIT_CARD_PAYMENT_PROVIDER ==
                                                       PaymentMeanCreditCardProviderType.pmccpTransbank)
                            {
                                TransBankPayments cardPayment = new TransBankPayments();
                                string errorMessage = "";
                                TransBankPayments.TransBankErrorCode eErrorCode = TransBankPayments.TransBankErrorCode.InternalError;

                                NumberFormatInfo provider = new NumberFormatInfo();
                                string strAmount = dQuantityToCharge.ToString("#" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurrencyIsoCode), provider);

                                strUserReference = TransBankPayments.UserReference();
                                bPayIsCorrect = cardPayment.AutomaticTransaction(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.TRANSBANK_CONFIGURATION.TRBACON_ENVIRONMENT,
                                                    oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.TRANSBANK_CONFIGURATION.TRBACON_COMMERCECODE,
                                                    oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.TRANSBANK_CONFIGURATION.TRBACON_PUBLICCERT_FILE,
                                                    oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.TRANSBANK_CONFIGURATION.TRBACON_WEBPAYCERT_FILE,
                                                    oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.TRANSBANK_CONFIGURATION.TRBACON_PASSWORD,
                                                    oUser.USR_EMAIL,
                                                    oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                                    strUserReference,
                                                    strAmount,
                                                    out eErrorCode,
                                                    out errorMessage,
                                                    out strTransactionId,
                                                    out strAuthCode,
                                                    out strGatewayDate);


                                if (bPayIsCorrect)
                                {
                                    bPayIsCorrect = !TransBankPayments.IsError(eErrorCode);
                                    rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                    DateTime dtNow = DateTime.Now;
                                    DateTime dtUTCNow = DateTime.UtcNow;
                                    strCardScheme = oUserPaymentMean.CUSPM_TOKEN_CARD_SCHEMA;
                                    customersRepository.StartRecharge(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_ID,
                                                                              oUser.USR_EMAIL,
                                                                              dtUTCNow,
                                                                              dtNow,
                                                                              iQuantityToRecharge,
                                                                              dCurrencyId,
                                                                              "",
                                                                              strUserReference,
                                                                              strTransactionId,
                                                                              "",
                                                                              strGatewayDate,
                                                                              strAuthCode,
                                                                              PaymentMeanRechargeStatus.Committed);
                                }


                            }
                            else if ((PaymentMeanCreditCardProviderType)oUserPaymentMean.CUSPM_CREDIT_CARD_PAYMENT_PROVIDER ==
                                                    PaymentMeanCreditCardProviderType.pmccpBSRedsys)
                            {

                                string sErrorMessage = "";
                                BSRedsysPayments.BSRedsysErrorCode eResult = BSRedsysPayments.GetErrorInfo(null, out sErrorMessage);
                                string strCustomerId = oUserPaymentMean.CUSPM_TOKEN_CARD_HASH;

                                int iQuantityToRechargeBSRedsys = Convert.ToInt32(dQuantityToCharge * infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurrencyIsoCode));

                                var oCardPayments = new BSRedsysPayments();

                                string strMerchantGroup = null;

                                if (oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.COMMON_TOKEN_GROUP != null)
                                {
                                    if (!string.IsNullOrEmpty(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.COMMON_TOKEN_GROUP.CTG_BS_MERCHANT_GROUP))
                                    {
                                        strMerchantGroup = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.COMMON_TOKEN_GROUP.CTG_BS_MERCHANT_GROUP;
                                    }
                                }


                                bool bRedsys3DSProcess = (AppUtilities.AppVersion(strAppVersion) >= _VERSION_3_7_1);

                                if (bRedsys3DSProcess)
                                {
                                    Redsys3DSApplyMethod e3DSApplyMethod = (Redsys3DSApplyMethod)(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_3DS_TRANSACTIONS ?? 0);

                                    switch (e3DSApplyMethod)
                                    {
                                        case Redsys3DSApplyMethod.NotApplyForAllPayments:
                                            bRedsys3DSProcess = false;
                                            break;
                                        case Redsys3DSApplyMethod.ApplyForAllPayments:
                                            bRedsys3DSProcess = true;
                                            break;
                                        case Redsys3DSApplyMethod.ApplyForPaymentsWithAmountGreaterThanMinimum:
                                            bRedsys3DSProcess = (iQuantityToRechargeBSRedsys >= (oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_3DS_TRANSACTIONS_3DS_AMOUNT ?? 0));
                                            break;
                                        default:
                                            bRedsys3DSProcess = false;
                                            break;
                                    }

                                }


                                if (bRedsys3DSProcess && bPaymentInPerson && (iOSType != (int)MobileOS.Web))
                                {

                                    DateTime utcNow = DateTime.UtcNow;

                                    if (string.IsNullOrEmpty(strBSRedsys3DSTransID))
                                    {

                                        iBSRedsysNumInlineForms = 0;
                                        string strFormURL = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_FORM_URL;
                                        string strBaseURL = strFormURL.Substring(0, strFormURL.LastIndexOf("/"));
                                        string strReturnURL = strBaseURL + "/BSRedsys3DSResponse";
                                        strMD = "";
                                        string strPaReq = "";
                                        string strCreq = "";
                                        string strInlineForm = "";

                                        bPayIsCorrect = oCardPayments.StandardPayment3DSStep1(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_WS_URL,
                                                                           oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_MERCHANT_CODE,
                                                                           oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_MERCHANT_SIGNATURE,
                                                                           oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_MERCHANT_TERMINAL,
                                                                           oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_SERVICE_TIMEOUT,
                                                                           oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                                                           iQuantityToRechargeBSRedsys,
                                                                           sCurrencyIsoCodeNum,
                                                                           strMerchantGroup,
                                                                           oUserPaymentMean.CUSPM_TOKEN_CARD_HASH,
                                                                           strReturnURL,
                                                                           out eResult, out sErrorMessage,
                                                                           out strUserReference,
                                                                           out strTransactionId,
                                                                           out strGatewayDate,
                                                                           out strInlineForm,
                                                                           out strMD,
                                                                           out strPaReq,
                                                                           out strCreq,
                                                                           out strBSRedsysProtocolVersion,
                                                                           out strBSRedsys3DSTransID);



                                        if ((bPayIsCorrect) && (!string.IsNullOrEmpty(strInlineForm)))
                                        {
                                            decimal? dTransId = null;
                                            bPayIsCorrect = false;
                                            string strTransId = (string.IsNullOrEmpty(strMD) ? strBSRedsys3DSTransID : strMD);

                                            infraestructureRepository.AddBSRedsys3DSTransaction(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_ID, strTransId, strUserReference,
                                                oUser.USR_EMAIL, iQuantityToRechargeBSRedsys, utcNow, strInlineForm, strBSRedsysProtocolVersion, out dTransId);


                                            string strHashString = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_GUID +
                                                dTransId.ToString() +
                                                strTransId +
                                                oUser.USR_EMAIL +
                                                utcNow.ToString("HHmmssddMMyy") +
                                                oUser.USR_CULTURE_LANG;

                                            string strCalcHash = CalculatePaymentGatewayHash(strHashString, oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_HASH_SEED);


                                            str3DSURL = string.Format("{0}/BSRedsys3DSRequest?Guid={1}&id={2}&threeDSTransId={3}&Email={4}&UTCDate={5}&Culture={6}&Hash={7}",
                                                strBaseURL,
                                                oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_GUID,
                                                dTransId.ToString(),
                                                HttpUtility.UrlEncode(strTransId),
                                                HttpUtility.UrlEncode(oUser.USR_EMAIL),
                                                utcNow.ToString("HHmmssddMMyy"),
                                                HttpUtility.UrlEncode(oUser.USR_CULTURE_LANG),
                                                strCalcHash
                                                );

                                            str3DSURL = XmlEscape(str3DSURL);

                                            return ResultType.Result_3DS_Validation_Needed;

                                        }

                                        bBSRedsys3DSFrictionless = true;


                                    }
                                    else if (string.IsNullOrEmpty(strBSRedsys3DSPares) && string.IsNullOrEmpty(strBSRedsys3DSCres))
                                    {
                                        infraestructureRepository.UpdateBSRedsys3DSTransaction(strBSRedsys3DSTransID, oUser.USR_EMAIL, strBSRedsys3DSPares, strBSRedsys3DSCres,
                                            utcNow, out strUserReference, out strBSRedsysProtocolVersion, out iBSRedsysNumInlineForms);
                                        string strFormURL = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_FORM_URL;
                                        string strBaseURL = strFormURL.Substring(0, strFormURL.LastIndexOf("/"));
                                        string strReturnURL = strBaseURL + "/BSRedsys3DSResponse";
                                        strMD = "";
                                        string strPaReq = "";
                                        string strCreq = "";
                                        string strInlineForm = "";

                                        bPayIsCorrect = oCardPayments.StandardPayment3DSStep2(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_WS_URL,
                                                                           oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_MERCHANT_CODE,
                                                                           oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_MERCHANT_SIGNATURE,
                                                                           oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_MERCHANT_TERMINAL,
                                                                           oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_SERVICE_TIMEOUT,
                                                                           oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                                                           iQuantityToRechargeBSRedsys,
                                                                           sCurrencyIsoCodeNum,
                                                                           strMerchantGroup,
                                                                           oUserPaymentMean.CUSPM_TOKEN_CARD_HASH, strUserReference,
                                                                           strReturnURL, strBSRedsysProtocolVersion, strBSRedsys3DSTransID, "Y",
                                                                           out eResult, out sErrorMessage,
                                                                           out strTransactionId,
                                                                           out strGatewayDate,
                                                                           out strInlineForm,
                                                                           out strMD,
                                                                           out strPaReq,
                                                                           out strCreq);



                                        if ((bPayIsCorrect) && (!string.IsNullOrEmpty(strInlineForm)))
                                        {
                                            decimal? dTransId = null;
                                            bPayIsCorrect = false;

                                            infraestructureRepository.UpdateBSRedsys3DSTransaction(strBSRedsys3DSTransID, oUser.USR_EMAIL, strInlineForm, utcNow, out dTransId);


                                            string strHashString = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_GUID +
                                                dTransId.ToString() +
                                                strBSRedsys3DSTransID +
                                                oUser.USR_EMAIL +
                                                utcNow.ToString("HHmmssddMMyy") +
                                                oUser.USR_CULTURE_LANG;

                                            string strCalcHash = CalculatePaymentGatewayHash(strHashString, oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_HASH_SEED);


                                            str3DSURL = string.Format("{0}/BSRedsys3DSRequest?Guid={1}&id={2}&threeDSTransId={3}&Email={4}&UTCDate={5}&Culture={6}&Hash={7}",
                                                strBaseURL,
                                                oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_GUID,
                                                dTransId.ToString(),
                                                HttpUtility.UrlEncode(strBSRedsys3DSTransID),
                                                HttpUtility.UrlEncode(oUser.USR_EMAIL),
                                                utcNow.ToString("HHmmssddMMyy"),
                                                HttpUtility.UrlEncode(oUser.USR_CULTURE_LANG),
                                                strCalcHash
                                                );

                                            str3DSURL = XmlEscape(str3DSURL);

                                            return ResultType.Result_3DS_Validation_Needed;

                                        }

                                        bBSRedsys3DSFrictionless = true;



                                    }
                                    else
                                    {

                                        //((!string.IsNullOrEmpty(strBSRedsys3DSPares) || !string.IsNullOrEmpty(strBSRedsys3DSPares))&& (!string.IsNullOrEmpty(strBSRedsys3DSTransID)))

                                        infraestructureRepository.UpdateBSRedsys3DSTransaction(strBSRedsys3DSTransID, oUser.USR_EMAIL, strBSRedsys3DSPares, strBSRedsys3DSCres, utcNow, out strUserReference, out strBSRedsysProtocolVersion, out iBSRedsysNumInlineForms);

                                        string strProtocolBackup = strBSRedsysProtocolVersion;

                                        strMD = (string.IsNullOrEmpty(strBSRedsys3DSPares) ? "" : strBSRedsys3DSTransID);

                                        bPayIsCorrect = oCardPayments.StandardPayment3DSStep3(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_WS_URL,
                                                                           oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_MERCHANT_CODE,
                                                                           oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_MERCHANT_SIGNATURE,
                                                                           oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_MERCHANT_TERMINAL,
                                                                           oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_SERVICE_TIMEOUT,
                                                                           oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                                                           iQuantityToRechargeBSRedsys,
                                                                           sCurrencyIsoCodeNum,
                                                                           strMerchantGroup,
                                                                           oUserPaymentMean.CUSPM_TOKEN_CARD_HASH, strUserReference,
                                                                           strMD, strBSRedsys3DSPares, strBSRedsys3DSCres, ref strBSRedsysProtocolVersion,
                                                                           out eResult, out sErrorMessage,
                                                                           out strTransactionId,
                                                                           out strGatewayDate);

                                        if (strProtocolBackup != strBSRedsysProtocolVersion)
                                        {
                                            infraestructureRepository.UpdateBSRedsys3DSTransaction(strBSRedsys3DSTransID, oUser.USR_EMAIL, strBSRedsysProtocolVersion, utcNow);
                                        }

                                        strMD = "";
                                        bBSRedsys3DSFrictionless = false;


                                    }

                                }

                                else
                                {

                                    bPayIsCorrect = oCardPayments.StandardPaymentNO3DS(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_WS_URL,
                                                                              oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_MERCHANT_CODE,
                                                                              oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_MERCHANT_SIGNATURE,
                                                                              oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_MERCHANT_TERMINAL,
                                                                              oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_SERVICE_TIMEOUT,
                                                                              oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                                                              iQuantityToRechargeBSRedsys,
                                                                              sCurrencyIsoCodeNum,
                                                                              strMerchantGroup,
                                                                              oUserPaymentMean.CUSPM_TOKEN_CARD_HASH,
                                                                              out eResult, out sErrorMessage,
                                                                              out strTransactionId,
                                                                              out strUserReference,
                                                                              out strGatewayDate);
                                }



                                if (bPayIsCorrect)
                                {
                                    strAuthResult = "succeeded";
                                    strAuthCode = "";
                                    rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                    DateTime dtNow = DateTime.Now;
                                    DateTime dtUTCNow = DateTime.UtcNow;
                                    strCardScheme = oUserPaymentMean.CUSPM_TOKEN_CARD_SCHEMA;
                                    customersRepository.StartRecharge(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_ID,
                                                                              oUser.USR_EMAIL,
                                                                              dtUTCNow,
                                                                              dtNow,
                                                                              iQuantityToRecharge,
                                                                              dCurrencyId,
                                                                              "",
                                                                              strUserReference,
                                                                              strTransactionId,
                                                                              "",
                                                                              strGatewayDate,
                                                                              strAuthCode,
                                                                              PaymentMeanRechargeStatus.Committed);
                                }
                            }
                            else if ((PaymentMeanCreditCardProviderType)oUserPaymentMean.CUSPM_CREDIT_CARD_PAYMENT_PROVIDER ==
                                                    PaymentMeanCreditCardProviderType.pmccpPaysafe)
                            {
                                string sErrorMessage = "";

                                int iQuantityToRechargePaysafe = Convert.ToInt32(dQuantityToCharge * infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurrencyIsoCode));

                                var oCardPayments = new PaysafePayments();
                                var oPaysafeConfig = new PaysafePayments.PaysafeMerchantInfo(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.PAYSAFE_CONFIGURATION.PYSCON_ACCOUNT_NUMBER,
                                                                                             oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.PAYSAFE_CONFIGURATION.PYSCON_API_KEY,
                                                                                             oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.PAYSAFE_CONFIGURATION.PYSCON_API_SECRET,
                                                                                             oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.PAYSAFE_CONFIGURATION.PYSCON_ENVIRONMENT);

                                DateTime? dtPaysafeDateTime = null;
                                string strPAN = "";
                                string strExpirationDateMonth = "";
                                string strExpirationDateYear = "";

                                bPayIsCorrect = oCardPayments.Authorize(oPaysafeConfig, oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                                                        iQuantityToRechargePaysafe, oUserPaymentMean.CUSPM_TOKEN_CARD_DOCUMENT_ID,
                                                                        out strTransactionId, out strUserReference, out dtPaysafeDateTime, out strExpirationDateYear, out strExpirationDateMonth, out strPAN, out sErrorMessage);

                                if (bPayIsCorrect)
                                {
                                    strAuthCode = "";
                                    if (dtPaysafeDateTime.HasValue)
                                        strGatewayDate = dtPaysafeDateTime.Value.ToString("HHmmssddMMyy");
                                    rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                    DateTime dtNow = DateTime.Now;
                                    DateTime dtUTCNow = DateTime.UtcNow;
                                    strCardScheme = oUserPaymentMean.CUSPM_TOKEN_CARD_SCHEMA;
                                    customersRepository.StartRecharge(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_ID,
                                                                              oUser.USR_EMAIL,
                                                                              dtUTCNow,
                                                                              dtNow,
                                                                              iQuantityToRecharge,
                                                                              dCurrencyId,
                                                                              "",
                                                                              strUserReference,
                                                                              strTransactionId,
                                                                              "",
                                                                              strGatewayDate,
                                                                              strAuthCode,
                                                                              PaymentMeanRechargeStatus.Committed);
                                }
                            }
                            else if ((PaymentMeanCreditCardProviderType)oUserPaymentMean.CUSPM_CREDIT_CARD_PAYMENT_PROVIDER ==
                                     PaymentMeanCreditCardProviderType.pmccpMercadoPago)
                            {
                                MercadoPagoPayments cardPayment = new MercadoPagoPayments();
                                string errorMessage = "";
                                MercadoPagoPayments.MercadoPagoErrorCode eErrorCode = MercadoPagoPayments.MercadoPagoErrorCode.InternalError;

                                NumberFormatInfo provider = new NumberFormatInfo();
                                //string strAmount = dQuantityToCharge.ToString("#" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurrencyIsoCode), provider);
                                //
                                //

                                bool bAllowAuthorizationAndCapture = MercadoPagoPayments.AllowAuthorizationAndCapture(oUserPaymentMean.CUSPM_TOKEN_CARD_SCHEMA,
                                                                                                                      oUserPaymentMean.CUSPM_TOKEN_CARD_TYPE);
                                bool bAllowTransactionWithoutCVV = MercadoPagoPayments.AllowTransactionWithoutCVV(oUserPaymentMean.CUSPM_TOKEN_CARD_SCHEMA,
                                                                                                                  oUserPaymentMean.CUSPM_TOKEN_CARD_TYPE);

                                Logger_AddLogMessage(string.Format("PerformPrepayRecharge::Error: Card Schema={0}  Card Type={1} bAllowAuthorizationAndCapture={2} bAllowTransactionWithoutCVV={3}",
                                    oUserPaymentMean.CUSPM_TOKEN_CARD_SCHEMA,
                                    oUserPaymentMean.CUSPM_TOKEN_CARD_TYPE,
                                    bAllowAuthorizationAndCapture,
                                    bAllowTransactionWithoutCVV), LogLevels.logINFO);


                                if (!bPaymentInPerson && !bAllowTransactionWithoutCVV)
                                {
                                    rtRes = ResultType.Result_Error_Recharge_Not_Possible;
                                    Logger_AddLogMessage(string.Format("PerformPrepayRecharge::Error: Result = {0} bPaymentInPerson={1} bAllowTransactionWithoutCVV={2}",
                                        rtRes.ToString(), bPaymentInPerson, bAllowTransactionWithoutCVV), LogLevels.logERROR);
                                }
                                else if (bAllowTransactionWithoutCVV)
                                {

                                    strUserReference = MercadoPagoPayments.UserReference();

                                    bPayIsCorrect = cardPayment.AutomaticTransaction(
                                        oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MERCADOPAGO_CONFIGURATION.MEPACON_API_URL,
                                        oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MERCADOPAGO_CONFIGURATION.MEPACON_ACCESS_TOKEN,
                                        oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MERCADOPAGO_CONFIGURATION.MEPACON_SERVICE_TIMEOUT,
                                        strUserReference,
                                        dQuantityToCharge,
                                        "",
                                        oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                        oUserPaymentMean.CUSPM_TOKEN_CARD_HASH,
                                        Convert.ToInt32(oUserPaymentMean.CUSPM_TOKEN_INSTALLMENTS),
                                        true,
                                        out eErrorCode,
                                        out errorMessage,
                                        out strTransactionId,
                                        out strGatewayDate);



                                }
                                else // if (!bAllowTransactionWithoutCVV)
                                {
                                    if (!string.IsNullOrEmpty(strMercadoPagoToken))
                                    {
                                        strUserReference = MercadoPagoPayments.UserReference();

                                        bPayIsCorrect = cardPayment.AutomaticTransaction(
                                                oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MERCADOPAGO_CONFIGURATION.MEPACON_ACCESS_TOKEN,
                                                strUserReference,
                                                dQuantityToCharge,
                                                "",
                                                strMercadoPagoToken,
                                                oUserPaymentMean.CUSPM_TOKEN_CARD_HASH,
                                                Convert.ToInt32(oUserPaymentMean.CUSPM_TOKEN_INSTALLMENTS),
                                                true,
                                                false,
                                                out eErrorCode,
                                                out errorMessage,
                                                out strTransactionId,
                                                out strGatewayDate);

                                    }
                                    else
                                    {
                                        string strFormURL = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_FORM_URL;
                                        string strBaseURL = strFormURL.Substring(0, strFormURL.LastIndexOf("/"));
                                        string strCVVURL = strBaseURL + "/MercadoPagoCVVRequest";

                                        DateTime utcNow = DateTime.UtcNow;

                                        string strHashString = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MERCADOPAGO_CONFIGURATION.MEPACON_GUID +
                                                                                        oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE +
                                                                                        oUserPaymentMean.CUSPM_CVV_LENGTH.ToString() +
                                                                                        utcNow.ToString("HHmmssddMMyy") +
                                                                                        oUser.USR_CULTURE_LANG;

                                        string strCalcHash = CalculatePaymentGatewayHash(strHashString, oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MERCADOPAGO_CONFIGURATION.MEPACON_HASH_SEED);


                                        str3DSURL = string.Format("{0}?Guid={1}&cardId={2}&cvvLength={3}&UTCDate={4}&Culture={5}&Hash={6}",
                                            strCVVURL,
                                            oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MERCADOPAGO_CONFIGURATION.MEPACON_GUID,
                                            oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                            oUserPaymentMean.CUSPM_CVV_LENGTH.ToString(),
                                            utcNow.ToString("HHmmssddMMyy"),
                                            HttpUtility.UrlEncode(oUser.USR_CULTURE_LANG),
                                            strCalcHash
                                            );

                                        str3DSURL = XmlEscape(str3DSURL);

                                        return ResultType.Result_3DS_Validation_Needed;



                                    }
                                }


                                if (bPayIsCorrect)
                                {
                                    bPayIsCorrect = !MercadoPagoPayments.IsError(eErrorCode);
                                    rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                    DateTime dtNow = DateTime.Now;
                                    DateTime dtUTCNow = DateTime.UtcNow;
                                    strCardScheme = oUserPaymentMean.CUSPM_TOKEN_CARD_SCHEMA;
                                    customersRepository.StartRecharge(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_ID,
                                                                              oUser.USR_EMAIL,
                                                                              dtUTCNow,
                                                                              dtNow,
                                                                              iQuantityToRecharge,
                                                                              dCurrencyId,
                                                                              "",
                                                                              strUserReference,
                                                                              strTransactionId,
                                                                              "",
                                                                              strGatewayDate,
                                                                              "",
                                                                              PaymentMeanRechargeStatus.Committed);
                                }


                            }
                            else if ((PaymentMeanCreditCardProviderType)oUserPaymentMean.CUSPM_CREDIT_CARD_PAYMENT_PROVIDER ==
                                     PaymentMeanCreditCardProviderType.pmccpMercadoPagoPro)
                            {

                                if (!bPaymentInPerson)
                                {
                                    rtRes = ResultType.Result_Error_Recharge_Not_Possible;
                                    Logger_AddLogMessage(string.Format("PerformPrepayRecharge::Error: Result = {0} bPaymentInPerson={1}",
                                        rtRes.ToString(), bPaymentInPerson), LogLevels.logERROR);
                                }                               
                                else 
                                {
                                    if (!string.IsNullOrEmpty(strMPProTransactionId))
                                    {
                                        strTransactionId = strMPProTransactionId;
                                        strUserReference = strMPProReference;
                                        strGatewayDate = strMPProGatewayDate;
                                        //strMPProCardType;
                                        //strMPProDocumentType;
                                        //strMPProInstallaments;
                                        //strMPProCVVLength;
                                        strCardHash = strMPProCardHash;
                                        strCardReference = strMPProCardReference;
                                        strCardScheme = strMPProCardScheme;
                                        strMaskedCardNumber = strMPProMaskedCardNumber;
                                        strCardDocumentID = strMPProDocumentID;

                                        if ((strMPProExpMonth.Length > 0) && (strMPProExpYear.Length == 4))
                                        {
                                            dtExpirationDate = new DateTime(Convert.ToInt32(strMPProExpYear), Convert.ToInt32(strMPProExpMonth), 1).AddMonths(1).AddSeconds(-1);
                                        }
                                        bPayIsCorrect = true;

                                    }
                                    else
                                    {
                                        string strFormURL = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_FORM_URL;

                                        DateTime utcNow = DateTime.UtcNow;
                                        int iQuantityToRechargeMPPro = Convert.ToInt32(dQuantityToCharge * infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurrencyIsoCode));


                                        string strHashString = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MERCADOPAGO_CONFIGURATION.MEPACON_GUID +
                                                                                        oUser.USR_EMAIL +
                                                                                        iQuantityToRechargeMPPro.ToString() +
                                                                                        sCurrencyIsoCode + 
                                                                                        strMPProDescription +
                                                                                        utcNow.ToString("HHmmssddMMyy")+
                                                                                        oUser.USR_CULTURE_LANG;

                                        string strCalcHash = CalculatePaymentGatewayHash(strHashString, oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MERCADOPAGO_CONFIGURATION.MEPACON_HASH_SEED);


                                        str3DSURL = string.Format("{0}?Guid={1}&Email={2}&Amount={3}&CurrencyISOCODE={4}&Description={5}&UTCDate={6}&Culture={7}&Hash={8}",
                                            strFormURL,
                                            oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MERCADOPAGO_CONFIGURATION.MEPACON_GUID,
                                            oUser.USR_EMAIL,
                                            iQuantityToRechargeMPPro.ToString(),
                                            sCurrencyIsoCode,
                                            HttpUtility.UrlEncode(strMPProDescription),
                                            utcNow.ToString("HHmmssddMMyy"),
                                            HttpUtility.UrlEncode(oUser.USR_CULTURE_LANG),
                                            strCalcHash
                                            );

                                        str3DSURL = XmlEscape(str3DSURL);

                                        return ResultType.Result_3DS_Validation_Needed;



                                    }
                                }


                                if (bPayIsCorrect)
                                {
                                    rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                }


                            }


                            if (bPayIsCorrect)
                            {

                                int iPercFEETopped = Convert.ToInt32(Math.Round(dPercFEETopped, MidpointRounding.AwayFromZero));
                                int iFixedFEE = Convert.ToInt32(Math.Round(dFixedFEE, MidpointRounding.AwayFromZero));

                                if (!customersRepository.RechargeUserBalance(ref oUser,
                                                oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG,
                                                iOSType,
                                                true,
                                                iQuantityToRecharge,
                                                iAmountToBeAddedToBalance,
                                                dPercVAT1, dPercVAT2, iPartialVAT1, dPercFEE, iPercFEETopped, iPartialPercFEE, iFixedFEE, iPartialFixedFEE, iTotalQuantity,
                                                //Convert.ToInt32(dQuantityToCharge * 100),                                             
                                                dCurrencyId,
                                                PaymentSuscryptionType.pstPrepay,
                                                rechargeStatus,
                                                rechargeCreationType,
                                                //dVAT,
                                                strUserReference,
                                                strTransactionId,
                                                strCFTransactionID,
                                                strGatewayDate,
                                                strAuthCode,
                                                strAuthResult,
                                                strAuthResultDesc,
                                                strCardHash,
                                                strCardReference,
                                                strCardScheme,
                                                strMaskedCardNumber,
                                                strCardName,
                                                strCardDocumentID,
                                                dtExpirationDate,
                                                null,
                                                null,
                                                null,
                                                false,
                                                dLatitude,
                                                dLongitude,
                                                strAppVersion, strMD, strCAVV, strECI,
                                                strBSRedsys3DSTransID,
                                                strBSRedsysProtocolVersion,
                                                iBSRedsysNumInlineForms,
                                                bBSRedsys3DSFrictionless,
                                                dSourceApp,
                                                infraestructureRepository,
                                                out dRechargeId))
                                {
                                    rtRes = ResultType.Result_Error_Generic;
                                    Logger_AddLogMessage(string.Format("PerformPrepayRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);

                                }
                                else
                                {
                                    rtRes = ResultType.Result_OK;
                                }
                            }
                            else
                            {
                                if (bAutomatic)
                                {
                                    customersRepository.AutomaticRechargeFailure(ref oUser);
                                }
                                rtRes = ResultType.Result_Error_Recharge_Failed;
                                Logger_AddLogMessage(string.Format("PerformPrepayRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);

                            }
                        }
                        else
                        {
                            rtRes = ResultType.Result_Error_CardPayment_Mode_NotApplicable;
                            Logger_AddLogMessage(string.Format("PerformPrepayRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                        }

                    }
                    







                    /*else if (((PaymentMeanType)oUserPaymentMean.CUSPM_PAT_ID == PaymentMeanType.pmtPaypal) &&
                        (oUserPaymentMean.CUSPM_AUTOMATIC_RECHARGE == 1))
                    {
                        PayPal.Services.Private.AP.PayResponse PResponse = null;

                        if (!PaypalPayments.PreapprovalPayRequest(oUserPaymentMean.CUSPM_TOKEN_PAYPAL_ID,
                                                                oUserPaymentMean.CUSPM_TOKEN_PAYPAL_PREAPPROVAL_KEY,
                                                                dQuantityToCharge,
                                                                oUserPaymentMean.CURRENCy.CUR_ISO_CODE,
                                                                "en-US",
                                                                "http://localhost",
                                                                "http://localhost",
                                                                out PResponse))
                        {
                            if (bAutomatic)
                            {
                                customersRepository.AutomaticRechargeFailure(ref oUser);
                            }
                            rtRes = ResultType.Result_Error_Recharge_Failed;
                            Logger_AddLogMessage(string.Format("PerformPrepayRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                           
                        }
                        else
                        {
                            if (PResponse.paymentExecStatus != "COMPLETED")
                            {
                               rtRes = ResultType.Result_Error_Recharge_Failed;
                               Logger_AddLogMessage(string.Format("PerformPrepayRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                               
                            }
                            else
                            {
                                PayPal.Services.Private.AP.PaymentDetailsResponse PDResponse = null;

                                if (PaypalPayments.PreapprovalPayConfirm(PResponse.payKey,
                                                                            "en-US",
                                                                            out PDResponse))
                                {

                                    int iPercFEETopped = Convert.ToInt32(Math.Round(dPercFEETopped, MidpointRounding.AwayFromZero));
                                    int iFixedFEE = Convert.ToInt32(Math.Round(dFixedFEE, MidpointRounding.AwayFromZero));

                                    if (!customersRepository.RechargeUserBalance(ref oUser,
                                                                                oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG,
                                                                                iOSType,
                                                                                true,
                                                                                iQuantity,
                                                                                dPercVAT1, dPercVAT2, iPartialVAT1, dPercFEE, iPercFEETopped, iPartialPercFEE, iFixedFEE, iPartialFixedFEE, iTotalQuantity,
                                                                                //Convert.ToInt32(dQuantityToCharge * 100),
                                                                                dCurrencyId,
                                                                                PaymentSuscryptionType.pstPrepay,
                                                                                PaymentMeanRechargeStatus.Committed,
                                                                                rechargeCreationType,
                                                                                //dVAT,
                                                                                null,
                                                                                PDResponse.paymentInfoList[0].transactionId,
                                                                                null,
                                                                                DateTime.Now.ToUniversalTime().ToString(),
                                                                                null,
                                                                                null,
                                                                                null,
                                                                                null,
                                                                                null,
                                                                                null,
                                                                                null,
                                                                                null,
                                                                                null,
                                                                                null,
                                                                                null,
                                                                                null,
                                                                                PResponse.payKey,
                                                                                false,
                                                                                dLatitude,
                                                                                dLongitude,
                                                                                strAppVersion,
                                                                                infraestructureRepository,
                                                                                out dRechargeId))
                                    {
                                        rtRes = ResultType.Result_Error_Generic;
                                        Logger_AddLogMessage(string.Format("PerformPrepayRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                                       
                                    }
                                    else
                                    {
                                        rtRes = ResultType.Result_OK;
                                    }

                                }
                                else
                                {
                                    if (bAutomatic)
                                    {
                                        customersRepository.AutomaticRechargeFailure(ref oUser);
                                    }
                                    rtRes = ResultType.Result_Error_Recharge_Failed;
                                    Logger_AddLogMessage(string.Format("PerformPrepayRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);

                                }
                            }
                        }
                    }*/
                    else
                    {
                        rtRes = ResultType.Result_Error_Recharge_Not_Possible;
                        Logger_AddLogMessage(string.Format("PerformPrepayRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                    }
                }
                else
                {
                    rtRes = ResultType.Result_Error_Invalid_Payment_Mean;
                    Logger_AddLogMessage(string.Format("PerformPrepayRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                }

            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "PerformPrepayRecharge::Exception", LogLevels.logERROR);

            }

            lEllapsedTime = watch.ElapsedMilliseconds;
            watch.Stop();
            return rtRes;

        }

        private ResultType PerformCashRecharge(ref USER oUser, int iOSType, int iTotalQuantity, int iAmountToBeAddedToBalance, decimal? dLatitude, decimal? dLongitude, string strAppVersion, 
            PaymentMeanRechargeCreationType rechargeCreationType, decimal? dInstallationId, decimal? dFinanDistOperatorId, string sBackOfficeUsr, decimal dSourceApp, out decimal? dRechargeId)
        {
            ResultType rtRes = ResultType.Result_Error_Generic;
            dRechargeId = null;

            try
            {

                decimal dPercVAT1;
                decimal dPercVAT2;
                decimal dPercFEE;
                decimal dPercFEETopped;
                decimal dFixedFEE;
                int? iPaymentTypeId = null;
                int? iPaymentSubtypeId = null;
                /*if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                {
                    iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                    iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                }*/

                iPaymentTypeId = (int)PaymentMeanType.pmtCash;
                //iPaymentSubtypeId = (int)PaymentMeanSubType.pmstUndefined;

                if (!customersRepository.GetFinantialParams(oUser, "", iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.BalanceRecharge,
                                                            out dPercVAT1, out dPercVAT2, out dPercFEE, out dPercFEETopped, out dFixedFEE))
                {
                    rtRes = ResultType.Result_Error_Generic;
                    Logger_AddLogMessage(string.Format("PerformCashRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                }
                else
                {

                    int iPartialVAT1;
                    int iPartialPercFEE;
                    int iPartialFixedFEE;
                    int iPercFEETopped = Convert.ToInt32(Math.Round(dPercFEETopped, MidpointRounding.AwayFromZero));
                    int iFixedFEE = Convert.ToInt32(Math.Round(dFixedFEE, MidpointRounding.AwayFromZero));

                    int iQuantity = customersRepository.CalculateFEEReverse(iTotalQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE);

                    NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                    numberFormatProvider.NumberDecimalSeparator = ".";
                    decimal dQuantity = Convert.ToDecimal(iQuantity, numberFormatProvider) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)));
                    decimal dQuantityToCharge = Convert.ToDecimal(iTotalQuantity, numberFormatProvider) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)));

                    if (!customersRepository.RechargeUserBalanceWithCash(ref oUser,
                                                                        iOSType,
                                                                        iQuantity,
                                                                        iAmountToBeAddedToBalance,
                                                                        dPercVAT1, dPercVAT2, iPartialVAT1, dPercFEE, iPercFEETopped, iPartialPercFEE, iFixedFEE, iPartialFixedFEE, iTotalQuantity,
                        //Convert.ToInt32(dQuantityToCharge * 100),                                             
                                                                        oUser.CURRENCy.CUR_ID,
                                                                        dLatitude,
                                                                        dLongitude,
                                                                        strAppVersion,
                                                                        rechargeCreationType,
                                                                        dInstallationId,
                                                                        dFinanDistOperatorId,
                                                                        sBackOfficeUsr, dSourceApp,
                                                                        out dRechargeId))
                    {
                        rtRes = ResultType.Result_Error_Generic;
                        Logger_AddLogMessage(string.Format("PerformCashRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                    }
                    else
                        rtRes = ResultType.Result_OK;
                }

            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "PerformCashRecharge::Exception", LogLevels.logERROR);

            }

            return rtRes;
        }

        private ResultType PerformOxxoRecharge(ref USER oUser, int iOSType, int iTotalQuantity, decimal? dLatitude, decimal? dLongitude, string strAppVersion, PaymentMeanRechargeCreationType rechargeCreationType,
                                               decimal dSourceApp,
                                               out decimal? dRechargeId,
                                               out DateTime? dtExpirationDate,
                                               out string strBarcode,
                                               out string strOxxoReference,
                                               out string strPayuURL)
        {
            ResultType rtRes = ResultType.Result_Error_Generic;
            dRechargeId = null;
            dtExpirationDate = null;
            strBarcode = "";
            strOxxoReference = "";
            strPayuURL = "";

            try
            {

                decimal? dSrcCurId = null;
                int? iSrcAmount = null;
                decimal? dSrcChangeApplied = null;
                decimal? dSrcChangeFEEApplied = null;
                if (infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)) != "MXN")
                {
                    dSrcCurId = infraestructureRepository.GetCurrencyFromIsoCode("MXN");
                    iSrcAmount = iTotalQuantity;
                    double dChangeApplied;
                    double dChangeFee;
                    iTotalQuantity = ChangeQuantityFromCurToUserCur(iTotalQuantity, "MXN", oUser, out dChangeApplied, out dChangeFee);
                    dSrcChangeApplied = Convert.ToDecimal(dChangeApplied);
                    dSrcChangeFEEApplied = Convert.ToDecimal(dChangeFee);
                }

                decimal dPercVAT1;
                decimal dPercVAT2;
                decimal dPercFEE;
                decimal dPercFEETopped;
                decimal dFixedFEE;
                int? iPaymentTypeId = null;
                int? iPaymentSubtypeId = null;
                /*if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                {
                    iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                    iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                }*/

                iPaymentTypeId = (int)PaymentMeanType.pmtOxxo;
                //iPaymentSubtypeId = (int)PaymentMeanSubType.pmstUndefined;

                if (!customersRepository.GetFinantialParams(oUser, "", iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.BalanceRecharge,
                                                            out dPercVAT1, out dPercVAT2, out dPercFEE, out dPercFEETopped, out dFixedFEE))
                {
                    rtRes = ResultType.Result_Error_Generic;
                    Logger_AddLogMessage(string.Format("PerformOxxoRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                }
                else
                {

                    int iPartialVAT1;
                    int iPartialPercFEE;
                    int iPartialFixedFEE;
                    int iPercFEETopped = Convert.ToInt32(Math.Round(dPercFEETopped, MidpointRounding.AwayFromZero));
                    int iFixedFEE = Convert.ToInt32(Math.Round(dFixedFEE, MidpointRounding.AwayFromZero));


                    int iQuantity = customersRepository.CalculateFEEReverse(iTotalQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE);

                    NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                    numberFormatProvider.NumberDecimalSeparator = ".";
                    decimal dQuantity = Convert.ToDecimal(iQuantity, numberFormatProvider) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)));
                    decimal dQuantityToCharge = Convert.ToDecimal(iTotalQuantity, numberFormatProvider) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)));


                    PayuPayments cardPayment = new PayuPayments();
                    string errorMessage = "";
                    PayuPayments.PayuErrorCode eErrorCode = PayuPayments.PayuErrorCode.InternalError;

                    string strLang = ((oUser.USR_CULTURE_LANG.ToLower() ?? "").Length >= 2) ? oUser.USR_CULTURE_LANG.Substring(0, 2) : "es";

                    decimal? dUserSignupSourceApp = oUser.USR_SIGNUP_SOAPP_ID;

                    CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG oOxxoConfig = infraestructureRepository
                        .Currencies
                        .Where(r => r.CUR_ISO_CODE == "MXN")
                        .First()
                        .CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                                  .Where(r => r.CPTGC_ENABLED != 0 &&
                                              r.CPTGC_IS_INTERNAL != 0 && r.CPTGC_INTERNAL_SOAPP_ID.HasValue && r.CPTGC_INTERNAL_SOAPP_ID == dUserSignupSourceApp.Value &&
                                    r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtOxxo) &&
                                    r.CPTGC_PROVIDER == Convert.ToInt32(PaymentMeanCreditCardProviderType.pmccpPayu))
                                  .FirstOrDefault();

                    if (oOxxoConfig == null)
                    {

                        oOxxoConfig = infraestructureRepository
                        .Currencies
                        .Where(r => r.CUR_ISO_CODE == "MXN")
                        .First()
                        .CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                          .Where(r => r.CPTGC_ENABLED != 0 &&
                                      r.CPTGC_IS_INTERNAL != 0 && !r.CPTGC_INTERNAL_SOAPP_ID.HasValue &&
                                    r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtOxxo) &&
                                    r.CPTGC_PROVIDER == Convert.ToInt32(PaymentMeanCreditCardProviderType.pmccpPayu))
                          .FirstOrDefault();
                    }


                    if (oOxxoConfig != null)
                    {
                        string strTransactionId = "";
                        string strUserReference = "";
                        string strAuthCode = "";



                        if (cardPayment.OXXOTransaction(oOxxoConfig.PAYU_CONFIGURATION.PAYUCON_API_URL,
                                                                oOxxoConfig.PAYU_CONFIGURATION.PAYUCON_API_KEY,
                                                                oOxxoConfig.PAYU_CONFIGURATION.PAYUCON_API_LOGIN,
                                                                oOxxoConfig.PAYU_CONFIGURATION.PAYUCON_ACCOUNT_ID,
                                                                oOxxoConfig.PAYU_CONFIGURATION.PAYUCON_MERCHANT_ID,
                                                                oOxxoConfig.PAYU_CONFIGURATION.PAYUCON_SERVICE_TIMEOUT,
                                                                oOxxoConfig.PAYU_CONFIGURATION.PAYUCON_COUNTRY,
                                                                oOxxoConfig.PAYU_CONFIGURATION.PAYUCON_IS_TEST != 1 ? false : true,
                                                                oOxxoConfig.PAYU_CONFIGURATION.PAYUCON_CALLBACK_URL,
                                                                PayuPayments.Language(strLang),
                                                                oUser.USR_EMAIL,
                                                                dQuantityToCharge,
                                                                oOxxoConfig.CURRENCy.CUR_ISO_CODE,
                                                                "PAGO BLINKAY",
                                                                out eErrorCode,
                                                                out errorMessage,
                                                                out strTransactionId,
                                                                out strUserReference,
                                                                out strAuthCode,
                                                                out dtExpirationDate,
                                                                out strBarcode,
                                                                out strOxxoReference,
                                                                out strPayuURL))
                        {

                            if (!customersRepository.RechargeUserBalanceWithOxxo(ref oUser,
                                                                                iOSType,
                                                                                iQuantity,
                                                                                dPercVAT1, dPercVAT2, iPartialVAT1, dPercFEE, iPercFEETopped, iPartialPercFEE, iFixedFEE, iPartialFixedFEE, iTotalQuantity,
                                                                                oUser.CURRENCy.CUR_ID,
                                                                                dLatitude,
                                                                                dLongitude,
                                                                                strAppVersion,
                                                                                rechargeCreationType,
                                                                                strTransactionId,
                                                                                strUserReference,
                                                                                strAuthCode,
                                                                                dtExpirationDate,
                                                                                strBarcode,
                                                                                strOxxoReference,
                                                                                strPayuURL,
                                                                                dSrcCurId, iSrcAmount, dSrcChangeApplied, dSrcChangeFEEApplied,
                                                                                oOxxoConfig.CPTGC_ID,dSourceApp,
                                                                                out dRechargeId))
                            {
                                rtRes = ResultType.Result_Error_Generic;
                                Logger_AddLogMessage(string.Format("PerformOxxoRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                            }
                            else
                            {
                                rtRes = ResultType.Result_OK;

                            }
                        }
                    }
                    else
                    {
                        rtRes = ResultType.Result_Error_Generic;
                    }
                }


            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "PerformOxxoRecharge::Exception", LogLevels.logERROR);

            }

            return rtRes;
        }



        private ResultType PerformPaypalRecharge(ref USER oUser, int iOSType, int iQuantity, int iAmountToBeAddedToBalance, decimal? dLatitude, decimal? dLongitude, string strAppVersion, PaymentMeanRechargeCreationType rechargeCreationType,
                                                 string strPaypalToken,
                                                 string strPaypalId,
                                                 string strPayerId,
                                                 decimal dSourceApp,
                                                 out decimal? dRechargeId)
        {
            ResultType rtRes = ResultType.Result_Error_Generic;
            dRechargeId = null;

            try
            {


                 CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG oPaypalConfig = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                                 .Where(r => r.CPTGC_ENABLED != 0 &&
                                             r.CPTGC_IS_INTERNAL != 0 &&
                                             r.CPTGC_INTERNAL_SOAPP_ID.HasValue &&
                                             r.CPTGC_INTERNAL_SOAPP_ID == dSourceApp &&
                                             r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtPaypal))
                                 .FirstOrDefault();

                if (oPaypalConfig == null)
                {

                    oPaypalConfig = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                      .Where(r => r.CPTGC_ENABLED != 0 &&
                                  r.CPTGC_IS_INTERNAL != 0 &&
                                  !r.CPTGC_INTERNAL_SOAPP_ID.HasValue &&
                                  r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtPaypal))
                      .FirstOrDefault();
                }



                if (oPaypalConfig != null)
                {
                    string modePaypal = Enum.GetName(typeof(enumPayPalMode), (object)oPaypalConfig.PAYPAL_CONFIGURATION.PPCON_RESTAPI_ENVIRONMENT.Value);

                    string strCreationTime = string.Empty;
                    string strIntent = string.Empty;
                    string strState = string.Empty;
                    string strAuthCode = string.Empty;



                    if (PaypalPayments.ExpressCheckoutPassTwo(strPaypalToken, strPaypalId, strPayerId,
                                                              oPaypalConfig.PAYPAL_CONFIGURATION.PPCON_RESTAPI_CLIENT_ID, 
                                                              oPaypalConfig.PAYPAL_CONFIGURATION.PPCON_RESTAPI_CLIENT_SECRET,
                                                              oPaypalConfig.PAYPAL_CONFIGURATION.PPCON_RESTAPI_URL_PREFIX,
                                                              modePaypal,
                                                              oPaypalConfig.PAYPAL_CONFIGURATION.PPCON_SERVICE_TIMEOUT,
                                                              out strAuthCode,
                                                              out strCreationTime, 
                                                              out strIntent, 
                                                              out strState))
                    {
                        rtRes = PerformPaypalRecharge(ref oUser, iOSType, iQuantity, iAmountToBeAddedToBalance, dLatitude, dLongitude, strAppVersion, rechargeCreationType,
                                                 strPaypalId,
                                                 strAuthCode,
                                                 strCreationTime,
                                                 strIntent,
                                                 strState,
                                                 dSourceApp,
                                                 out dRechargeId);
                    }
                    else
                    {
                        rtRes = ResultType.Result_Error_Recharge_Failed;

                    }
                }


            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "PerformPaypalRecharge::Exception", LogLevels.logERROR);

            }

            return rtRes;
        }


        private ResultType PerformPaypalRecharge(ref USER oUser, int iOSType, int iQuantity, int iAmountToBeAddedToBalance, decimal? dLatitude, decimal? dLongitude, string strAppVersion, PaymentMeanRechargeCreationType rechargeCreationType,
                                                 string strPaypalId,
                                                 string strPaypalAuthorizationId,
                                                 string strPaypalCreateTime,
                                                 string strPaypalIntent,
                                                 string strPaypalState,
                                                 decimal dSourceApp,
                                                 out decimal? dRechargeId)
        {
            ResultType rtRes = ResultType.Result_Error_Generic;
            dRechargeId = null;

            try
            {

                decimal dPercVAT1;
                decimal dPercVAT2;
                decimal dPercFEE;
                decimal dPercFEETopped;
                decimal dFixedFEE;
                int? iPaymentTypeId = null;
                int? iPaymentSubtypeId = null;

                iPaymentTypeId = (int)PaymentMeanType.pmtPaypal;

                if (!customersRepository.GetFinantialParams(oUser, "", iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.BalanceRecharge,
                                                            out dPercVAT1, out dPercVAT2, out dPercFEE, out dPercFEETopped, out dFixedFEE))
                {
                    rtRes = ResultType.Result_Error_Generic;
                    Logger_AddLogMessage(string.Format("PerformPaypalRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                }
                else
                {

                    int iPartialVAT1;
                    int iPartialPercFEE;
                    int iPartialFixedFEE;

                    int iTotalQuantity = customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, dPercFEETopped, dFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE);

                    NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                    numberFormatProvider.NumberDecimalSeparator = ".";
                    decimal dQuantity = Convert.ToDecimal(iQuantity, numberFormatProvider) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)));
                    decimal dQuantityToCharge = Convert.ToDecimal(iTotalQuantity, numberFormatProvider) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)));
                    int iPercFEETopped = Convert.ToInt32(Math.Round(dPercFEETopped, MidpointRounding.AwayFromZero));
                    int iFixedFEE = Convert.ToInt32(Math.Round(dFixedFEE, MidpointRounding.AwayFromZero));


                    if (!customersRepository.RechargeUserBalanceWithPaypal(ref oUser,
                                                                        iOSType,
                                                                        iQuantity,
                                                                        iAmountToBeAddedToBalance,
                                                                        dPercVAT1, dPercVAT2, iPartialVAT1, dPercFEE, iPercFEETopped, iPartialPercFEE, iFixedFEE, iPartialFixedFEE, iTotalQuantity,
                                                                        oUser.CURRENCy.CUR_ID,
                                                                        dLatitude,
                                                                        dLongitude,
                                                                        strAppVersion,
                                                                        rechargeCreationType,
                                                                        strPaypalId,
                                                                        strPaypalAuthorizationId,
                                                                        strPaypalCreateTime,
                                                                        strPaypalIntent,
                                                                        strPaypalState, dSourceApp,
                                                                        out dRechargeId))
                    {
                        rtRes = ResultType.Result_Error_Generic;
                        Logger_AddLogMessage(string.Format("PerformPaypalRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                    }
                    else
                        rtRes = ResultType.Result_OK;

                }

            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "PerformPaypalRecharge::Exception", LogLevels.logERROR);

            }

            return rtRes;
        }


        private ResultType PerformPerTransactionRecharge(ref USER oUser, CUSTOMER_PAYMENT_MEAN oUserPaymentMean, int iOSType, int iQuantity, decimal? dLatitude, 
                                                         decimal? dLongitude, string strAppVersion,string strMD, string strCAVV, string strECI, string strBSRedsys3DSTransID, 
                                                         string strBSRedsys3DSPares, string strBSRedsys3DSCres, string strBSRedsys3DSMethodData, string strMercadoPagoToken,
                                                         string strMPProDescription,
                                                         string strMPProTransactionId,
                                                         string strMPProReference,
                                                         string strMPProCardHash,
                                                         string strMPProCardReference,
                                                         string strMPProCardScheme,
                                                         string strMPProGatewayDate,
                                                         string strMPProMaskedCardNumber,
                                                         string strMPProExpMonth,
                                                         string strMPProExpYear,
                                                         string strMPProCardType,
                                                         string strMPProDocumentID,
                                                         string strMPProDocumentType,
                                                         string strMPProInstallaments,
                                                         string strMPProCVVLength,
                                                         int? iTariffBehavior, decimal dSourceApp, bool bPaymentInPerson, CardPayment_Mode eCardPaymentMode, out decimal? dRechargeId, out string str3DSURL, 
                                                         out long lEllapsedTime)
        {
            ResultType rtRes = ResultType.Result_Error_Generic;
            dRechargeId = null;
            str3DSURL = "";
            Stopwatch watch = Stopwatch.StartNew();
            lEllapsedTime = 0;


            try
            {
                if (iQuantity > 0)
                {
                    if ((oUserPaymentMean != null) &&
                        (oUserPaymentMean.CUSPM_ENABLED == 1) &&
                        (oUserPaymentMean.CUSPM_VALID == 1))
                    {
                        decimal dPercVAT1 = 0;
                        decimal dPercVAT2 = 0;
                        decimal dPercFEE = 0;
                        int iPercFEETopped = 0;
                        int iFixedFEE = 0;

                        int iQuantityToRecharge = iQuantity;

                        decimal dCurrencyId = oUser.USR_CUR_ID;
                        string sCurrencyIsoCode = oUser.CURRENCy.CUR_ISO_CODE;
                        string sCurrencyIsoCodeNum = oUser.CURRENCy.CUR_ISO_CODE_NUM;

                        if ((PaymentMeanType)oUserPaymentMean.CUSPM_PAT_ID == PaymentMeanType.pmtDebitCreditCard)
                        {
                            if (oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_MIN_CHARGE.HasValue)
                            {
                                if (iQuantity < oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_MIN_CHARGE.Value)
                                {
                                    iQuantityToRecharge = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_MIN_CHARGE.Value;
                                }
                            }

                            dCurrencyId = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_CUR_ID;
                            sCurrencyIsoCode = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CURRENCy.CUR_ISO_CODE;
                            sCurrencyIsoCodeNum = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CURRENCy.CUR_ISO_CODE_NUM;
                        }

                        /*int? iPaymentTypeId = null;
                        int? iPaymentSubtypeId = null;
                        if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                        {
                            iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                            iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                        }

                        if (!customersRepository.GetFinantialParams(oUser, "", iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.BalanceRecharge,
                                                                    out dPercVAT1, out dPercVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE))
                        {
                            rtRes = ResultType.Result_Error_Generic;
                            Logger_AddLogMessage(string.Format("PerformPrepayRecharge::Error: Error getting finantial parameters. Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                        }*/

                        int iPartialVAT1 = 0;
                        int iPartialPercFEE = 0;
                        int iPartialFixedFEE = 0;

                        int iTotalQuantity = iQuantityToRecharge; // customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE);*/                    

                        NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                        numberFormatProvider.NumberDecimalSeparator = ".";
                        decimal dQuantity = Convert.ToDecimal(iQuantityToRecharge, numberFormatProvider) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurrencyIsoCode);
                        decimal dQuantityToCharge = Convert.ToDecimal(iTotalQuantity, numberFormatProvider) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurrencyIsoCode);


                        /*decimal dFeeVal = 0;
                        decimal dFeePerc = 0;

                        customersRepository.GetPaymentMeanFees(ref oUser, out dFeeVal, out dFeePerc);
                        NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                        numberFormatProvider.NumberDecimalSeparator = ".";
                        decimal dQuantity = Convert.ToDecimal(iQuantity, numberFormatProvider) / 100;
                        decimal dQuantityToCharge = Math.Round(dQuantity + (dQuantity  * dFeePerc / 100 + dFeeVal / 100), 2);*/

                        if ((PaymentMeanType)oUserPaymentMean.CUSPM_PAT_ID == PaymentMeanType.pmtDebitCreditCard)
                        {

                            if (CheckCardPaymentMode(oUserPaymentMean, eCardPaymentMode, out eCardPaymentMode))
                            {

                                string strUserReference = null;
                                string strAuthCode = null;
                                string strAuthResultDesc = "";
                                string strAuthResult = null;
                                string strGatewayDate = null;
                                string strTransactionId = null;
                                string strCardScheme = null;
                                string strCFTransactionID = null;
                                string strBSRedsysProtocolVersion = null;
                                int? iBSRedsysNumInlineForms = null;
                                bool? bBSRedsys3DSFrictionless = null;

                                string strCardHash = oUserPaymentMean.CUSPM_TOKEN_CARD_HASH;
                                string strCardReference = oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE;
                                string strMaskedCardNumber = oUserPaymentMean.CUSPM_TOKEN_MASKED_CARD_NUMBER;
                                string strCardName = oUserPaymentMean.CUSPM_TOKEN_CARD_NAME;
                                string strCardDocumentID = oUserPaymentMean.CUSPM_TOKEN_CARD_DOCUMENT_ID;
                                DateTime? dtExpirationDate = oUserPaymentMean.CUSPM_TOKEN_CARD_EXPIRATION_DATE;

                                TariffBehavior? tariffBehavior = null;

                                if (iTariffBehavior.HasValue)
                                {
                                    tariffBehavior = (TariffBehavior)iTariffBehavior.Value;
                                }

                                bool bPayIsCorrect = false;
                                PaymentMeanRechargeStatus rechargeStatus = PaymentMeanRechargeStatus.Authorized;




                                if ((PaymentMeanCreditCardProviderType)oUserPaymentMean.CUSPM_CREDIT_CARD_PAYMENT_PROVIDER ==
                                    PaymentMeanCreditCardProviderType.pmccpCreditCall)
                                {
                                    CardEasePayments cardPayment = new CardEasePayments();

                                    bPayIsCorrect = cardPayment.AutomaticPayment(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CREDIT_CALL_CONFIGURATION.CCCON_TERMINAL_ID,
                                                                                oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CREDIT_CALL_CONFIGURATION.CCCON_TRANSACTION_KEY,
                                                                                oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CREDIT_CALL_CONFIGURATION.CCCON_CARDEASE_URL,
                                                                                oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CREDIT_CALL_CONFIGURATION.CCCON_CARDEASE_TIMEOUT,
                                                                                oUser.USR_EMAIL,
                                                                                dQuantityToCharge,
                                                                                sCurrencyIsoCode, //infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(dCurrencyID)),
                                                                                oUserPaymentMean.CUSPM_TOKEN_CARD_HASH,
                                                                                oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                                                                false,
                                                                                out strUserReference,
                                                                                out strAuthCode,
                                                                                out strAuthResult,
                                                                                out strGatewayDate,
                                                                                out strCardScheme,
                                                                                out strTransactionId);
                                }
                                else if ((PaymentMeanCreditCardProviderType)oUserPaymentMean.CUSPM_CREDIT_CARD_PAYMENT_PROVIDER ==
                                         PaymentMeanCreditCardProviderType.pmccpIECISA)
                                {
                                    int iQuantityToRechargeIECISA = Convert.ToInt32(dQuantityToCharge * infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurrencyIsoCode /*infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(dCurrencyID))*/));
                                    strUserReference = IECISAPayments.UserReference();
                                    DateTime dtNow = DateTime.Now;

                                    IECISAPayments.IECISAErrorCode eErrorCode;
                                    DateTime dtUTCNow = DateTime.UtcNow;
                                    IECISAPayments cardPayment = new IECISAPayments();
                                    string strErrorMessage = "";

                                    cardPayment.StartAutomaticTransaction(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_FORMAT_ID,
                                                                           oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_CF_USER,
                                                                           oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_CF_MERCHANT_ID,
                                                                           oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_CF_INSTANCE,
                                                                           oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_CF_CENTRE_ID,
                                                                           oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_CF_POS_ID,
                                                                           oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_SERVICE_URL,
                                                                           oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_SERVICE_TIMEOUT,
                                                                           oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_MAC_KEY,
                                                                           oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_CUSTOMER_ID,
                                                                           oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_CF_TEMPLATE,
                                                                           oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                                                           oUser.USR_EMAIL,
                                                                           iQuantityToRechargeIECISA,
                                                                           sCurrencyIsoCode,
                                                                           sCurrencyIsoCodeNum,
                                                                           dtNow,
                                                                           out eErrorCode,
                                                                           out strErrorMessage,
                                                                           out strTransactionId,
                                                                           out strUserReference);

                                    if (eErrorCode != IECISAPayments.IECISAErrorCode.OK)
                                    {
                                        string errorCode = eErrorCode.ToString();

                                        m_Log.LogMessage(LogLevels.logERROR, string.Format("PerformPerTransactionRecharge.StartWebTransaction : errorCode={0} ; errorMessage={1}",
                                                  errorCode, strErrorMessage));


                                    }
                                    else
                                    {
                                        string strRedirectURL = "";
                                        cardPayment.GetWebTransactionPaymentTypes(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_SERVICE_URL,
                                                                                  oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_SERVICE_TIMEOUT,
                                                                                  strTransactionId,
                                                                                  out eErrorCode,
                                                                                  out strErrorMessage,
                                                                                  out strRedirectURL);
                                        if (eErrorCode != IECISAPayments.IECISAErrorCode.OK)
                                        {
                                            string errorCode = eErrorCode.ToString();

                                            m_Log.LogMessage(LogLevels.logERROR, string.Format("PerformPerTransactionRecharge.GetWebTransactionPaymentTypes : errorCode={0} ; errorMessage={1}",
                                                      errorCode, strErrorMessage));


                                        }
                                        else
                                        {
                                            customersRepository.StartRecharge(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_ID,
                                                                            oUser.USR_EMAIL,
                                                                            dtUTCNow,
                                                                            dtNow,
                                                                            iQuantityToRecharge,
                                                                            dCurrencyId,
                                                                            "",
                                                                            strUserReference,
                                                                            strTransactionId,
                                                                            "",
                                                                            "",
                                                                            "",
                                                                            PaymentMeanRechargeStatus.Committed);

                                            DateTime? dtTransactionDate = null;
                                            cardPayment.CompleteAutomaticTransaction(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_SERVICE_URL,
                                                                                      oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_SERVICE_TIMEOUT,
                                                                                      oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_MAC_KEY,
                                                                                      strTransactionId,
                                                                                      out eErrorCode,
                                                                                      out strErrorMessage,
                                                                                      out dtTransactionDate,
                                                                                      out strCFTransactionID,
                                                                                      out strAuthCode);


                                            if (eErrorCode != IECISAPayments.IECISAErrorCode.OK)
                                            {
                                                string errorCode = eErrorCode.ToString();

                                                m_Log.LogMessage(LogLevels.logERROR, string.Format("PerformPerTransactionRecharge.GetWebTransactionPaymentTypes : errorCode={0} ; errorMessage={1}",
                                                          errorCode, strErrorMessage));



                                            }
                                            else
                                            {

                                                strAuthResult = "succeeded";

                                                customersRepository.CompleteStartRecharge(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_ID,
                                                                                          oUser.USR_EMAIL,
                                                                                          strTransactionId,
                                                                                          strAuthResult,
                                                                                          strCFTransactionID,
                                                                                          dtTransactionDate.Value.ToString("HHmmssddMMyyyy"),
                                                                                          strAuthCode,
                                                                                          PaymentMeanRechargeStatus.Committed);
                                                strGatewayDate = dtTransactionDate.Value.ToString("HHmmssddMMyyyy");
                                                rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                                bPayIsCorrect = true;

                                            }
                                        }

                                    }

                                }
                                else if ((PaymentMeanCreditCardProviderType)oUserPaymentMean.CUSPM_CREDIT_CARD_PAYMENT_PROVIDER ==
                                         PaymentMeanCreditCardProviderType.pmccpStripe)
                                {

                                    string result = "";
                                    string errorMessage = "";
                                    string errorCode = "";
                                    string strPAN = "";
                                    string strExpirationDateMonth = "";
                                    string strExpirationDateYear = "";
                                    string strCustomerId = oUserPaymentMean.CUSPM_TOKEN_CARD_HASH;

                                    int iQuantityToRechargeStripe = Convert.ToInt32(dQuantityToCharge * infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurrencyIsoCode));
                                    bPayIsCorrect = StripePayments.PerformCharge(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.STRIPE_CONFIGURATION.STRCON_SECRET_KEY,
                                                                                oUser.USR_EMAIL,
                                                                                oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                                                                ref strCustomerId,
                                                                                iQuantityToRechargeStripe,
                                                                                sCurrencyIsoCode,
                                                                                false,
                                                                                out result,
                                                                                out errorCode,
                                                                                out errorMessage,
                                                                                out strCardScheme,
                                                                                out strPAN,
                                                                                out strExpirationDateMonth,
                                                                                out strExpirationDateYear,
                                                                                out strTransactionId,
                                                                                out strGatewayDate);

                                    if (bPayIsCorrect)
                                    {
                                        strUserReference = strTransactionId;
                                        strAuthCode = "";
                                        strAuthResult = "succeeded";

                                    }
                                }
                                else if ((PaymentMeanCreditCardProviderType)oUserPaymentMean.CUSPM_CREDIT_CARD_PAYMENT_PROVIDER ==
                                         PaymentMeanCreditCardProviderType.pmccpMoneris)
                                {
                                    MonerisPayments cardPayment = new MonerisPayments();
                                    string errorMessage = "";
                                    MonerisPayments.MonerisErrorCode eErrorCode = MonerisPayments.MonerisErrorCode.InternalError;

                                    NumberFormatInfo provider = new NumberFormatInfo();
                                    string strAmount = dQuantityToCharge.ToString("#" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurrencyIsoCode), provider);

                                    strUserReference = MonerisPayments.UserReference();



                                    if ((AppUtilities.AppVersion(strAppVersion) >= _VERSION_3_6) &&
                                        ((oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_3DS_TRANSACTIONS ?? 0) == 1) &&
                                        bPaymentInPerson && (iOSType != (int)MobileOS.Web))
                                    {

                                        DateTime utcNow = DateTime.UtcNow;

                                        if (!string.IsNullOrEmpty(strMD) && !string.IsNullOrEmpty(strCAVV))
                                        {


                                            infraestructureRepository.UpdateMoneris3DSTransaction(strMD, oUser.USR_EMAIL, strCAVV, strECI, utcNow);

                                            bPayIsCorrect = cardPayment.AutomaticTransactionMPIStep3(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_API_STORE_ID,
                                                                                                    oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_API_STORE_KEY,
                                                                                                    strUserReference,
                                                                                                    oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                                                                                    oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE == oUserPaymentMean.CUSPM_TOKEN_CARD_HASH ? "" : oUserPaymentMean.CUSPM_TOKEN_CARD_HASH,
                                                                                                    strAmount,
                                                                                                    oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_PROCESING_COUNTRY,
                                                                                                    "",
                                                                                                    oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_CHECK_CARD_STATUS != 0,
                                                                                                    oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_TEST_MODE != 0,
                                                                                                    strCAVV, strECI,
                                                                                                    out eErrorCode, out errorMessage, out strTransactionId, out strAuthCode, out strAuthResult, out strGatewayDate);

                                        }
                                        else
                                        {

                                            string strFormURL = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_FORM_URL;
                                            string strBaseURL = strFormURL.Substring(0, strFormURL.LastIndexOf("/"));
                                            string strReturnURL = strBaseURL + "/MonerisMPIResponse";
                                            string strInlineForm = "";
                                            string strMDStep1 = "";


                                            bPayIsCorrect = cardPayment.AutomaticTransactionMPIStep1(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_API_STORE_ID,
                                                oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_API_STORE_KEY,
                                                strUserReference,
                                                oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                                oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE == oUserPaymentMean.CUSPM_TOKEN_CARD_HASH ? "" : oUserPaymentMean.CUSPM_TOKEN_CARD_HASH,
                                                strAmount,
                                                oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_PROCESING_COUNTRY, "",
                                                oUserPaymentMean.CUSPM_TOKEN_CARD_SCHEMA,
                                                oUserPaymentMean.CUSPM_TOKEN_CARD_EXPIRATION_DATE.Value,
                                                strReturnURL, "Mozilla",
                                                oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_CHECK_CARD_STATUS != 0,
                                                oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_TEST_MODE != 0,
                                                out eErrorCode, out errorMessage, out strTransactionId, out strAuthCode, out strAuthResult, out strGatewayDate, out strInlineForm, out strMDStep1);


                                            if ((bPayIsCorrect) && (!string.IsNullOrEmpty(strInlineForm)))
                                            {
                                                decimal? dTransId = null;
                                                bPayIsCorrect = false;

                                                if (infraestructureRepository.AddMoneris3DSTransaction(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_ID,
                                                                                                       strMDStep1, oUser.USR_EMAIL, iQuantity, utcNow, strInlineForm, out dTransId))
                                                {


                                                    string strHashString = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_GUID +
                                                        dTransId.ToString() +
                                                        strMDStep1 +
                                                        oUser.USR_EMAIL +
                                                        utcNow.ToString("HHmmssddMMyy") +
                                                        oUser.USR_CULTURE_LANG;

                                                    string strCalcHash = CalculatePaymentGatewayHash(strHashString, oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_HASH_SEED);


                                                    str3DSURL = string.Format("{0}/MonerisMPIRequest?Guid={1}&id={2}&MD={3}&Email={4}&UTCDate={5}&Culture={6}&Hash={7}",
                                                        strBaseURL,
                                                        oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_GUID,
                                                        dTransId.ToString(),
                                                        HttpUtility.UrlEncode(strMDStep1),
                                                        HttpUtility.UrlEncode(oUser.USR_EMAIL),
                                                        utcNow.ToString("HHmmssddMMyy"),
                                                        HttpUtility.UrlEncode(oUser.USR_CULTURE_LANG),
                                                        strCalcHash
                                                        );

                                                    str3DSURL = XmlEscape(str3DSURL);

                                                    return ResultType.Result_3DS_Validation_Needed;
                                                }
                                            }

                                        }

                                    }

                                    else
                                    {

                                        string strFormURL = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_FORM_URL;
                                        string strBaseURL = strFormURL.Substring(0, strFormURL.LastIndexOf("/"));
                                        string strReturnURL = strBaseURL + "/MonerisMPIResponse";
                                        string strInlineForm = "";
                                        string strMDStep1 = "";


                                        bPayIsCorrect = cardPayment.AutomaticTransactionMPIStep1(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_API_STORE_ID,
                                            oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_API_STORE_KEY,
                                            strUserReference,
                                            oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                            oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE == oUserPaymentMean.CUSPM_TOKEN_CARD_HASH ? "" : oUserPaymentMean.CUSPM_TOKEN_CARD_HASH,
                                            strAmount,
                                            oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_PROCESING_COUNTRY, "",
                                            oUserPaymentMean.CUSPM_TOKEN_CARD_SCHEMA,
                                            oUserPaymentMean.CUSPM_TOKEN_CARD_EXPIRATION_DATE.Value,
                                            strReturnURL, "Mozilla",
                                            oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_CHECK_CARD_STATUS != 0,
                                            oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_TEST_MODE != 0,
                                            out eErrorCode, out errorMessage, out strTransactionId, out strAuthCode, out strAuthResult, out strGatewayDate, out strInlineForm, out strMDStep1);


                                        if ((bPayIsCorrect) && (!string.IsNullOrEmpty(strInlineForm)))
                                        {

                                            bPayIsCorrect = cardPayment.AutomaticTransaction(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_API_STORE_ID,
                                                                                                oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_API_STORE_KEY,
                                                                                                strUserReference,
                                                                                                oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                                                                                oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE == oUserPaymentMean.CUSPM_TOKEN_CARD_HASH ? "" : oUserPaymentMean.CUSPM_TOKEN_CARD_HASH,
                                                                                                strAmount,
                                                                                                oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_PROCESING_COUNTRY,
                                                                                                "",
                                                                                                oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_CHECK_CARD_STATUS != 0,
                                                                                                oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MONERIS_CONFIGURATION.MONCON_TEST_MODE != 0, "",
                                                                                                out eErrorCode, out errorMessage, out strTransactionId, out strAuthCode, out strAuthResult, out strGatewayDate);
                                        }
                                    }

                                    if (bPayIsCorrect)
                                    {
                                        bPayIsCorrect = !MonerisPayments.IsError(eErrorCode);
                                        rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                        DateTime dtNow = DateTime.Now;
                                        DateTime dtUTCNow = DateTime.UtcNow;
                                        customersRepository.StartRecharge(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_ID,
                                                                            oUser.USR_EMAIL,
                                                                            dtUTCNow,
                                                                            dtNow,
                                                                            iQuantityToRecharge,
                                                                            dCurrencyId,
                                                                            strAuthResult,
                                                                            strUserReference,
                                                                            strTransactionId,
                                                                            "",
                                                                            strGatewayDate,
                                                                            strAuthCode,
                                                                            PaymentMeanRechargeStatus.Committed);
                                    }


                                }
                                else if ((PaymentMeanCreditCardProviderType)oUserPaymentMean.CUSPM_CREDIT_CARD_PAYMENT_PROVIDER ==
                                         PaymentMeanCreditCardProviderType.pmccpPayu)
                                {
                                    PayuPayments cardPayment = new PayuPayments();
                                    string errorMessage = "";
                                    PayuPayments.PayuErrorCode eErrorCode = PayuPayments.PayuErrorCode.InternalError;
                                    DateTime? dtTransaction = null;


                                    string strLang = ((oUser.USR_CULTURE_LANG.ToLower() ?? "").Length >= 2) ? oUser.USR_CULTURE_LANG.Substring(0, 2) : "es";


                                    bPayIsCorrect = cardPayment.AutomaticTransaction(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.PAYU_CONFIGURATION.PAYUCON_API_URL,
                                                                                        oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.PAYU_CONFIGURATION.PAYUCON_API_KEY,
                                                                                        oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.PAYU_CONFIGURATION.PAYUCON_API_LOGIN,
                                                                                        oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.PAYU_CONFIGURATION.PAYUCON_ACCOUNT_ID,
                                                                                        oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.PAYU_CONFIGURATION.PAYUCON_MERCHANT_ID,
                                                                                        oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.PAYU_CONFIGURATION.PAYUCON_SERVICE_TIMEOUT,
                                                                                        oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.PAYU_CONFIGURATION.PAYUCON_COUNTRY,
                                                                                        oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.PAYU_CONFIGURATION.PAYUCON_IS_TEST != 1 ? false : true,
                                                                                        oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                                                                        oUserPaymentMean.CUSPM_TOKEN_CARD_HASH,
                                                                                        PayuPayments.Language(strLang),
                                                                                        oUser.USR_EMAIL,
                                                                                        dQuantityToCharge,
                                                                                        sCurrencyIsoCode,
                                                                                        "PAGO IPARKME",
                                                                                        "",
                                                                                        oUserPaymentMean.CUSPM_TOKEN_CARD_SCHEMA,
                                                                                        oUserPaymentMean.CUSPM_TOKEN_CARD_NAME,
                                                                                        //oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_CARD_DOCUMENT_ID,
                                                                                        "",
                                                                                        (!String.IsNullOrEmpty(oUserPaymentMean.CUSPM_CARD_SECURITY_CODE) ? DecryptCryptResult(oUserPaymentMean.CUSPM_CARD_SECURITY_CODE, ConfigurationManager.AppSettings["CryptKey"]) : String.Empty),
                                                                                        out eErrorCode,
                                                                                        out errorMessage,
                                                                                        out strTransactionId,
                                                                                        out strUserReference,
                                                                                        out strAuthCode,
                                                                                        out dtTransaction);

                                    if (bPayIsCorrect)
                                    {
                                        strGatewayDate = dtTransaction.Value.ToString("HHmmssddMMyy");
                                    }



                                    if (bPayIsCorrect)
                                    {
                                        bPayIsCorrect = !PayuPayments.IsError(eErrorCode);
                                        rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                        DateTime dtNow = DateTime.Now;
                                        DateTime dtUTCNow = DateTime.UtcNow;
                                        customersRepository.StartRecharge(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_ID,
                                                                            oUser.USR_EMAIL,
                                                                            dtUTCNow,
                                                                            dtNow,
                                                                            iQuantityToRecharge,
                                                                            dCurrencyId,
                                                                            strAuthResult,
                                                                            strUserReference,
                                                                            strTransactionId,
                                                                            "",
                                                                            strGatewayDate,
                                                                            strAuthCode,
                                                                            PaymentMeanRechargeStatus.Committed);




                                    }




                                }



                                else if ((PaymentMeanCreditCardProviderType)oUserPaymentMean.CUSPM_CREDIT_CARD_PAYMENT_PROVIDER ==
                                         PaymentMeanCreditCardProviderType.pmccpTransbank)
                                {
                                    TransBankPayments cardPayment = new TransBankPayments();
                                    string errorMessage = "";
                                    TransBankPayments.TransBankErrorCode eErrorCode = TransBankPayments.TransBankErrorCode.InternalError;

                                    NumberFormatInfo provider = new NumberFormatInfo();
                                    string strAmount = dQuantityToCharge.ToString("#" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurrencyIsoCode), provider);

                                    strUserReference = TransBankPayments.UserReference();
                                    bPayIsCorrect = cardPayment.AutomaticTransaction(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.TRANSBANK_CONFIGURATION.TRBACON_ENVIRONMENT,
                                                                                    oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.TRANSBANK_CONFIGURATION.TRBACON_COMMERCECODE,
                                                                                    oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.TRANSBANK_CONFIGURATION.TRBACON_PUBLICCERT_FILE,
                                                                                    oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.TRANSBANK_CONFIGURATION.TRBACON_WEBPAYCERT_FILE,
                                                                                    oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.TRANSBANK_CONFIGURATION.TRBACON_PASSWORD,
                                                                                    oUser.USR_EMAIL,
                                                                                    oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                                                                    strUserReference,
                                                                                    strAmount,
                                                                                    out eErrorCode,
                                                                                    out errorMessage,
                                                                                    out strTransactionId,
                                                                                    out strAuthCode,
                                                                                    out strGatewayDate);


                                    if (bPayIsCorrect)
                                    {
                                        bPayIsCorrect = !TransBankPayments.IsError(eErrorCode);
                                        rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                        DateTime dtNow = DateTime.Now;
                                        DateTime dtUTCNow = DateTime.UtcNow;
                                        customersRepository.StartRecharge(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_ID,
                                                                            oUser.USR_EMAIL,
                                                                            dtUTCNow,
                                                                            dtNow,
                                                                            iQuantityToRecharge,
                                                                            dCurrencyId,
                                                                            "",
                                                                            strUserReference,
                                                                            strTransactionId,
                                                                            "",
                                                                            strGatewayDate,
                                                                            strAuthCode,
                                                                            PaymentMeanRechargeStatus.Committed);
                                    }


                                }
                                else if ((PaymentMeanCreditCardProviderType)oUserPaymentMean.CUSPM_CREDIT_CARD_PAYMENT_PROVIDER ==
                                                    PaymentMeanCreditCardProviderType.pmccpBSRedsys)
                                {
                                    string sErrorMessage = "";
                                    BSRedsysPayments.BSRedsysErrorCode eResult = BSRedsysPayments.GetErrorInfo(null, out sErrorMessage);
                                    string strCustomerId = oUserPaymentMean.CUSPM_TOKEN_CARD_HASH;

                                    int iQuantityToRechargeBSRedsys = Convert.ToInt32(dQuantityToCharge * infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurrencyIsoCode));

                                    var oCardPayments = new BSRedsysPayments();

                                    string strMerchantGroup = null;

                                    if (oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.COMMON_TOKEN_GROUP != null)
                                    {
                                        if (!string.IsNullOrEmpty(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.COMMON_TOKEN_GROUP.CTG_BS_MERCHANT_GROUP))
                                        {
                                            strMerchantGroup = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.COMMON_TOKEN_GROUP.CTG_BS_MERCHANT_GROUP;
                                        }
                                    }

                                    bool bRedsys3DSProcess = (AppUtilities.AppVersion(strAppVersion) >= _VERSION_3_7_1);

                                    if (bRedsys3DSProcess)
                                    {
                                        Redsys3DSApplyMethod e3DSApplyMethod = (Redsys3DSApplyMethod)(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_3DS_TRANSACTIONS ?? 0);

                                        switch (e3DSApplyMethod)
                                        {
                                            case Redsys3DSApplyMethod.NotApplyForAllPayments:
                                                bRedsys3DSProcess = false;
                                                break;
                                            case Redsys3DSApplyMethod.ApplyForAllPayments:
                                                bRedsys3DSProcess = true;
                                                break;
                                            case Redsys3DSApplyMethod.ApplyForPaymentsWithAmountGreaterThanMinimum:
                                                bRedsys3DSProcess = (iQuantityToRechargeBSRedsys >= (oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_3DS_TRANSACTIONS_3DS_AMOUNT ?? 0));
                                                break;
                                            default:
                                                bRedsys3DSProcess = false;
                                                break;
                                        }

                                    }


                                    if (bRedsys3DSProcess && bPaymentInPerson && (iOSType != (int)MobileOS.Web))
                                    {

                                        DateTime utcNow = DateTime.UtcNow;

                                        if (string.IsNullOrEmpty(strBSRedsys3DSTransID))
                                        {

                                            iBSRedsysNumInlineForms = 0;
                                            string strFormURL = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_FORM_URL;
                                            string strBaseURL = strFormURL.Substring(0, strFormURL.LastIndexOf("/"));
                                            string strReturnURL = strBaseURL + "/BSRedsys3DSResponse";
                                            strMD = "";
                                            string strPaReq = "";
                                            string strCreq = "";
                                            string strInlineForm = "";

                                            bPayIsCorrect = oCardPayments.StandardPayment3DSStep1(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_WS_URL,
                                                                               oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_MERCHANT_CODE,
                                                                               oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_MERCHANT_SIGNATURE,
                                                                               oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_MERCHANT_TERMINAL,
                                                                               oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_SERVICE_TIMEOUT,
                                                                               oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                                                               iQuantityToRechargeBSRedsys,
                                                                               oUserPaymentMean.CURRENCy.CUR_ISO_CODE_NUM,
                                                                               strMerchantGroup,
                                                                               oUserPaymentMean.CUSPM_TOKEN_CARD_HASH,
                                                                               strReturnURL,
                                                                               out eResult, out sErrorMessage,
                                                                               out strUserReference,
                                                                               out strTransactionId,
                                                                               out strGatewayDate,
                                                                               out strInlineForm,
                                                                               out strMD,
                                                                               out strPaReq,
                                                                               out strCreq,
                                                                               out strBSRedsysProtocolVersion,
                                                                               out strBSRedsys3DSTransID);



                                            if ((bPayIsCorrect) && (!string.IsNullOrEmpty(strInlineForm)))
                                            {
                                                decimal? dTransId = null;
                                                bPayIsCorrect = false;
                                                string strTransId = (string.IsNullOrEmpty(strMD) ? strBSRedsys3DSTransID : strMD);

                                                infraestructureRepository.AddBSRedsys3DSTransaction(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_ID, strTransId, strUserReference,
                                                    oUser.USR_EMAIL, iQuantityToRechargeBSRedsys, utcNow, strInlineForm, strBSRedsysProtocolVersion, out dTransId);


                                                string strHashString = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_GUID +
                                                    dTransId.ToString() +
                                                    strTransId +
                                                    oUser.USR_EMAIL +
                                                    utcNow.ToString("HHmmssddMMyy") +
                                                    oUser.USR_CULTURE_LANG;

                                                string strCalcHash = CalculatePaymentGatewayHash(strHashString, oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_HASH_SEED);


                                                str3DSURL = string.Format("{0}/BSRedsys3DSRequest?Guid={1}&id={2}&threeDSTransId={3}&Email={4}&UTCDate={5}&Culture={6}&Hash={7}",
                                                    strBaseURL,
                                                    oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_GUID,
                                                    dTransId.ToString(),
                                                    HttpUtility.UrlEncode(strTransId),
                                                    HttpUtility.UrlEncode(oUser.USR_EMAIL),
                                                    utcNow.ToString("HHmmssddMMyy"),
                                                    HttpUtility.UrlEncode(oUser.USR_CULTURE_LANG),
                                                    strCalcHash
                                                    );

                                                str3DSURL = XmlEscape(str3DSURL);

                                                return ResultType.Result_3DS_Validation_Needed;

                                            }

                                            bBSRedsys3DSFrictionless = true;


                                        }
                                        else if (string.IsNullOrEmpty(strBSRedsys3DSPares) && string.IsNullOrEmpty(strBSRedsys3DSCres))
                                        {
                                            infraestructureRepository.UpdateBSRedsys3DSTransaction(strBSRedsys3DSTransID, oUser.USR_EMAIL, strBSRedsys3DSPares, strBSRedsys3DSCres,
                                                utcNow, out strUserReference, out strBSRedsysProtocolVersion, out iBSRedsysNumInlineForms);
                                            string strFormURL = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_FORM_URL;
                                            string strBaseURL = strFormURL.Substring(0, strFormURL.LastIndexOf("/"));
                                            string strReturnURL = strBaseURL + "/BSRedsys3DSResponse";
                                            strMD = "";
                                            string strPaReq = "";
                                            string strCreq = "";
                                            string strInlineForm = "";


                                            bPayIsCorrect = oCardPayments.StandardPayment3DSStep2(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_WS_URL,
                                                                               oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_MERCHANT_CODE,
                                                                               oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_MERCHANT_SIGNATURE,
                                                                               oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_MERCHANT_TERMINAL,
                                                                               oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_SERVICE_TIMEOUT,
                                                                               oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                                                               iQuantityToRechargeBSRedsys,
                                                                               oUserPaymentMean.CURRENCy.CUR_ISO_CODE_NUM,
                                                                               strMerchantGroup,
                                                                               oUserPaymentMean.CUSPM_TOKEN_CARD_HASH, strUserReference,
                                                                               strReturnURL, strBSRedsysProtocolVersion, strBSRedsys3DSTransID, "Y",
                                                                               out eResult, out sErrorMessage,
                                                                               out strTransactionId,
                                                                               out strGatewayDate,
                                                                               out strInlineForm,
                                                                               out strMD,
                                                                               out strPaReq,
                                                                               out strCreq);



                                            if ((bPayIsCorrect) && (!string.IsNullOrEmpty(strInlineForm)))
                                            {
                                                decimal? dTransId = null;
                                                bPayIsCorrect = false;

                                                infraestructureRepository.UpdateBSRedsys3DSTransaction(strBSRedsys3DSTransID, oUser.USR_EMAIL, strInlineForm, utcNow, out dTransId);


                                                string strHashString = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_GUID +
                                                    dTransId.ToString() +
                                                    strBSRedsys3DSTransID +
                                                    oUser.USR_EMAIL +
                                                    utcNow.ToString("HHmmssddMMyy") +
                                                    oUser.USR_CULTURE_LANG;

                                                string strCalcHash = CalculatePaymentGatewayHash(strHashString, oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_HASH_SEED);


                                                str3DSURL = string.Format("{0}/BSRedsys3DSRequest?Guid={1}&id={2}&threeDSTransId={3}&Email={4}&UTCDate={5}&Culture={6}&Hash={7}",
                                                    strBaseURL,
                                                    oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_GUID,
                                                    dTransId.ToString(),
                                                    HttpUtility.UrlEncode(strBSRedsys3DSTransID),
                                                    HttpUtility.UrlEncode(oUser.USR_EMAIL),
                                                    utcNow.ToString("HHmmssddMMyy"),
                                                    HttpUtility.UrlEncode(oUser.USR_CULTURE_LANG),
                                                    strCalcHash
                                                    );

                                                str3DSURL = XmlEscape(str3DSURL);

                                                return ResultType.Result_3DS_Validation_Needed;

                                            }
                                            bBSRedsys3DSFrictionless = true;



                                        }
                                        else
                                        {

                                            //((!string.IsNullOrEmpty(strBSRedsys3DSPares) || !string.IsNullOrEmpty(strBSRedsys3DSPares))&& (!string.IsNullOrEmpty(strBSRedsys3DSTransID)))

                                            infraestructureRepository.UpdateBSRedsys3DSTransaction(strBSRedsys3DSTransID, oUser.USR_EMAIL, strBSRedsys3DSPares, strBSRedsys3DSCres, utcNow, out strUserReference, out strBSRedsysProtocolVersion, out iBSRedsysNumInlineForms);

                                            string strProtocolBackup = strBSRedsysProtocolVersion;

                                            strMD = (string.IsNullOrEmpty(strBSRedsys3DSPares) ? "" : strBSRedsys3DSTransID);

                                            bPayIsCorrect = oCardPayments.StandardPayment3DSStep3(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_WS_URL,
                                                                               oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_MERCHANT_CODE,
                                                                               oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_MERCHANT_SIGNATURE,
                                                                               oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_MERCHANT_TERMINAL,
                                                                               oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_SERVICE_TIMEOUT,
                                                                               oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                                                               iQuantityToRechargeBSRedsys,
                                                                               oUserPaymentMean.CURRENCy.CUR_ISO_CODE_NUM,
                                                                               strMerchantGroup,
                                                                               oUserPaymentMean.CUSPM_TOKEN_CARD_HASH, strUserReference,
                                                                               strMD, strBSRedsys3DSPares, strBSRedsys3DSCres, ref strBSRedsysProtocolVersion,
                                                                               out eResult, out sErrorMessage,
                                                                               out strTransactionId,
                                                                               out strGatewayDate);

                                            if (strProtocolBackup != strBSRedsysProtocolVersion)
                                            {
                                                infraestructureRepository.UpdateBSRedsys3DSTransaction(strBSRedsys3DSTransID, oUser.USR_EMAIL, strBSRedsysProtocolVersion, utcNow);
                                            }

                                            strMD = "";
                                            bBSRedsys3DSFrictionless = false;

                                        }

                                    }

                                    else
                                    {

                                        bPayIsCorrect = oCardPayments.StandardPaymentNO3DS(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_WS_URL,
                                                                                  oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_MERCHANT_CODE,
                                                                                  oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_MERCHANT_SIGNATURE,
                                                                                  oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_MERCHANT_TERMINAL,
                                                                                  oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.BSREDSYS_CONFIGURATION.BSRCON_SERVICE_TIMEOUT,
                                                                                  oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                                                                  iQuantityToRechargeBSRedsys,
                                                                                  oUserPaymentMean.CURRENCy.CUR_ISO_CODE_NUM,
                                                                                  strMerchantGroup,
                                                                                  oUserPaymentMean.CUSPM_TOKEN_CARD_HASH,
                                                                                  out eResult, out sErrorMessage,
                                                                                  out strTransactionId,
                                                                                  out strUserReference,
                                                                                  out strGatewayDate);
                                    }


                                    if (bPayIsCorrect)
                                    {
                                        strAuthCode = "";
                                        strAuthResult = "succeeded";
                                        rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                        DateTime dtNow = DateTime.Now;
                                        DateTime dtUTCNow = DateTime.UtcNow;
                                        strCardScheme = oUserPaymentMean.CUSPM_TOKEN_CARD_SCHEMA;
                                        customersRepository.StartRecharge(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_ID,
                                                                                  oUser.USR_EMAIL,
                                                                                  dtUTCNow,
                                                                                  dtNow,
                                                                                  iQuantityToRecharge,
                                                                                  dCurrencyId,
                                                                                  "",
                                                                                  strUserReference,
                                                                                  strTransactionId,
                                                                                  "",
                                                                                  strGatewayDate,
                                                                                  strAuthCode,
                                                                                  PaymentMeanRechargeStatus.Committed);

                                    }
                                }
                                else if ((PaymentMeanCreditCardProviderType)oUserPaymentMean.CUSPM_CREDIT_CARD_PAYMENT_PROVIDER ==
                                                    PaymentMeanCreditCardProviderType.pmccpPaysafe)
                                {
                                    string sErrorMessage = "";

                                    int iQuantityToRechargePaysafe = Convert.ToInt32(dQuantityToCharge * infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurrencyIsoCode));

                                    var oCardPayments = new PaysafePayments();
                                    var oPaysafeConfig = new PaysafePayments.PaysafeMerchantInfo(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.PAYSAFE_CONFIGURATION.PYSCON_ACCOUNT_NUMBER,
                                                                                                 oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.PAYSAFE_CONFIGURATION.PYSCON_API_KEY,
                                                                                                 oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.PAYSAFE_CONFIGURATION.PYSCON_API_SECRET,
                                                                                                 oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.PAYSAFE_CONFIGURATION.PYSCON_ENVIRONMENT);

                                    DateTime? dtPaysafeDateTime = null;
                                    string strPAN = "";
                                    string strExpirationDateMonth = "";
                                    string strExpirationDateYear = "";

                                    bPayIsCorrect = oCardPayments.Authorize(oPaysafeConfig, oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                                                            iQuantityToRechargePaysafe, oUserPaymentMean.CUSPM_TOKEN_CARD_DOCUMENT_ID,
                                                                            out strTransactionId, out strUserReference, out dtPaysafeDateTime, out strExpirationDateYear, out strExpirationDateMonth, out strPAN, out sErrorMessage);

                                    if (bPayIsCorrect)
                                    {
                                        strAuthCode = "";
                                        strAuthResult = "succeeded";
                                        rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                        if (dtPaysafeDateTime.HasValue)
                                            strGatewayDate = dtPaysafeDateTime.Value.ToString("HHmmssddMMyy");
                                    }
                                }
                                else if ((PaymentMeanCreditCardProviderType)oUserPaymentMean.CUSPM_CREDIT_CARD_PAYMENT_PROVIDER ==
                                         PaymentMeanCreditCardProviderType.pmccpMercadoPago)
                                {
                                    MercadoPagoPayments cardPayment = new MercadoPagoPayments();
                                    string errorMessage = "";
                                    MercadoPagoPayments.MercadoPagoErrorCode eErrorCode = MercadoPagoPayments.MercadoPagoErrorCode.InternalError;

                                    NumberFormatInfo provider = new NumberFormatInfo();
                                    //string strAmount = dQuantityToCharge.ToString("#" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurrencyIsoCode), provider);
                                    //
                                    //

                                    bool bAllowAuthorizationAndCapture = MercadoPagoPayments.AllowAuthorizationAndCapture(oUserPaymentMean.CUSPM_TOKEN_CARD_SCHEMA,
                                                                                                                          oUserPaymentMean.CUSPM_TOKEN_CARD_TYPE);
                                    bool bAllowTransactionWithoutCVV = MercadoPagoPayments.AllowTransactionWithoutCVV(oUserPaymentMean.CUSPM_TOKEN_CARD_SCHEMA,
                                                                                                                      oUserPaymentMean.CUSPM_TOKEN_CARD_TYPE);

                                    bool bCapture = (eCardPaymentMode == CardPayment_Mode.Charge);

                                    Logger_AddLogMessage(string.Format("PerformPerTransactionRecharge::Error: Card Schema={0}  Card Type={1} bAllowAuthorizationAndCapture={2} bAllowTransactionWithoutCVV={3} bCapture={4}",
                                        oUserPaymentMean.CUSPM_TOKEN_CARD_SCHEMA,
                                        oUserPaymentMean.CUSPM_TOKEN_CARD_TYPE,
                                        bAllowAuthorizationAndCapture,
                                        bAllowTransactionWithoutCVV,
                                        bCapture), LogLevels.logINFO);

                                    //bool bCapture = ((!tariffBehavior.HasValue) || 
                                    //                 (!bAllowAuthorizationAndCapture)||
                                    //                 (tariffBehavior.Value == TariffBehavior.Standard) ||
                                    //                 (eCardPaymentMode != CardPayment_Mode.Authorization));


                                    if (!bPaymentInPerson && !bAllowTransactionWithoutCVV)
                                    {
                                        rtRes = ResultType.Result_Error_Recharge_Not_Possible;
                                        Logger_AddLogMessage(string.Format("PerformPerTransactionRecharge::Error: Result = {0} bPaymentInPerson={1} bAllowTransactionWithoutCVV={2}",
                                            rtRes.ToString(), bPaymentInPerson, bAllowTransactionWithoutCVV), LogLevels.logERROR);
                                    }
                                    else if (bAllowTransactionWithoutCVV)
                                    {

                                        strUserReference = MercadoPagoPayments.UserReference();

                                        bPayIsCorrect = cardPayment.AutomaticTransaction(
                                            oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MERCADOPAGO_CONFIGURATION.MEPACON_API_URL,
                                            oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MERCADOPAGO_CONFIGURATION.MEPACON_ACCESS_TOKEN,
                                            oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MERCADOPAGO_CONFIGURATION.MEPACON_SERVICE_TIMEOUT,
                                            strUserReference,
                                            dQuantityToCharge,
                                            "",
                                            oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                            oUserPaymentMean.CUSPM_TOKEN_CARD_HASH,
                                            Convert.ToInt32(oUserPaymentMean.CUSPM_TOKEN_INSTALLMENTS),
                                            bCapture,
                                            out eErrorCode,
                                            out errorMessage,
                                            out strTransactionId,
                                            out strGatewayDate);



                                    }
                                    else // if (!bAllowTransactionWithoutCVV)
                                    {
                                        if (!string.IsNullOrEmpty(strMercadoPagoToken))
                                        {
                                            strUserReference = MercadoPagoPayments.UserReference();

                                            bPayIsCorrect = cardPayment.AutomaticTransaction(
                                                    oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MERCADOPAGO_CONFIGURATION.MEPACON_ACCESS_TOKEN,
                                                    strUserReference,
                                                    dQuantityToCharge,
                                                    "",
                                                    strMercadoPagoToken,
                                                    oUserPaymentMean.CUSPM_TOKEN_CARD_HASH,
                                                    Convert.ToInt32(oUserPaymentMean.CUSPM_TOKEN_INSTALLMENTS),
                                                    bCapture,
                                                    false,
                                                    out eErrorCode,
                                                    out errorMessage,
                                                    out strTransactionId,
                                                    out strGatewayDate);

                                        }
                                        else
                                        {
                                            string strFormURL = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_FORM_URL;
                                            string strBaseURL = strFormURL.Substring(0, strFormURL.LastIndexOf("/"));
                                            string strCVVURL = strBaseURL + "/MercadoPagoCVVRequest";

                                            DateTime utcNow = DateTime.UtcNow;

                                            string strHashString = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MERCADOPAGO_CONFIGURATION.MEPACON_GUID +
                                                                                            oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE +
                                                                                            oUserPaymentMean.CUSPM_CVV_LENGTH.ToString() +
                                                                                            utcNow.ToString("HHmmssddMMyy") +
                                                                                            oUser.USR_CULTURE_LANG;

                                            string strCalcHash = CalculatePaymentGatewayHash(strHashString, oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MERCADOPAGO_CONFIGURATION.MEPACON_HASH_SEED);


                                            str3DSURL = string.Format("{0}?Guid={1}&cardId={2}&cvvLength={3}&UTCDate={4}&Culture={5}&Hash={6}",
                                                strCVVURL,
                                                oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MERCADOPAGO_CONFIGURATION.MEPACON_GUID,
                                                oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                                oUserPaymentMean.CUSPM_CVV_LENGTH.ToString(),
                                                utcNow.ToString("HHmmssddMMyy"),
                                                HttpUtility.UrlEncode(oUser.USR_CULTURE_LANG),
                                                strCalcHash
                                                );

                                            str3DSURL = XmlEscape(str3DSURL);

                                            return ResultType.Result_3DS_Validation_Needed;



                                        }
                                    }


                                    if (bPayIsCorrect)
                                    {


                                        if (bCapture)
                                        {
                                            rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                        }
                                        else
                                        {
                                            rechargeStatus = PaymentMeanRechargeStatus.Authorized;
                                        }

                                        bPayIsCorrect = !MercadoPagoPayments.IsError(eErrorCode);

                                        DateTime dtNow = DateTime.Now;
                                        DateTime dtUTCNow = DateTime.UtcNow;
                                        strCardScheme = oUserPaymentMean.CUSPM_TOKEN_CARD_SCHEMA;
                                        customersRepository.StartRecharge(oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_ID,
                                                                                  oUser.USR_EMAIL,
                                                                                  dtUTCNow,
                                                                                  dtNow,
                                                                                  iQuantityToRecharge,
                                                                                  dCurrencyId,
                                                                                  "",
                                                                                  strUserReference,
                                                                                  strTransactionId,
                                                                                  "",
                                                                                  strGatewayDate,
                                                                                  "",
                                                                                  rechargeStatus);
                                    }


                                }
                                else if ((PaymentMeanCreditCardProviderType)oUserPaymentMean.CUSPM_CREDIT_CARD_PAYMENT_PROVIDER ==
                                    PaymentMeanCreditCardProviderType.pmccpMercadoPagoPro)
                                {

                                    if (!bPaymentInPerson)
                                    {
                                        rtRes = ResultType.Result_Error_Recharge_Not_Possible;
                                        Logger_AddLogMessage(string.Format("PerformPrepayRecharge::Error: Result = {0} bPaymentInPerson={1}",
                                            rtRes.ToString(), bPaymentInPerson), LogLevels.logERROR);
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(strMPProTransactionId))
                                        {
                                            strTransactionId = strMPProTransactionId;
                                            strUserReference = strMPProReference;
                                            strGatewayDate = strMPProGatewayDate;
                                            //strMPProCardType;
                                            //strMPProDocumentType;
                                            //strMPProInstallaments;
                                            //strMPProCVVLength;
                                            strCardHash = strMPProCardHash;
                                            strCardReference = strMPProCardReference;
                                            strCardScheme = strMPProCardScheme;
                                            strMaskedCardNumber = strMPProMaskedCardNumber;
                                            strCardDocumentID = strMPProDocumentID;

                                            if ((strMPProExpMonth.Length > 0) && (strMPProExpYear.Length == 4))
                                            {
                                                dtExpirationDate = new DateTime(Convert.ToInt32(strMPProExpYear), Convert.ToInt32(strMPProExpMonth), 1).AddMonths(1).AddSeconds(-1);
                                            }
                                            bPayIsCorrect = true;

                                        }
                                        else
                                        {
                                            string strFormURL = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_FORM_URL;

                                            DateTime utcNow = DateTime.UtcNow;
                                            int iQuantityToRechargeMPPro = Convert.ToInt32(dQuantityToCharge * infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurrencyIsoCode));

                                            string strHashString = oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MERCADOPAGO_CONFIGURATION.MEPACON_GUID +
                                                 oUser.USR_EMAIL +
                                                 iQuantityToRechargeMPPro.ToString() +
                                                 sCurrencyIsoCode +
                                                 strMPProDescription +
                                                 utcNow.ToString("HHmmssddMMyy") +
                                                 oUser.USR_CULTURE_LANG;

                                            string strCalcHash = CalculatePaymentGatewayHash(strHashString, oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MERCADOPAGO_CONFIGURATION.MEPACON_HASH_SEED);


                                            str3DSURL = string.Format("{0}?Guid={1}&Email={2}&Amount={3}&CurrencyISOCODE={4}&Description={5}&UTCDate={6}&Culture={7}&Hash={8}",
                                                strFormURL,
                                                oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.MERCADOPAGO_CONFIGURATION.MEPACON_GUID,
                                                oUser.USR_EMAIL,
                                                iQuantityToRechargeMPPro.ToString(),
                                                sCurrencyIsoCode,
                                                HttpUtility.UrlEncode(strMPProDescription),
                                                utcNow.ToString("HHmmssddMMyy"),
                                                HttpUtility.UrlEncode(oUser.USR_CULTURE_LANG),
                                                strCalcHash
                                                );

                                            str3DSURL = XmlEscape(str3DSURL);

                                            return ResultType.Result_3DS_Validation_Needed;

                                        }
                                    }


                                    if (bPayIsCorrect)
                                    {
                                        rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                    }


                                }




                                if (bPayIsCorrect)
                                {

                                    if (!customersRepository.RechargeUserBalance(ref oUser,
                                                    oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG,
                                                    iOSType,
                                                    true,
                                                    iQuantityToRecharge,
                                                    iQuantityToRecharge,
                                                    dPercVAT1, dPercVAT2, iPartialVAT1, dPercFEE, iPercFEETopped, iPartialPercFEE, iFixedFEE, iPartialFixedFEE, iTotalQuantity,
                                                    //Convert.ToInt32(dQuantityToCharge * 100),
                                                    dCurrencyId,
                                                    PaymentSuscryptionType.pstPerTransaction,
                                                    rechargeStatus,
                                                    PaymentMeanRechargeCreationType.pmrctRegularRecharge,
                                                    //0,
                                                    strUserReference,
                                                    strTransactionId,
                                                    strCFTransactionID,
                                                    strGatewayDate,
                                                    strAuthCode,
                                                    strAuthResult,
                                                    strAuthResultDesc,
                                                    strCardHash,
                                                    strCardReference,
                                                    strCardScheme,
                                                    strMaskedCardNumber,
                                                    strCardName,
                                                    strCardDocumentID,
                                                    dtExpirationDate,
                                                    null,
                                                    null,
                                                    null,
                                                    false,
                                                    dLatitude,
                                                    dLongitude,
                                                    strAppVersion, strMD, strCAVV, strECI,
                                                    strBSRedsys3DSTransID,
                                                    strBSRedsysProtocolVersion,
                                                    iBSRedsysNumInlineForms,
                                                    bBSRedsys3DSFrictionless,
                                                    dSourceApp,
                                                    infraestructureRepository,
                                                    out dRechargeId))
                                    {
                                        rtRes = ResultType.Result_Error_Generic;
                                        Logger_AddLogMessage(string.Format("PerformPerTransactionRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);

                                    }
                                    else
                                    {
                                        rtRes = ResultType.Result_OK;
                                    }
                                }
                                else
                                {
                                    rtRes = ResultType.Result_Error_Recharge_Failed;
                                    Logger_AddLogMessage(string.Format("PerformPerTransactionRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);

                                }

                            }
                            else
                            {
                                rtRes = ResultType.Result_Error_CardPayment_Mode_NotApplicable;
                                Logger_AddLogMessage(string.Format("PerformPerTransactionRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                            }

                        }
                        /*else if (((PaymentMeanType)oUserPaymentMean.CUSPM_PAT_ID == PaymentMeanType.pmtPaypal) &&
                                 (oUserPaymentMean.CUSPM_AUTOMATIC_RECHARGE == 1))
                        {
                            PayPal.Services.Private.AP.PayResponse PResponse = null;

                            if (!PaypalPayments.PreapprovalPayRequest(oUserPaymentMean.CUSPM_TOKEN_PAYPAL_ID,
                                                                    oUserPaymentMean.CUSPM_TOKEN_PAYPAL_PREAPPROVAL_KEY,
                                                                    dQuantityToCharge,
                                                                    sCurrencyIsoCode, // infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(dCurrencyID)),
                                                                    "en-US",
                                                                    "http://localhost",
                                                                    "http://localhost",
                                                                    out PResponse))
                            {
                                rtRes = ResultType.Result_Error_Recharge_Failed;
                                Logger_AddLogMessage(string.Format("PerformPerTransactionRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);

                            }
                            else
                            {
                                if (PResponse.paymentExecStatus != "COMPLETED")
                                {
                                    rtRes = ResultType.Result_Error_Recharge_Failed;
                                    Logger_AddLogMessage(string.Format("PerformPerTransactionRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);

                                }
                                else
                                {
                                    PayPal.Services.Private.AP.PaymentDetailsResponse PDResponse = null;

                                    if (PaypalPayments.PreapprovalPayConfirm(PResponse.payKey,
                                                                                "en-US",
                                                                                out PDResponse))
                                    {



                                        if (!customersRepository.RechargeUserBalance(ref oUser,
                                                                                    oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG,
                                                                                    iOSType,
                                                                                    false,
                                                                                    iQuantity,
                                                                                    dPercVAT1, dPercVAT2, iPartialVAT1, dPercFEE, iPercFEETopped, iPartialPercFEE, iFixedFEE, iPartialFixedFEE, iTotalQuantity,
                                            //Convert.ToInt32(dQuantityToCharge * 100),
                                                                                    dCurrencyId,
                                                                                    PaymentSuscryptionType.pstPerTransaction,
                                                                                    PaymentMeanRechargeStatus.Committed,
                                                                                    PaymentMeanRechargeCreationType.pmrctRegularRecharge,
                                            //0,
                                                                                    null,
                                                                                    PDResponse.paymentInfoList[0].transactionId,
                                                                                    null,
                                                                                    DateTime.Now.ToUniversalTime().ToString(),
                                                                                    null,
                                                                                    null,
                                                                                    null,
                                                                                    null,
                                                                                    null,
                                                                                    null,
                                                                                    null,
                                                                                    null,
                                                                                    null,
                                                                                    null,
                                                                                    null,
                                                                                    null,
                                                                                    PResponse.payKey,
                                                                                    false,
                                                                                    dLatitude,
                                                                                    dLongitude,
                                                                                    strAppVersion,
                                                                                    infraestructureRepository,
                                                                                    out dRechargeId))
                                        {
                                            rtRes = ResultType.Result_Error_Generic;
                                            Logger_AddLogMessage(string.Format("PerformPerTransactionRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);

                                        }
                                        else
                                        {
                                            rtRes = ResultType.Result_OK;
                                        }

                                    }
                                    else
                                    {
                                        rtRes = ResultType.Result_Error_Recharge_Failed;
                                        Logger_AddLogMessage(string.Format("PerformPerTransactionRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);

                                    }
                                }
                            }
                        }*/
                        else
                        {
                            rtRes = ResultType.Result_Error_Recharge_Not_Possible;
                            Logger_AddLogMessage(string.Format("PerformPerTransactionRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                        }
                    }
                    else
                    {
                        rtRes = ResultType.Result_Error_Invalid_Payment_Mean;
                        Logger_AddLogMessage(string.Format("PerformPerTransactionRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                    }

                }
                else
                {
                    rtRes = ResultType.Result_OK;
                }
            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "PerformPerTransactionRecharge::Exception", LogLevels.logERROR);

            }

            lEllapsedTime = watch.ElapsedMilliseconds;
            watch.Stop();

            return rtRes;

        }

        private ResultType PerformAnonymousRecharge(ref SortedList parametersIn, ref USER oUser, INSTALLATION oInstallation, int iOSType, int iQuantity, decimal? dLatitude, decimal? dLongitude, string strAppVersion,                                                        
                                                    decimal dSourceApp,  out decimal? dRechargeId)
        {
            ResultType rtRes = ResultType.Result_Error_Generic;
            dRechargeId = null;

            try
            {


                decimal dPercVAT1 = 0;
                decimal dPercVAT2 = 0;
                decimal dPercFEE = 0;
                int iPercFEETopped = 0;
                int iFixedFEE = 0;
                int iPartialVAT1 = 0;
                int iPartialPercFEE = 0;
                int iPartialFixedFEE = 0;


                if (iQuantity > 0)
                {
                   
                    PaymentMeanType paymentType = PaymentMeanType.pmtDebitCreditCard;
                
                    try
                    {
                        int iPayType = Convert.ToInt32(parametersIn["paymeth"].ToString());
                        paymentType = (PaymentMeanType)iPayType;

                    }
                    catch
                    {
                        Logger_AddLogMessage(string.Format("PerformAnonymousRecharge::Invalid Payment Method"), LogLevels.logDEBUG); ;
                        return ResultType.Result_Error_Invalid_Payment_Mean;

                    }


                    switch (paymentType)
                    {


                        case PaymentMeanType.pmtDebitCreditCard:
                            {
                                PaymentMeanCreditCardProviderType CCProvider = PaymentMeanCreditCardProviderType.pmccpUndefined;

                                try
                                {
                                    int iCCProvider = Convert.ToInt32(parametersIn["ccprovider"].ToString());
                                    CCProvider = (PaymentMeanCreditCardProviderType)iCCProvider;
                                }
                                catch
                                {
                                    Logger_AddLogMessage(string.Format("PerformAnonymousRecharge::Invalid CC Provider"), LogLevels.logDEBUG); ;
                                    return ResultType.Result_Error_Invalid_Payment_Mean;
                                }

                                CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG oInsGatewayConfig = oInstallation.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG;
                                CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG oGatewayConfig = null;
                                if (paymentType == PaymentMeanType.pmtDebitCreditCard)
                                {
                                    if (oInsGatewayConfig == null)
                                    {
                                        oGatewayConfig = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                                                                                 .Where(r => r.CPTGC_ENABLED != 0 &&
                                                                                             r.CPTGC_IS_INTERNAL != 0 &&
                                                                                             r.CPTGC_INTERNAL_SOAPP_ID.HasValue &&
                                                                                             r.CPTGC_INTERNAL_SOAPP_ID == dSourceApp &&
                                                                                             r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtDebitCreditCard))
                                                                                 .FirstOrDefault();


                                        if (oGatewayConfig == null)
                                        {

                                            oGatewayConfig = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                                                            .Where(r => r.CPTGC_ENABLED != 0 &&
                                                                        r.CPTGC_IS_INTERNAL != 0 &&
                                                                        !r.CPTGC_INTERNAL_SOAPP_ID.HasValue &&
                                                                        r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtDebitCreditCard))
                                                            .FirstOrDefault();

                                        }
                                    }
                                    else
                                    {
                                        oGatewayConfig = oInsGatewayConfig;
                                    }

                                }

                                decimal? dGatewayConfigId = ((oGatewayConfig != null) ? oGatewayConfig.CPTGC_ID : (decimal?)null);


                                DateTime? dtExpDate = null;
                                string strReference = "";
                                string strAuthCode = "";
                                string strAuthResult = "";
                                string strCardHash = "";
                                string strCardReference = "";
                                string strCardScheme = "";
                                string strGatewayDate = "";
                                string strMaskedCardNumber = "";
                                string strTransactionId = "";
                                string strCFTransactionId = null;
                                string strExpMonth = "";
                                string strExpYear = "";
                                string strName = "";
                                string strDocumentID = "";
                                string strCardSecurityCode = "";
                                string strAuthResultDesc = "";
                                string strCardType = "";
                                string strDocumentType = "";
                                string strInstallaments = "";
                                string strCVVLength = "";


                                PaymentMeanRechargeStatus rechargeStatus = PaymentMeanRechargeStatus.Waiting_Commit;

                                if (CCProvider == PaymentMeanCreditCardProviderType.pmccpCreditCall)
                                {
                                    strTransactionId = parametersIn["ekashu_transaction_id"].ToString();
                                    strReference = parametersIn["ekashu_reference"].ToString();
                                    strAuthCode = parametersIn["ekashu_auth_code"].ToString();
                                    strAuthResult = parametersIn["ekashu_auth_result"].ToString();
                                    strCardHash = parametersIn["ekashu_card_hash"].ToString();
                                    strCardReference = parametersIn["ekashu_card_reference"].ToString();
                                    strCardScheme = parametersIn["ekashu_card_scheme"].ToString();
                                    strGatewayDate = parametersIn["ekashu_date_time_local_fmt"].ToString();
                                    strMaskedCardNumber = parametersIn["ekashu_masked_card_number"].ToString();
                                    strExpMonth = parametersIn["ekashu_expires_end_month"].ToString();
                                    strExpYear = parametersIn["ekashu_expires_end_year"].ToString();


                                    if ((strExpMonth.Length == 2) && (strExpYear.Length == 4))
                                    {
                                        dtExpDate = new DateTime(Convert.ToInt32(strExpYear), Convert.ToInt32(strExpMonth), 1).AddMonths(1).AddSeconds(-1);
                                    }

                                }
                                else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpIECISA)
                                {

                                    strReference = parametersIn["iecisa_CF_TicketNumber"].ToString();
                                    strAuthCode = parametersIn["iecisa_CF_AuthCode"].ToString();
                                    strAuthResult = parametersIn["iecisa_CF_Result"].ToString(); ;
                                    strCardScheme = "";
                                    strCFTransactionId = parametersIn["iecisa_CF_TransactionID"].ToString();
                                    strTransactionId = parametersIn["iecisa_TransactionID"].ToString();

                                    strCardHash = parametersIn["iecisa_CF_CardHash"].ToString();
                                    strCardReference = parametersIn["iecisa_CF_Token"].ToString();
                                    strMaskedCardNumber = parametersIn["iecisa_CF_PAN"].ToString();
                                    strGatewayDate = DateTime.ParseExact(parametersIn["iecisa_GatewayDate"].ToString(), "HHmmssddMMyyyy",
                                                            CultureInfo.InvariantCulture).ToString("ddMMyyyyHHmmss");
                                    string strExpDate = parametersIn["iecisa_CF_ExpirationDate"].ToString();

                                    if (strExpDate.Length == 4)
                                    {
                                        dtExpDate = new DateTime(Convert.ToInt32(strExpDate.Substring(2, 2)) + 2000,
                                                                    Convert.ToInt32(strExpDate.Substring(0, 2)), 1).AddMonths(1).AddSeconds(-1);
                                    }
                                    rechargeStatus = PaymentMeanRechargeStatus.Committed;


                                }
                                else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpStripe)
                                {

                                    strReference = parametersIn["stripe_transaction_id"].ToString();
                                    strAuthCode = "";
                                    strAuthResult = "succeeded";
                                    strCardHash = parametersIn["stripe_customer_id"].ToString();
                                    strCardReference = parametersIn["stripe_card_reference"].ToString();
                                    strCardScheme = parametersIn["stripe_card_scheme"].ToString();
                                    strGatewayDate = DateTime.ParseExact(parametersIn["stripe_date_time_utc"].ToString(), "HHmmssddMMyy",
                                                            CultureInfo.InvariantCulture).ToString("ddMMyyyyHHmmss");
                                    strMaskedCardNumber = parametersIn["stripe_masked_card_number"].ToString();
                                    strTransactionId = parametersIn["stripe_transaction_id"].ToString();
                                    strExpMonth = parametersIn["stripe_expires_end_month"].ToString();
                                    strExpYear = parametersIn["stripe_expires_end_year"].ToString();


                                    if ((strExpMonth.Length == 2) && (strExpYear.Length == 4))
                                    {
                                        dtExpDate = new DateTime(Convert.ToInt32(strExpYear), Convert.ToInt32(strExpMonth), 1).AddMonths(1).AddSeconds(-1);
                                    }

                                }
                                else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpMoneris)
                                {
                                    strTransactionId = parametersIn["moneris_transaction_id"].ToString();
                                    strReference = parametersIn["moneris_reference"].ToString();
                                    strAuthCode = parametersIn["moneris_auth_code"].ToString();
                                    strAuthResult = parametersIn["moneris_auth_result"].ToString();
                                    strCardHash = parametersIn["moneris_card_hash"].ToString();
                                    strCardReference = parametersIn["moneris_card_reference"].ToString();
                                    strCardScheme = parametersIn["moneris_card_scheme"].ToString();
                                    strGatewayDate = parametersIn["moneris_date_time_local_fmt"].ToString();
                                    strMaskedCardNumber = parametersIn["moneris_masked_card_number"].ToString();
                                    strExpMonth = parametersIn["moneris_expires_end_month"].ToString();
                                    strExpYear = parametersIn["moneris_expires_end_year"].ToString();


                                    if ((strExpMonth.Length == 2) && (strExpYear.Length == 2))
                                    {
                                        dtExpDate = new DateTime(Convert.ToInt32(strExpYear) + 2000, Convert.ToInt32(strExpMonth), 1).AddMonths(1).AddSeconds(-1);
                                    }
                                    rechargeStatus = PaymentMeanRechargeStatus.Committed;

                                }
                                else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpPayu)
                                {

                                    strTransactionId = parametersIn["payu_transaction_id"].ToString();
                                    strReference = parametersIn["payu_reference"].ToString();
                                    strAuthCode = parametersIn["payu_auth_code"].ToString();
                                    strCardHash = parametersIn["payu_card_hash"].ToString();
                                    strCardReference = parametersIn["payu_card_reference"].ToString();
                                    strCardScheme = parametersIn["payu_card_scheme"].ToString();
                                    strGatewayDate = parametersIn["payu_date_time_local_fmt"].ToString();
                                    strMaskedCardNumber = parametersIn["payu_masked_card_number"].ToString();
                                    if (parametersIn["payu_name"] != null)
                                        strName = parametersIn["payu_name"].ToString();
                                    if (parametersIn["payu_document_id"] != null)
                                        strDocumentID = parametersIn["payu_document_id"].ToString();
                                    if (parametersIn["payu_cvc"] != null)
                                        strCardSecurityCode = parametersIn["payu_cvc"].ToString();


                                    dtExpDate = null;
                                    rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                }
                                else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpTransbank)
                                {

                                    if (iQuantity > 0)
                                    {
                                        strTransactionId = parametersIn["transbank_transaction_id"].ToString();
                                        strReference = parametersIn["transbank_reference"].ToString();
                                        strAuthCode = parametersIn["transbank_auth_code"].ToString();
                                        strGatewayDate = parametersIn["transbank_date_time_local_fmt"].ToString();
                                    }
                                    else
                                    {
                                        strTransactionId = "";
                                        strReference = "";
                                        strAuthCode = "";
                                        strGatewayDate = "";
                                    }
                                    strAuthResult = "";
                                    strCardHash = parametersIn["transbank_card_hash"].ToString();
                                    strCardReference = parametersIn["transbank_card_reference"].ToString();
                                    strCardScheme = parametersIn["transbank_card_scheme"].ToString();
                                    strMaskedCardNumber = parametersIn["transbank_masked_card_number"].ToString();
                                    dtExpDate = null;
                                    rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                }
                                else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpBSRedsys)
                                {
                                    if (parametersIn["bsredsys_auth_code"] == null) parametersIn["bsredsys_auth_code"] = "";
                                    if (parametersIn["bsredsys_auth_result"] == null) parametersIn["bsredsys_auth_result"] = "";
                                    if (parametersIn["bsredsys_card_scheme"] == null) parametersIn["bsredsys_card_scheme"] = "";

                                    strTransactionId = parametersIn["bsredsys_transaction_id"].ToString();
                                    strReference = parametersIn["bsredsys_reference"].ToString();
                                    strAuthCode = parametersIn["bsredsys_auth_code"].ToString();
                                    strAuthResult = parametersIn["bsredsys_auth_result"].ToString();
                                    strCardHash = parametersIn["bsredsys_card_hash"].ToString();
                                    strCardReference = parametersIn["bsredsys_card_reference"].ToString();
                                    strCardScheme = parametersIn["bsredsys_card_scheme"].ToString();
                                    strGatewayDate = parametersIn["bsredsys_date_time_local_fmt"].ToString();
                                    strMaskedCardNumber = parametersIn["bsredsys_masked_card_number"].ToString();
                                    strExpMonth = parametersIn["bsredsys_expires_end_month"].ToString();
                                    strExpYear = parametersIn["bsredsys_expires_end_year"].ToString();


                                    if ((strExpMonth.Length == 2) && (strExpYear.Length == 2))
                                    {
                                        dtExpDate = new DateTime(Convert.ToInt32(strExpYear) + 2000, Convert.ToInt32(strExpMonth), 1).AddMonths(1).AddSeconds(-1);
                                    }
                                    rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                }
                                else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpPaysafe)
                                {
                                    if (parametersIn["paysafe_auth_code"] == null) parametersIn["paysafe_auth_code"] = "";
                                    if (parametersIn["paysafe_auth_result"] == null) parametersIn["paysafe_auth_result"] = "";
                                    if (parametersIn["paysafe_card_scheme"] == null) parametersIn["paysafe_card_scheme"] = "";

                                    strTransactionId = parametersIn["paysafe_transaction_id"].ToString();
                                    strReference = parametersIn["paysafe_reference"].ToString();
                                    strAuthCode = parametersIn["paysafe_auth_code"].ToString();
                                    strAuthResult = parametersIn["paysafe_auth_result"].ToString();
                                    strCardHash = parametersIn["paysafe_card_hash"].ToString();
                                    strCardReference = parametersIn["paysafe_card_reference"].ToString();
                                    strCardScheme = parametersIn["paysafe_card_scheme"].ToString();
                                    strGatewayDate = parametersIn["paysafe_date_time_local_fmt"].ToString();
                                    strMaskedCardNumber = parametersIn["paysafe_masked_card_number"].ToString();
                                    strExpMonth = parametersIn["paysafe_expires_end_month"].ToString();
                                    strExpYear = parametersIn["paysafe_expires_end_year"].ToString();
                                    if (parametersIn["paysafe_zip"] != null)
                                        strDocumentID = parametersIn["paysafe_zip"].ToString();

                                    if ((strExpMonth.Length > 0) && (strExpYear.Length == 2))
                                    {
                                        dtExpDate = new DateTime(Convert.ToInt32(strExpYear) + 2000, Convert.ToInt32(strExpMonth), 1).AddMonths(1).AddSeconds(-1);
                                    }
                                    rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                }
                                else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpMercadoPago)
                                {
                                    strTransactionId = parametersIn["mercadopago_transaction_id"].ToString();
                                    strReference = parametersIn["mercadopago_reference"].ToString();
                                    strCardHash = parametersIn["mercadopago_card_hash"].ToString();
                                    strCardReference = parametersIn["mercadopago_card_reference"].ToString();
                                    strCardScheme = parametersIn["mercadopago_card_scheme"].ToString();
                                    strGatewayDate = parametersIn["mercadopago_date_time_local_fmt"].ToString();
                                    strMaskedCardNumber = parametersIn["mercadopago_masked_card_number"].ToString();
                                    strExpMonth = parametersIn["mercadopago_expires_end_month"].ToString();
                                    strExpYear = parametersIn["mercadopago_expires_end_year"].ToString();
                                    strCardType = parametersIn["mercadopago_card_type"].ToString();
                                    strDocumentID = parametersIn["mercadopago_document_id"].ToString();
                                    strDocumentType = parametersIn["mercadopago_document_type"].ToString();
                                    strInstallaments = parametersIn["mercadopago_installaments"].ToString();
                                    strCVVLength = parametersIn["mercadopago_cvv_length"].ToString();



                                    if ((strExpMonth.Length > 0) && (strExpYear.Length == 4))
                                    {
                                        dtExpDate = new DateTime(Convert.ToInt32(strExpYear), Convert.ToInt32(strExpMonth), 1).AddMonths(1).AddSeconds(-1);
                                    }

                                    rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                }

                                decimal dCurrencyId = infraestructureRepository.GetCountryCurrency(Convert.ToInt32(oUser.COUNTRy.COU_ID));
                                if (paymentType == PaymentMeanType.pmtDebitCreditCard && oInsGatewayConfig != null)
                                {
                                    dCurrencyId = oInsGatewayConfig.CPTGC_CUR_ID;
                                }

                                if (!customersRepository.SetUserPaymentMean(ref oUser, infraestructureRepository,
                                                new CUSTOMER_PAYMENT_MEAN
                                                {
                                                    CUSPM_PAT_ID = Convert.ToInt32(paymentType),
                                                    CUSPM_PAST_ID =  (int)PaymentMeanSubType.pmstUndefined,
                                                    CUSPM_CREDIT_CARD_PAYMENT_PROVIDER = (int)CCProvider,
                                                    CUSPM_AUTOMATIC_RECHARGE = 0,
                                                    CUSPM_AMOUNT_TO_RECHARGE = (int?)null,
                                                    CUSPM_RECHARGE_WHEN_AMOUNT_IS_LESS =  (int?)null,
                                                    CUSPM_TOKEN_PAYPAL_ID = "",
                                                    CUSPM_CUR_ID = dCurrencyId,
                                                    CUSPM_VALID = 1,
                                                    CUSPM_CPTGC_ID = dGatewayConfigId,
                                                    CUSPM_TOKEN_CARD_HASH = ((CCProvider == PaymentMeanCreditCardProviderType.pmccpTransbank) ||
                                                                 (CCProvider == PaymentMeanCreditCardProviderType.pmccpPayu) ||
                                                                 (CCProvider == PaymentMeanCreditCardProviderType.pmccpMoneris) ||
                                                                 (CCProvider == PaymentMeanCreditCardProviderType.pmccpBSRedsys) ||
                                                                 (CCProvider == PaymentMeanCreditCardProviderType.pmccpMercadoPago)) ? strCardHash : null,
                                                    CUSPM_TOKEN_CARD_REFERENCE = ((CCProvider == PaymentMeanCreditCardProviderType.pmccpTransbank) ||
                                                                      (CCProvider == PaymentMeanCreditCardProviderType.pmccpPayu) ||
                                                                      (CCProvider == PaymentMeanCreditCardProviderType.pmccpMoneris) ||
                                                                      (CCProvider == PaymentMeanCreditCardProviderType.pmccpBSRedsys) ||
                                                                      (CCProvider == PaymentMeanCreditCardProviderType.pmccpMercadoPago)) ? strCardReference : null,
                                                    CUSPM_TOKEN_MASKED_CARD_NUMBER = ((CCProvider == PaymentMeanCreditCardProviderType.pmccpTransbank) ||
                                                                          (CCProvider == PaymentMeanCreditCardProviderType.pmccpPayu) ||
                                                                          (CCProvider == PaymentMeanCreditCardProviderType.pmccpMoneris) ||
                                                                          (CCProvider == PaymentMeanCreditCardProviderType.pmccpBSRedsys) ||
                                                                          (CCProvider == PaymentMeanCreditCardProviderType.pmccpMercadoPago)) ? strMaskedCardNumber : null,
                                                    CUSPM_TOKEN_CARD_SCHEMA = ((CCProvider == PaymentMeanCreditCardProviderType.pmccpTransbank) ||
                                                                   (CCProvider == PaymentMeanCreditCardProviderType.pmccpPayu) ||
                                                                   (CCProvider == PaymentMeanCreditCardProviderType.pmccpMoneris) ||
                                                                   (CCProvider == PaymentMeanCreditCardProviderType.pmccpBSRedsys) ||
                                                                   (CCProvider == PaymentMeanCreditCardProviderType.pmccpMercadoPago)) ? strCardScheme : null,
                                                    CUSPM_TOKEN_CARD_EXPIRATION_DATE = dtExpDate,
                                                    CUSPM_TOKEN_CARD_NAME = strName,
                                                    CUSPM_TOKEN_CARD_DOCUMENT_ID = strDocumentID,
                                                    CUSPM_CARD_SECURITY_CODE = (!String.IsNullOrEmpty(strCardSecurityCode) ? CalculateCryptResult(strCardSecurityCode, ConfigurationManager.AppSettings["CryptKey"]) : null),
                                                    CUSPM_LAST_SOAPP_ID = dSourceApp,
                                                    CUSPM_CREATION_SOAPP_ID = dSourceApp,
                                                    CUSPM_CVV_LENGTH = (string.IsNullOrEmpty(strCVVLength)?(int?)null:Convert.ToInt32(strCVVLength)),
                                                    CUSPM_TOKEN_CARD_TYPE = strCardType,
                                                    CUSPM_TOKEN_CARD_DOCUMENT_TYPE = strDocumentType,
                                                    CUSPM_TOKEN_INSTALLMENTS = strInstallaments,
                                                }, false))
                                {
                                    Logger_AddLogMessage(string.Format("PerformAnonymousRecharge:: Error creating Payment Mean"), LogLevels.logDEBUG); ;
                                    return ResultType.Result_Error_Generic;
                                }

                                CUSTOMER_PAYMENT_MEAN oUserPaymentMean = oUser.CUSTOMER_PAYMENT_MEAN;

                                if (!customersRepository.RechargeUserBalance(ref oUser,
                                                oUserPaymentMean.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG,
                                                iOSType,
                                                true,
                                                iQuantity,
                                                iQuantity,
                                                dPercVAT1, dPercVAT2, iPartialVAT1, dPercFEE, iPercFEETopped, iPartialPercFEE, iFixedFEE, iPartialFixedFEE, iQuantity,
                                                //Convert.ToInt32(dQuantityToCharge * 100),
                                                dCurrencyId,
                                                PaymentSuscryptionType.pstPerTransaction,
                                                rechargeStatus,
                                                PaymentMeanRechargeCreationType.pmrctRegularRecharge,
                                                //0,
                                                strReference,
                                                strTransactionId,
                                                strCFTransactionId,
                                                strGatewayDate,
                                                strAuthCode,
                                                strAuthResult,
                                                strAuthResultDesc,
                                                oUserPaymentMean.CUSPM_TOKEN_CARD_HASH,
                                                oUserPaymentMean.CUSPM_TOKEN_CARD_REFERENCE,
                                                strCardScheme,
                                                oUserPaymentMean.CUSPM_TOKEN_MASKED_CARD_NUMBER,
                                                oUserPaymentMean.CUSPM_TOKEN_CARD_NAME,
                                                oUserPaymentMean.CUSPM_TOKEN_CARD_DOCUMENT_ID,
                                                oUserPaymentMean.CUSPM_TOKEN_CARD_EXPIRATION_DATE,
                                                null,
                                                null,
                                                null,
                                                false,
                                                dLatitude,
                                                dLongitude,
                                                strAppVersion, null, null, null,
                                                null,
                                                null,
                                                null,
                                                null,
                                                dSourceApp,
                                                infraestructureRepository,
                                                out dRechargeId))
                                {
                                    rtRes = ResultType.Result_Error_Generic;
                                    Logger_AddLogMessage(string.Format("PerformAnonymousRecharge::Error creating Credit Card recharge: Result = {0}", rtRes.ToString()), LogLevels.logERROR);

                                }
                                else
                                {
                                    rtRes = ResultType.Result_OK;
                                }

                            }
                            break;


                        case PaymentMeanType.pmtPaypal:
                            {
                                string strPaypalToken = parametersIn["paypal_token"].ToString();
                                string strPaypalId = parametersIn["paypal_paymentId"].ToString();
                                string strPayerId = parametersIn["paypal_PayerID"].ToString();

                                CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG oInsPaypalConfig = oInstallation.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG3;
                                CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG oPaypalConfig = null;
                                if (oInsPaypalConfig == null)
                                {
                                    oPaypalConfig = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                                    .Where(r => r.CPTGC_ENABLED != 0 &&
                                                r.CPTGC_IS_INTERNAL != 0 &&
                                                r.CPTGC_INTERNAL_SOAPP_ID.HasValue &&
                                                r.CPTGC_INTERNAL_SOAPP_ID == dSourceApp &&
                                                r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtPaypal))
                                    .FirstOrDefault();

                                    if (oPaypalConfig == null)
                                    {

                                        oPaypalConfig = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                                          .Where(r => r.CPTGC_ENABLED != 0 &&
                                                      r.CPTGC_IS_INTERNAL != 0 &&
                                                      !r.CPTGC_INTERNAL_SOAPP_ID.HasValue &&
                                                      r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtPaypal))
                                          .FirstOrDefault();
                                    }
                                }
                                else
                                {
                                    oPaypalConfig = oInsPaypalConfig;

                                }



                                if (oPaypalConfig != null)
                                {
                                    string modePaypal = Enum.GetName(typeof(enumPayPalMode), (object)oPaypalConfig.PAYPAL_CONFIGURATION.PPCON_RESTAPI_ENVIRONMENT.Value);

                                    string strCreationTime = string.Empty;
                                    string strIntent = string.Empty;
                                    string strState = string.Empty;
                                    string strAuthCode = string.Empty;



                                    if (PaypalPayments.ExpressCheckoutPassTwo(strPaypalToken, strPaypalId, strPayerId,
                                                                              oPaypalConfig.PAYPAL_CONFIGURATION.PPCON_RESTAPI_CLIENT_ID,
                                                                              oPaypalConfig.PAYPAL_CONFIGURATION.PPCON_RESTAPI_CLIENT_SECRET,
                                                                              oPaypalConfig.PAYPAL_CONFIGURATION.PPCON_RESTAPI_URL_PREFIX,
                                                                              modePaypal,
                                                                              oPaypalConfig.PAYPAL_CONFIGURATION.PPCON_SERVICE_TIMEOUT,
                                                                              out strAuthCode,
                                                                              out strCreationTime,
                                                                              out strIntent,
                                                                              out strState))
                                    {


                                        if (!customersRepository.RechargeUserBalanceWithPaypal(ref oUser,
                                                                        iOSType,
                                                                        iQuantity,
                                                                        iQuantity,
                                                                        dPercVAT1, dPercVAT2, iPartialVAT1, dPercFEE, iPercFEETopped, iPartialPercFEE, iFixedFEE, iPartialFixedFEE, iQuantity,
                                                                        oUser.CURRENCy.CUR_ID,
                                                                        dLatitude,
                                                                        dLongitude,
                                                                        strAppVersion,
                                                                        PaymentMeanRechargeCreationType.pmrctRegularRecharge,
                                                                        strPaypalId,
                                                                        strAuthCode,
                                                                        strCreationTime,
                                                                        strIntent,
                                                                        strState, dSourceApp,
                                                                        out dRechargeId))
                                        {
                                            rtRes = ResultType.Result_Error_Generic;
                                            Logger_AddLogMessage(string.Format("PerformAnonymousRecharge:::Error creating Paypal recharge {0}", rtRes.ToString()), LogLevels.logERROR);
                                        }
                                        else
                                            rtRes = ResultType.Result_OK;

                                    }
                                    else
                                    {
                                        rtRes = ResultType.Result_Error_Recharge_Failed;

                                    }
                                }

                            }
                            break;
                    }

                }
                else
                {
                    rtRes = ResultType.Result_OK;
                }
                           
                      

            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "PerformAnonymousRecharge::Exception", LogLevels.logERROR);

            }


            return rtRes;

        }


        private ResultType StartSession(ref USER oUser, decimal dInsId, SortedList parametersIn, out string strSessionID, int? iUTCOffset, string strCulture)
        {
            ResultType rtRes = ResultType.Result_OK;
            strSessionID = "";

            try
            {

                string strUser = parametersIn["u"].ToString();

                int? iOSID = null;
                string strWIFIMAC = "";
                string strIMEI = "";
                string strCellModel = "";
                string strOSVersion = "";
                string strPushId = "";
                string strAppVersion = "";
                bool bSessionKeepAlive = false;
                string strPhoneSerialNumber = "";
                bool bBackgroundLogin = false;

                if (parametersIn["OSID"] != null)
                {
                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                }
                if (parametersIn["WIFIMAC"] != null)
                {
                    strWIFIMAC = parametersIn["WIFIMAC"].ToString();
                }
                if (parametersIn["IMEI"] != null)
                {
                    strIMEI = parametersIn["IMEI"].ToString();
                }
                if (parametersIn["cmodel"] != null)
                {
                    strCellModel = parametersIn["cmodel"].ToString();
                }
                if (parametersIn["cosvers"] != null)
                {
                    strOSVersion = parametersIn["cosvers"].ToString();
                }
                if (parametersIn["cserialnumber"] != null)
                {
                    strPhoneSerialNumber = parametersIn["cserialnumber"].ToString();
                }
                if (parametersIn["pushID"] != null)
                {
                    strPushId = parametersIn["pushID"].ToString();
                }
                if (parametersIn["appvers"] != null)
                {
                    strAppVersion = parametersIn["appvers"].ToString();
                }
                if (parametersIn["keepsessionalive"] != null)
                {
                    bSessionKeepAlive = Convert.ToInt32(parametersIn["keepsessionalive"].ToString()) == 1;
                }
                if (parametersIn["bg_login"] != null)
                {
                    bBackgroundLogin = Convert.ToInt32(parametersIn["bg_login"].ToString()) == 1;
                }


                decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();
                if (parametersIn["appcode"] != null)
                {
                    try
                    {
                        string strAppCode = parametersIn["appcode"].ToString();
                        dSourceApp = geograficAndTariffsRepository.GetSourceApp(strAppCode);
                    }
                    catch { }
                }

                if (!customersRepository.StartSession(ref oUser, dInsId, iOSID, strPushId, strWIFIMAC, strIMEI, strCellModel,
                                                        strOSVersion, strPhoneSerialNumber, strCulture, strAppVersion, dSourceApp, bSessionKeepAlive, bBackgroundLogin, out strSessionID))
                {
                    Logger_AddLogMessage(string.Format("StartSession: Session can't be started: str= {0}", oUser.USR_USERNAME), LogLevels.logERROR);
                    rtRes = ResultType.Result_Error_Generic;
                }
                else
                {
                    if (iUTCOffset.HasValue)
                    {
                        customersRepository.SetUserUTCOffest(ref oUser, iUTCOffset.Value);
                    }

                    if (strCulture.Length > 0)
                    {
                        customersRepository.SetUserCulture(ref oUser, strCulture);
                    }

                }



            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "GetUserData::Exception", LogLevels.logERROR);

            }


            return rtRes;

        }

        private ResultType GetUserData(ref USER oUser, SortedList parametersIn)
        {
            ResultType rtRes = ResultType.Result_OK;

            try
            {

                oUser = null;
                decimal? dInsId = null;
                string strCulture = "";
                string strAppVersion = "";
                rtRes = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "GetUserData::Exception", LogLevels.logERROR);

            }


            return rtRes;

        }

        private ResultType GetUserData(ref USER oUser, SortedList parametersIn, bool bUpdateSessionTime)
        {
            ResultType rtRes = ResultType.Result_OK;

            try
            {

                oUser = null;
                decimal? dInsId = null;
                string strCulture = "";
                string strAppVersion = "";
                rtRes = GetUserData(ref oUser, parametersIn, bUpdateSessionTime, out dInsId, out strCulture, out strAppVersion);

            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "GetUserData::Exception", LogLevels.logERROR);

            }

            return rtRes;

        }


        private ResultType GetUserData(ref USER oUser, SortedList parametersIn, bool bUpdateSessionTime, out string strCulture)
        {
            ResultType rtRes = ResultType.Result_OK;
            strCulture = "";

            try
            {

                oUser = null;
                decimal? dInsId = null;
                string strAppVersion = "";
                rtRes = GetUserData(ref oUser, parametersIn, bUpdateSessionTime, out dInsId, out strCulture, out strAppVersion);

            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "GetUserData::Exception", LogLevels.logERROR);

            }

            return rtRes;

        }

        private ResultType GetUserData(ref USER oUser, SortedList parametersIn, out string strAppVersion)
        {
            ResultType rtRes = ResultType.Result_OK;
            strAppVersion = "";
            try
            {

                oUser = null;
                decimal? dInsId = null;
                string strCulture = "";
                rtRes = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "GetUserData::Exception", LogLevels.logERROR);

            }


            return rtRes;

        }

        private ResultType GetGuestUserData(ref USER oUser, string strGuid, string strPlate, string strCulture, INSTALLATION oInstallation, SortedList parametersIn, out string strAppVersion)
        {
            ResultType rtRes = ResultType.Result_OK;
            decimal dInsId = oInstallation.INS_ID;
            strAppVersion = "";
            decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();


            try
            {

                oUser = null;

                string strUser = strGuid;

                string strPushId = "";
                string strWIFIMAC = "";
                string strIMEI = "";


                if (parametersIn["WIFIMAC"] != null)
                {
                    strWIFIMAC = parametersIn["WIFIMAC"].ToString();
                }
                if (parametersIn["IMEI"] != null)
                {
                    strIMEI = parametersIn["IMEI"].ToString();
                }
                if (parametersIn["pushID"] != null)
                {
                    strPushId = parametersIn["pushID"].ToString();
                }



                if (parametersIn["appcode"] != null)
                {
                    try
                    {
                        string strAppCode = parametersIn["appcode"].ToString();
                        dSourceApp = geograficAndTariffsRepository.GetSourceApp(strAppCode);
                    }
                    catch { }
                }


                if ((string.IsNullOrEmpty(strUser))||
                    (!customersRepository.GetUserData(ref oUser, strUser)))
                {
                    Guid guid = Guid.NewGuid();
                    strUser = guid.ToString("D");
                    int iCountry = Convert.ToInt32(oInstallation.COUNTRy.COU_ID);
                    RefundBalanceType eRefundBalType = RefundBalanceType.rbtAmount;
                    string sSuscriptionType = "";
                    infraestructureRepository.GetCountryPossibleSuscriptionTypes(iCountry, out sSuscriptionType, out eRefundBalType);
                    PaymentSuscryptionType suscriptionType = PaymentSuscryptionType.pstPerTransaction;
                    int iOSID = (int)MobileOS.Web;

                    if (parametersIn["OSID"] != null)
                    {
                        try
                        {
                            iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                        }
                        catch { }
                    }

                    oUser = new USER
                    {

                        CUSTOMER = new CUSTOMER
                        {
                            CUS_TYPE = (int)CustomerType.Individual,
                            CUS_COU_ID = iCountry,
                            CUS_DOC_ID = "",
                            CUS_DOC_ID_TYPE = 0,//Undefined for now
                            CUS_NAME = "",
                            CUS_FIRST_NAME = "",
                            CUS_SURNAME1 = "",
                            CUS_SURNAME2 = "",
                            CUS_STREET = "",
                            CUS_STREE_NUMBER = 0,
                            CUS_LEVEL_NUM = null,
                            CUS_DOOR = "",
                            CUS_LETTER = "",
                            CUS_STAIR = "",
                            CUS_CITY = "",
                            CUS_STATE = "",
                            CUS_ZIPCODE = "",
                            CUS_ENABLED = 1,
                            CUS_INSERT_UTC_DATE = DateTime.UtcNow
                        },

                        USR_COU_ID = iCountry,
                        USR_EMAIL = string.Format(ConfigurationManager.AppSettings["EmailGuestFormat"].ToString(), guid.ToString("N")),
                        USR_MAIN_TEL_COUNTRY = null,
                        USR_MAIN_TEL = null,
                        USR_SECUND_TEL_COUNTRY = null,
                        USR_SECUND_TEL = "",
                        USR_USERNAME = guid.ToString("D"),
                        USR_BALANCE = 0,
                        USR_CUR_ID = infraestructureRepository.GetCountryCurrency(iCountry),
                        USR_CULTURE_LANG = strCulture,
                        USR_ENABLED = 1,
                        USR_INSERT_UTC_DATE = DateTime.UtcNow,
                        USR_SUSCRIPTION_TYPE = (int ?)suscriptionType,
                        USR_REFUND_BALANCE_TYPE = (int)eRefundBalType,
                        USR_UTC_OFFSET = 0,
                        USR_PAYMETH = (int)PaymentMeanTypeStatus.pmsWithoutPaymentMean,
                        USR_SIGNUP_OS = iOSID,
                        USR_SIGNUP_GUID = null,
                        USR_ACTIVATED = 1,
                        USR_SIGNUP_SOAPP_ID = dSourceApp,
                        USR_LAST_SOAPP_ID = dSourceApp,
                        USR_IS_ANONYMOUS = 1,
                    };

                    if (!customersRepository.AddUser(ref oUser, null))
                    {
                        rtRes = ResultType.Result_Error_Generic;
                    }
                    else
                    {

                        if (!customersRepository.AddPlateToUser(ref oUser, strPlate))
                        {
                            rtRes = ResultType.Result_Error_Generic;
                        }
                    }
                }
                else
                {
                    if (!customersRepository.IsPlateOfUser(ref oUser, strPlate))
                    {
                        if (!customersRepository.AddPlateToUser(ref oUser, strPlate))
                        {
                            rtRes = ResultType.Result_Error_Generic;
                        }
                    }
                }

                if ((rtRes == ResultType.Result_OK) && (string.IsNullOrEmpty(strAppVersion)))
                {
                    try
                    {
                        if (parametersIn["appvers"] != null)
                            strAppVersion = parametersIn["appvers"].ToString();

                    }
                    catch
                    {
                    }
                }



            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "GetUserData::Exception", LogLevels.logERROR);

            }


            return rtRes;

        }





        private ResultType GetUserData(ref USER oUser, SortedList parametersIn, out string strAppVersion, ref decimal dSourceApp)
        {
            ResultType rtRes = ResultType.Result_OK;
            strAppVersion = "";
            try
            {

                oUser = null;
                decimal? dInsId = null;
                string strCulture = "";
                rtRes = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion, ref dSourceApp);

            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "GetUserData::Exception", LogLevels.logERROR);

            }


            return rtRes;

        }

        private ResultType GetUserData(ref USER oUser, SortedList parametersIn, out decimal? dInsId, out string strAppVersion)
        {
            ResultType rtRes = ResultType.Result_OK;
            dInsId = null;
            strAppVersion = "";

            try
            {

                oUser = null;
                string strCulture = "";
                rtRes = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "GetUserData::Exception", LogLevels.logERROR);

            }
            return rtRes;

        }

        private ResultType GetUserData(ref USER oUser, SortedList parametersIn, out decimal? dInsId, out string strAppVersion, ref decimal dSourceApp)
        {
            ResultType rtRes = ResultType.Result_OK;
            dInsId = null;
            strAppVersion = "";
            dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();


            try
            {

                oUser = null;
                string strCulture = "";
                rtRes = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion, ref dSourceApp);

            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "GetUserData::Exception", LogLevels.logERROR);

            }
            return rtRes;

        }

        private ResultType GetUserData(ref USER oUser, SortedList parametersIn, bool bUpdateSessionTime, out decimal? dInsId, out string strCulture, out string strAppVersion)
        {
            ResultType rtRes = ResultType.Result_OK;
            dInsId = null;
            strAppVersion = "";
            strCulture = "";

            try
            {

                oUser = null;
                decimal dSourceApp = 1;                
                rtRes = GetUserData(ref oUser, parametersIn, bUpdateSessionTime, out dInsId, out strCulture, out strAppVersion, ref dSourceApp);

            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "GetUserData::Exception", LogLevels.logERROR);

            }
            return rtRes;

        }

        private ResultType GetUserData(ref USER oUser, SortedList parametersIn, bool bUpdateSessionTime, out decimal? dInsId, out string strCulture, out string strAppVersion, ref decimal dSourceApp)
        {
            ResultType rtRes = ResultType.Result_OK;
            dInsId = null;
            strCulture = "";
            strAppVersion = "";
            dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();
               

            try
            {

                oUser = null;

                string strUser = parametersIn["u"].ToString();
                string strSessionID = parametersIn["SessionID"].ToString();
                string strPushId = "";
                string strWIFIMAC = "";
                string strIMEI = "";


                if (parametersIn["WIFIMAC"] != null)
                {
                    strWIFIMAC = parametersIn["WIFIMAC"].ToString();
                }
                if (parametersIn["IMEI"] != null)
                {
                    strIMEI = parametersIn["IMEI"].ToString();
                }
                if (parametersIn["pushID"] != null)
                {
                    strPushId = parametersIn["pushID"].ToString();
                }



                if (parametersIn["appcode"] != null)
                {
                    try
                    {
                        string strAppCode = parametersIn["appcode"].ToString();
                        dSourceApp = geograficAndTariffsRepository.GetSourceApp(strAppCode);
                    }
                    catch { }
                }


                if (!customersRepository.GetUserData(ref oUser, strUser))
                {
                    oUser = null;
                    if (!customersRepository.GetUserDataByEmail(ref oUser, strUser))
                    {
                        Logger_AddLogMessage(string.Format("GetUserData: User not found: strUser= {0}", strUser), LogLevels.logERROR);
                        rtRes = ResultType.Result_Error_Invalid_User;
                    }

                }

                if (oUser == null)
                {
                    Logger_AddLogMessage(string.Format("GetUserData: User not found: strUser= {0}", strUser), LogLevels.logERROR);
                    rtRes = ResultType.Result_Error_Invalid_User;
                }
                else if (strSessionID.Length == 0)
                {
                    Logger_AddLogMessage(string.Format("GetUserData: Session not found: strUser= {0}, strSession ={1}", strUser, strSessionID), LogLevels.logERROR);
                    rtRes = ResultType.Result_Error_User_Not_Logged;
                }
                else if (!customersRepository.UpdateSession(ref oUser, strSessionID, strPushId, strWIFIMAC, strIMEI, bUpdateSessionTime, out dInsId, out strCulture, out strAppVersion, ref dSourceApp))
                {
                    Logger_AddLogMessage(string.Format("GetUserData: Session not found: strUser= {0}, strSession ={1}", strUser, strSessionID), LogLevels.logERROR);
                    rtRes = ResultType.Result_Error_User_Not_Logged;

                    if (ConfigurationManager.AppSettings["CheckSessionAndHash"].ToString() == "0")
                    {
                        rtRes = ResultType.Result_OK;
                    }
                }

                if ((rtRes == ResultType.Result_OK) && (string.IsNullOrEmpty(strAppVersion)))
                {



                    try
                    {
                        if (parametersIn["appvers"] != null)
                            strAppVersion = parametersIn["appvers"].ToString();

                    }
                    catch
                    {
                    }

                    Logger_AddLogMessage(string.Format("GetUserData: Push ID Registry not found (appversion=null) Getting from appvers: strUser= {0}, strSession ={1}, appvers={2}", strUser, strSessionID, strAppVersion), LogLevels.logINFO);

                }



            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "GetUserData::Exception", LogLevels.logERROR);

            }


            return rtRes;

        }


        private ResultType GetUserDataStateless(ref USER oUser, SortedList parametersIn)
        {
            ResultType rtRes = ResultType.Result_OK;

            try
            {
                oUser = null;
                string strUser = parametersIn["u"].ToString();
                if (!customersRepository.GetUserData(ref oUser, strUser))
                {
                    oUser = null;
                    if (!customersRepository.GetUserDataByEmail(ref oUser, strUser))
                    {
                        Logger_AddLogMessage(string.Format("GetUserDataStateless: User not found: strUser= {0}", strUser), LogLevels.logERROR);
                        rtRes = ResultType.Result_Error_Invalid_User;
                    }

                }

                if (oUser == null)
                {
                    Logger_AddLogMessage(string.Format("GetUserDataStateless: User not found: strUser= {0}", strUser), LogLevels.logERROR);
                    rtRes = ResultType.Result_Error_Invalid_User;
                }
            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "GetUserDataStateless::Exception", LogLevels.logERROR);

            }

            return rtRes;
        }


        private bool SendEmailAndSMS(CUSTOMER_INSCRIPTION custInsc, decimal dSourceApp)
        {
            bool bRes = true;
            try
            {

                string culture = custInsc.CUISINS_CULTURE;
                CultureInfo ci = new CultureInfo(culture);
                Thread.CurrentThread.CurrentUICulture = ci;
                Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);
                integraMobile.WS.Properties.Resource.Culture = ci;


                string url = ConfigurationManager.AppSettings["ConfirmUserData_Step2URL"];
                string urlWithParam = url + "?code=" + custInsc.CUSINS_URL_PARAMETER;
                string strEmailSubject = ResourceExtension.GetLiteral("Activation_EmailHeader");
                string strEmailBody = string.Format(ResourceExtension.GetLiteral("Activation_EmailBody"), urlWithParam, url);
                string strSMS = string.Format(ResourceExtension.GetLiteral("Activation_SMS"), custInsc.CUSINS_ACTIVATION_CODE);


                long lSenderId = infraestructureRepository.SendEmailTo(custInsc.CUSINS_EMAIL, strEmailSubject, strEmailBody, dSourceApp);

                if (lSenderId > 0)
                {
                    string strCompleteTelephone = "";
                    if (!string.IsNullOrEmpty(custInsc.CUSINS_MAIN_TEL))
                    {
                        customersRepository.InsertCustomerEmail(custInsc, custInsc.CUSINS_EMAIL, strEmailSubject, strEmailBody, lSenderId);
                        lSenderId = infraestructureRepository.SendSMSTo(Convert.ToInt32(custInsc.CUSINS_MAIN_TEL_COUNTRY), custInsc.CUSINS_MAIN_TEL, strSMS, dSourceApp, ref strCompleteTelephone);

                        if (lSenderId > 0)
                        {
                            customersRepository.InsertCustomerSMS(custInsc, strCompleteTelephone, strSMS, lSenderId);
                        }
                    }

                }


            }
            catch
            {
                bRes = false;

            }

            return bRes;
        }

        private bool GenerateXMLGroupHierarchy(IEnumerable<stZone> zones, ulong ulAppVersion, ref StringBuilder sbXmlGroupHierarchy, ref StringBuilder sbXmlGISInfo)
        {
            bool bRes = true;
            try
            {

                StringBuilder sb = new StringBuilder();
                StringBuilder sb2 = new StringBuilder();

                foreach (stZone zone in zones.OrderBy(r => r.strShowId).ThenBy(r => r.strDescription))
                {
                    if (zone.level == 0)
                    {
                        sbXmlGroupHierarchy.Append("<zone xmlns:json='http://james.newtonking.com/projects/json' json:Array='true' >");
                    }
                    else
                    {
                        sbXmlGroupHierarchy.Append("<subzone xmlns:json='http://james.newtonking.com/projects/json' json:Array='true'>");
                    }

                    sbXmlGroupHierarchy.AppendFormat("<id>{0}</id>", zone.dID);
                    sbXmlGroupHierarchy.AppendFormat("<lit>{0}</lit>", zone.dLiteralID);
                    sbXmlGroupHierarchy.AppendFormat("<desc>{0}</desc>", zone.strDescription.Trim());
                    sbXmlGroupHierarchy.AppendFormat("<type>{0}</type>", (int)zone.GroupType);
                    sbXmlGroupHierarchy.AppendFormat("<allowbypassmap>{0}</allowbypassmap>", zone.allowByPassMap ? 1 : 0);



                    if (string.IsNullOrEmpty(zone.strShowId))
                    {
                        sbXmlGroupHierarchy.AppendFormat("<numdesc></numdesc>");
                    }
                    else
                    {
                        sbXmlGroupHierarchy.AppendFormat("<numdesc>{0}</numdesc>", zone.strShowId.Trim());
                    }

                    if (string.IsNullOrEmpty(zone.strColour))
                    {
                        sbXmlGroupHierarchy.AppendFormat("<colour></colour>");
                    }
                    else
                    {
                        sbXmlGroupHierarchy.AppendFormat("<colour>{0}</colour>", zone.strColour.Trim());
                    }

                    if (string.IsNullOrEmpty(zone.message))
                    {
                        sbXmlGroupHierarchy.AppendFormat("<message></message>");
                    }
                    else
                    {
                        XmlDocument doc = JsonConvert.DeserializeXmlNode(zone.message);
                        sbXmlGroupHierarchy.AppendFormat("<message>{0}</message>", doc.InnerXml.Trim());
                    }

                    if (zone.GroupType == GroupType.OffStreet)
                    {
                        sbXmlGroupHierarchy.AppendFormat("<occupancy>{0}</occupancy>", zone.Occupancy);
                        if (zone.level == 0) sbXmlGroupHierarchy.AppendFormat("<offparking_type>{0}</offparking_type>", zone.ParkingType);
                    }

                    if (zone.permitMaxMonths.HasValue)
                        sbXmlGroupHierarchy.AppendFormat("<permitmaxmonths>{0}</permitmaxmonths>", zone.permitMaxMonths.Value);

                    sbXmlGroupHierarchy.AppendFormat("<permitmonthmaxbuyday>{0}</permitmonthmaxbuyday>", zone.permitMaxBuyDay.HasValue ? zone.permitMaxBuyDay.Value.ToString() : "");

                    sbXmlGISInfo.AppendFormat("<zone xmlns:json='http://james.newtonking.com/projects/json' json:Array='true' id=\"{0}\" centerLat=\"{1}\" centerLon=\"{2}\">",
                        zone.dID, zone.center.dLatitude.ToString(CultureInfo.InvariantCulture), zone.center.dLongitude.ToString(CultureInfo.InvariantCulture));

                    if (zone.GPSpolygons.Count() > 0)
                    {
                        foreach (stGPSPoint gpsPoint in ((List<stGPSPoint>)((List<stGPSPolygon>)zone.GPSpolygons).First().GPSpolygon))
                        {
                            sbXmlGISInfo.AppendFormat("<pos json:Array='true' ord=\"{0}\" lat=\"{1}\" lon=\"{2}\" />",
                                gpsPoint.order,
                                gpsPoint.dLatitude.ToString(CultureInfo.InvariantCulture),
                                gpsPoint.dLongitude.ToString(CultureInfo.InvariantCulture));

                        }
                    }


                    sbXmlGISInfo.Append("</zone>");


                    if (zone.subzones.Count() > 0)
                    {
                        if (!GenerateXMLGroupHierarchy(zone.subzones, ulAppVersion, ref  sbXmlGroupHierarchy, ref  sbXmlGISInfo))
                        {
                            bRes = false;
                            break;
                        }

                    }

                    if (zone.level == 0)
                    {
                        sbXmlGroupHierarchy.Append("</zone>");
                    }
                    else
                    {
                        sbXmlGroupHierarchy.Append("</subzone>");
                    }


                }


            }
            catch (Exception e)
            {
                bRes = false;
                Logger_AddLogException(e, string.Format("GenerateXMLGroupHierarchy::Error: "), LogLevels.logERROR);


            }

            return bRes;

        }

        private bool GenerateXMLTariffs(IEnumerable<stTariff> tariffs, List<LiteralTariffLanguage> oListLiteralsTariffByLanguage, ulong ulAppVersion, /*bool bServicePlateDUM, bool bServicePlatePMR, */TypeTypeServicesEnum typeTypeServicesEnum, ref string strXmlTariff)
        {
            bool bRes = true;
            StringBuilder sb = new StringBuilder();
            strXmlTariff = "";
            //IF   --> A partir de la versión 3.3 se va a mostrar los polígonos que ya existen asociados a tarifas 
            //         (tariffs_in_groups_geometry) dentro de zonas en la pantalla de mapa de manera selectiva.
            //ELSE --> En caso contrario se sigue haciendo como antes

            if (ulAppVersion >= _VERSION_3_3)
            {
                try
                {
                    foreach (stTariff tariff in tariffs.OrderBy(r => r.strDescription))
                    {
                        if (tariff.zones.Count() > 0)
                        {
                            sb.Append("<ad json:Array='true'>");

                            sb.AppendFormat("<id>{0}</id>", tariff.dID);
                            sb.AppendFormat("<lit>{0}</lit>", tariff.dLiteralID);
                            sb.AppendFormat("<desc>{0}</desc>", tariff.strDescription);
                            if (oListLiteralsTariffByLanguage != null && oListLiteralsTariffByLanguage.Count > 0)
                            {
                                List<LiteralTariffLanguage> oFil = oListLiteralsTariffByLanguage.Where(x => x.tarid.Equals(tariff.dID)).ToList();
                                if (oFil.Count > 0)
                                {
                                    //First element
                                    int iIndex = 1;
                                    //LiteralTariffLanguage oLTL1= new LiteralTariffLanguage();
                                    List<LiteralTariffLanguage> oLTL1 = oFil.Where(x => x.litid.Equals(tariff.dLiteralID)).ToList();
                                    if (oLTL1.Count > 0)
                                    {
                                        sb.AppendFormat("<lit" + iIndex + ">{0}</lit" + iIndex + ">", oLTL1[0].litdescription);
                                    }
                                    else
                                    {
                                        sb.AppendFormat("<lit" + iIndex + ">{0}</lit" + iIndex + ">", tariff.strDescription);
                                    }

                                    iIndex++;

                                    //rest of element
                                    foreach (LiteralTariffLanguage oLTL in oFil.Where(x => !x.litid.Equals(tariff.dLiteralID)).ToList())
                                    {
                                        sb.AppendFormat("<lit" + iIndex + ">{0}</lit" + iIndex + ">", oLTL.litdescription);
                                        iIndex++;
                                    }
                                    if (oFil.Count < 9)
                                    {
                                        for (int iIndex2 = iIndex; iIndex2 < 10; iIndex2++)
                                        {
                                            sb.AppendFormat("<lit" + iIndex2 + ">{0}</lit" + iIndex2 + ">", string.Empty);
                                        }
                                    }
                                }
                            }
                            sb.AppendFormat("<sel>{0}</sel>", tariff.bUserSelectable ? 1 : 0);
                            sb.AppendFormat("<type>{0}</type>", (int)tariff.tariffType);
                            sb.AppendFormat("<maxplates>{0}</maxplates>", tariff.maxPlates);
                            sb.AppendFormat("<behavior>{0}</behavior>", (int)tariff.tariffBehavior);
                            sb.AppendFormat("<cardPayMode>{0}</cardPayMode>", (int)tariff.tarCardPaymentMode);
                            sb.AppendFormat("<shopkeeperbehavior>{0}</shopkeeperbehavior>", (int)tariff.tariffShopkeeperBehavior);
                            sb.AppendFormat("<permitmaxbuyonce>{0}</permitmaxbuyonce>", tariff.permitMaxNum);
                            //*******************************************************************************************
                            //A Partir de la versión 3.4 Se agrega información del servicio en caso de que este asociado
                            //*******************************************************************************************
                            if (ulAppVersion >= _VERSION_3_4)
                            {
                                bool showService = false;
                                if (tariff.tariffServiceType.HasValue) /*&&
                                        ((tariff.tariffTypeOfServiceType.HasValue && tariff.tariffTypeOfServiceType.Value == (int)TypeTypeServicesEnum.DUM && bServicePlateDUM)
                                        ||
                                        (tariff.tariffTypeOfServiceType.HasValue && tariff.tariffTypeOfServiceType.Value == (int)TypeTypeServicesEnum.PMR && bServicePlatePMR))
                                        )
                                    */
                                {
                                    showService = true;
                                }

                                sb.AppendFormat("<TariffAutoStart>{0}</TariffAutoStart>", tariff.tariffAutoStart.HasValue ? tariff.tariffAutoStart : 0); ;
                                sb.AppendFormat("<RestartTariff>{0}</RestartTariff>", tariff.tariffRestartTariff.HasValue ? tariff.tariffRestartTariff.Value : 0);
                                sb.AppendFormat("<IdServiceType>{0}</IdServiceType>", showService ? (tariff.tariffServiceType.HasValue ? Convert.ToString(tariff.tariffServiceType.Value) : string.Empty) : string.Empty);
                                sb.AppendFormat("<TypeOfServiceType>{0}</TypeOfServiceType>", showService ? (tariff.tariffTypeOfServiceType.HasValue ? Convert.ToString(tariff.tariffTypeOfServiceType.Value) : string.Empty) : string.Empty);
                                sb.AppendFormat("<EndParkingLiteral>{0}</EndParkingLiteral>", tariff.tarSerLitEndParking);
                                sb.AppendFormat("<UnderWheelLiteral>{0}</UnderWheelLiteral>", tariff.tarSerLitUnderWheel);
                                sb.AppendFormat("<ButtonStopLiteral>{0}</ButtonStopLiteral>", tariff.tarSerLitButtonStop);
                                sb.AppendFormat("<ButtonEndParkingLiteral>{0}</ButtonEndParkingLiteral>", tariff.tarSerLitButtonEndParking);
                            }


                            //*********************************************************************************
                            //*********************************************************************************
                            //*********************************************************************************
                            sb.Append("<szs xmlns:json='http://james.newtonking.com/projects/json'>");
                            foreach (decimal zone in tariff.zones)
                            {

                                sb.Append("<sz json:Array='true'>");
                                sb.AppendFormat("<id>{0}</id>", zone);
                                if (tariff.polygonShow == 1)
                                {
                                    foreach (stTariffZone zone2 in tariff.tariffZones.OrderBy(r => r.dID))
                                    {
                                        if (zone2.dID.Equals(zone) && zone2.GPSpolygons.Count() > 0)
                                        {
                                            sb.AppendFormat("<colour>{0}</colour>", tariff.polygonColour);
                                            sb.AppendFormat("<Z>{0}</Z>", tariff.polygonZ);
                                            sb.AppendFormat("<map_description>{0}</map_description>", tariff.polygonMapDescription);

                                            sb.Append("<polygons xmlns:json='http://james.newtonking.com/projects/json'>");
                                            foreach (stGPSPolygon gpsPolygon in zone2.GPSpolygons.OrderBy(r => r.iPolNumber))
                                            {
                                                sb.AppendFormat("<polygon json:Array='true' xmlns:json='http://james.newtonking.com/projects/json' num=\"{0}\">", gpsPolygon.iPolNumber);
                                                foreach (stGPSPoint gpsPoint in ((List<stGPSPoint>)gpsPolygon.GPSpolygon).OrderBy(r => r.order).ThenBy(r => r.dtIniApply))
                                                {
                                                    //sb.AppendFormat("<pos json:Array='true' ord=\"{0}\" lat=\"{1}\" lon=\"{2}\" iniApply=\"{3}\" endApply=\"{4}\" />",
                                                    sb.AppendFormat("<pos json:Array='true' ord=\"{0}\" lat=\"{1}\" lon=\"{2}\"/>",
                                                        gpsPoint.order,
                                                        gpsPoint.dLatitude.ToString(CultureInfo.InvariantCulture),
                                                        gpsPoint.dLongitude.ToString(CultureInfo.InvariantCulture)
                                                        //gpsPoint.dtIniApply.ToString("HHmmssddMMyy"),
                                                        //gpsPoint.dtEndApply.ToString("HHmmssddMMyy")
                                                        );

                                                }
                                                sb.Append("</polygon>");
                                            }
                                            sb.Append("</polygons>");
                                        }

                                    }
                                }
                                sb.Append("</sz>"); ;
                            }

                            sb.Append("</szs>"); ;
                            sb.Append("</ad>");
                        }

                    }

                    strXmlTariff = sb.ToString();


                }
                catch (Exception e)
                {
                    bRes = false;
                    Logger_AddLogException(e, string.Format("GenerateXMLTariffs::Error: "), LogLevels.logERROR);


                }
            }
            else
            {
                try
                {


                    foreach (stTariff tariff in tariffs.OrderBy(r => r.strDescription))
                    {
                        if (tariff.zones.Count() > 0)
                        {
                            sb.Append("<ad json:Array='true'>");

                            sb.AppendFormat("<id>{0}</id>", tariff.dID);
                            sb.AppendFormat("<lit>{0}</lit>", tariff.dLiteralID);
                            sb.AppendFormat("<desc>{0}</desc>", tariff.strDescription);
                            if (oListLiteralsTariffByLanguage != null && oListLiteralsTariffByLanguage.Count > 0)
                            {
                                List<LiteralTariffLanguage> oFil = oListLiteralsTariffByLanguage.Where(x => x.tarid.Equals(tariff.dID)).ToList();
                                if (oFil.Count > 0)
                                {
                                    //First element
                                    int iIndex = 1;
                                    //LiteralTariffLanguage oLTL1= new LiteralTariffLanguage();
                                    List<LiteralTariffLanguage> oLTL1 = oFil.Where(x => x.litid.Equals(tariff.dLiteralID)).ToList();
                                    if (oLTL1.Count > 0)
                                    {
                                        sb.AppendFormat("<lit" + iIndex + ">{0}</lit" + iIndex + ">", oLTL1[0].litdescription);
                                    }
                                    else
                                    {
                                        sb.AppendFormat("<lit" + iIndex + ">{0}</lit" + iIndex + ">", tariff.strDescription);
                                    }

                                    iIndex++;

                                    //rest of element
                                    foreach (LiteralTariffLanguage oLTL in oFil.Where(x => !x.litid.Equals(tariff.dLiteralID)).ToList())
                                    {
                                        sb.AppendFormat("<lit" + iIndex + ">{0}</lit" + iIndex + ">", oLTL.litdescription);
                                        iIndex++;
                                    }
                                    if (oFil.Count < 9)
                                    {
                                        for (int iIndex2 = iIndex; iIndex2 < 10; iIndex2++)
                                        {
                                            sb.AppendFormat("<lit" + iIndex2 + ">{0}</lit" + iIndex2 + ">", string.Empty);
                                        }
                                    }
                                }
                            }
                            sb.AppendFormat("<sel>{0}</sel>", tariff.bUserSelectable ? 1 : 0);
                            sb.AppendFormat("<type>{0}</type>", (int)tariff.tariffType);
                            sb.AppendFormat("<maxplates>{0}</maxplates>", tariff.maxPlates);
                            sb.AppendFormat("<behavior>{0}</behavior>", (int)tariff.tariffBehavior);
                            sb.AppendFormat("<cardPayMode>{0}</cardPayMode>", (int)tariff.tarCardPaymentMode);
                            sb.AppendFormat("<shopkeeperbehavior>{0}</shopkeeperbehavior>", (int)tariff.tariffShopkeeperBehavior);
                            sb.AppendFormat("<permitmaxbuyonce>{0}</permitmaxbuyonce>", tariff.permitMaxNum);

                            sb.Append("<szs xmlns:json='http://james.newtonking.com/projects/json'>");
                            foreach (decimal zone in tariff.zones)
                            {
                                sb.AppendFormat("<sz json:Array='true'>{0}</sz>", zone);
                            }

                            sb.Append("</szs>"); ;
                            sb.Append("</ad>");
                        }

                    }

                    strXmlTariff = sb.ToString();


                }
                catch (Exception e)
                {
                    bRes = false;
                    Logger_AddLogException(e, string.Format("GenerateXMLTariffs::Error: "), LogLevels.logERROR);


                }
            }

            return bRes;

        }

        private bool GenerateXMLGroupHierarchy2(IEnumerable<stZone> zones, ulong ulAppVersion, ref StringBuilder sbXmlGroupHierarchy, ref StringBuilder sbXmlGISInfo)
        {
            bool bRes = true;
            try
            {



                foreach (stZone zone in zones.OrderBy(r => r.strShowId).ThenBy(r => r.strDescription))
                {
                    if (zone.level == 0)
                    {
                        sbXmlGroupHierarchy.Append("<zone xmlns:json='http://james.newtonking.com/projects/json' json:Array='true'>");
                    }
                    else
                    {
                        sbXmlGroupHierarchy.Append("<subzone xmlns:json='http://james.newtonking.com/projects/json' json:Array='true'>");
                    }

                    sbXmlGroupHierarchy.AppendFormat("<id>{0}</id>", zone.dID);
                    sbXmlGroupHierarchy.AppendFormat("<type>{0}</type>", (int)zone.GroupType);
                    sbXmlGroupHierarchy.AppendFormat("<lit>{0}</lit>", zone.dLiteralID);
                    sbXmlGroupHierarchy.AppendFormat("<desc>{0}</desc>", zone.strDescription.Trim());
                    sbXmlGroupHierarchy.AppendFormat("<iniApply>{0}</iniApply>", zone.dtIniApply.ToString("HHmmssddMMyy"));
                    sbXmlGroupHierarchy.AppendFormat("<endApply>{0}</endApply>", zone.dtIniApply.ToString("HHmmssddMMyy"));
                    sbXmlGroupHierarchy.AppendFormat("<allowbypassmap>{0}</allowbypassmap>", zone.allowByPassMap ? 1 : 0);



                    if (string.IsNullOrEmpty(zone.strShowId))
                    {
                        sbXmlGroupHierarchy.AppendFormat("<numdesc></numdesc>");
                    }
                    else
                    {
                        sbXmlGroupHierarchy.AppendFormat("<numdesc>{0}</numdesc>", zone.strShowId.Trim());
                    }

                    if (string.IsNullOrEmpty(zone.strColour))
                    {
                        sbXmlGroupHierarchy.AppendFormat("<colour></colour>");
                    }
                    else
                    {
                        sbXmlGroupHierarchy.AppendFormat("<colour>{0}</colour>", zone.strColour.Trim());
                    }

                    if (zone.GroupType == GroupType.OffStreet)
                    {
                        sbXmlGroupHierarchy.AppendFormat("<occupancy>{0}</occupancy>", zone.Occupancy);
                        if (zone.level == 0) sbXmlGroupHierarchy.AppendFormat("<offparking_type>{0}</offparking_type>", zone.ParkingType);
                    }

                    if (zone.permitMaxMonths.HasValue)
                        sbXmlGroupHierarchy.AppendFormat("<permitmaxmonths>{0}</permitmaxmonths>", zone.permitMaxMonths.Value);

                    sbXmlGroupHierarchy.AppendFormat("<permitmonthmaxbuyday>{0}</permitmonthmaxbuyday>", zone.permitMaxBuyDay.HasValue ? zone.permitMaxBuyDay.Value.ToString() : "");

                    sbXmlGISInfo.AppendFormat("<zone xmlns:json='http://james.newtonking.com/projects/json' json:Array='true' id=\"{0}\" centerLat=\"{1}\" centerLon=\"{2}\">",
                      zone.dID, zone.center.dLatitude.ToString(CultureInfo.InvariantCulture), zone.center.dLongitude.ToString(CultureInfo.InvariantCulture));



                    foreach (stGPSPolygon gpsPolygon in zone.GPSpolygons.OrderBy(r => r.iPolNumber))
                    {
                        sbXmlGISInfo.AppendFormat("<polygon json:Array='true' xmlns:json='http://james.newtonking.com/projects/json' num=\"{0}\">", gpsPolygon.iPolNumber);
                        foreach (stGPSPoint gpsPoint in ((List<stGPSPoint>)gpsPolygon.GPSpolygon).OrderBy(r => r.order).ThenBy(r => r.dtIniApply))
                        {
                            sbXmlGISInfo.AppendFormat("<pos json:Array='true' ord=\"{0}\" lat=\"{1}\" lon=\"{2}\" iniApply=\"{3}\" endApply=\"{4}\" />",
                                gpsPoint.order,
                                gpsPoint.dLatitude.ToString(CultureInfo.InvariantCulture),
                                gpsPoint.dLongitude.ToString(CultureInfo.InvariantCulture),
                                gpsPoint.dtIniApply.ToString("HHmmssddMMyy"),
                                gpsPoint.dtEndApply.ToString("HHmmssddMMyy"));

                        }
                        sbXmlGISInfo.Append("</polygon>");
                    }

                    sbXmlGISInfo.Append("</zone>");


                    if (zone.subzones.Count() > 0)
                    {
                        if (!GenerateXMLGroupHierarchy2(zone.subzones, ulAppVersion, ref  sbXmlGroupHierarchy, ref  sbXmlGISInfo))
                        {
                            bRes = false;
                            break;
                        }

                    }

                    if (zone.level == 0)
                    {
                        sbXmlGroupHierarchy.Append("</zone>");
                    }
                    else
                    {
                        sbXmlGroupHierarchy.Append("</subzone>");
                    }


                }


            }
            catch (Exception e)
            {
                bRes = false;
                Logger_AddLogException(e, string.Format("GenerateXMLGroupHierarchy2::Error: "), LogLevels.logERROR);


            }

            return bRes;

        }

        private bool GenerateXMLTariffs2(IEnumerable<stTariff> tariffs, ulong ulAppVersion, ref string strXmlTariff)
        {
            bool bRes = true;
            //IF   --> A partir de la versión 3.3 se va a mostrar los polígonos que ya existen asociados a tarifas 
            //         (tariffs_in_groups_geometry) dentro de zonas en la pantalla de mapa de manera selectiva.
            //ELSE --> En caso contrario se sigue haciendo como antes

            if (ulAppVersion >= _VERSION_3_3)
            {
                try
                {
                    StringBuilder sb = new StringBuilder();
                    strXmlTariff = "";

                    foreach (stTariff tariff in tariffs.OrderBy(r => r.strDescription))
                    {
                        sb.Append("<ad json:Array='true'>");
                        sb.AppendFormat("<id>{0}</id>", tariff.dID);
                        sb.AppendFormat("<lit>{0}</lit>", tariff.dLiteralID);
                        sb.AppendFormat("<desc>{0}</desc>", tariff.strDescription);
                        sb.AppendFormat("<type>{0}</type>", (int)tariff.tariffType);
                        sb.AppendFormat("<maxplates>{0}</maxplates>", tariff.maxPlates);
                        sb.AppendFormat("<behavior>{0}</behavior>", (int)tariff.tariffBehavior);
                        sb.AppendFormat("<cardPayMode>{0}</cardPayMode>", (int)tariff.tarCardPaymentMode);
                        sb.AppendFormat("<shopkeeperbehavior>{0}</shopkeeperbehavior>", (int)tariff.tariffShopkeeperBehavior);
                        sb.AppendFormat("<permitmaxbuyonce>{0}</permitmaxbuyonce>", tariff.permitMaxNum);

                        sb.Append("<szs xmlns:json='http://james.newtonking.com/projects/json'>");
                        foreach (stTariffZone zone in tariff.tariffZones.OrderBy(r => r.dID))
                        {

                            sb.Append("<sz json:Array='true'>");
                            sb.AppendFormat("<id>{0}</id>", zone.dID);
                            if (tariff.polygonShow == 1)
                            {
                                sb.AppendFormat("<colour>{0}</colour>", tariff.polygonColour);
                                sb.AppendFormat("<Z>{0}</Z>", tariff.polygonZ);
                                sb.AppendFormat("<map_description>{0}</map_description>", tariff.polygonMapDescription);
                            }
                            sb.Append("<apperiods xmlns:json='http://james.newtonking.com/projects/json'>");
                            foreach (stTariffZoneApplicationPeriods appPeriods in zone.applicationPeriods.OrderBy(r => r.dtIniApply))
                            {

                                sb.Append("<apperiod json:Array='true'>");
                                sb.AppendFormat("<sel>{0}</sel>", appPeriods.bUserSelectable ? 1 : 0);
                                sb.AppendFormat("<iniApply>{0}</iniApply>", appPeriods.dtIniApply.ToString("HHmmssddMMyy"));
                                sb.AppendFormat("<endApply>{0}</endApply>", appPeriods.dtEndApply.ToString("HHmmssddMMyy"));
                                sb.Append("</apperiod>");

                            }

                            sb.Append("</apperiods>");

                            sb.Append("<polygons xmlns:json='http://james.newtonking.com/projects/json'>");
                            foreach (stGPSPolygon gpsPolygon in zone.GPSpolygons.OrderBy(r => r.iPolNumber))
                            {
                                sb.AppendFormat("<polygon json:Array='true' xmlns:json='http://james.newtonking.com/projects/json' num=\"{0}\">", gpsPolygon.iPolNumber);
                                foreach (stGPSPoint gpsPoint in ((List<stGPSPoint>)gpsPolygon.GPSpolygon).OrderBy(r => r.order).ThenBy(r => r.dtIniApply))
                                {
                                    sb.AppendFormat("<pos json:Array='true' ord=\"{0}\" lat=\"{1}\" lon=\"{2}\" iniApply=\"{3}\" endApply=\"{4}\" />",
                                        gpsPoint.order,
                                        gpsPoint.dLatitude.ToString(CultureInfo.InvariantCulture),
                                        gpsPoint.dLongitude.ToString(CultureInfo.InvariantCulture),
                                        gpsPoint.dtIniApply.ToString("HHmmssddMMyy"),
                                        gpsPoint.dtEndApply.ToString("HHmmssddMMyy"));

                                }
                                sb.Append("</polygon>");
                            }
                            sb.Append("</polygons>");
                            sb.Append("</sz>");
                        }

                        sb.Append("</szs>");
                        sb.Append("</ad>");

                    }

                    strXmlTariff = sb.ToString();


                }
                catch (Exception e)
                {
                    bRes = false;
                    Logger_AddLogException(e, string.Format("GenerateXMLTariffs2::Error: "), LogLevels.logERROR);
                }
            }
            else
            {


                try
                {
                    StringBuilder sb = new StringBuilder();
                    strXmlTariff = "";

                    foreach (stTariff tariff in tariffs.OrderBy(r => r.strDescription))
                    {
                        sb.Append("<ad json:Array='true'>");

                        sb.AppendFormat("<id>{0}</id>", tariff.dID);
                        sb.AppendFormat("<lit>{0}</lit>", tariff.dLiteralID);
                        sb.AppendFormat("<desc>{0}</desc>", tariff.strDescription);
                        sb.AppendFormat("<type>{0}</type>", (int)tariff.tariffType);
                        sb.AppendFormat("<maxplates>{0}</maxplates>", tariff.maxPlates);
                        sb.AppendFormat("<behavior>{0}</behavior>", (int)tariff.tariffBehavior);
                        sb.AppendFormat("<cardPayMode>{0}</cardPayMode>", (int)tariff.tarCardPaymentMode);
                        sb.AppendFormat("<shopkeeperbehavior>{0}</shopkeeperbehavior>", (int)tariff.tariffShopkeeperBehavior);
                        sb.AppendFormat("<permitmaxbuyonce>{0}</permitmaxbuyonce>", tariff.permitMaxNum);

                        sb.Append("<szs xmlns:json='http://james.newtonking.com/projects/json'>");
                        foreach (stTariffZone zone in tariff.tariffZones.OrderBy(r => r.dID))
                        {

                            sb.Append("<sz json:Array='true'>");

                            sb.AppendFormat("<id>{0}</id>", zone.dID);


                            sb.Append("<apperiods xmlns:json='http://james.newtonking.com/projects/json'>");
                            foreach (stTariffZoneApplicationPeriods appPeriods in zone.applicationPeriods.OrderBy(r => r.dtIniApply))
                            {

                                sb.Append("<apperiod json:Array='true'>");
                                sb.AppendFormat("<sel>{0}</sel>", appPeriods.bUserSelectable ? 1 : 0);
                                sb.AppendFormat("<iniApply>{0}</iniApply>", appPeriods.dtIniApply.ToString("HHmmssddMMyy"));
                                sb.AppendFormat("<endApply>{0}</endApply>", appPeriods.dtEndApply.ToString("HHmmssddMMyy"));
                                sb.Append("</apperiod>");

                            }

                            sb.Append("</apperiods>");

                            sb.Append("<polygons xmlns:json='http://james.newtonking.com/projects/json'>");
                            foreach (stGPSPolygon gpsPolygon in zone.GPSpolygons.OrderBy(r => r.iPolNumber))
                            {
                                sb.AppendFormat("<polygon json:Array='true' xmlns:json='http://james.newtonking.com/projects/json' num=\"{0}\">", gpsPolygon.iPolNumber);
                                foreach (stGPSPoint gpsPoint in ((List<stGPSPoint>)gpsPolygon.GPSpolygon).OrderBy(r => r.order).ThenBy(r => r.dtIniApply))
                                {
                                    sb.AppendFormat("<pos json:Array='true' ord=\"{0}\" lat=\"{1}\" lon=\"{2}\" iniApply=\"{3}\" endApply=\"{4}\" />",
                                        gpsPoint.order,
                                        gpsPoint.dLatitude.ToString(CultureInfo.InvariantCulture),
                                        gpsPoint.dLongitude.ToString(CultureInfo.InvariantCulture),
                                        gpsPoint.dtIniApply.ToString("HHmmssddMMyy"),
                                        gpsPoint.dtEndApply.ToString("HHmmssddMMyy"));

                                }
                                sb.Append("</polygon>");
                            }
                            sb.Append("</polygons>");
                            sb.Append("</sz>");
                        }

                        sb.Append("</szs>");
                        sb.Append("</ad>");

                    }

                    strXmlTariff = sb.ToString();


                }
                catch (Exception e)
                {
                    bRes = false;
                    Logger_AddLogException(e, string.Format("GenerateXMLTariffs2::Error: "), LogLevels.logERROR);
                }
            }
            return bRes;

        }

        private bool GenerateXMLVersionsLiterals(IEnumerable<stVersionsLiterals> versionsLiterals, ref string strXmlVersionLiterals)
        {
            bool bRes = true;
            try
            {
                StringBuilder sb = new StringBuilder();
                strXmlVersionLiterals = "";

                if (versionsLiterals.Count() > 0)
                {
                    foreach (stVersionsLiterals vl in versionsLiterals.OrderBy(r => r.IdVersion))
                    {
                        sb.Append("<question json:Array='true'>");
                        sb.AppendFormat("<idversion>{0}</idversion>", vl.IdVersion);
                        sb.AppendFormat("<literal>{0}</literal>", vl.strLiteral);
                        sb.AppendFormat("<mandatory>{0}</mandatory>", vl.Mandatory);
                        if (vl.liststUrlLiteral.Count > 0)
                        {
                            sb.Append("<urls xmlns:json='http://james.newtonking.com/projects/json'>");
                            foreach (stUrlLiteral sUl in vl.liststUrlLiteral)
                            {
                                sb.AppendFormat("<url json:Array='true'>{0}</url>", sUl.URL);
                            }
                            sb.Append("</urls>");
                        }
                        sb.Append("</question>"); ;
                    }
                }
                strXmlVersionLiterals = sb.ToString();
            }
            catch (Exception e)
            {
                bRes = false;
                Logger_AddLogException(e, string.Format("GenerateXMLVersionsLiterals::Error: "), LogLevels.logERROR);
            }
            return bRes;
        }

        private bool GenerateXMLQuestions(IEnumerable<stVersionsLiterals> versionsLiterals, ref string strXmlQuestions)
        {
            bool bRes = true;
            try
            {
                StringBuilder sb = new StringBuilder();
                strXmlQuestions = "";
                List<decimal> oCountryValidate = new List<decimal>();

                if (versionsLiterals.Count() > 0)
                {
                    foreach (stVersionsLiterals vl in versionsLiterals.OrderBy(r => r.countryId))
                    {
                        if (!oCountryValidate.Contains(vl.countryId))
                        {
                            sb.Append("<country json:Array='true' xmlns:json='http://james.newtonking.com/projects/json'>");
                            sb.AppendFormat("<idcountry>{0}</idcountry>", vl.countryId);

                            oCountryValidate.Add(vl.countryId);

                            List<stVersionsLiterals> lista = versionsLiterals.Where(r => r.countryId.Equals(vl.countryId)).ToList();

                            sb.Append("<questions json:Array='true' xmlns:json='http://james.newtonking.com/projects/json'>");
                            foreach (stVersionsLiterals vl2 in lista.OrderBy(x => x.IdVersion))
                            {
                                sb.Append("<question json:Array='true'>");
                                sb.AppendFormat("<idversion>{0}</idversion>", vl2.IdVersion);
                                sb.AppendFormat("<literal>{0}</literal>", vl2.strLiteral);
                                sb.AppendFormat("<mandatory>{0}</mandatory>", vl2.Mandatory);

                                if (vl2.liststUrlLiteral.Count > 0)
                                {
                                    sb.Append("<urls xmlns:json='http://james.newtonking.com/projects/json'>");
                                    foreach (stUrlLiteral sUl in vl2.liststUrlLiteral)
                                    {
                                        sb.AppendFormat("<url json:Array='true'>{0}</url>", sUl.URL);
                                    }
                                    sb.Append("</urls>");
                                }

                                sb.Append("</question>");
                            }
                            sb.Append("</questions>");
                            sb.Append("</country>"); ;
                        }
                    }
                }
                strXmlQuestions = sb.ToString();
            }
            catch (Exception e)
            {
                bRes = false;
                Logger_AddLogException(e, string.Format("GenerateXMLQuestions::Error: "), LogLevels.logERROR);
            }
            return bRes;
        }

        private bool GenerateXMLCityServiceList(INSTALLATION installation, ref StringBuilder sbXmlGenerateXMLCityServiceList, decimal lang, DateTime? dtinstDateTime)
        {
            bool bRes = true;
            try
            {
                LANGUAGE oLANGUAGE = null;
                infraestructureRepository.GetLanguage(lang, out oLANGUAGE);
                foreach (INSTALLATIONS_SERVICE installations_service in installation.INSTALLATIONS_SERVICEs.OrderBy(r => r.INSSER_ID))
                {
                    SERVICES_TYPE st = customersRepository.GetServiceType(installations_service.INSSER_SERTYP_ID, (dtinstDateTime.HasValue ? dtinstDateTime.Value : DateTime.UtcNow));
                    if (st != null)
                    {
                        String description = String.Empty;
                        if (st.SERTYP_LIT_ID.HasValue)
                        {
                            description = infraestructureRepository.GetLiteral(st.SERTYP_LIT_ID.Value, oLANGUAGE.LAN_CULTURE);
                        }
                        sbXmlGenerateXMLCityServiceList.Append("<Service xmlns:json='http://james.newtonking.com/projects/json' json:Array='true'>");

                        sbXmlGenerateXMLCityServiceList.AppendFormat("<IdServiceType>{0}</IdServiceType>", st.SERTYP_ID);
                        sbXmlGenerateXMLCityServiceList.AppendFormat("<Description>{0}</Description>", (!string.IsNullOrEmpty(description) ? description : st.SERTYP_DESCRIPTION));
                        sbXmlGenerateXMLCityServiceList.AppendFormat("<TypeOfServiceType>{0}</TypeOfServiceType>", st.SERTYP_TYPE_TYPESERVICE_ID);
                        sbXmlGenerateXMLCityServiceList.AppendFormat("<InitializationType>{0}</InitializationType>", st.SERTYP__INITIALIZATION_TYPE_ID);

                        sbXmlGenerateXMLCityServiceList.Append("</Service>");
                    }
                }
            }
            catch (Exception e)
            {
                bRes = false;
                Logger_AddLogException(e, string.Format("GenerateXMLCityServiceList::Error: "), LogLevels.logERROR);
            }
            return bRes;
        }

        bool GetUserTicks(USER oUser, INSTALLATION oInstallation, DateTime dtinstDateTime, ref SortedList parametersOut)
        {
            bool bRes = true;
            parametersOut["userMSG"] = "";

            try
            {

                int iWSTimeout = infraestructureRepository.GetRateWSTimeout(oInstallation.INS_ID);

                ThirdPartyFine oThirdPartyFine = new ThirdPartyFine();

                switch ((FineWSSignatureType)oInstallation.INS_FINE_WS_SIGNATURE_TYPE)
                {
                    case FineWSSignatureType.fst_gtechna:
                        {
                            //bRes = oThirdPartyFine.GtechnaQueryListOfFines(oUser, oInstallation, dtinstDateTime, ref parametersOut);
                        }
                        break;
                    case FineWSSignatureType.fst_standard:
                        bRes = false;
                        break;
                    case FineWSSignatureType.fst_eysa:
                        {
                            bRes = oThirdPartyFine.EysaThirdPartyQueryListOfFines(oUser, oInstallation, dtinstDateTime,iWSTimeout, ref parametersOut);
                            bRes = true;
                        }
                        break;
                    case FineWSSignatureType.fst_internal:
                        bRes = false;
                        break;
                    case FineWSSignatureType.fst_test:
                        {
                            Random rand = new Random();
                            parametersOut["userMSG"] = string.Format("<userticks xmlns:json='http://james.newtonking.com/projects/json'>" +
                                                     "<usertick json:Array='true'>" +
                                                     "<f>{0}2</f>" +
                                                     "<d>{1}</d>" +
                                                     "<lp>{2}</lp>" +
                                                     "<q>{3}</q>" +
                                                     "<df>{4}</df>" +
                                                     "<ta>{5} </ta>" +
                                                     "<dta>{6}</dta>" +
                                                     "</usertick>" +
                                                     "</userticks>",
                                                     rand.Next(100000, 999999).ToString(),
                                                     dtinstDateTime.Subtract(new TimeSpan(0, 30, 0)).ToString("HHmmssddMMyy"),
                                                     oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).First().USRP_PLATE,
                                                     300,
                                                     dtinstDateTime.Add(new TimeSpan(2, 30, 0)).ToString("HHmmssddMMyy"),
                                                     "0.5.2",
                                                     "Test Article Description");


                            bRes = true;
                        }
                        break;
                    default:
                        bRes = false;
                        break;

                }

            }
            catch (Exception e)
            {
                bRes = false;
                Logger_AddLogException(e, "GetUserTicks::Exception", LogLevels.logERROR);

            }


            return bRes;
        }

        private string CalculateGtechnaWSHash(string strMACKey, string strInput)
        {
            string strRes = "";
            int iKeyLength = 64;
            byte[] normMACKey = null;
            HMACSHA256 oMACsha256 = null;

            try
            {

                byte[] keyBytes = System.Text.Encoding.UTF8.GetBytes(strMACKey);
                normMACKey = new byte[iKeyLength];
                int iSum = 0;

                for (int i = 0; i < iKeyLength; i++)
                {
                    if (i < keyBytes.Length)
                    {
                        iSum += keyBytes[i];
                    }
                    else
                    {
                        iSum += i;
                    }
                    normMACKey[i] = Convert.ToByte((iSum * BIG_PRIME_NUMBER) % (Byte.MaxValue + 1));

                }

                oMACsha256 = new HMACSHA256(normMACKey);


                byte[] inputBytes = System.Text.Encoding.UTF8.GetBytes(strInput);
                byte[] hash = oMACsha256.ComputeHash(inputBytes); ;

                if (hash.Length >= 8)
                {
                    StringBuilder sb = new StringBuilder();
                    for (int i = hash.Length - 8; i < hash.Length; i++)
                    {
                        sb.Append(hash[i].ToString("X2"));
                    }
                    strRes = sb.ToString();
                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "CalculateWSHash::Exception", LogLevels.logERROR);
            }

            return strRes;
        }

        private string CalculateEysaWSHash(string strMACKey, string strInput)
        {
            string strRes = "";
            int iKeyLength = 64;
            byte[] normMACKey = null;
            HMACSHA256 oMACsha256 = null;

            try
            {

                byte[] keyBytes = System.Text.Encoding.UTF8.GetBytes(strMACKey);
                normMACKey = new byte[iKeyLength];
                int iSum = 0;

                for (int i = 0; i < iKeyLength; i++)
                {
                    if (i < keyBytes.Length)
                    {
                        iSum += keyBytes[i];
                    }
                    else
                    {
                        iSum += i;
                    }
                    normMACKey[i] = Convert.ToByte((iSum * BIG_PRIME_NUMBER) % (Byte.MaxValue + 1));

                }

                oMACsha256 = new HMACSHA256(normMACKey);


                byte[] inputBytes = System.Text.Encoding.UTF8.GetBytes(strInput);
                byte[] hash = oMACsha256.ComputeHash(inputBytes); ;

                if (hash.Length >= 8)
                {
                    StringBuilder sb = new StringBuilder();
                    for (int i = hash.Length - 8; i < hash.Length; i++)
                    {
                        sb.Append(hash[i].ToString("X2"));
                    }
                    strRes = sb.ToString();
                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "CalculateEysaWSHash::Exception", LogLevels.logERROR);
            }

            return strRes;
        }

        private string CalculateStandardWSHash(string strMACKey, string strInput)
        {
            string strRes = "";
            int iKeyLength = 64;
            byte[] normMACKey = null;
            HMACSHA256 oMACsha256 = null;

            try
            {

                byte[] keyBytes = System.Text.Encoding.UTF8.GetBytes(strMACKey);
                normMACKey = new byte[iKeyLength];
                int iSum = 0;

                for (int i = 0; i < iKeyLength; i++)
                {
                    if (i < keyBytes.Length)
                    {
                        iSum += keyBytes[i];
                    }
                    else
                    {
                        iSum += i;
                    }
                    normMACKey[i] = Convert.ToByte((iSum * BIG_PRIME_NUMBER) % (Byte.MaxValue + 1));

                }

                oMACsha256 = new HMACSHA256(normMACKey);


                byte[] inputBytes = System.Text.Encoding.UTF8.GetBytes(strInput);
                byte[] hash = oMACsha256.ComputeHash(inputBytes); ;

                if (hash.Length >= 8)
                {
                    StringBuilder sb = new StringBuilder();
                    for (int i = hash.Length - 8; i < hash.Length; i++)
                    {
                        sb.Append(hash[i].ToString("X2"));
                    }
                    strRes = sb.ToString();
                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "CalculateStandardWSHash::Exception", LogLevels.logERROR);
            }

            return strRes;
        }

        ResultType Convert_ResultTypeStandardParkingWS_TO_ResultType(ResultTypeStandardParkingWS oExtResultType)
        {
            ResultType rtResultType = ResultType.Result_Error_Generic;

            switch (oExtResultType)
            {
                case ResultTypeStandardParkingWS.ResultSP_OK:
                    rtResultType = ResultType.Result_OK;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_InvalidAuthenticationHash:
                    rtResultType = ResultType.Result_Error_InvalidAuthenticationHash;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_ParkingMaximumTimeUsed:
                    rtResultType = ResultType.Result_Error_ParkingMaximumTimeUsed;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_NotWaitedReentryTime:
                    rtResultType = ResultType.Result_Error_NotWaitedReentryTime;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_RefundNotPossible:
                    rtResultType = ResultType.Result_Error_RefundNotPossible;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_Fine_Number_Not_Found:
                    rtResultType = ResultType.Result_Error_Fine_Number_Not_Found;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_Fine_Type_Not_Payable:
                    rtResultType = ResultType.Result_Error_Fine_Type_Not_Payable;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_Fine_Payment_Period_Expired:
                    rtResultType = ResultType.Result_Error_Fine_Payment_Period_Expired;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_Fine_Number_Already_Paid:
                    rtResultType = ResultType.Result_Error_Fine_Number_Already_Paid;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_Generic:
                    rtResultType = ResultType.Result_Error_Generic;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_Invalid_Input_Parameter:
                    rtResultType = ResultType.Result_Error_Invalid_Input_Parameter;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_Missing_Input_Parameter:
                    rtResultType = ResultType.Result_Error_Missing_Input_Parameter;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_Invalid_City:
                    rtResultType = ResultType.Result_Error_Invalid_Input_Parameter;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_Invalid_Group:
                    rtResultType = ResultType.Result_Error_Invalid_Input_Parameter;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_Invalid_Tariff:
                    rtResultType = ResultType.Result_Error_Invalid_Input_Parameter;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_Tariff_Not_Available:
                    rtResultType = ResultType.Result_Error_Tariffs_Not_Available;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_InvalidExternalProvider:
                    rtResultType = ResultType.Result_Error_Invalid_Input_Parameter;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_OperationAlreadyExist:
                    rtResultType = ResultType.Result_OK;
                    break;
                default:
                    break;
            }


            return rtResultType;
        }

        private ResultType Convert_integraMobileExternalWSResultType_TO_ResultType(integraMobile.ExternalWS.ResultType oExtResultType)
        {
            ResultType rtResultType = ResultType.Result_Error_Generic;

            switch (oExtResultType)
            {
                case integraMobile.ExternalWS.ResultType.Result_OK:
                    rtResultType = ResultType.Result_OK;
                    break;
                case integraMobile.ExternalWS.ResultType.Result_Error_InvalidAuthenticationHash:
                    rtResultType = ResultType.Result_Error_InvalidAuthenticationHash;
                    break;
                case integraMobile.ExternalWS.ResultType.Result_Error_Invalid_Input_Parameter:
                    rtResultType = ResultType.Result_Error_Invalid_Input_Parameter;
                    break;
                case integraMobile.ExternalWS.ResultType.Result_Error_Missing_Input_Parameter:
                    rtResultType = ResultType.Result_Error_Missing_Input_Parameter;
                    break;
                case integraMobile.ExternalWS.ResultType.Result_Error_Generic:
                    rtResultType = ResultType.Result_Error_Generic;
                    break;
                case integraMobile.ExternalWS.ResultType.Result_Error_OperationAlreadyClosed:
                    rtResultType = ResultType.Result_Error_OperationAlreadyClosed;
                    break;
                case integraMobile.ExternalWS.ResultType.Result_Error_OperationEntryAlreadyExists:
                    rtResultType = ResultType.Result_Error_OperationEntryAlreadyExists;
                    break;
                case integraMobile.ExternalWS.ResultType.Result_Error_Recharge_Failed:
                    rtResultType = ResultType.Result_Error_Recharge_Failed;
                    break;
                case integraMobile.ExternalWS.ResultType.Result_Error_Recharge_Not_Possible:
                    rtResultType = ResultType.Result_Error_Recharge_Not_Possible;
                    break;
                case integraMobile.ExternalWS.ResultType.Result_Error_Invalid_Payment_Mean:
                    rtResultType = ResultType.Result_Error_Invalid_Payment_Mean;
                    break;
                case integraMobile.ExternalWS.ResultType.Result_Error_Not_Enough_Balance:
                    rtResultType = ResultType.Result_Error_Not_Enough_Balance;
                    break;
                case integraMobile.ExternalWS.ResultType.Result_Toll_is_Not_from_That_installation:
                    rtResultType = ResultType.Result_Toll_is_Not_from_That_installation;
                    break;

                default:
                    break;
            }
            return rtResultType;
        }

        private int ChangeQuantityFromCurToUserCur(int iQuantity, string strISOCode, USER oUser, out double dChangeApplied, out double dChangeFee)
        {
            int iResult = iQuantity;
            dChangeApplied = 1;
            dChangeFee = 0;


            try
            {

                if (strISOCode != infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)))
                {
                    int iFactor = infraestructureRepository.GetCurrenciesFactorDifference(strISOCode, infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)));

                    double dConvertedValue = CCurrencyConvertor.ConvertCurrency(Convert.ToDouble(iQuantity),
                                              strISOCode,
                                              infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)), out dChangeApplied);
                    if (dConvertedValue < 0)
                    {
                        Logger_AddLogMessage(string.Format("ChangeQuantityFromCurToUserCur::Error Converting {0} {1} to {2} ", iQuantity, strISOCode, infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))), LogLevels.logERROR);
                        return ((int)ResultType.Result_Error_Generic);
                    }
                    dConvertedValue = dConvertedValue * Math.Pow(10, (double)iFactor);
                    dChangeFee = Convert.ToDouble(infraestructureRepository.GetChangeFeePerc()) * dConvertedValue / 100;
                    iResult = Convert.ToInt32(dConvertedValue - dChangeFee + 0.5);
                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "ChangeQuantityFromCurToUserCur::Exception", LogLevels.logERROR);
            }

            return iResult;
        }

        private int ChangeQuantityFromInstallationCurToUserCur(int iQuantity, INSTALLATION oInstallation, USER oUser, out double dChangeApplied, out double dChangeFee)
        {
            int iResult = iQuantity;
            dChangeApplied = 1;
            dChangeFee = 0;


            try
            {

                if (oInstallation.INS_CUR_ID != oUser.USR_CUR_ID)
                {
                    int iFactor = infraestructureRepository.GetCurrenciesFactorDifference((int)oInstallation.INS_CUR_ID, (int)oUser.USR_CUR_ID);

                    double dConvertedValue = CCurrencyConvertor.ConvertCurrency(Convert.ToDouble(iQuantity),
                                              oInstallation.CURRENCy.CUR_ISO_CODE,
                                              infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)), out dChangeApplied);
                    if (dConvertedValue < 0)
                    {
                        Logger_AddLogMessage(string.Format("ChangeQuantityFromInstallationCurToUserCur::Error Converting {0} {1} to {2} ", iQuantity, oInstallation.CURRENCy.CUR_ISO_CODE, infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))), LogLevels.logERROR);
                        return ((int)ResultType.Result_Error_Generic);
                    }

                    dConvertedValue = dConvertedValue * Math.Pow(10, (double)iFactor);
                    dChangeFee = Convert.ToDouble(infraestructureRepository.GetChangeFeePerc()) * dConvertedValue / 100;
                    iResult = Convert.ToInt32(dConvertedValue - dChangeFee + 0.5);
                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "ChangeQuantityFromInstallationCurToUserCur::Exception", LogLevels.logERROR);
            }

            return iResult;
        }

        private int ChangeQuantityFromInstallationCurToUserCur(int iQuantity, INSTALLATION oInstallation, USER oUser)
        {
            int iResult = iQuantity;
            double dChangeApplied = 1;
            double dChangeFee = 0;


            try
            {

                iResult = ChangeQuantityFromInstallationCurToUserCur(iQuantity, oInstallation, oUser, out dChangeApplied, out dChangeFee);


            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "ChangeQuantityFromInstallationCurToUserCur::Exception", LogLevels.logERROR);
            }

            return iResult;
        }

        private int ChangeQuantityFromInstallationCurToUserCur(int iQuantity, double dChangeToApply, INSTALLATION oInstallation, USER oUser, out double dChangeFee)
        {
            int iResult = iQuantity;
            dChangeFee = 0;

            try
            {

                if (oInstallation.INS_CUR_ID != oUser.USR_CUR_ID)
                {
                    int iFactor = infraestructureRepository.GetCurrenciesFactorDifference((int)oInstallation.INS_CUR_ID, (int)oUser.USR_CUR_ID);

                    double dConvertedValue = Convert.ToDouble(iQuantity) * dChangeToApply;
                    dConvertedValue = dConvertedValue * Math.Pow(10, (double)iFactor);
                    dConvertedValue = Math.Round(dConvertedValue, 4);

                    dChangeFee = Convert.ToDouble(infraestructureRepository.GetChangeFeePerc()) * dConvertedValue / 100;
                    //iResult = Convert.ToInt32(dConvertedValue - dChangeFee + 0.5);
                    iResult = Convert.ToInt32(Math.Round(dConvertedValue - dChangeFee, MidpointRounding.AwayFromZero));
                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "ChangeQuantityFromInstallationCurToUserCur::Exception", LogLevels.logERROR);
            }

            return iResult;
        }

        private int ChangeQuantityFromUserCurToUserCur(int iQuantity, double dChangeToApply, USER oSrcUser, USER oDstUser, out double dChangeFee)
        {
            int iResult = iQuantity;
            dChangeFee = 0;

            try
            {

                if (oSrcUser.USR_CUR_ID != oDstUser.USR_CUR_ID)
                {
                    int iFactor = infraestructureRepository.GetCurrenciesFactorDifference((int)oSrcUser.USR_CUR_ID, (int)oDstUser.USR_CUR_ID);
                    double dConvertedValue = Convert.ToDouble(iQuantity) * dChangeToApply;
                    dConvertedValue = dConvertedValue * Math.Pow(10, (double)iFactor);
                    dConvertedValue = Math.Round(dConvertedValue, 4);

                    dChangeFee = Convert.ToDouble(infraestructureRepository.GetChangeFeePerc()) * dConvertedValue / 100;
                    //iResult = Convert.ToInt32(dConvertedValue - dChangeFee + 0.5);
                    iResult = Convert.ToInt32(Math.Round(dConvertedValue - dChangeFee, MidpointRounding.AwayFromZero));
                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "ChangeQuantityFromUserCurToUserCur::Exception", LogLevels.logERROR);
            }

            return iResult;
        }

        private double GetChangeToApplyFromInstallationCurToUserCur(INSTALLATION oInstallation, USER oUser)
        {
            double dResult = 1.0;


            try
            {

                if (oInstallation.INS_CUR_ID != oUser.USR_CUR_ID)
                {
                    dResult = CCurrencyConvertor.GetChangeToApply(oInstallation.CURRENCy.CUR_ISO_CODE,
                                              infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)));
                    if (dResult < 0)
                    {
                        Logger_AddLogMessage(string.Format("GetChangeToApplyFromInstallationCurToUserCur::Error getting change from {0} to {1} ", oInstallation.CURRENCy.CUR_ISO_CODE, infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))), LogLevels.logERROR);
                        return ((int)ResultType.Result_Error_Generic);
                    }
                }

            }
            catch (Exception e)
            {
                dResult = -1.0;
                Logger_AddLogException(e, "GetChangeToApplyFromInstallationCurToUserCur::Exception", LogLevels.logERROR);
            }

            return dResult;
        }

        private double GetChangeToApplyFromUserCurToUserCur(USER oSrcUser, USER oDstUser)
        {
            double dResult = 1.0;


            try
            {

                if (oSrcUser.USR_CUR_ID != oDstUser.USR_CUR_ID)
                {
                    dResult = CCurrencyConvertor.GetChangeToApply(oSrcUser.CURRENCy.CUR_ISO_CODE,
                                                                  oDstUser.CURRENCy.CUR_ISO_CODE);
                    if (dResult < 0)
                    {
                        Logger_AddLogMessage(string.Format("GetChangeToApplyFromUserCurToUserCur::Error getting change from {0} to {1} ", oSrcUser.CURRENCy.CUR_ISO_CODE, oDstUser.CURRENCy.CUR_ISO_CODE), LogLevels.logERROR);
                        return ((int)ResultType.Result_Error_Generic);
                    }
                }

            }
            catch (Exception e)
            {
                dResult = -1.0;
                Logger_AddLogException(e, "GetChangeToApplyFromUserCurToUserCur::Exception", LogLevels.logERROR);
            }

            return dResult;
        }

        private ResultType ChargeFinePayment(string strFineNumber, double dChangeToApply, int iQuantity, DateTime dtPaymentDate, string strPlate,
                                             string strArticleType, string strArticleDescription, INSTALLATION oInstallation,
                                             ref USER oUser, int iOSType, decimal? dLatitude, decimal? dLongitude, string strAppVersion, decimal? dGrpId,
                                             decimal dPercVAT1, decimal dPercVAT2, decimal dPercFEE, int iPercFEETopped, int iFixedFEE,
                                             int iPartialVAT1, int iPartialPercFEE, int iPartialFixedFEE, int iTotalQuantity, string strMD, string strCAVV, string strECI,
                                             string strBSRedsys3DSTransID, string strBSRedsys3DSPares, string strBSRedsys3DSCres, string strBSRedsys3DSMethodData, string strMercadoPagoToken,
                                             string strMPProTransactionId,
                                             string strMPProReference,
                                             string strMPProCardHash,
                                             string strMPProCardReference,
                                             string strMPProCardScheme,
                                             string strMPProGatewayDate,
                                             string strMPProMaskedCardNumber,
                                             string strMPProExpMonth,
                                             string strMPProExpYear,
                                             string strMPProCardType,
                                             string strMPProDocumentID,
                                             string strMPProDocumentType,
                                             string strMPProInstallaments,
                                             string strMPProCVVLength,
                                             decimal dSourceApp,ref SortedList parametersOut, out int iCurrencyChargedQuantity, out decimal dTicketPaymentID,
                                             out DateTime? dtUTCInsertionDate, out decimal? dRechargeId, out int? iBalanceAfterRecharge, out bool bRestoreBalanceInCaseOfRefund,
                                             out string str3DSURL, out long lEllapsedTime)
        {
            ResultType rtRes = ResultType.Result_OK;
            iCurrencyChargedQuantity = 0;
            double dChangeFee = 0;
            decimal dBalanceCurID = oUser.CURRENCy.CUR_ID;
            dTicketPaymentID = -1;
            dRechargeId = null;
            bRestoreBalanceInCaseOfRefund = true;
            PaymentSuscryptionType suscriptionType = PaymentSuscryptionType.pstPrepay;
            iBalanceAfterRecharge = null;
            dtUTCInsertionDate = null;
            str3DSURL = "";
            lEllapsedTime = 0;


            try
            {
                decimal dCurrencyId = oUser.USR_CUR_ID;
                PaymentSuscryptionType eSuscryptionType = (PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE;
                int iUserBalance = oUser.USR_BALANCE;
                if (oInstallation.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG != null)
                {
                    dCurrencyId = oInstallation.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_CUR_ID;
                    eSuscryptionType = PaymentSuscryptionType.pstPerTransaction;
                    iUserBalance = 0;
                }
                CUSTOMER_PAYMENT_MEAN oUserPaymentMean = customersRepository.GetUserPaymentMean(ref oUser, oInstallation);


                string strMPProDescription = geograficAndTariffsRepository.GetSourceAppDescription(dSourceApp) + " - " + oInstallation.INS_DESCRIPTION + " - " + strFineNumber;

                parametersOut["autorecharged"] = "0";
                bool bAllowNoPaymentMethod = (infraestructureRepository.GetParameterValue("AllowNoPaymentMethod") == "1");

                if (oUser.USR_CUR_ID == dCurrencyId)
                    iCurrencyChargedQuantity = ChangeQuantityFromInstallationCurToUserCur(iTotalQuantity /*iQuantity*/, dChangeToApply, oInstallation, oUser, out dChangeFee);
                else if (dCurrencyId == oInstallation.INS_CUR_ID)
                    iCurrencyChargedQuantity = iTotalQuantity;
                else
                {
                    // *** NO DEBERÍA PASAR NUNCA ***
                    iCurrencyChargedQuantity = iTotalQuantity;
                }

                if (iCurrencyChargedQuantity < 0)
                {
                    rtRes = (ResultType)iCurrencyChargedQuantity;
                    Logger_AddLogMessage(string.Format("ChargeFinePayment::Error Changing Quantity {0} ", rtRes.ToString()), LogLevels.logERROR);
                    return rtRes;
                }


                if ((iUserBalance > 0) ||
                    (eSuscryptionType == PaymentSuscryptionType.pstPrepay))
                {

                    int iNewBalance = iUserBalance - iCurrencyChargedQuantity;


                    if (iNewBalance < 0)
                    {

                        if ((oUserPaymentMean != null) &&
                        (oUserPaymentMean.CUSPM_ENABLED == 1) &&
                        (oUserPaymentMean.CUSPM_VALID == 1))
                        {


                            if ((eSuscryptionType == PaymentSuscryptionType.pstPrepay) &&
                                (oUserPaymentMean.CUSPM_AUTOMATIC_RECHARGE == 1) &&
                                (oUserPaymentMean.CUSPM_AMOUNT_TO_RECHARGE > 0))
                            {

                                int iQuantityToRecharge = oUserPaymentMean.CUSPM_AMOUNT_TO_RECHARGE.Value;
                                if (Math.Abs(iNewBalance) > oUserPaymentMean.CUSPM_AMOUNT_TO_RECHARGE.Value)
                                {
                                    iQuantityToRecharge = oUserPaymentMean.CUSPM_AMOUNT_TO_RECHARGE.Value + Math.Abs(iNewBalance);
                                }

                                rtRes = PerformPrepayRecharge(ref oUser, oUserPaymentMean, iOSType, true, iQuantityToRecharge, iQuantityToRecharge, false, dLatitude, dLongitude, strAppVersion,
                                                            PaymentMeanRechargeCreationType.pmrctAutomaticRecharge, strMD, strCAVV, strECI,
                                                            strBSRedsys3DSTransID, strBSRedsys3DSPares, strBSRedsys3DSCres, strBSRedsys3DSMethodData, strMercadoPagoToken,
                                                            strMPProDescription,
                                                            strMPProTransactionId,
                                                            strMPProReference,
                                                            strMPProCardHash,
                                                            strMPProCardReference,
                                                            strMPProCardScheme,
                                                            strMPProGatewayDate,
                                                            strMPProMaskedCardNumber,
                                                            strMPProExpMonth,
                                                            strMPProExpYear,
                                                            strMPProCardType,
                                                            strMPProDocumentID,
                                                            strMPProDocumentType,
                                                            strMPProInstallaments,
                                                            strMPProCVVLength,
                                                            dSourceApp, true, CardPayment_Mode.Charge, out dRechargeId, out str3DSURL, out lEllapsedTime);
                                if (rtRes != ResultType.Result_OK)
                                {
                                    if (rtRes == ResultType.Result_3DS_Validation_Needed)
                                    {
                                        Logger_AddLogMessage(string.Format("ChargeFinePayment::3DS Validation needed using {0} ", str3DSURL), LogLevels.logINFO);
                                        return rtRes;

                                    }
                                    else
                                    {
                                        Logger_AddLogMessage(string.Format("ChargeFinePayment::Error AutoRecharging {0} ", rtRes.ToString()), LogLevels.logERROR);
                                        return rtRes;
                                    }
                                }
                                iBalanceAfterRecharge = oUser.USR_BALANCE;
                                parametersOut["autorecharged"] = "1";
                            }
                            else if ((eSuscryptionType == PaymentSuscryptionType.pstPerTransaction))
                            {
                                rtRes = PerformPrepayRecharge(ref oUser, oUserPaymentMean, iOSType, false, -iNewBalance, -iNewBalance, false, dLatitude, dLongitude, strAppVersion,
                                                            PaymentMeanRechargeCreationType.pmrctRegularRecharge, strMD, strCAVV, strECI,
                                                            strBSRedsys3DSTransID, strBSRedsys3DSPares, strBSRedsys3DSCres, strBSRedsys3DSMethodData, strMercadoPagoToken,
                                                            strMPProDescription,
                                                            strMPProTransactionId,
                                                            strMPProReference,
                                                            strMPProCardHash,
                                                            strMPProCardReference,
                                                            strMPProCardScheme,
                                                            strMPProGatewayDate,
                                                            strMPProMaskedCardNumber,
                                                            strMPProExpMonth,
                                                            strMPProExpYear,
                                                            strMPProCardType,
                                                            strMPProDocumentID,
                                                            strMPProDocumentType,
                                                            strMPProInstallaments,
                                                            strMPProCVVLength,
                                                            dSourceApp, true, CardPayment_Mode.Charge, out dRechargeId, out str3DSURL, out lEllapsedTime);
                                if (rtRes != ResultType.Result_OK)
                                {
                                    if (rtRes == ResultType.Result_3DS_Validation_Needed)
                                    {
                                        Logger_AddLogMessage(string.Format("ChargeFinePayment::3DS Validation needed using {0} ", str3DSURL), LogLevels.logINFO);
                                        return rtRes;

                                    }
                                    else
                                    {
                                        Logger_AddLogMessage(string.Format("ChargeFinePayment::Error Charging Rest Of transaction {0} ", rtRes.ToString()), LogLevels.logERROR);
                                        return rtRes;
                                    }
                                }
                                iBalanceAfterRecharge = iUserBalance;
                                parametersOut["autorecharged"] = "1";
                            }
                            else
                            {
                                rtRes = ResultType.Result_Error_Not_Enough_Balance;
                                Logger_AddLogMessage(string.Format("ChargeFinePayment::Error AutoRecharging {0} ", rtRes.ToString()), LogLevels.logERROR);
                                return rtRes;
                            }
                        }
                        else
                        {
                            if ((bAllowNoPaymentMethod) && (eSuscryptionType == PaymentSuscryptionType.pstPrepay))
                            {
                                rtRes = ResultType.Result_Error_Not_Enough_Balance;
                                Logger_AddLogMessage(string.Format("ChargeFinePayment::{0} ", rtRes.ToString()), LogLevels.logERROR);
                                return rtRes;
                            }
                            else
                            {
                                rtRes = ResultType.Result_Error_Invalid_Payment_Mean;
                                Logger_AddLogMessage(string.Format("ChargeFinePayment::{0} ", rtRes.ToString()), LogLevels.logERROR);
                                return rtRes;
                            }

                        }

                    }
                }
                else if ((iUserBalance == 0) &&
                   (eSuscryptionType == PaymentSuscryptionType.pstPerTransaction))
                {
                    //Balance is 0 and suscription type is pertransaction

                    if ((oUserPaymentMean != null) &&
                        (oUserPaymentMean.CUSPM_ENABLED == 1) &&
                        (oUserPaymentMean.CUSPM_VALID == 1))
                    {
                        rtRes = PerformPerTransactionRecharge(ref oUser, oUserPaymentMean, iOSType, iCurrencyChargedQuantity, dLatitude, dLongitude,
                                                                strAppVersion, strMD, strCAVV, strECI,
                                                                strBSRedsys3DSTransID, strBSRedsys3DSPares, strBSRedsys3DSCres, strBSRedsys3DSMethodData, strMercadoPagoToken,
                                                                strMPProDescription,
                                                                strMPProTransactionId,
                                                                strMPProReference,
                                                                strMPProCardHash,
                                                                strMPProCardReference,
                                                                strMPProCardScheme,
                                                                strMPProGatewayDate,
                                                                strMPProMaskedCardNumber,
                                                                strMPProExpMonth,
                                                                strMPProExpYear,
                                                                strMPProCardType,
                                                                strMPProDocumentID,
                                                                strMPProDocumentType,
                                                                strMPProInstallaments,
                                                                strMPProCVVLength,
                                                                null, dSourceApp, true, CardPayment_Mode.Charge, out dRechargeId, out str3DSURL, out lEllapsedTime);
                        if (rtRes != ResultType.Result_OK)
                        {
                            if (rtRes == ResultType.Result_3DS_Validation_Needed)
                            {
                                Logger_AddLogMessage(string.Format("ChargeFinePayment::3DS Validation needed using {0} ", str3DSURL), LogLevels.logINFO);
                                return rtRes;

                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("ChargeFinePayment::Error charging per transaction value {0} ", rtRes.ToString()), LogLevels.logERROR);
                                return rtRes;
                            }
                        }

                        //bRestoreBalanceInCaseOfRefund = false;
                        suscriptionType = PaymentSuscryptionType.pstPerTransaction;

                    }
                    else
                    {
                        rtRes = ResultType.Result_Error_Invalid_Payment_Mean;
                        Logger_AddLogMessage(string.Format("ChargeFinePayment::{0} ", rtRes.ToString()), LogLevels.logERROR);
                        return rtRes;
                    }

                }
                else
                {
                    if ((bAllowNoPaymentMethod) && (oUser.USR_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPrepay))
                    {
                        rtRes = ResultType.Result_Error_Not_Enough_Balance;
                        Logger_AddLogMessage(string.Format("ChargeFinePayment::{0} ", rtRes.ToString()), LogLevels.logERROR);
                        return rtRes;
                    }
                    else
                    {
                        rtRes = ResultType.Result_Error_Invalid_Payment_Mean;
                        Logger_AddLogMessage(string.Format("ChargeFinePayment::{0} ", rtRes.ToString()), LogLevels.logERROR);
                        return rtRes;
                    }

                }


                //bool bSubstractFromBalance = bRestoreBalanceInCaseOfRefund;

                DateTime? dtUTCTime = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oInstallation.INS_ID, dtPaymentDate);

                bool bConfirmedWs = ((oInstallation.INS_OPT_FINECONFIRM_MODE ?? 0) == 0);

                if (oUser.USR_CUR_ID != dCurrencyId)
                    iCurrencyChargedQuantity = ChangeQuantityFromInstallationCurToUserCur(iTotalQuantity, dChangeToApply, oInstallation, oUser, out dChangeFee);

                if (!customersRepository.ChargeFinePayment(ref oUser,
                                                          iOSType,
                                                          true,
                                                          suscriptionType,
                                                          oInstallation.INS_ID,
                                                          dtPaymentDate,
                                                          dtUTCTime.Value,
                                                          strPlate,
                                                          strFineNumber,
                                                          string.Format("{0} ({1})", strArticleType, strArticleDescription),
                                                          iQuantity,
                                                          oInstallation.INS_CUR_ID,
                                                          dBalanceCurID,
                                                          dChangeToApply,
                                                          dChangeFee,
                                                          iCurrencyChargedQuantity,
                                                          dPercVAT1, dPercVAT2, iPartialVAT1, dPercFEE, iPercFEETopped, iPartialPercFEE, iFixedFEE, iPartialFixedFEE, iTotalQuantity,
                                                          dRechargeId,
                                                          bConfirmedWs,
                                                          dLatitude, dLongitude, strAppVersion,
                                                          dGrpId,dSourceApp,
                                                          out dTicketPaymentID,
                                                          out dtUTCInsertionDate))
                {

                    Logger_AddLogMessage(string.Format("ChargeFinePayment::Error Inserting Ticket Payment {0} ", strFineNumber), LogLevels.logERROR);
                    return ResultType.Result_Error_Generic;
                }



                parametersOut["newbal"] = oUser.USR_BALANCE;


            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "ChargeFinePayment::Exception", LogLevels.logERROR);
            }


            return rtRes;
        }








        private ResultType ChargeParkingOperation(ref SortedList parametersIn, INSTALLATION oInstallation, ChargeOperationsType operationType, string strPlate, List<string> oAdditionalPlates, double dChangeToApply, int iQuantity, int iTime,
                                                 int iRealQuantity, int iTimeBalUsed, DateTime dtPaymentDate, DateTime dtInitialDate, DateTime dtEndDate, TARIFF oTariff, GROUP oGroup, STREET_SECTION oStreetSection,
                                                ref USER oUser, int iOSType, decimal dMobileSessionId, decimal? dLatitude, decimal? dLongitude, string strAppVersion, decimal? dAuthId,
                                                decimal dPercVAT1, decimal dPercVAT2, decimal dPercFEE, int iPercFEETopped, int iFixedFEE, decimal dPercBonus,
                                                int iPartialVAT1, int iPartialPercFEE, int iPartialFixedFEE, int iPartialBonusFEE, int iTotalQuantity,
                                                string sBonusId, string sBonusMarca, int? iBonusType, string strPlaceString, int iPostpay, bool bIsShopKeeperOperation,
                                                int iQuantityWithoutBon, decimal dBonMlt, decimal? dBonExtMlt, string sVehicleType, string sBackOfficeUsr, bool bPermitAutomaticRenewal, DateTime? dtExpirationDate,
                                                bool bPerformRecharge, int? iRechargeQuantity, bool bForceConfirmed, string sAdditionalParams, string strMD, string strCAVV, string strECI,
                                                string strBSRedsys3DSTransID,string strBSRedsys3DSPares, string strBSRedsys3DSCres, string strBSRedsys3DSMethodData, string strMercadoPagoToken,
                                                string strMPProTransactionId,
                                                string strMPProReference,
                                                string strMPProCardHash,
                                                string strMPProCardReference,
                                                string strMPProCardScheme,
                                                string strMPProGatewayDate,
                                                string strMPProMaskedCardNumber,
                                                string strMPProExpMonth,
                                                string strMPProExpYear,
                                                string strMPProCardType,
                                                string strMPProDocumentID,
                                                string strMPProDocumentType,
                                                string strMPProInstallaments,
                                                string strMPProCVVLength,
                                                decimal dSourceApp, bool bPaymentInPerson, CardPayment_Mode eCardPaymentMode,
                                                ref SortedList parametersOut, out int iCurrencyChargedQuantity, out decimal dOperationID,
                                                out DateTime? dtUTCInsertionDate, out decimal? dRechargeId, out int? iBalanceAfterRecharge, out bool bRestoreBalanceInCaseOfRefund, out string str3DSURL, out long lEllapsedTime)
        {
            ResultType rtRes = ResultType.Result_OK;
            iCurrencyChargedQuantity = 0;
            double dChangeFee = 0;
            decimal dBalanceCurID = oUser.CURRENCy.CUR_ID;
            dOperationID = -1;
            dRechargeId = null;
            bRestoreBalanceInCaseOfRefund = true;
            PaymentSuscryptionType suscriptionType = PaymentSuscryptionType.pstPrepay;
            iBalanceAfterRecharge = null;
            dtUTCInsertionDate = null;
            str3DSURL = "";
            lEllapsedTime = 0;

            int iFinalAmount = 0;

            try
            {
                decimal dCurrencyId = oUser.USR_CUR_ID;
                PaymentSuscryptionType eSuscryptionType = (PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE;
                int iUserBalance = oUser.USR_BALANCE;
                if (oGroup.INSTALLATION.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG != null)
                {
                    dCurrencyId = oGroup.INSTALLATION.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_CUR_ID;
                    eSuscryptionType = PaymentSuscryptionType.pstPerTransaction;
                    iUserBalance = 0;
                }
                CUSTOMER_PAYMENT_MEAN oUserPaymentMean = customersRepository.GetUserPaymentMean(ref oUser, oGroup.INSTALLATION);


                string strMPProDescription = geograficAndTariffsRepository.GetSourceAppDescription(dSourceApp) + " - " + oGroup.INSTALLATION.INS_DESCRIPTION + " - " + oTariff.TAR_DESCRIPTION + " - "+strPlate;

                bool bAllowNoPaymentMethod = (infraestructureRepository.GetParameterValue("AllowNoPaymentMethod") == "1");
                parametersOut["autorecharged"] = "0";
                //iCurrencyChargedQuantity = ChangeQuantityFromInstallationCurToUserCur(iTotalQuantity /*iQuantity*/, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);
                iFinalAmount = ChangeQuantityFromInstallationCurToUserCur((iRechargeQuantity ?? iTotalQuantity), dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);
                if (bPerformRecharge)
                    iCurrencyChargedQuantity = ChangeQuantityFromInstallationCurToUserCur((iRechargeQuantity ?? iTotalQuantity), dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                if (oUser.USR_CUR_ID == dCurrencyId)
                    iCurrencyChargedQuantity = ChangeQuantityFromInstallationCurToUserCur((iRechargeQuantity ?? iTotalQuantity), dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);
                else if (dCurrencyId == oGroup.INSTALLATION.INS_CUR_ID)
                    iCurrencyChargedQuantity = (iRechargeQuantity ?? iTotalQuantity);
                else
                {
                    // *** NO DEBERÍA PASAR NUNCA ***
                    iCurrencyChargedQuantity = (iRechargeQuantity ?? iTotalQuantity);
                }

                if (iCurrencyChargedQuantity < 0)
                {
                    rtRes = (ResultType)iCurrencyChargedQuantity;
                    Logger_AddLogMessage(string.Format("ChargeParkingOperation::Error Changing quantity {0} ", rtRes.ToString()), LogLevels.logERROR);
                    return rtRes;
                }


                decimal dShopKeeperParkPerc = 0;
                int iShopKeeperAmountTotal = 0;
                int iShopKeeperAmountProfit = 0;

                if (bIsShopKeeperOperation)
                {
                    dShopKeeperParkPerc = oGroup.INSTALLATION.INSTALLATION_SHOPKEEPER_PARAMETERs.FirstOrDefault() == null ? (decimal)0 : oGroup.INSTALLATION.INSTALLATION_SHOPKEEPER_PARAMETERs.First().INSSHO_PARK_PROFIT_PERC;
                    customersRepository.CalculateShopKeeperProfit(iFinalAmount /*iCurrencyChargedQuantity*/, dShopKeeperParkPerc, out iShopKeeperAmountProfit, out iShopKeeperAmountTotal);
                }


                if (bPerformRecharge)
                {
                    if ((oUser.USR_IS_ANONYMOUS ?? 0) != 0)
                    {
                        //user is anoynmous

                        rtRes = PerformAnonymousRecharge(ref parametersIn, ref oUser, oInstallation, iOSType, iCurrencyChargedQuantity, dLatitude, dLongitude,
                                                             strAppVersion, dSourceApp, out dRechargeId);
                        if (rtRes != ResultType.Result_OK)
                        {
                            Logger_AddLogMessage(string.Format("ChargeParkingOperation::Error in AnonymousRecharge {0} ", rtRes.ToString()), LogLevels.logERROR);
                            return rtRes;
                            
                        }

                    }
                    else
                    {

                        if ((iUserBalance > 0) ||
                            (eSuscryptionType == PaymentSuscryptionType.pstPrepay))
                        {
                            int iNewBalance = iUserBalance - iCurrencyChargedQuantity;


                            if (iNewBalance < 0)
                            {

                                if ((oUserPaymentMean != null) &&
                                    (oUserPaymentMean.CUSPM_ENABLED == 1) &&
                                    (oUserPaymentMean.CUSPM_VALID == 1))
                                {


                                    if ((eSuscryptionType == PaymentSuscryptionType.pstPrepay) &&
                                        (oUserPaymentMean.CUSPM_AUTOMATIC_RECHARGE == 1) &&
                                        (oUserPaymentMean.CUSPM_AMOUNT_TO_RECHARGE > 0))
                                    {

                                        int iQuantityToRecharge = oUserPaymentMean.CUSPM_AMOUNT_TO_RECHARGE.Value;
                                        if (Math.Abs(iNewBalance) > oUserPaymentMean.CUSPM_AMOUNT_TO_RECHARGE.Value)
                                        {
                                            iQuantityToRecharge = oUserPaymentMean.CUSPM_AMOUNT_TO_RECHARGE.Value + Math.Abs(iNewBalance);
                                        }

                                        rtRes = PerformPrepayRecharge(ref oUser, oUserPaymentMean, iOSType, true, iQuantityToRecharge, iQuantityToRecharge, false, dLatitude, dLongitude, strAppVersion,
                                                                  PaymentMeanRechargeCreationType.pmrctAutomaticRecharge, strMD, strCAVV, strECI,
                                                                  strBSRedsys3DSTransID, strBSRedsys3DSPares, strBSRedsys3DSCres, strBSRedsys3DSMethodData, strMercadoPagoToken,
                                                                  strMPProDescription,
                                                                  strMPProTransactionId,
                                                                  strMPProReference,
                                                                  strMPProCardHash,
                                                                  strMPProCardReference,
                                                                  strMPProCardScheme,
                                                                  strMPProGatewayDate,
                                                                  strMPProMaskedCardNumber,
                                                                  strMPProExpMonth,
                                                                  strMPProExpYear,
                                                                  strMPProCardType,
                                                                  strMPProDocumentID,
                                                                  strMPProDocumentType,
                                                                  strMPProInstallaments,
                                                                  strMPProCVVLength,
                                                                  dSourceApp, bPaymentInPerson, eCardPaymentMode, out dRechargeId, out str3DSURL, out lEllapsedTime);
                                        if (rtRes != ResultType.Result_OK)
                                        {

                                            if (rtRes == ResultType.Result_3DS_Validation_Needed)
                                            {
                                                Logger_AddLogMessage(string.Format("ChargeParkingOperation::3DS Validation needed using {0} ", str3DSURL), LogLevels.logINFO);
                                                return rtRes;

                                            }
                                            else
                                            {

                                                Logger_AddLogMessage(string.Format("ChargeParkingOperation::Error AutoRecharging {0} ", rtRes.ToString()), LogLevels.logERROR);
                                                return rtRes;
                                            }
                                        }

                                        iBalanceAfterRecharge = oUser.USR_BALANCE;
                                        parametersOut["autorecharged"] = "1";
                                    }
                                    else if ((eSuscryptionType == PaymentSuscryptionType.pstPerTransaction))
                                    {
                                        rtRes = PerformPrepayRecharge(ref oUser, oUserPaymentMean, iOSType, false, -iNewBalance, -iNewBalance, false, dLatitude, dLongitude, strAppVersion,
                                                                    PaymentMeanRechargeCreationType.pmrctRegularRecharge, strMD, strCAVV, strECI,
                                                                    strBSRedsys3DSTransID, strBSRedsys3DSPares, strBSRedsys3DSCres, strBSRedsys3DSMethodData, strMercadoPagoToken,
                                                                    strMPProDescription,
                                                                    strMPProTransactionId,
                                                                    strMPProReference,
                                                                    strMPProCardHash,
                                                                    strMPProCardReference,
                                                                    strMPProCardScheme,
                                                                    strMPProGatewayDate,
                                                                    strMPProMaskedCardNumber,
                                                                    strMPProExpMonth,
                                                                    strMPProExpYear,
                                                                    strMPProCardType,
                                                                    strMPProDocumentID,
                                                                    strMPProDocumentType,
                                                                    strMPProInstallaments,
                                                                    strMPProCVVLength,
                                                                    dSourceApp, bPaymentInPerson, eCardPaymentMode, out dRechargeId, out str3DSURL, out lEllapsedTime);
                                        if (rtRes != ResultType.Result_OK)
                                        {
                                            if (rtRes == ResultType.Result_3DS_Validation_Needed)
                                            {
                                                Logger_AddLogMessage(string.Format("ChargeParkingOperation::3DS Validation needed using {0} ", str3DSURL), LogLevels.logINFO);
                                                return rtRes;

                                            }
                                            else
                                            {
                                                Logger_AddLogMessage(string.Format("ChargeParkingOperation::Error Charging Rest Of transaction {0} ", rtRes.ToString()), LogLevels.logERROR);
                                                return rtRes;
                                            }
                                        }
                                        iBalanceAfterRecharge = oUser.USR_BALANCE;
                                        parametersOut["autorecharged"] = "1";
                                    }
                                    else
                                    {
                                        rtRes = ResultType.Result_Error_Not_Enough_Balance;
                                        Logger_AddLogMessage(string.Format("ChargeParkingOperation::Error AutoRecharging {0} ", rtRes.ToString()), LogLevels.logERROR);
                                        return rtRes;
                                    }
                                }
                                else
                                {
                                    if ((bAllowNoPaymentMethod) && (eSuscryptionType == PaymentSuscryptionType.pstPrepay))
                                    {
                                        rtRes = ResultType.Result_Error_Not_Enough_Balance;
                                        Logger_AddLogMessage(string.Format("ChargeParkingOperation::{0} ", rtRes.ToString()), LogLevels.logERROR);
                                        return rtRes;
                                    }
                                    else
                                    {
                                        rtRes = ResultType.Result_Error_Invalid_Payment_Mean;
                                        Logger_AddLogMessage(string.Format("ChargeParkingOperation::{0} ", rtRes.ToString()), LogLevels.logERROR);
                                        return rtRes;
                                    }

                                }

                            }
                        }
                        else if ((iUserBalance == 0) &&
                                 (eSuscryptionType == PaymentSuscryptionType.pstPerTransaction))
                        {
                            //Balance is 0 and suscription type is pertransaction

                            if ((iCurrencyChargedQuantity > 0) || (!bAllowNoPaymentMethod))
                            {

                                if ((oUserPaymentMean != null) &&
                                    (oUserPaymentMean.CUSPM_ENABLED == 1) &&
                                    (oUserPaymentMean.CUSPM_VALID == 1))
                                {
                                    rtRes = PerformPerTransactionRecharge(ref oUser, oUserPaymentMean, iOSType, iCurrencyChargedQuantity/*iQuantity*/, dLatitude, dLongitude,
                                                                            strAppVersion, strMD, strCAVV, strECI,
                                                                            strBSRedsys3DSTransID, strBSRedsys3DSPares, strBSRedsys3DSCres, strBSRedsys3DSMethodData, strMercadoPagoToken,
                                                                            strMPProDescription,
                                                                            strMPProTransactionId,
                                                                            strMPProReference,
                                                                            strMPProCardHash,
                                                                            strMPProCardReference,
                                                                            strMPProCardScheme,
                                                                            strMPProGatewayDate,
                                                                            strMPProMaskedCardNumber,
                                                                            strMPProExpMonth,
                                                                            strMPProExpYear,
                                                                            strMPProCardType,
                                                                            strMPProDocumentID,
                                                                            strMPProDocumentType,
                                                                            strMPProInstallaments,
                                                                            strMPProCVVLength,
                                                                            oTariff.TAR_BEHAVIOR,dSourceApp, bPaymentInPerson, eCardPaymentMode, out dRechargeId, out str3DSURL, out lEllapsedTime);

                                    Logger_AddLogMessage(string.Format("ChargeParkingOperation::dRechargeId {0} ", dRechargeId), LogLevels.logINFO);

                                    if (rtRes != ResultType.Result_OK)
                                    {
                                        if (rtRes == ResultType.Result_3DS_Validation_Needed)
                                        {
                                            Logger_AddLogMessage(string.Format("ChargeParkingOperation::3DS Validation needed using {0} ", str3DSURL), LogLevels.logINFO);
                                            return rtRes;

                                        }
                                        else
                                        {
                                            Logger_AddLogMessage(string.Format("ChargeParkingOperation::Error charging per transaction value {0} ", rtRes.ToString()), LogLevels.logERROR);
                                            return rtRes;
                                        }
                                    }

                                    //bRestoreBalanceInCaseOfRefund = true;
                                    suscriptionType = PaymentSuscryptionType.pstPerTransaction;

                                }
                                else
                                {
                                    rtRes = ResultType.Result_Error_Invalid_Payment_Mean;
                                    Logger_AddLogMessage(string.Format("ChargeParkingOperation::{0} ", rtRes.ToString()), LogLevels.logERROR);
                                    return rtRes;
                                }
                            }
                            else
                            {
                                suscriptionType = PaymentSuscryptionType.pstPerTransaction;
                            }



                        }
                        else
                        {
                            if ((bAllowNoPaymentMethod) && (oUser.USR_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPrepay))
                            {
                                rtRes = ResultType.Result_Error_Not_Enough_Balance;
                                Logger_AddLogMessage(string.Format("ChargeParkingOperation::{0} ", rtRes.ToString()), LogLevels.logERROR);
                                return rtRes;
                            }
                            else
                            {
                                rtRes = ResultType.Result_Error_Invalid_Payment_Mean;
                                Logger_AddLogMessage(string.Format("ChargeParkingOperation::{0} ", rtRes.ToString()), LogLevels.logERROR);
                                return rtRes;
                            }

                        }
                    }
                }

                //bool bSubstractFromBalance = bRestoreBalanceInCaseOfRefund;

                DateTime? dtUTCPaymentDate = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oGroup.GRP_INS_ID, dtPaymentDate);
                DateTime? dtUTCInitialDate = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oGroup.GRP_INS_ID, dtInitialDate);
                DateTime? dtUTCEndDate = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oGroup.GRP_INS_ID, dtEndDate);
                DateTime? dtUTCExpirationDate = null;

                if (dtExpirationDate != null)
                {
                    dtUTCExpirationDate = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oGroup.GRP_INS_ID, dtExpirationDate.Value);
                }


                bool bConfirmedWs1 = true;
                bool bConfirmedWs2 = true;
                bool bConfirmedWs3 = true;
                if ((oGroup.INSTALLATION.INS_OPT_OPERATIONCONFIRM_MODE ?? 0) == (int)OperationConfirmMode.offline && !bForceConfirmed)
                {
                    bConfirmedWs1 = false;
                    bConfirmedWs2 = false;
                    bConfirmedWs3 = false;
                }
                else if ((oGroup.INSTALLATION.INS_OPT_OPERATIONCONFIRM_MODE ?? 0) == (int)OperationConfirmMode.first_online && !bForceConfirmed)
                {
                    bConfirmedWs1 = true;
                    bConfirmedWs2 = ((oGroup.INSTALLATION.INS_PARK_CONFIRM_WS2_SIGNATURE_TYPE ?? (int)ConfirmParkWSSignatureType.cpst_nocall) == (int)ConfirmParkWSSignatureType.cpst_nocall);
                    bConfirmedWs3 = ((oGroup.INSTALLATION.INS_PARK_CONFIRM_WS3_SIGNATURE_TYPE ?? (int)ConfirmParkWSSignatureType.cpst_nocall) == (int)ConfirmParkWSSignatureType.cpst_nocall);
                }

                string sExternalId1 = null;
                string sExternalId2 = null;
                string sExternalId3 = null;
                if (dAuthId.HasValue)
                {
                    if ((ConfirmParkWSSignatureType)oGroup.INSTALLATION.INS_PARK_CONFIRM_WS_SIGNATURE_TYPE == ConfirmParkWSSignatureType.cpst_standardmadrid ||
                        (ConfirmParkWSSignatureType)oGroup.INSTALLATION.INS_PARK_CONFIRM_WS_SIGNATURE_TYPE == ConfirmParkWSSignatureType.cpst_standard)
                    {
                        sExternalId1 = dAuthId.Value.ToString();
                    }
                    if (oGroup.INSTALLATION.INS_PARK_CONFIRM_WS2_SIGNATURE_TYPE.HasValue &&
                        ((ConfirmParkWSSignatureType)oGroup.INSTALLATION.INS_PARK_CONFIRM_WS2_SIGNATURE_TYPE == ConfirmParkWSSignatureType.cpst_standardmadrid ||
                         (ConfirmParkWSSignatureType)oGroup.INSTALLATION.INS_PARK_CONFIRM_WS2_SIGNATURE_TYPE == ConfirmParkWSSignatureType.cpst_standard))
                    {
                        sExternalId2 = dAuthId.Value.ToString();
                    }
                    if (oGroup.INSTALLATION.INS_PARK_CONFIRM_WS3_SIGNATURE_TYPE.HasValue &&
                        ((ConfirmParkWSSignatureType)oGroup.INSTALLATION.INS_PARK_CONFIRM_WS3_SIGNATURE_TYPE == ConfirmParkWSSignatureType.cpst_standardmadrid ||
                         (ConfirmParkWSSignatureType)oGroup.INSTALLATION.INS_PARK_CONFIRM_WS3_SIGNATURE_TYPE == ConfirmParkWSSignatureType.cpst_standard))
                    {
                        sExternalId3 = dAuthId.Value.ToString();
                    }
                }

                if (oUser.USR_CUR_ID != dCurrencyId)
                    iCurrencyChargedQuantity = ChangeQuantityFromInstallationCurToUserCur(iTotalQuantity, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                ParkingMode eParkingMode = ParkingMode.Normal;
                ParkingModeStatus eParkingModeStatus = ParkingModeStatus.Closed;
                if ((oTariff.TAR_BEHAVIOR ?? 0) == (int)ParkingMode.StartStop)
                {
                    eParkingMode = ParkingMode.StartStop;
                    eParkingModeStatus = ParkingModeStatus.Opened;
                }
                else if ((oTariff.TAR_BEHAVIOR ?? 0) == (int)ParkingMode.StartStopHybrid)
                {
                    eParkingMode = ParkingMode.StartStopHybrid;
                    eParkingModeStatus = ParkingModeStatus.Opened;
                }

                if (!customersRepository.ChargeParkingOperation(ref oUser,
                                                          iOSType,
                                                          bPerformRecharge, // true, ***
                                                          suscriptionType,
                                                          operationType,
                                                          strPlate,
                                                          oAdditionalPlates,
                                                          oGroup.GRP_INS_ID,
                                                          oGroup.GRP_ID,
                                                          oStreetSection?.STRSE_ID,
                                                          oTariff.TAR_ID,
                                                          dtPaymentDate,
                                                          dtInitialDate,
                                                          dtEndDate,
                                                          dtUTCPaymentDate.Value,
                                                          dtUTCInitialDate.Value,
                                                          dtUTCEndDate.Value,
                                                          iTime,
                                                          iQuantity,
                                                          iRealQuantity,
                                                          iTimeBalUsed,
                                                          oGroup.INSTALLATION.INS_CUR_ID,
                                                          dBalanceCurID,
                                                          dChangeToApply,
                                                          dChangeFee,
                                                          iCurrencyChargedQuantity,
                                                          iFinalAmount,
                                                          dPercVAT1, dPercVAT2, iPartialVAT1, dPercFEE, iPercFEETopped, iPartialPercFEE, iFixedFEE, iPartialFixedFEE, dPercBonus, iPartialBonusFEE, iTotalQuantity,
                                                          sBonusId, sBonusMarca, iBonusType, strPlaceString, iPostpay,
                                                          bIsShopKeeperOperation,
                                                          iShopKeeperAmountTotal,
                                                          iShopKeeperAmountProfit,
                                                          dRechargeId,
                                                          bConfirmedWs1, bConfirmedWs2, bConfirmedWs3,
                                                          dMobileSessionId,
                                                          dLatitude, dLongitude, strAppVersion,
                                                          sExternalId1, sExternalId2, sExternalId3,
                                                          dAuthId, iQuantityWithoutBon, dBonMlt, dBonExtMlt, sVehicleType,
                                                          sBackOfficeUsr,
                                                          bPermitAutomaticRenewal,
                                                          dtExpirationDate,
                                                          dtUTCExpirationDate,
                                                          //(bForceConfirmed ? (int?)1 : oGroup.INSTALLATION.INS_OPT_OPERATIONCONFIRM_MODE),
                                                          (bForceConfirmed ? (OperationConfirmMode?) OperationConfirmMode.offline : (OperationConfirmMode?)oGroup.INSTALLATION.INS_OPT_OPERATIONCONFIRM_MODE),
                                                          eParkingMode, eParkingModeStatus, null, null,
                                                          sAdditionalParams,
                                                          dSourceApp,
                                                          out dOperationID,
                                                          out dtUTCInsertionDate))
                {

                    Logger_AddLogMessage(string.Format("ChargeParkingOperation::Error Inserting Parking Payment for plate {0} ", strPlate), LogLevels.logERROR);
                    return ResultType.Result_Error_Generic;
                }

                //if (oGroup.INSTALLATION.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG == null)
                //{
                parametersOut["newbal"] = oUser.USR_BALANCE;
                parametersOut["new_time_bal"] = oUser.USR_TIME_BALANCE;
                /*}
                else
                {
                    parametersOut["newbal"] = 0;
                    parametersOut["new_time_bal"] = 0;
                }*/


            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "ChargeParkingOperation::Exception", LogLevels.logERROR);
            }


            return rtRes;
        }


        private ResultType ChargeUnParkingOperation(string strPlate, int iQuantity, int iTime, DateTime dtPaymentDate, DateTime dtInitialDate,
                                                DateTime dtEndDate, DateTime? dtPrevEnd, double dChangeToApply, decimal? dGroupId, decimal? dStreetSectionId, TARIFF oTariff,
                                                decimal dPercVAT1, decimal dPercVAT2, decimal dPercFEE, int iPercFEETopped, int iFixedFEE, decimal dPercBonus,
                                                int iPartialVAT1, int iPartialPercFEE, int iPartialFixedFEE, int iPartialBonusFEE, int iTotalQuantity, string sBonusId,
                                                decimal? dBonMlt, string sVehicleType, int? iAmountWithoutBon,
                                                SortedList parametersIn, INSTALLATION oInstallation,
                                                ref USER oUser, int iOSType, decimal dMobileSessionId,
                                                decimal? dLatitude, decimal? dLongitude, string strAppVersion, string sBaseOpeId, string sAdditionalParams, decimal dSourceApp,
                                                ref SortedList parametersOut,
                                                out decimal dOperationID, out DateTime? dtUTCInsertionDate, out int iCurrencyChargedQuantity)
        {
            ResultType rtRes = ResultType.Result_OK;
            iCurrencyChargedQuantity = 0;
            //double dChangeApplied = 1;
            double dChangeFee = 0;
            dOperationID = -1;
            dtUTCInsertionDate = null;

            try
            {

                iCurrencyChargedQuantity = ChangeQuantityFromInstallationCurToUserCur(iTotalQuantity/*iQuantity*/, dChangeToApply, oInstallation, oUser, out dChangeFee);

                if (iCurrencyChargedQuantity < 0)
                {
                    rtRes = (ResultType)iCurrencyChargedQuantity;
                    Logger_AddLogMessage(string.Format("ChargeUnParkingOperation::Error Changing quantity {0} ", rtRes.ToString()), LogLevels.logERROR);
                    return rtRes;
                }



                DateTime? dtUTCPaymentDate = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oInstallation.INS_ID, dtPaymentDate);
                DateTime? dtUTCInitialDate = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oInstallation.INS_ID, dtInitialDate);
                DateTime? dtUTCEndDate = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oInstallation.INS_ID, dtEndDate);

                bool bConfirmedWs1 = true;
                bool bConfirmedWs2 = true;
                bool bConfirmedWs3 = true;
                if ((oInstallation.INS_OPT_OPERATIONCONFIRM_MODE ?? 0) == (int)OperationConfirmMode.offline)
                {
                    bConfirmedWs1 = false;
                    bConfirmedWs2 = false;
                    bConfirmedWs3 = false;
                }
                else if ((oInstallation.INS_OPT_OPERATIONCONFIRM_MODE ?? 0) == (int)OperationConfirmMode.first_online)
                {
                    bConfirmedWs1 = true;
                    bConfirmedWs2 = ((oInstallation.INS_PARK_CONFIRM_WS2_SIGNATURE_TYPE ?? (int)ConfirmParkWSSignatureType.cpst_nocall) == (int)ConfirmParkWSSignatureType.cpst_nocall || oInstallation.INS_PARK_CONFIRM_WS2_SIGNATURE_TYPE == (int)ConfirmParkWSSignatureType.cpst_SIR);
                    bConfirmedWs3 = ((oInstallation.INS_PARK_CONFIRM_WS3_SIGNATURE_TYPE ?? (int)ConfirmParkWSSignatureType.cpst_nocall) == (int)ConfirmParkWSSignatureType.cpst_nocall || oInstallation.INS_PARK_CONFIRM_WS3_SIGNATURE_TYPE == (int)ConfirmParkWSSignatureType.cpst_SIR);
                }

                decimal? dTariffId = null;
                ParkingMode eParkingMode = ParkingMode.Normal;
                if (oTariff != null)
                {
                    dTariffId = oTariff.TAR_ID;
                    eParkingMode = (ParkingMode)(oTariff.TAR_BEHAVIOR ?? 0);
                }

                DateTime? dtStop = null;
                DateTime? dtUtcStop = null;

                if (eParkingMode == ParkingMode.StartStop ||
                    eParkingMode == ParkingMode.StartStopHybrid)
                {
                    if (!customersRepository.UpdateOperationsParkingModeStatus(sBaseOpeId, ParkingModeStatus.Closed, (DateTime?)dtPaymentDate, dtUTCPaymentDate))
                    {
                        Logger_AddLogMessage(string.Format("ChargeUnParkingOperation::Error Update Start Parking Related Operations (ExternalBaseID={0})", sBaseOpeId), LogLevels.logERROR);
                        return ResultType.Result_Error_Generic;
                    }
                    dtStop = dtPaymentDate;
                    dtUtcStop = dtUTCPaymentDate;
                }

                if (!customersRepository.ChargeUnParkingOperation(ref oUser,
                                                          iOSType,
                                                          (PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE,
                                                          strPlate,
                                                          oInstallation.INS_ID,
                                                          dGroupId,                                                          
                                                          dStreetSectionId,
                                                          dTariffId,
                                                          dtPaymentDate,
                                                          dtInitialDate,
                                                          dtEndDate,
                                                          dtUTCPaymentDate.Value,
                                                          dtUTCInitialDate.Value,
                                                          dtUTCEndDate.Value,
                                                          dtPrevEnd,
                                                          iTime,
                                                          iQuantity,
                                                          oInstallation.INS_CUR_ID,
                                                          oUser.USR_CUR_ID,
                                                          dChangeToApply, //dChangeApplied,
                                                          dChangeFee,
                                                          iCurrencyChargedQuantity,
                                                          dPercVAT1, dPercVAT2, iPartialVAT1, dPercFEE, iPercFEETopped, iPartialPercFEE, iFixedFEE, iPartialFixedFEE,
                                                          dPercBonus, iPartialBonusFEE, iTotalQuantity, sBonusId,
                                                          dBonMlt, sVehicleType, iAmountWithoutBon,
                                                          bConfirmedWs1, bConfirmedWs2, bConfirmedWs3,
                                                          dMobileSessionId,
                                                          dLatitude, dLongitude, strAppVersion,
                                                          sBaseOpeId,
                                                          eParkingMode, ParkingModeStatus.Closed, dtStop, dtUtcStop,
                                                          sAdditionalParams,
                                                          dSourceApp,
                                                          infraestructureRepository,
                                                          out dOperationID,
                                                          out dtUTCInsertionDate))
                {
                    customersRepository.UpdateOperationsParkingModeStatus(sBaseOpeId, ParkingModeStatus.Opened, null, null);
                    Logger_AddLogMessage(string.Format("ChargeUnParkingOperation::Error Inserting UnPark Payment {0} ", parametersIn["f"].ToString()), LogLevels.logERROR);
                    return ResultType.Result_Error_Generic;
                }

                parametersOut["newbal"] = oUser.USR_BALANCE;
                parametersOut["new_time_bal"] = oUser.USR_TIME_BALANCE;



            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "ChargeUnParkingOperation::Exception", LogLevels.logERROR);
            }


            return rtRes;
        }



        private ResultType RefundChargeFinePayment(ref USER oUser, decimal dTicketPaymentID, decimal? dRechargeID, bool bRestoreBalance)
        {
            ResultType rtRes = ResultType.Result_OK;


            try
            {

                if (!customersRepository.RefundChargeFinePayment(ref oUser,
                                                                 bRestoreBalance,
                                                                dTicketPaymentID))
                {

                    Logger_AddLogMessage(string.Format("RefundChargeFinePayment::Error Refunding Ticket Payment {0} ", dTicketPaymentID), LogLevels.logERROR);
                    return ResultType.Result_Error_Generic;
                }

                if (dRechargeID != null)
                {
                    if (!customersRepository.RefundRecharge(ref oUser,
                                                            dRechargeID.Value,
                                                            bRestoreBalance))
                    {

                        Logger_AddLogMessage(string.Format("RefundChargeFinePayment::Error Refunding Recharge {0} ", dRechargeID.Value), LogLevels.logERROR);
                        return ResultType.Result_Error_Generic;
                    }
                }


            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "RefundChargeFinePayment::Exception", LogLevels.logERROR);

            }


            return rtRes;
        }


        private ResultType BackUnParkPayment(ref USER oUser, decimal dOperationID, bool bInsertNoAnswered, string sExternalBaseId, TARIFF oTariff)
        {
            ResultType rtRes = ResultType.Result_OK;


            try
            {

                if (!customersRepository.BackUnParkPayment(ref oUser,
                                                           dOperationID, bInsertNoAnswered))
                {

                    Logger_AddLogMessage(string.Format("BackUnParkPayment::Error Backing UnPark Payment {0} ", dOperationID), LogLevels.logERROR);
                    return ResultType.Result_Error_Generic;
                }

                decimal? dTariffId = null;
                ParkingMode eParkingMode = ParkingMode.Normal;
                if (oTariff != null)
                {
                    dTariffId = oTariff.TAR_ID;
                    eParkingMode = (ParkingMode)(oTariff.TAR_BEHAVIOR ?? 0);
                }

                if (eParkingMode == ParkingMode.StartStop || eParkingMode == ParkingMode.StartStopHybrid)
                {
                    if (!customersRepository.UpdateOperationsParkingModeStatus(sExternalBaseId, ParkingModeStatus.Opened, null, null))
                    {
                        Logger_AddLogMessage(string.Format("BackUnParkPayment::Error Update Start Parking Related Operations (ExternalBaseID={0})", sExternalBaseId), LogLevels.logERROR);
                        return ResultType.Result_Error_Generic;
                    }
                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "BackUnParkPayment::Exception", LogLevels.logERROR);

            }


            return rtRes;
        }

        private ResultType PerformTransferBalance(double dChangeToApply, int iQuantity,
                                                  ref USER oSrcUser, ref USER oDstUser, int iOSType, decimal dMobileSessionId,
                                                  string strAppVersion, bool bIsShopKeeperOperation, decimal dSourceApp, ref INSTALLATION oInstallation,
                                                  ref SortedList parametersOut, out int iCurrencyDstQuantity, out decimal dTransferID,
                                                  out DateTime? dtUTCInsertionDate, out int? iBalanceAfterRecharge)
        {
            ResultType rtRes = ResultType.Result_OK;
            iCurrencyDstQuantity = 0;
            double dChangeFee = 0;
            dTransferID = -1;
            iBalanceAfterRecharge = null;
            dtUTCInsertionDate = null;

            try
            {

                iCurrencyDstQuantity = ChangeQuantityFromUserCurToUserCur(iQuantity, dChangeToApply, oSrcUser, oDstUser, out dChangeFee);

                if (iCurrencyDstQuantity < 0)
                {
                    rtRes = (ResultType)iCurrencyDstQuantity;
                    Logger_AddLogMessage(string.Format("PerformTransferBalance::Error Changing quantity {0} ", rtRes.ToString()), LogLevels.logERROR);
                    return rtRes;
                }

                decimal dShopKeeperBalTransPerc = 0;
                int iShopKeeperAmountTotal = 0;
                int iShopKeeperAmountProfit = 0;

                if (bIsShopKeeperOperation)
                {
                    dShopKeeperBalTransPerc = oInstallation.INSTALLATION_SHOPKEEPER_PARAMETERs.FirstOrDefault() == null ? (decimal)0 : oInstallation.INSTALLATION_SHOPKEEPER_PARAMETERs.First().INSSHO_BAL_TRANS_PROFIT_PERC;
                    customersRepository.CalculateShopKeeperProfit(iQuantity, dShopKeeperBalTransPerc, out iShopKeeperAmountProfit, out iShopKeeperAmountTotal);
                }


                if (oSrcUser.USR_BALANCE >= iQuantity)
                {
                    if (!customersRepository.TransferBalance(ref oSrcUser, ref oDstUser,
                                                              iOSType,
                                                              iQuantity,
                                                              oSrcUser.USR_CUR_ID, oDstUser.USR_CUR_ID,
                                                              dChangeToApply,
                                                              dChangeFee,
                                                              iCurrencyDstQuantity,
                                                              dMobileSessionId,
                                                              strAppVersion,
                                                              bIsShopKeeperOperation,
                                                              iShopKeeperAmountTotal,
                                                              iShopKeeperAmountProfit,
                                                              out dTransferID,
                                                              out dtUTCInsertionDate))
                    {

                        Logger_AddLogMessage(string.Format("PerformTransferBalance::Error Inserting Balance Transfer from user {0} to user {1} ", oSrcUser.USR_USERNAME, oDstUser.USR_USERNAME), LogLevels.logERROR);
                        return ResultType.Result_Error_TransferingBalance;
                    }
                    else
                    {
                        string strSourceAppEmailPrefix = GetEmailSourceAppEmailPrefix(dSourceApp);
                        string strTransferBalanceSrcBody = string.Empty;
                        try
                        {

                            string culture = oSrcUser.USR_CULTURE_LANG;
                            CultureInfo ci = new CultureInfo(culture);
                            Thread.CurrentThread.CurrentUICulture = ci;
                            Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);
                            integraMobile.WS.Properties.Resource.Culture = ci;


                            strTransferBalanceSrcBody = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix+"TransferBalanceSrc_EmailBody"),
                                oDstUser.USR_USERNAME,
                                (oSrcUser.USR_CUR_ID == oDstUser.USR_CUR_ID ?
                                string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(oSrcUser.CURRENCy.CUR_ISO_CODE) + "} {1}", Convert.ToDouble(iQuantity) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(oSrcUser.CURRENCy.CUR_ISO_CODE),
                                                infraestructureRepository.GetCurrencySymbolOrIsoCode(Convert.ToInt32(oSrcUser.USR_CUR_ID))) :
                                string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(oSrcUser.CURRENCy.CUR_ISO_CODE) + "} {1} ({2:" + infraestructureRepository.GetDecimalFormatFromIsoCode(oDstUser.CURRENCy.CUR_ISO_CODE) + "} {3})", Convert.ToDouble(iQuantity) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(oSrcUser.CURRENCy.CUR_ISO_CODE),
                                                              infraestructureRepository.GetCurrencySymbolOrIsoCode(Convert.ToInt32(oSrcUser.USR_CUR_ID)),
                                                              Convert.ToDouble(iCurrencyDstQuantity) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(oDstUser.CURRENCy.CUR_ISO_CODE),
                                                              infraestructureRepository.GetCurrencySymbolOrIsoCode(Convert.ToInt32(oDstUser.USR_CUR_ID)))),
                                string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(oSrcUser.CURRENCy.CUR_ISO_CODE) + "} {1}", Convert.ToDouble(oSrcUser.USR_BALANCE) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(oSrcUser.CURRENCy.CUR_ISO_CODE), 
                                                infraestructureRepository.GetCurrencySymbolOrIsoCode(Convert.ToInt32(oSrcUser.USR_CUR_ID))),
                                dtUTCInsertionDate.Value.AddMinutes(-oSrcUser.USR_UTC_OFFSET),
                                 GetEmailFooter(ref oSrcUser, dSourceApp));

                            SendEmail(ref oSrcUser, ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "TransferBalanceSrc_EmailHeader"), strTransferBalanceSrcBody, dSourceApp);
                        }
                        catch (Exception ex)
                        {
                            string error = string.Format("Error:: strTransferBalanceSrcBody: {0} - Exception: {1}", strTransferBalanceSrcBody, ex.Message);
                            m_Log.LogMessage(LogLevels.logERROR, string.Format("Error::SendEmail::TransferBalanceSrc_EmailBody - {0}", error));
                        }


                        try
                        {
                            string culture = oDstUser.USR_CULTURE_LANG;
                            CultureInfo ci = new CultureInfo(culture);
                            Thread.CurrentThread.CurrentUICulture = ci;
                            Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);
                            integraMobile.WS.Properties.Resource.Culture = ci;


                            string strTransferBalanceDstBody = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix+"TransferBalanceDst_EmailBody"),
                                oSrcUser.USR_USERNAME,
                                (oSrcUser.USR_CUR_ID == oDstUser.USR_CUR_ID ?
                                string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(oSrcUser.CURRENCy.CUR_ISO_CODE) + "} {1}", Convert.ToDouble(iQuantity) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(oSrcUser.CURRENCy.CUR_ISO_CODE),
                                                infraestructureRepository.GetCurrencySymbolOrIsoCode(Convert.ToInt32(oDstUser.USR_CUR_ID))) :
                                string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(oDstUser.CURRENCy.CUR_ISO_CODE) + "} {1} ({2:" + infraestructureRepository.GetDecimalFormatFromIsoCode(oSrcUser.CURRENCy.CUR_ISO_CODE) + "} {3})", Convert.ToDouble(iCurrencyDstQuantity) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(oDstUser.CURRENCy.CUR_ISO_CODE),
                                                              infraestructureRepository.GetCurrencySymbolOrIsoCode(Convert.ToInt32(oDstUser.USR_CUR_ID)),
                                                              Convert.ToDouble(iQuantity) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(oSrcUser.CURRENCy.CUR_ISO_CODE),
                                                              infraestructureRepository.GetCurrencySymbolOrIsoCode(Convert.ToInt32(oSrcUser.USR_CUR_ID)))),
                                string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(oDstUser.CURRENCy.CUR_ISO_CODE) + "} {1}", Convert.ToDouble(oDstUser.USR_BALANCE) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(oDstUser.CURRENCy.CUR_ISO_CODE), 
                                                infraestructureRepository.GetCurrencySymbolOrIsoCode(Convert.ToInt32(oDstUser.USR_CUR_ID))),
                                dtUTCInsertionDate.Value.AddMinutes(-oDstUser.USR_UTC_OFFSET),
                                GetEmailFooter(ref oDstUser, dSourceApp));

                            SendEmail(ref oDstUser, ResourceExtension.GetLiteral(strSourceAppEmailPrefix + "TransferBalanceDst_EmailHeader"), strTransferBalanceDstBody, dSourceApp);
                        }
                        catch { }

                    }


                    iBalanceAfterRecharge = oSrcUser.USR_BALANCE;



                }
                else
                {
                    rtRes = ResultType.Result_Error_Not_Enough_Balance;
                    Logger_AddLogMessage(string.Format("PerformTransferBalance::{0} ", rtRes.ToString()), LogLevels.logERROR);
                    return rtRes;
                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "PerformTransferBalance::Exception", LogLevels.logERROR);
            }


            return rtRes;
        }

        private ResultType RefundChargeParkPayment(ref USER oUser, decimal dOperationID, decimal? dRechargeID, bool bRestoreBalance, bool bInsertNoAnswered, bool bCheckHisOperations = false)
        {
            ResultType rtRes = ResultType.Result_OK;


            try
            {

                if (!customersRepository.RefundChargeParkPayment(ref oUser,
                                                                bRestoreBalance,
                                                                dOperationID,
                                                                bInsertNoAnswered,
                                                                bCheckHisOperations))
                {

                    Logger_AddLogMessage(string.Format("RefundChargeParkPayment::Error Refunding Parking Payment {0} ", dOperationID), LogLevels.logERROR);
                    return ResultType.Result_Error_Generic;
                }


                if (dRechargeID != null)
                {
                    if (!customersRepository.RefundRecharge(ref oUser,
                                                            dRechargeID.Value,
                                                            bRestoreBalance))
                    {

                        Logger_AddLogMessage(string.Format("RefundChargeParkPayment::Error Refunding Recharge {0} ", dRechargeID.Value), LogLevels.logERROR);
                        return ResultType.Result_Error_Generic;
                    }
                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "RefundChargeParkPayment::Exception", LogLevels.logERROR);

            }


            return rtRes;
        }

        private int? MaxAmountAllowedToPay(ref USER oUser, int iOSType, decimal dInsId, out bool bHasPaymentMean)
        {
            int? iAmount = oUser.USR_BALANCE;
            bHasPaymentMean = false;


            try
            {

                if ((oUser.USR_IS_ANONYMOUS ?? 0) == 1)
                {
                    iAmount = null;
                }
                else
                { 

                    PaymentSuscryptionType? eUserSuscrytpionType = null;
                    if (oUser.USR_SUSCRIPTION_TYPE.HasValue)
                        eUserSuscrytpionType = (PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE.Value;

                    INSTALLATION oInstallation = null;
                    DateTime? dtInsDateTime = null;
                    if (geograficAndTariffsRepository.getInstallation(dInsId, null, null, ref oInstallation, ref dtInsDateTime))
                    {
                        if (oInstallation.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG != null)
                        {
                            iAmount = 0;
                            eUserSuscrytpionType = PaymentSuscryptionType.pstPerTransaction;
                        }
                    }

                    CUSTOMER_PAYMENT_MEAN oUserPaymentMean = customersRepository.GetUserPaymentMean(ref oUser, oInstallation);

                    if ((oUserPaymentMean != null) &&
                        (oUserPaymentMean.CUSPM_ENABLED == 1) &&
                         (oUserPaymentMean.CUSPM_VALID == 1))
                    {
                        bHasPaymentMean = true;

                        if (((eUserSuscrytpionType == PaymentSuscryptionType.pstPrepay) &&
                            (oUserPaymentMean.CUSPM_AUTOMATIC_RECHARGE == 1) &&
                            (oUserPaymentMean.CUSPM_AMOUNT_TO_RECHARGE > 0)) ||
                            (eUserSuscrytpionType == PaymentSuscryptionType.pstPerTransaction))
                        {
                            iAmount = null;
                        }
                    }
                    else
                    {
                        if (iOSType == (int)MobileOS.Web)
                        {
                            iAmount = null;
                        }

                    }
                }
            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "MaxAmountAllowedToPay::Exception", LogLevels.logERROR);

            }

            return iAmount;
        }


        private string ModifyCCData(string xmlIn, SortedList parametersIn,
                                    PaymentMeanCreditCardProviderType CCProvider,
                                    PaymentMeanRechargeCreationType eCreationType,
                                    PaymentSuscryptionType? eSuscriptionType,
                                    INSTALLATION oInstallation,
                                    CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG oInsGatewayConfig,
                                    decimal dSourceApp,
                                    ref USER oUser, ref SortedList parametersOut)
        {
            string xmlOut = "";

            try
            {
                if (oInsGatewayConfig == null)
                {
                    if ((PaymentSuscryptionType?)oUser.USR_SUSCRIPTION_TYPE != eSuscriptionType)
                    {
                        customersRepository.SetUserSuscriptionType(ref oUser, eSuscriptionType.Value);
                    }
                }
                else if (!oUser.USR_SUSCRIPTION_TYPE.HasValue)
                {
                    // *** With installation gateway config present, update user suscription type if current is null only
                    customersRepository.SetUserSuscriptionType(ref oUser, eSuscriptionType.Value);
                }


                PaymentMeanType paymentType = PaymentMeanType.pmtDebitCreditCard;

                int? iChargedQuantity = null;

                try
                {
                    iChargedQuantity = Convert.ToInt32(parametersIn["ccchargedquantity"].ToString());

                }
                catch
                {
                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                    Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    return xmlOut;
                }


                if ((CCProvider != PaymentMeanCreditCardProviderType.pmccpTransbank) &&
                    (CCProvider != PaymentMeanCreditCardProviderType.pmccpMoneris) &&
                    (CCProvider != PaymentMeanCreditCardProviderType.pmccpBSRedsys) &&
                    (CCProvider != PaymentMeanCreditCardProviderType.pmccpMercadoPagoPro) &&
                    (iChargedQuantity == 0))
                {
                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                    Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    return xmlOut;
                }


                int iOSID = (int)MobileOS.Web;

                if (parametersIn["OSID"] != null)
                {
                    try
                    {
                        iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                    }
                    catch { }
                }



                bool bAutoRecharge = false;
                int? iAutoRechargeAmount = null;
                int? iAutoRechargeBelow = null;
                if (parametersIn["autrech"] != null)
                {
                    try
                    {
                        bAutoRecharge = Convert.ToInt32(parametersIn["autrech"].ToString()) == 1;

                        if (bAutoRecharge)
                        {
                            if ((parametersIn["autbelow"] != null) && (parametersIn["autamo"] != null))
                            {

                                iAutoRechargeAmount = Convert.ToInt32(parametersIn["autamo"].ToString());
                                iAutoRechargeBelow = Convert.ToInt32(parametersIn["autbelow"].ToString());

                            }
                            else
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                        }


                    }
                    catch
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        return xmlOut;

                    }
                }
                else
                {

                    if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                    {
                        bAutoRecharge = (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == 1);
                        if (bAutoRecharge)
                        {
                            iAutoRechargeAmount = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AMOUNT_TO_RECHARGE;
                            iAutoRechargeBelow = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_RECHARGE_WHEN_AMOUNT_IS_LESS;
                        }
                    }


                }


                CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG oGatewayConfig = null;
                if (paymentType == PaymentMeanType.pmtDebitCreditCard)
                {
                    if (oInsGatewayConfig == null)
                    {                       
                        oGatewayConfig = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                                                                 .Where(r => r.CPTGC_ENABLED != 0 &&
                                                                             r.CPTGC_IS_INTERNAL != 0 &&
                                                                             r.CPTGC_INTERNAL_SOAPP_ID.HasValue &&
                                                                             r.CPTGC_INTERNAL_SOAPP_ID == dSourceApp &&
                                                                             r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtDebitCreditCard) &&
                                                                             r.CPTGC_PROVIDER == (int)CCProvider)
                                                                 .FirstOrDefault();


                        if (oGatewayConfig == null)
                        {

                            oGatewayConfig = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                                            .Where(r => r.CPTGC_ENABLED != 0 &&
                                                        r.CPTGC_IS_INTERNAL != 0 &&
                                                        !r.CPTGC_INTERNAL_SOAPP_ID.HasValue &&
                                                        r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtDebitCreditCard) &&
                                                        r.CPTGC_PROVIDER == (int)CCProvider)
                                            .FirstOrDefault();

                        }
                    }
                    else
                    {
                        oGatewayConfig = oInsGatewayConfig;
                    }

                }

                decimal? dGatewayConfigId = ((oGatewayConfig != null) ? oGatewayConfig.CPTGC_ID : (decimal?)null);


                DateTime? dtExpDate = null;
                string strReference = "";
                string strAuthCode = "";
                string strAuthResult = "";
                string strAuthResultDesc = "";
                string strCardHash = "";
                string strCardReference = "";
                string strCardScheme = "";
                string strGatewayDate = "";
                string strMaskedCardNumber = "";
                string strTransactionId = "";
                string strCFTransactionId = null;
                string strExpMonth = "";
                string strExpYear = "";
                string strName = "";
                string strCardSecurityCode = "";
                string strDocumentID = "";
                string strCardType = "";
                string strDocumentType = "";
                string strInstallaments = "";
                string strCVVLength = "";


                bool bReturnPAN = false;

                PaymentMeanRechargeStatus rechargeStatus = PaymentMeanRechargeStatus.Waiting_Commit;

                if (CCProvider == PaymentMeanCreditCardProviderType.pmccpCreditCall)
                {
                    strTransactionId = parametersIn["ekashu_transaction_id"].ToString();
                    strReference = parametersIn["ekashu_reference"].ToString();
                    strAuthCode = parametersIn["ekashu_auth_code"].ToString();
                    strAuthResult = parametersIn["ekashu_auth_result"].ToString();
                    strCardHash = parametersIn["ekashu_card_hash"].ToString();
                    strCardReference = parametersIn["ekashu_card_reference"].ToString();
                    strCardScheme = parametersIn["ekashu_card_scheme"].ToString();
                    strGatewayDate = parametersIn["ekashu_date_time_local_fmt"].ToString();
                    strMaskedCardNumber = parametersIn["ekashu_masked_card_number"].ToString();
                    strExpMonth = parametersIn["ekashu_expires_end_month"].ToString();
                    strExpYear = parametersIn["ekashu_expires_end_year"].ToString();


                    if ((strExpMonth.Length == 2) && (strExpYear.Length == 4))
                    {
                        dtExpDate = new DateTime(Convert.ToInt32(strExpYear), Convert.ToInt32(strExpMonth), 1).AddMonths(1).AddSeconds(-1);
                    }
                    bReturnPAN = true;

                }
                else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpIECISA)
                {

                    strReference = parametersIn["iecisa_CF_TicketNumber"].ToString();
                    strAuthCode = parametersIn["iecisa_CF_AuthCode"].ToString();
                    strAuthResult = parametersIn["iecisa_CF_Result"].ToString(); ;
                    strCardScheme = "";
                    strCFTransactionId = parametersIn["iecisa_CF_TransactionID"].ToString();
                    strTransactionId = parametersIn["iecisa_TransactionID"].ToString();

                    strCardHash = parametersIn["iecisa_CF_CardHash"].ToString();
                    strCardReference = parametersIn["iecisa_CF_Token"].ToString();
                    strMaskedCardNumber = parametersIn["iecisa_CF_PAN"].ToString();
                    strGatewayDate = DateTime.ParseExact(parametersIn["iecisa_GatewayDate"].ToString(), "HHmmssddMMyyyy",
                                            CultureInfo.InvariantCulture).ToString("ddMMyyyyHHmmss");
                    string strExpDate = parametersIn["iecisa_CF_ExpirationDate"].ToString();

                    if (strExpDate.Length == 4)
                    {
                        dtExpDate = new DateTime(Convert.ToInt32(strExpDate.Substring(2, 2)) + 2000,
                                                    Convert.ToInt32(strExpDate.Substring(0, 2)), 1).AddMonths(1).AddSeconds(-1);
                    }
                    rechargeStatus = PaymentMeanRechargeStatus.Committed;
                    bReturnPAN = true;


                }
                else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpStripe)
                {

                    strReference = parametersIn["stripe_transaction_id"].ToString();
                    strAuthCode = "";
                    strAuthResult = "succeeded";
                    strCardHash = parametersIn["stripe_customer_id"].ToString();
                    strCardReference = parametersIn["stripe_card_reference"].ToString();
                    strCardScheme = parametersIn["stripe_card_scheme"].ToString();
                    strGatewayDate = DateTime.ParseExact(parametersIn["stripe_date_time_utc"].ToString(), "HHmmssddMMyy",
                                            CultureInfo.InvariantCulture).ToString("ddMMyyyyHHmmss");
                    strMaskedCardNumber = parametersIn["stripe_masked_card_number"].ToString();
                    strTransactionId = parametersIn["stripe_transaction_id"].ToString();
                    strExpMonth = parametersIn["stripe_expires_end_month"].ToString();
                    strExpYear = parametersIn["stripe_expires_end_year"].ToString();


                    if ((strExpMonth.Length == 2) && (strExpYear.Length == 4))
                    {
                        dtExpDate = new DateTime(Convert.ToInt32(strExpYear), Convert.ToInt32(strExpMonth), 1).AddMonths(1).AddSeconds(-1);
                    }
                    bReturnPAN = true;

                }
                else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpMoneris)
                {
                    strTransactionId = parametersIn["moneris_transaction_id"].ToString();
                    strReference = parametersIn["moneris_reference"].ToString();
                    strAuthCode = parametersIn["moneris_auth_code"].ToString();
                    strAuthResult = parametersIn["moneris_auth_result"].ToString();
                    strCardHash = parametersIn["moneris_card_hash"].ToString();
                    strCardReference = parametersIn["moneris_card_reference"].ToString();
                    strCardScheme = parametersIn["moneris_card_scheme"].ToString();
                    strGatewayDate = parametersIn["moneris_date_time_local_fmt"].ToString();
                    strMaskedCardNumber = parametersIn["moneris_masked_card_number"].ToString();
                    strExpMonth = parametersIn["moneris_expires_end_month"].ToString();
                    strExpYear = parametersIn["moneris_expires_end_year"].ToString();


                    if ((strExpMonth.Length == 2) && (strExpYear.Length == 2))
                    {
                        dtExpDate = new DateTime(Convert.ToInt32(strExpYear) + 2000, Convert.ToInt32(strExpMonth), 1).AddMonths(1).AddSeconds(-1);
                    }
                    rechargeStatus = PaymentMeanRechargeStatus.Committed;
                    bReturnPAN = true;

                }
                else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpPayu)
                {

                    strTransactionId = parametersIn["payu_transaction_id"].ToString();
                    strReference = parametersIn["payu_reference"].ToString();
                    strAuthCode = parametersIn["payu_auth_code"].ToString();
                    strCardHash = parametersIn["payu_card_hash"].ToString();
                    strCardReference = parametersIn["payu_card_reference"].ToString();
                    strCardScheme = parametersIn["payu_card_scheme"].ToString();
                    strGatewayDate = parametersIn["payu_date_time_local_fmt"].ToString();
                    strMaskedCardNumber = parametersIn["payu_masked_card_number"].ToString();
                    if (parametersIn["payu_name"] != null)
                        strName = parametersIn["payu_name"].ToString();
                    if (parametersIn["payu_document_id"] != null)
                        strDocumentID = parametersIn["payu_document_id"].ToString();
                    if (parametersIn["payu_cvc"] != null)
                        strCardSecurityCode = parametersIn["payu_cvc"].ToString();


                    dtExpDate = null;
                    rechargeStatus = PaymentMeanRechargeStatus.Committed;
                    bReturnPAN = true;
                }
                else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpTransbank)
                {

                    if (iChargedQuantity > 0)
                    {
                        strTransactionId = parametersIn["transbank_transaction_id"].ToString();
                        strReference = parametersIn["transbank_reference"].ToString();
                        strAuthCode = parametersIn["transbank_auth_code"].ToString();
                        strGatewayDate = parametersIn["transbank_date_time_local_fmt"].ToString();
                    }
                    else
                    {
                        strTransactionId = "";
                        strReference = "";
                        strAuthCode = "";
                        strGatewayDate = "";
                    }
                    strAuthResult = "";
                    strCardHash = parametersIn["transbank_card_hash"].ToString();
                    strCardReference = parametersIn["transbank_card_reference"].ToString();
                    strCardScheme = parametersIn["transbank_card_scheme"].ToString();
                    strMaskedCardNumber = parametersIn["transbank_masked_card_number"].ToString();
                    dtExpDate = null;
                    rechargeStatus = PaymentMeanRechargeStatus.Committed;
                    bReturnPAN = true;
                }
                else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpBSRedsys)
                {
                    if (parametersIn["bsredsys_auth_code"] == null) parametersIn["bsredsys_auth_code"] = "";
                    if (parametersIn["bsredsys_auth_result"] == null) parametersIn["bsredsys_auth_result"] = "";
                    if (parametersIn["bsredsys_card_scheme"] == null) parametersIn["bsredsys_card_scheme"] = "";

                    strTransactionId = parametersIn["bsredsys_transaction_id"].ToString();
                    strReference = parametersIn["bsredsys_reference"].ToString();
                    strAuthCode = parametersIn["bsredsys_auth_code"].ToString();
                    strAuthResult = parametersIn["bsredsys_auth_result"].ToString();
                    strCardHash = parametersIn["bsredsys_card_hash"].ToString();
                    strCardReference = parametersIn["bsredsys_card_reference"].ToString();
                    strCardScheme = parametersIn["bsredsys_card_scheme"].ToString();
                    strGatewayDate = parametersIn["bsredsys_date_time_local_fmt"].ToString();
                    strMaskedCardNumber = parametersIn["bsredsys_masked_card_number"].ToString();
                    strExpMonth = parametersIn["bsredsys_expires_end_month"].ToString();
                    strExpYear = parametersIn["bsredsys_expires_end_year"].ToString();


                    if ((strExpMonth.Length == 2) && (strExpYear.Length == 2))
                    {
                        dtExpDate = new DateTime(Convert.ToInt32(strExpYear) + 2000, Convert.ToInt32(strExpMonth), 1).AddMonths(1).AddSeconds(-1);
                    }
                    rechargeStatus = PaymentMeanRechargeStatus.Committed;
                    bReturnPAN = false;
                }
                else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpPaysafe)
                {
                    if (parametersIn["paysafe_auth_code"] == null) parametersIn["paysafe_auth_code"] = "";
                    if (parametersIn["paysafe_auth_result"] == null) parametersIn["paysafe_auth_result"] = "";
                    if (parametersIn["paysafe_card_scheme"] == null) parametersIn["paysafe_card_scheme"] = "";

                    strTransactionId = parametersIn["paysafe_transaction_id"].ToString();
                    strReference = parametersIn["paysafe_reference"].ToString();
                    strAuthCode = parametersIn["paysafe_auth_code"].ToString();
                    strAuthResult = parametersIn["paysafe_auth_result"].ToString();
                    strCardHash = parametersIn["paysafe_card_hash"].ToString();
                    strCardReference = parametersIn["paysafe_card_reference"].ToString();
                    strCardScheme = parametersIn["paysafe_card_scheme"].ToString();
                    strGatewayDate = parametersIn["paysafe_date_time_local_fmt"].ToString();
                    strMaskedCardNumber = parametersIn["paysafe_masked_card_number"].ToString();
                    strExpMonth = parametersIn["paysafe_expires_end_month"].ToString();
                    strExpYear = parametersIn["paysafe_expires_end_year"].ToString();
                    if (parametersIn["paysafe_zip"] != null)
                        strDocumentID = parametersIn["paysafe_zip"].ToString();

                    if ((strExpMonth.Length > 0) && (strExpYear.Length == 2))
                    {
                        dtExpDate = new DateTime(Convert.ToInt32(strExpYear) + 2000, Convert.ToInt32(strExpMonth), 1).AddMonths(1).AddSeconds(-1);
                    }
                    rechargeStatus = PaymentMeanRechargeStatus.Committed;
                    bReturnPAN = false;
                }
                else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpMercadoPago)
                {
                    strTransactionId = parametersIn["mercadopago_transaction_id"].ToString();
                    strReference = parametersIn["mercadopago_reference"].ToString();
                    strCardHash = parametersIn["mercadopago_card_hash"].ToString();
                    strCardReference = parametersIn["mercadopago_card_reference"].ToString();
                    strCardScheme = parametersIn["mercadopago_card_scheme"].ToString();
                    strGatewayDate = parametersIn["mercadopago_date_time_local_fmt"].ToString();
                    strMaskedCardNumber = parametersIn["mercadopago_masked_card_number"].ToString();
                    strExpMonth = parametersIn["mercadopago_expires_end_month"].ToString();
                    strExpYear = parametersIn["mercadopago_expires_end_year"].ToString();
                    strCardType = parametersIn["mercadopago_card_type"].ToString();
                    strDocumentID = parametersIn["mercadopago_document_id"].ToString();
                    strDocumentType = parametersIn["mercadopago_document_type"].ToString();
                    strInstallaments = parametersIn["mercadopago_installaments"].ToString();
                    strCVVLength = parametersIn["mercadopago_cvv_length"].ToString();



                    if ((strExpMonth.Length > 0) && (strExpYear.Length == 4))
                    {
                        dtExpDate = new DateTime(Convert.ToInt32(strExpYear), Convert.ToInt32(strExpMonth), 1).AddMonths(1).AddSeconds(-1);
                    }

                    rechargeStatus = PaymentMeanRechargeStatus.Committed;
                    bReturnPAN = true;
                }
                else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpMercadoPagoPro)
                {
                    rechargeStatus = PaymentMeanRechargeStatus.Committed;
                    bReturnPAN = false;
                }


                if ((string.IsNullOrEmpty(strTransactionId))||
                    (!customersRepository.ExistTransaction(ref oUser, strTransactionId, dGatewayConfigId.Value)))
                {
                    decimal dCurrencyId = infraestructureRepository.GetCountryCurrency(Convert.ToInt32(oUser.COUNTRy.COU_ID));
                    if (paymentType == PaymentMeanType.pmtDebitCreditCard && oInsGatewayConfig != null)
                    {
                        dCurrencyId = oInsGatewayConfig.CPTGC_CUR_ID;
                    }

                    if (!customersRepository.SetUserPaymentMean(ref oUser, infraestructureRepository,
                                    new CUSTOMER_PAYMENT_MEAN
                                    {
                                        CUSPM_PAT_ID = Convert.ToInt32(paymentType),
                                        CUSPM_PAST_ID = ((Convert.ToInt32(paymentType) == (int)PaymentMeanType.pmtPaypal) && !bAutoRecharge) ?
                                            (int)PaymentMeanSubType.pmstPaypal : (int)PaymentMeanSubType.pmstUndefined,
                                        CUSPM_CREDIT_CARD_PAYMENT_PROVIDER = (Convert.ToInt32(paymentType) == (int)PaymentMeanType.pmtPaypal) ? -1 :
                                                                            (int)CCProvider,
                                        CUSPM_AUTOMATIC_RECHARGE = bAutoRecharge ? 1 : 0,
                                        CUSPM_AMOUNT_TO_RECHARGE = bAutoRecharge ? iAutoRechargeAmount.Value : (int?)null,
                                        CUSPM_RECHARGE_WHEN_AMOUNT_IS_LESS = bAutoRecharge ? iAutoRechargeBelow : (int?)null,
                                        CUSPM_TOKEN_PAYPAL_ID = "",
                                        CUSPM_CUR_ID = dCurrencyId,
                                        CUSPM_VALID = 1,
                                        CUSPM_CPTGC_ID = dGatewayConfigId,
                                        CUSPM_TOKEN_CARD_HASH = ((CCProvider == PaymentMeanCreditCardProviderType.pmccpTransbank) || 
                                                                 (CCProvider == PaymentMeanCreditCardProviderType.pmccpPayu) || 
                                                                 (CCProvider == PaymentMeanCreditCardProviderType.pmccpMoneris) || 
                                                                 (CCProvider == PaymentMeanCreditCardProviderType.pmccpBSRedsys) ||
                                                                 (CCProvider == PaymentMeanCreditCardProviderType.pmccpMercadoPago)) ? strCardHash : null,
                                        CUSPM_TOKEN_CARD_REFERENCE = ((CCProvider == PaymentMeanCreditCardProviderType.pmccpTransbank) || 
                                                                      (CCProvider == PaymentMeanCreditCardProviderType.pmccpPayu) || 
                                                                      (CCProvider == PaymentMeanCreditCardProviderType.pmccpMoneris) || 
                                                                      (CCProvider == PaymentMeanCreditCardProviderType.pmccpBSRedsys) ||
                                                                      (CCProvider == PaymentMeanCreditCardProviderType.pmccpMercadoPago)) ? strCardReference : null,
                                        CUSPM_TOKEN_MASKED_CARD_NUMBER = ((CCProvider == PaymentMeanCreditCardProviderType.pmccpTransbank) || 
                                                                          (CCProvider == PaymentMeanCreditCardProviderType.pmccpPayu) || 
                                                                          (CCProvider == PaymentMeanCreditCardProviderType.pmccpMoneris) || 
                                                                          (CCProvider == PaymentMeanCreditCardProviderType.pmccpBSRedsys) ||
                                                                          (CCProvider == PaymentMeanCreditCardProviderType.pmccpMercadoPago)) ? strMaskedCardNumber : null,
                                        CUSPM_TOKEN_CARD_SCHEMA = ((CCProvider == PaymentMeanCreditCardProviderType.pmccpTransbank) || 
                                                                   (CCProvider == PaymentMeanCreditCardProviderType.pmccpPayu) || 
                                                                   (CCProvider == PaymentMeanCreditCardProviderType.pmccpMoneris) || 
                                                                   (CCProvider == PaymentMeanCreditCardProviderType.pmccpBSRedsys) ||
                                                                   (CCProvider == PaymentMeanCreditCardProviderType.pmccpMercadoPago)) ? strCardScheme : null,
                                        CUSPM_TOKEN_CARD_EXPIRATION_DATE = dtExpDate,
                                        CUSPM_TOKEN_CARD_NAME = strName,
                                        CUSPM_TOKEN_CARD_DOCUMENT_ID = strDocumentID,
                                        CUSPM_CARD_SECURITY_CODE = (!String.IsNullOrEmpty(strCardSecurityCode) ? CalculateCryptResult(strCardSecurityCode, ConfigurationManager.AppSettings["CryptKey"]) : null),
                                        CUSPM_LAST_SOAPP_ID = dSourceApp,
                                        CUSPM_CREATION_SOAPP_ID = dSourceApp,
                                        CUSPM_CVV_LENGTH = (string.IsNullOrEmpty(strCVVLength) ? (int?)null : Convert.ToInt32(strCVVLength)),
                                        CUSPM_TOKEN_CARD_TYPE = strCardType,
                                        CUSPM_TOKEN_CARD_DOCUMENT_TYPE = strDocumentType,
                                        CUSPM_TOKEN_INSTALLMENTS = strInstallaments,

                                    }))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                        Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        return xmlOut;

                    }
                    else
                    {


                        if (iChargedQuantity > 0)
                        {
                            decimal? dRechargeId = null;

                            bool bAddToBalance = true;

                            decimal dCurrencyToCharge = dCurrencyId; // oUser.CURRENCy.CUR_ID;

                            if (eSuscriptionType.Value == PaymentSuscryptionType.pstPerTransaction)
                            {
                                List<string> oPerTransactionParameters = new List<string>();
                                iChargedQuantity = 0;

                                oPerTransactionParameters = ConfigurationManager.AppSettings["SuscriptionType2_AddPayMethChargeValue"].ToString().Split(';').ToList();

                                for (int i = 0; i < oPerTransactionParameters.Count; i++)
                                {
                                    if (oPerTransactionParameters[i] == infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(dCurrencyId)))
                                    {
                                        iChargedQuantity = Convert.ToInt32(oPerTransactionParameters[i + 1]);
                                        //dCurrencyToCharge = oUser.CURRENCy.CUR_ID;
                                        break;
                                    }

                                }

                                bAddToBalance = false;
                                rechargeStatus = rechargeStatus == PaymentMeanRechargeStatus.Waiting_Commit ? PaymentMeanRechargeStatus.Waiting_Cancellation : PaymentMeanRechargeStatus.Waiting_Refund;
                            }


                            decimal? dLatitude = null;
                            decimal? dLongitude = null;
                            this.GetLatLon(parametersIn, out dLatitude, out dLongitude);

                            decimal dPercVAT1 = 0;
                            decimal dPercVAT2 = 0;
                            decimal dPercFEE = 0;
                            decimal dPercFEETopped = 0;
                            decimal dFixedFEE = 0;
                            int? iPaymentTypeId = null;
                            int? iPaymentSubtypeId = null;
                            if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                            {
                                iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                                iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                            }


                            if (oUser.USR_SUSCRIPTION_TYPE.Value != (int)PaymentSuscryptionType.pstPerTransaction)
                            {
                                if (!customersRepository.GetFinantialParams(oUser, "", iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.BalanceRecharge,
                                                                            out dPercVAT1, out dPercVAT2, out dPercFEE, out dPercFEETopped, out dFixedFEE))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("ModifyCCData::Error: Error getting finantial parameters. xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }

                            int iPartialVAT1 = 0;
                            int iPartialPercFEE = 0;
                            int iPartialFixedFEE = 0;
                            int iPartialPercFEEVAT = 0;
                            int iPartialFixedFEEVAT = 0;

                            int iTotalQuantity = iChargedQuantity.Value;

                            if (oUser.USR_SUSCRIPTION_TYPE.Value != (int)PaymentSuscryptionType.pstPerTransaction)
                            {

                                iTotalQuantity = customersRepository.CalculateFEE(iChargedQuantity.Value, dPercVAT1, dPercVAT2, dPercFEE, dPercFEETopped, dFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE);
                            }

                            string sBackOfficeUsr = null;
                            try
                            {
                                sBackOfficeUsr = parametersIn["backofficeUsr"].ToString();
                            }
                            catch (Exception) { }


                            string sAppVersion = "";
                            try
                            {
                                if (parametersIn["appvers"] != null)
                                    sAppVersion = parametersIn["appvers"].ToString();
                                else
                                    sAppVersion = "1.0";
                            }
                            catch
                            {
                                sAppVersion = "1.0";
                            }

                            int iPercFEETopped = Convert.ToInt32(Math.Round(dPercFEETopped, MidpointRounding.AwayFromZero));
                            int iFixedFEE = Convert.ToInt32(Math.Round(dFixedFEE, MidpointRounding.AwayFromZero));


                            int iAmountToBeAddedToBalance = iChargedQuantity.Value;

                            if (oInstallation != null)
                            {

                                decimal dShopKeeperBon = oInstallation.INS_SHOPKEEPER_RECHARGE_BONIFICATION_PERC.HasValue ? oInstallation.INS_SHOPKEEPER_RECHARGE_BONIFICATION_PERC.Value : 0;

                                if ((dShopKeeperBon > 0) && (oUser.USR_SHOPKEEPER_STATUS.HasValue) && (oUser.USR_SHOPKEEPER_STATUS == (int)ShopKeeperStatus.ShopKeeperUser))
                                {
                                    decimal dbonQuantity = Math.Round(Convert.ToDecimal(iChargedQuantity.Value) * dShopKeeperBon, MidpointRounding.AwayFromZero);

                                    iAmountToBeAddedToBalance = Convert.ToInt32(dbonQuantity) + iChargedQuantity.Value;
                                }
                            }


                            if (!customersRepository.RechargeUserBalance(ref oUser,
                                                                        oGatewayConfig,
                                                                        Convert.ToInt32(iOSID),
                                                                        bAddToBalance,
                                                                        iChargedQuantity.Value,
                                                                        iAmountToBeAddedToBalance,
                                                                        dPercVAT1, dPercVAT2, iPartialVAT1, dPercFEE, iPercFEETopped, iPartialPercFEE, iFixedFEE, iPartialFixedFEE, iTotalQuantity,
                                                                        dCurrencyToCharge,
                                                                        eSuscriptionType.Value, // (PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE,
                                                                        rechargeStatus,
                                                                        eCreationType,
                                //0,
                                                                        strReference,
                                                                        strTransactionId,
                                                                        strCFTransactionId,
                                                                        strGatewayDate,
                                                                        strAuthCode,
                                                                        strAuthResult,
                                                                        strAuthResultDesc,
                                                                        strCardHash,
                                                                        strCardReference,
                                                                        strCardScheme,
                                                                        strMaskedCardNumber,
                                                                        strName,
                                                                        strDocumentID,
                                                                        dtExpDate,
                                                                        null,
                                                                        null,
                                                                        null,
                                                                        false,
                                                                        dLatitude, dLongitude, sAppVersion, "", "", "", "","", null, null, dSourceApp,
                                                                        infraestructureRepository,
                                                                        out dRechargeId,
                                                                        false, sBackOfficeUsr))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }

                            if (eSuscriptionType == PaymentSuscryptionType.pstPrepay)
                            {
                                CUSTOMER_PAYMENT_MEANS_RECHARGE oRecharge = null;
                                if (customersRepository.GetRechargeData(ref oUser, dRechargeId.Value, out oRecharge))
                                {
                                    if ((PaymentSuscryptionType)oRecharge.CUSPMR_SUSCRIPTION_TYPE == PaymentSuscryptionType.pstPrepay)
                                    {
                                        string culture = oUser.USR_CULTURE_LANG;
                                        CultureInfo ci = new CultureInfo(culture);
                                        Thread.CurrentThread.CurrentUICulture = ci;
                                        Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);
                                        integraMobile.WS.Properties.Resource.Culture = ci;


                                        int iQuantity = oRecharge.CUSPMR_AMOUNT;
                                        dPercVAT1 = oRecharge.CUSPMR_PERC_VAT1 ?? 0;
                                        dPercVAT2 = oRecharge.CUSPMR_PERC_VAT2 ?? 0;
                                        dPercFEE = oRecharge.CUSPMR_PERC_FEE ?? 0;
                                        iPercFEETopped = (int)(oRecharge.CUSPMR_PERC_FEE_TOPPED ?? 0);
                                        iFixedFEE = (int)(oRecharge.CUSPMR_FIXED_FEE ?? 0);

                                        iTotalQuantity = customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                                        int iQFEE = Convert.ToInt32(Math.Round(iQuantity * dPercFEE, MidpointRounding.AwayFromZero));
                                        if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                        iQFEE += iFixedFEE;
                                        int iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                        int iQSubTotal = iQuantity + iQFEE;

                                        int iLayout = 0;
                                        if (iQFEE != 0 || iQVAT != 0)
                                        {
                                            OPERATOR oOperator = customersRepository.GetDefaultOperator();
                                            if (oOperator != null) iLayout = oOperator.OPR_FEE_LAYOUT;
                                        }


                                        string sLayoutSubtotal = "";
                                        string sLayoutTotal = "";

                                        string sCurIsoCode = infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID));
                                        string strSourceAppEmailPrefix = GetEmailSourceAppEmailPrefix(dSourceApp);

                                        if (iLayout == 2)
                                        {
                                            sLayoutSubtotal = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix+"Email_LayoutSubtotal"),
                                                                            string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQSubTotal) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)),
                                                                            (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00#}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                            (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00#}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                            string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQVAT) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)));
                                        }
                                        else if (iLayout == 1)
                                        {
                                            sLayoutTotal = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix+"Email_LayoutTotal"),
                                                                         string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQuantity) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)),
                                                                         string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQFEE) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)),
                                                                         (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00#}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                         (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00#}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                         string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(sCurIsoCode) + "} {1}", Convert.ToDouble(iQVAT) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(sCurIsoCode), infraestructureRepository.GetCurSymbolFromIsoCode(sCurIsoCode)));
                                        }

                                        string strRechargeEmailSubject = ResourceExtension.GetLiteral(strSourceAppEmailPrefix+"ConfirmNoAutomaticRecharge_EmailHeader");
                                        /*
                                            ID: {0}<br>
                                         *  Fecha de recarga: {1:HH:mm:ss dd/MM/yyyy}<br>
                                         *  Cantidad Recargada: {2} 
                                         */
                                        string strRechargeEmailBody = string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix+"ConfirmRecharge_EmailBody"),
                                            oRecharge.CUSPMR_ID,
                                            oRecharge.CUSPMR_DATE,
                                            string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID))) + "} {1}",
                                            Convert.ToDouble(oRecharge.CUSPMR_TOTAL_AMOUNT_CHARGED) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID))),
                                                                          infraestructureRepository.GetCurrencySymbolOrIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID))),
                                            string.Format("{0:" + infraestructureRepository.GetDecimalFormatFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))) + "} {1}",
                                            Convert.ToDouble(oUser.USR_BALANCE) / infraestructureRepository.GetCurrencyDivisorFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))),
                                                                infraestructureRepository.GetCurrencySymbolOrIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))),
                                            ConfigurationManager.AppSettings["EmailSignatureURL"],
                                            ConfigurationManager.AppSettings["EmailSignatureGraphic"],
                                            sLayoutSubtotal, sLayoutTotal,
                                            GetEmailFooter(ref oUser, dSourceApp));


                                        SendEmail(ref oUser, strRechargeEmailSubject, strRechargeEmailBody, dSourceApp);

                                    }
                                }

                            }
                            /*else if ((oUser.USR_SUSCRIPTION_TYPE.Value == (int)PaymentSuscryptionType.pstPerTransaction) && (!bPerTransactionRefundMoney))
                            {

                                decimal dOperationID;
                                if (!customersRepository.ChargeServiceOperation(ref oUser,
                                    Convert.ToInt32(iOSID),
                                    false,
                                    ServiceChargeType.NewPaymentMean,
                                    PaymentSuscryptionType.pstPerTransaction,
                                    DateTime.UtcNow.AddMinutes(-oUser.USR_UTC_OFFSET),
                                    DateTime.UtcNow,
                                    iChargedQuantity.Value,
                                    dCurrencyToCharge,
                                    dCurrencyToCharge,
                                    1.0,
                                    0,
                                    iChargedQuantity.Value,
                                    dRechargeId,
                                    out dOperationID))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }
                            }*/
                        }
                    }
                }

                parametersOut = new SortedList();
                parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                parametersOut["newbal"] = oUser.USR_BALANCE;

                if (bReturnPAN)
                {

                    /*parametersOut["ekashu_reference"] = strReference;
                    parametersOut["ekashu_auth_code"] = strAuthCode;
                    parametersOut["ekashu_auth_result"] = strAuthResult;
                    parametersOut["ekashu_card_hash"] = strCardHash;
                    parametersOut["ekashu_card_reference"] = strCardReference;
                    parametersOut["ekashu_card_scheme"] = strCardScheme;
                    parametersOut["ekashu_date_time_local_fmt"] = strGatewayDate;*/
                    parametersOut["masked_card_number"] = strMaskedCardNumber;
                    /*parametersOut["ekashu_expires_end_month"] = strExpMonth;
                    parametersOut["ekashu_expires_end_year"] = strExpYear;*/
                }

                xmlOut = GenerateXMLOuput(parametersOut);

                if (xmlOut.Length == 0)
                {
                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                    Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
                else
                {
                    Logger_AddLogMessage(string.Format("ModifyCCData: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }

        private bool SendEmail(ref USER oUser, string strEmailSubject, string strEmailBody, decimal dSourceApp)
        {
            bool bRes = true;
            try
            {

                long lSenderId = infraestructureRepository.SendEmailTo(oUser.USR_EMAIL, strEmailSubject, strEmailBody, dSourceApp);

                if (lSenderId > 0)
                {
                    customersRepository.InsertUserEmail(ref oUser, oUser.USR_EMAIL, strEmailSubject, strEmailBody, lSenderId);
                }

            }
            catch
            {
                bRes = false;
            }

            return bRes;
        }

        private bool SendEmail(string strEmailRecipient, string strEmailSubject, string strEmailBody,decimal dSourceApp)
        {
            bool bRes = true;
            try
            {

                long lSenderId = infraestructureRepository.SendEmailTo(strEmailRecipient, strEmailSubject, strEmailBody, dSourceApp);

            }
            catch
            {
                bRes = false;
            }

            return bRes;
        }

        private bool SendEmailAndSMS(ref USER oUser, USERS_SECURITY_OPERATION oSecOperation, string strResEmailHeader, string strResEmailBody, string strResSMS, decimal dSourceApp)
        {
            bool bRes = true;
            try
            {
                string url = ConfigurationManager.AppSettings["ForgotPassword_URL"];
                string urlWithParam = url + "?code=" + oSecOperation.USOP_URL_PARAMETER;
                string strEmailSubject = strResEmailHeader;
                string strEmailBody = string.Format(strResEmailBody, urlWithParam, url);
                string strSMS = string.Format(strResSMS, oSecOperation.USOP_ACTIVATION_CODE);

                long lSenderId = infraestructureRepository.SendEmailTo(oSecOperation.USOP_NEW_EMAIL, strEmailSubject, strEmailBody, dSourceApp);

                if (lSenderId > 0)
                {
                    string strCompleteTelephone = "";
                    customersRepository.InsertUserEmail(ref oUser, oSecOperation.USOP_NEW_EMAIL, strEmailSubject, strEmailBody, lSenderId);

                    if (!string.IsNullOrEmpty(oSecOperation.USOP_NEW_MAIN_TEL))
                    {
                        lSenderId = infraestructureRepository.SendSMSTo(Convert.ToInt32(oSecOperation.USOP_NEW_MAIN_TEL_COUNTRY.Value), oSecOperation.USOP_NEW_MAIN_TEL, strSMS, dSourceApp, ref strCompleteTelephone);

                        if (lSenderId > 0)
                        {
                            customersRepository.InsertUserSMS(ref oUser, strCompleteTelephone, strSMS, lSenderId);
                        }
                    }

                }


            }
            catch
            {
                bRes = false;

            }

            return bRes;
        }

        private bool SendEmail(ref USER oUser, USERS_SECURITY_OPERATION oSecOperation, string strResEmailHeader, string strResEmailBody,decimal dSourceApp)
        {
            bool bRes = true;
            try
            {
                string url = ConfigurationManager.AppSettings["ForgotPassword_URL"];
                string urlWithParam = url + "?code=" + oSecOperation.USOP_URL_PARAMETER;
                string strEmailSubject = strResEmailHeader;
                string strEmailBody = string.Format(strResEmailBody, urlWithParam, url, GetEmailFooter(ref oUser, dSourceApp));

                long lSenderId = infraestructureRepository.SendEmailTo(oSecOperation.USOP_NEW_EMAIL, strEmailSubject, strEmailBody, dSourceApp);

                if (lSenderId > 0)
                {
                    customersRepository.InsertUserEmail(ref oUser, oSecOperation.USOP_NEW_EMAIL, strEmailSubject, strEmailBody, lSenderId);
                }
            }
            catch
            {
                bRes = false;

            }

            return bRes;
        }

        private void GetLatLon(SortedList parametersIn, out decimal? dLatitude, out decimal? dLongitude)
        {
            dLatitude = null;
            dLongitude = null;

            NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
            numberFormatProvider.NumberDecimalSeparator = ".";

            string sValue = "";
            try
            {
                sValue = parametersIn["gps_lat"].ToString();
                if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                decimal dTryLatitude = Convert.ToDecimal(parametersIn["gps_lat"].ToString(), numberFormatProvider);
                dLatitude = dTryLatitude;
            }
            catch
            {
                dLatitude = null;
            }

            try
            {
                sValue = parametersIn["gps_long"].ToString();
                if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                decimal dTryLongitude = Convert.ToDecimal(parametersIn["gps_long"].ToString(), numberFormatProvider);
                dLongitude = dTryLongitude;
            }
            catch
            {
                dLongitude = null;
            }

        }

        private string GetLiteralByUserCountry(string strLiteralName, ref USER oUser)
        {
            string strLiteral = "";

            try
            {
                strLiteral = ResourceExtension.GetLiteral(string.Format("{0}_COU_{1}", strLiteralName, oUser.COUNTRy.COU_CODE));
                if (string.IsNullOrEmpty(strLiteral))
                {
                    strLiteral = ResourceExtension.GetLiteral(strLiteralName);
                }

            }
            catch
            {

            }

            return strLiteral;
        }

        private string GetEmailFooter(ref INSTALLATION oInstallation, decimal dSourceApp)
        {
            string strFooter = "";

            try
            {

                string strSourceAppEmailPrefix = GetEmailSourceAppEmailPrefix(dSourceApp);

                strFooter = ResourceExtension.GetLiteral(string.Format("{1}footer_INS_{0}", oInstallation.INS_SHORTDESC, strSourceAppEmailPrefix));
                if (string.IsNullOrEmpty(strFooter))
                {
                    strFooter = ResourceExtension.GetLiteral(string.Format("{1}footer_COU_{0}", oInstallation.COUNTRy.COU_CODE, strSourceAppEmailPrefix));
                }

            }
            catch
            {

            }

            return strFooter;
        }

        private string GetEmailFooter(ref USER oUser, decimal dSourceApp)
        {
            string strFooter = "";

            try
            {
                string strSourceAppEmailPrefix = GetEmailSourceAppEmailPrefix(dSourceApp);
                strFooter = ResourceExtension.GetLiteral(string.Format("{2}footer_CUR_{0}_{1}", infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)), oUser.COUNTRy.COU_CODE, strSourceAppEmailPrefix));
                if (string.IsNullOrEmpty(strFooter))
                {
                    strFooter = ResourceExtension.GetLiteral(string.Format("{1}footer_CUR_{0}", infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)), strSourceAppEmailPrefix));
                }
            }
            catch
            {

            }

            return strFooter;
        }

        private string GetEmailInvoiceHeader(ref INSTALLATION oInstallation, decimal dSourceApp)
        {
            string strFooter = "";

            try
            {
                string strSourceAppEmailPrefix = GetEmailSourceAppEmailPrefix(dSourceApp);
                strFooter = ResourceExtension.GetLiteral(string.Format("{1}InvoiceSection_INS_{0}", oInstallation.INS_SHORTDESC.ToUpper(), dSourceApp));
                if (string.IsNullOrEmpty(strFooter))
                {
                    strFooter = ResourceExtension.GetLiteral(string.Format("{1}InvoiceSection_COU_{0}", oInstallation.COUNTRy.COU_CODE, dSourceApp));
                    //TO DO: Con BLINKAY Esto sobra "Resumen de PAGO"
                    //if (string.IsNullOrEmpty(strFooter))
                    //{
                    //    strFooter = ResourceExtension.GetLiteral("InvoiceSection");
                    //}
                }
            }
            catch
            {

            }

            return strFooter;
        }

        private string GetOccupationXml(IEnumerable<stZone> zones, string rootTag)
        {
            string sRet = "";

            if (zones != null)
            {
                int iPer = 0;
                int iPerTotal = 0;
                int i = 0;
                foreach (stZone oZone in zones)
                {
                    if (i < (zones.Count() - 1))
                    {
                        iPer = GetRandomNumber(0, 1000 - iPerTotal);
                        iPerTotal += iPer;
                    }
                    else
                        iPer = 1000 - iPerTotal;
                    sRet += string.Format("<{0} xmlns:json='http://james.newtonking.com/projects/json' json:Array='true' ><id>{1}</id><ocuperc>{2}</ocuperc><colour>{3}</colour><numdesc>{4}</numdesc><desc>{5}</desc>{6}</{0}>",
                                          rootTag,
                                          oZone.dID,
                                          Convert.ToDecimal(iPer) / 10,
                                          oZone.strColour,
                                          oZone.strShowId,
                                          oZone.strDescription,
                                          GetOccupationXml(oZone.subzones, "subzone"));
                    i += 1;
                }
            }

            return sRet;
        }

        private QueryOperationListPaymentMeanRechargeType TranslatePaymentMeanRechargeType(PaymentMeanRechargeType epaymentMeanRechargeType)
        {
            QueryOperationListPaymentMeanRechargeType eType = QueryOperationListPaymentMeanRechargeType.qol_DebitCreditCard;

            switch (epaymentMeanRechargeType)
            {
                case PaymentMeanRechargeType.Payment:
                    eType = QueryOperationListPaymentMeanRechargeType.qol_DebitCreditCard;
                    break;
                case PaymentMeanRechargeType.Coupon:
                    eType = QueryOperationListPaymentMeanRechargeType.qol_Coupon;
                    break;
                case PaymentMeanRechargeType.BarCode:
                    eType = QueryOperationListPaymentMeanRechargeType.qol_Coupon;
                    break;
                case PaymentMeanRechargeType.Pagatelia:
                    eType = QueryOperationListPaymentMeanRechargeType.qol_Pagatelia;
                    break;
                case PaymentMeanRechargeType.Spotycoins:
                    eType = QueryOperationListPaymentMeanRechargeType.qol_Spotycoins;
                    break;
                case PaymentMeanRechargeType.Paypal:
                    eType = QueryOperationListPaymentMeanRechargeType.qol_Paypal;
                    break;
                case PaymentMeanRechargeType.Cash:
                    eType = QueryOperationListPaymentMeanRechargeType.qol_Cash;
                    break;
                case PaymentMeanRechargeType.Oxxo:
                    eType = QueryOperationListPaymentMeanRechargeType.qol_Oxxo;
                    break;
                default:
                    eType = QueryOperationListPaymentMeanRechargeType.qol_DebitCreditCard;
                    break;

            }


            return eType;
        }

        /*private bool ExistConfirmLockInformation(string strLockDictionaryString)
        {
            bool bLockDictionaryStringExist = false;
            try
            {
                lock (m_oConfirmLockDictionary)
                {
                    bLockDictionaryStringExist = m_oConfirmLockDictionary.ContainsKey(strLockDictionaryString);

                    if (bLockDictionaryStringExist)
                    {
                        ConfirmLockInfo oLockInfo = m_oConfirmLockDictionary[strLockDictionaryString];
                        if (oLockInfo != null)
                        {
                            bLockDictionaryStringExist = ((DateTime.UtcNow - oLockInfo.m_dtCreationUTCDate).TotalSeconds < MAX_SECONDS_CONFIRMING);
                        }
                        else
                        {
                            bLockDictionaryStringExist = false;
                        }

                        if (!bLockDictionaryStringExist)
                        {
                            m_oConfirmLockDictionary.Remove(strLockDictionaryString);
                            oLockInfo = null;
                        }
                    }

                    if (!bLockDictionaryStringExist)
                    {
                        m_oConfirmLockDictionary[strLockDictionaryString] = new ConfirmLockInfo();
                    }
                }
            }
            catch (Exception e)
            {
                Logger_AddLogException(e, string.Format("ExistConfirmLockInformation::Exception"), LogLevels.logERROR);
            }


            return bLockDictionaryStringExist;

        }

        private void DeleteConfirmLockInformation(string strLockDictionaryString)
        {
            try
            {
                if (!string.IsNullOrEmpty(strLockDictionaryString))
                {
                    lock (m_oConfirmLockDictionary)
                    {
                        bool bLockDictionaryStringExist = m_oConfirmLockDictionary.ContainsKey(strLockDictionaryString);

                        if (bLockDictionaryStringExist)
                        {
                            ConfirmLockInfo oLockInfo = m_oConfirmLockDictionary[strLockDictionaryString];
                            m_oConfirmLockDictionary.Remove(strLockDictionaryString);
                            oLockInfo = null;
                        }
                    }
                }
            }
            catch (Exception e)
            {
                Logger_AddLogException(e, string.Format("DeleteConfirmLockInformation::Exception"), LogLevels.logERROR);
            }

        }*/

        private bool ExistConfirmLockInformation(string sLockIdentifier)
        {
            bool bLockExist = false;
            try
            {
                lock (m_oUserLock)
                {
                    USER_LOCK oUserLock = null;
                    if (customersRepository.GetUserLock(ref oUserLock, sLockIdentifier))
                    {
                        bLockExist = ((DateTime.UtcNow - oUserLock.USRL_LOCK_UTC_DATE).TotalSeconds < MAX_SECONDS_CONFIRMING);
                    }

                    if (!bLockExist)
                    {
                        customersRepository.AddUserLock(sLockIdentifier, DateTime.UtcNow);
                    }
                }
            }
            catch (Exception e)
            {
                Logger_AddLogException(e, string.Format("ExistConfirmLockInformation::Exception"), LogLevels.logERROR);
            }


            return bLockExist;
        }

        private void DeleteConfirmLockInformation(string sLockIdentifier)
        {
            try
            {
                if (!string.IsNullOrEmpty(sLockIdentifier))
                {
                    lock (m_oUserLock)
                    {
                        customersRepository.DeleteUserLock(sLockIdentifier);
                    }
                }
            }
            catch (Exception e)
            {
                Logger_AddLogException(e, string.Format("DeleteConfirmLockInformation::Exception"), LogLevels.logERROR);
            }
        }

        private bool GetSubPayOptions(int iCountry, ulong ulAppVersion, string strCulture, decimal dSourceApp, ref SortedList parametersOut)
        {
            bool bRes = true;

            try
            {
                int iCurrencyID = (ulAppVersion < _VERSION_2_0) ? infraestructureRepository.GetCountryCurrency(MEXICO_COUNTRY_ID) :
                                                  infraestructureRepository.GetCountryCurrency(iCountry);



                CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG oCreditCardConfig = null;
                CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG oPaypalConfig = null;

                parametersOut["subscription_type"] = "";
                parametersOut["payment_method"] = "";


                if (iCurrencyID != -1)
                {
                    
                    oCreditCardConfig = infraestructureRepository
                         .Currencies
                         .Where(r => r.CUR_ID == iCurrencyID)
                         .First()
                         .CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                         .Where(r => r.CPTGC_ENABLED != 0 &&
                                     r.CPTGC_IS_INTERNAL != 0 &&
                                     r.CPTGC_INTERNAL_SOAPP_ID.HasValue &&
                                     r.CPTGC_INTERNAL_SOAPP_ID == dSourceApp &&
                                     r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtDebitCreditCard))
                         .FirstOrDefault();


                    if (oCreditCardConfig == null)
                    {

                        oCreditCardConfig = infraestructureRepository
                          .Currencies
                          .Where(r => r.CUR_ID == iCurrencyID)
                          .First()
                          .CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                                         .Where(r => r.CPTGC_ENABLED != 0 &&
                                                    r.CPTGC_IS_INTERNAL != 0 &&
                                                    !r.CPTGC_INTERNAL_SOAPP_ID.HasValue &&
                                                    r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtDebitCreditCard))
                                        .FirstOrDefault();

                    }



                    if ((oCreditCardConfig != null) && (ulAppVersion >= _VERSION_2_0))
                    {
                        PaymentMeanCreditCardProviderType eProviderType = (PaymentMeanCreditCardProviderType)oCreditCardConfig.CPTGC_PROVIDER;
                        parametersOut["ccprovider"] = (int)eProviderType;
                        parametersOut["per_transaction_minimum_charge_amount"] = oCreditCardConfig.CPTGC_MIN_CHARGE ?? 0;
                        parametersOut["per_transaction_minimum_charge_currency"] = infraestructureRepository.GetCurrencyIsoCode(iCurrencyID);

                        int iPayPerTransactionAmount = 0;
                        List<string> oPerTransactionParameters = new List<string>();


                        oPerTransactionParameters = ConfigurationManager.AppSettings["SuscriptionType2_AddPayMethChargeValue"].ToString().Split(';').ToList();

                        for (int i = 0; i < oPerTransactionParameters.Count; i++)
                        {
                            if (oPerTransactionParameters[i] == infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(iCurrencyID)))
                            {
                                iPayPerTransactionAmount = Convert.ToInt32(oPerTransactionParameters[i + 1]);
                                break;
                            }

                        }

                        parametersOut["rechdefvaluePT"] = iPayPerTransactionAmount.ToString();


                        switch (eProviderType)
                        {
                            case PaymentMeanCreditCardProviderType.pmccpCreditCall:
                                parametersOut["creditcall_token_url"] = oCreditCardConfig.CPTGC_FORM_URL;
                                parametersOut["creditcall_guid"] = oCreditCardConfig.CREDIT_CALL_CONFIGURATION.CCCON_GUID;
                                parametersOut["creditcall_hash_seed_key"] = oCreditCardConfig.CREDIT_CALL_CONFIGURATION.CCCON_HASH_SEED;

                                break;

                            case PaymentMeanCreditCardProviderType.pmccpIECISA:
                                parametersOut["iecisa_token_url"] = oCreditCardConfig.CPTGC_FORM_URL;
                                parametersOut["iecisa_guid"] = oCreditCardConfig.IECISA_CONFIGURATION.IECCON_GUID;
                                parametersOut["iecisa_hash_seed_key"] = oCreditCardConfig.IECISA_CONFIGURATION.IECCON_HASH_SEED;
                                break;

                            case PaymentMeanCreditCardProviderType.pmccpStripe:
                                parametersOut["stripe_token_url"] = oCreditCardConfig.CPTGC_FORM_URL;
                                parametersOut["stripe_guid"] = oCreditCardConfig.STRIPE_CONFIGURATION.STRCON_GUID;
                                parametersOut["stripe_hash_seed_key"] = oCreditCardConfig.STRIPE_CONFIGURATION.STRCON_HASH_SEED;
                                break;

                            case PaymentMeanCreditCardProviderType.pmccpMoneris:
                                parametersOut["moneris_token_url"] = oCreditCardConfig.CPTGC_FORM_URL;
                                parametersOut["moneris_guid"] = oCreditCardConfig.MONERIS_CONFIGURATION.MONCON_GUID;
                                parametersOut["moneris_hash_seed_key"] = oCreditCardConfig.MONERIS_CONFIGURATION.MONCON_HASH_SEED;
                                break;

                            case PaymentMeanCreditCardProviderType.pmccpPayu:
                                parametersOut["payu_token_url"] = oCreditCardConfig.CPTGC_FORM_URL;
                                parametersOut["payu_guid"] = oCreditCardConfig.PAYU_CONFIGURATION.PAYUCON_GUID;
                                parametersOut["payu_hash_seed_key"] = oCreditCardConfig.PAYU_CONFIGURATION.PAYUCON_HASH_SEED;
                                break;

                            case PaymentMeanCreditCardProviderType.pmccpTransbank:
                                parametersOut["transbank_token_url"] = oCreditCardConfig.CPTGC_FORM_URL;
                                parametersOut["transbank_guid"] = oCreditCardConfig.TRANSBANK_CONFIGURATION.TRBACON_GUID;
                                parametersOut["transbank_hash_seed_key"] = oCreditCardConfig.TRANSBANK_CONFIGURATION.TRBACON_HASH_SEED;
                                break;

                            case PaymentMeanCreditCardProviderType.pmccpBSRedsys:
                                parametersOut["bsredsys_token_url"] = oCreditCardConfig.CPTGC_FORM_URL;
                                parametersOut["bsredsys_guid"] = oCreditCardConfig.BSREDSYS_CONFIGURATION.BSRCON_GUID;
                                parametersOut["bsredsys_hash_seed_key"] = oCreditCardConfig.BSREDSYS_CONFIGURATION.BSRCON_HASH_SEED;
                                break;

                            case PaymentMeanCreditCardProviderType.pmccpPaysafe:
                                parametersOut["paysafe_token_url"] = oCreditCardConfig.CPTGC_FORM_URL;
                                parametersOut["paysafe_guid"] = oCreditCardConfig.PAYSAFE_CONFIGURATION.PYSCON_GUID;
                                parametersOut["paysafe_hash_seed_key"] = oCreditCardConfig.PAYSAFE_CONFIGURATION.PYSCON_HASH_SEED;
                                break;

                            case PaymentMeanCreditCardProviderType.pmccpMercadoPago:
                                parametersOut["mercadopago_token_url"] = oCreditCardConfig.CPTGC_FORM_URL;
                                parametersOut["mercadopago_guid"] = oCreditCardConfig.MONERIS_CONFIGURATION.MONCON_GUID;
                                parametersOut["mercadopago_hash_seed_key"] = oCreditCardConfig.MONERIS_CONFIGURATION.MONCON_HASH_SEED;
                                break;

                            default:
                                break;
                        }

                    }
                  
                    oPaypalConfig = infraestructureRepository
                         .Currencies
                         .Where(r => r.CUR_ID == iCurrencyID)
                         .First()
                         .CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                         .Where(r => r.CPTGC_ENABLED != 0 &&
                                     r.CPTGC_IS_INTERNAL != 0 &&
                                     r.CPTGC_INTERNAL_SOAPP_ID.HasValue &&
                                     r.CPTGC_INTERNAL_SOAPP_ID == dSourceApp &&
                                     r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtPaypal))
                         .FirstOrDefault();


                    if (oPaypalConfig == null)
                    {

                        oCreditCardConfig = infraestructureRepository
                          .Currencies
                          .Where(r => r.CUR_ID == iCurrencyID)
                          .First()
                          .CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                                         .Where(r => r.CPTGC_ENABLED != 0 &&
                                                    r.CPTGC_IS_INTERNAL != 0 &&
                                                    !r.CPTGC_INTERNAL_SOAPP_ID.HasValue &&
                                                    r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtPaypal))
                                        .FirstOrDefault();

                    }




                    if ((oPaypalConfig != null) && (ulAppVersion >= _VERSION_2_0))
                    {
                        if (ulAppVersion < _VERSION_3_8)
                        {
                            parametersOut["Paypal_Client_id"] = oPaypalConfig.PAYPAL_CONFIGURATION.PPCON_RESTAPI_CLIENT_ID;
                            parametersOut["Paypal_Environment"] = oPaypalConfig.PAYPAL_CONFIGURATION.PPCON_RESTAPI_ENVIRONMENT;
                        }
                        else
                        {
                            parametersOut["Paypal_url"] = oPaypalConfig.CPTGC_FORM_URL;
                            parametersOut["Paypal_guid"] = oPaypalConfig.PAYPAL_CONFIGURATION.PPCON_GUID;
                            parametersOut["Paypal_hash_seed_key"] = oPaypalConfig.PAYPAL_CONFIGURATION.PPCON_HASH_SEED;
                        }

                    }
                }


                string sSuscriptionType = "";
                RefundBalanceType eRefundBalType = RefundBalanceType.rbtAmount;
                infraestructureRepository.GetCountryPossibleSuscriptionTypes(iCountry, out sSuscriptionType, out eRefundBalType);

                foreach (PaymentSuscryptionType oSuscriptionType in System.Enum.GetValues(typeof(PaymentSuscryptionType)))
                {
                    parametersOut["subscription_type"] += string.Format("<st json:Array='true' id= \"{0}\">", (int)oSuscriptionType);
                    if (sSuscriptionType != "")
                        parametersOut["subscription_type"] += (sSuscriptionType == (((int)oSuscriptionType).ToString()) ? "1" : "0");
                    else
                        parametersOut["subscription_type"] += "1";
                    parametersOut["subscription_type"] += "</st>";

                    string sPaymentMeanType = ConfigurationManager.AppSettings[string.Format("PaymentMeanType_{0}", Enum.GetName(typeof(PaymentSuscryptionType), oSuscriptionType))] ?? "";

                    parametersOut["payment_method"] += string.Format("<st xmlns:json='http://james.newtonking.com/projects/json' json:Array='true' id= \"{0}\">", (int)oSuscriptionType);
                    foreach (PaymentMeanType oPaymentMeanType in System.Enum.GetValues(typeof(PaymentMeanType)))
                    {
                        parametersOut["payment_method"] += string.Format("<pm json:Array='true' id= \"{0}\">", (int)oPaymentMeanType);

                        string strParamName = string.Format("PaymentMeanType_{0}_{1}", Enum.GetName(typeof(PaymentSuscryptionType), oSuscriptionType),
                                                                                       Enum.GetName(typeof(PaymentMeanType), oPaymentMeanType));

                        string strPMValue = ConfigurationManager.AppSettings[strParamName] ?? "0";

                        if ((oPaymentMeanType == PaymentMeanType.pmtDebitCreditCard) && (oCreditCardConfig != null))
                        {
                            PaymentMeanCreditCardProviderType eProviderType = (PaymentMeanCreditCardProviderType)oCreditCardConfig.CPTGC_PROVIDER;
                            strPMValue = ((int)eProviderType).ToString();
                        }
                        else if ((oPaymentMeanType == PaymentMeanType.pmtDebitCreditCard) && (oCreditCardConfig == null))
                        {
                            strPMValue = "0";
                        }
                        else if ((oPaymentMeanType == PaymentMeanType.pmtPaypal) && (oPaypalConfig != null))
                        {
                            strPMValue = "1";
                        }
                        else if ((oPaymentMeanType == PaymentMeanType.pmtPaypal) && (oPaypalConfig == null))
                        {
                            strPMValue = "0";
                        }

                        parametersOut["payment_method"] += strPMValue;

                        parametersOut["payment_method"] += "</pm>";
                    }
                    parametersOut["payment_method"] += "</st>";
                }

                string sLicenseTermsVersion = "";
                string sLicenseTermsUrl = "";
                string sConditionsUrl = "";
                parametersOut["legalterms"] = (customersRepository.NeedDisplayLicenseTerms(null, strCulture, out sLicenseTermsVersion, out sLicenseTermsUrl, out sConditionsUrl) ? "1" : "0");
                parametersOut["legaltermsver"] = sLicenseTermsVersion;
                parametersOut["url1"] = sLicenseTermsUrl;
                parametersOut["url2"] = sConditionsUrl;


            }
            catch
            {
                bRes = false;
            }

            return bRes;
        }

        private bool SendSignupEmails(ref USER oUser, string strCulture, bool bUserMustBeActivated, decimal dSourceApp)
        {
            bool bRes = true;

            try
            {
                CultureInfo ci = new CultureInfo(strCulture);
                Thread.CurrentThread.CurrentUICulture = ci;
                Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);
                integraMobile.WS.Properties.Resource.Culture = ci;


                string strActivationURL = "";
                if (bUserMustBeActivated)
                {
                    USERS_SECURITY_OPERATION oSecOperation = new USERS_SECURITY_OPERATION
                    {
                        USOP_NEW_EMAIL = oUser.USR_EMAIL,
                        USOP_NEW_MAIN_TEL = oUser.USR_MAIN_TEL,
                        USOP_NEW_MAIN_TEL_COUNTRY = oUser.USR_MAIN_TEL_COUNTRY,
                        USOP_ACTIVATION_RETRIES = 0,
                        USOP_OP_TYPE = (int)SecurityOperationType.ActivateAccount,
                        USOP_STATUS = (int)SecurityOperationStatus.Inserted,
                        USOP_LAST_SENT_DATE = DateTime.UtcNow,
                        USOP_UTCDATETIME = DateTime.UtcNow,
                        USOP_USR_ID = oUser.USR_ID,
                        USOP_SEND_BY_PUSH = 0,
                        USOP_UPID_ID = null
                    };

                    if (customersRepository.AddSecurityOperation(ref oUser, oSecOperation))
                    {
                        strActivationURL = ConfigurationManager.AppSettings["ForgotPassword_URL"];
                        strActivationURL += "?code=" + oSecOperation.USOP_URL_PARAMETER;
                    }
                }

                string strSourceAppEmailPrefix = GetEmailSourceAppEmailPrefix(dSourceApp);


                if ((oUser.CUSTOMER_PAYMENT_MEAN != null) || (string.IsNullOrEmpty(GetLiteralByUserCountry(strSourceAppEmailPrefix+"NewUserWithoutPaymentMeanEmail_Body", ref oUser))))
                {
                    long lSenderId = infraestructureRepository.SendEmailTo(oUser.USR_EMAIL, ResourceExtension.GetLiteral(strSourceAppEmailPrefix+"CustomerInscriptionModel_SummaryWelcomeEmail_Subject"),
                                                                    string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix+"CustomerInscriptionModel_SummaryWelcomeEmail_Body"),
                                                                        ConfigurationManager.AppSettings["ConfirmUserData_WebBaseURL"].ToString(),
                                                                        oUser.CUSTOMER.CUS_FIRST_NAME + " " + oUser.CUSTOMER.CUS_SURNAME1, oUser.USR_USERNAME,
                                                                        GetEmailFooter(ref oUser, dSourceApp)), dSourceApp);

                    if (lSenderId > 0)
                    {
                        customersRepository.InsertUserEmail(ref oUser, oUser.USR_EMAIL,
                            ResourceExtension.GetLiteral(strSourceAppEmailPrefix+"CustomerInscriptionModel_SummaryWelcomeEmail_Subject"), string.Format(ResourceExtension.GetLiteral(strSourceAppEmailPrefix+"CustomerInscriptionModel_SummaryWelcomeEmail_Body"),
                            ConfigurationManager.AppSettings["ConfirmUserData_WebBaseURL"].ToString(),
                            oUser.CUSTOMER.CUS_FIRST_NAME + " " + oUser.CUSTOMER.CUS_SURNAME1,
                            oUser.USR_USERNAME, GetEmailFooter(ref oUser, dSourceApp), strActivationURL), lSenderId);

                    }
                }
                else
                {

                    List<string> oListSendWarningEmails = new List<string>();
                    if ((ConfigurationManager.AppSettings["NewUserWithoutPaymentWarningEmailList"] != null) &&
                        (!string.IsNullOrEmpty(ConfigurationManager.AppSettings["NewUserWithoutPaymentWarningEmailList"].ToString())))
                    {
                        string strTempEmails = ConfigurationManager.AppSettings["NewUserWithoutPaymentWarningEmailList"].ToString();
                        oListSendWarningEmails = strTempEmails.Split(';').ToList();
                    }

                    long lSenderId = 0;
                    if (oListSendWarningEmails.Count() == 0)
                    {

                        lSenderId = infraestructureRepository.SendEmailTo(oUser.USR_EMAIL, ResourceExtension.GetLiteral(strSourceAppEmailPrefix+"NewUserWithoutPaymentMeanEmail_Subject"),
                                                                    string.Format(GetLiteralByUserCountry(strSourceAppEmailPrefix+"NewUserWithoutPaymentMeanEmail_Body", ref oUser),
                                                                    oUser.USR_USERNAME, GetEmailFooter(ref oUser, dSourceApp), strActivationURL), dSourceApp);
                    }
                    else
                    {
                        oListSendWarningEmails.Add(oUser.USR_EMAIL);
                        List<long> oListSenderIds;

                        oListSenderIds = infraestructureRepository.SendEmailToMultiRecipients(oListSendWarningEmails, ResourceExtension.GetLiteral(strSourceAppEmailPrefix+"NewUserWithoutPaymentMeanEmail_Subject"),
                                                                    string.Format(GetLiteralByUserCountry(strSourceAppEmailPrefix+"NewUserWithoutPaymentMeanEmail_Body", ref oUser),
                                                                    oUser.USR_USERNAME, GetEmailFooter(ref oUser, dSourceApp), strActivationURL), dSourceApp);

                        lSenderId = oListSenderIds[oListSenderIds.Count - 1];


                    }

                }

            }

            catch (Exception)
            {
                bRes = false;

            }

            return bRes;

        }

        private ResultType QueryFinePaymentThirdParty(string strFineNumber, string strPlate, DateTime dtinstDateTime, string strCulture, INSTALLATION oInstallation, USER oUser, int? iWSTimeout, SortedList parametersIn, SortedList parametersOut, out string strFineNumberOut)
        {
            ResultType rt = ResultType.Result_Error_Generic;
            strFineNumberOut = strFineNumber;

            bool bByPlate = !string.IsNullOrEmpty(strPlate);

            if (!bByPlate || (FineWSSignatureType)oInstallation.INS_FINE_WS_SIGNATURE_TYPE == FineWSSignatureType.fst_madidplatform ||
                             (FineWSSignatureType)oInstallation.INS_FINE_WS_SIGNATURE_TYPE == FineWSSignatureType.fst_madrid2platform)
            {
                ThirdPartyFine oThirdPartyFine = new ThirdPartyFine();            

                switch ((FineWSSignatureType)oInstallation.INS_FINE_WS_SIGNATURE_TYPE)
                {
                    case FineWSSignatureType.fst_gtechna:
                        {
                            rt = oThirdPartyFine.GtechnaQueryFinePaymentQuantity(strFineNumber, dtinstDateTime, oInstallation, iWSTimeout, ref parametersOut);
                            parametersOut["r"] = Convert.ToInt32(rt).ToString();
                            /*if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLOuput(parametersOut);
                                Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }*/

                        }
                        break;
                    case FineWSSignatureType.fst_standard:
                        {
                            rt = oThirdPartyFine.StandardQueryFinePaymentQuantity(strFineNumber, dtinstDateTime, oUser, oInstallation, iWSTimeout, ref parametersOut);
                            parametersOut["r"] = Convert.ToInt32(rt).ToString();
                            if (parametersOut.ContainsKey("fnumber") && parametersOut["fnumber"] != null)
                                strFineNumberOut = parametersOut["fnumber"].ToString();

                            /*if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLOuput(parametersOut);
                                Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }*/
                        }
                        break;
                    case FineWSSignatureType.fst_eysa:
                        {
                            if (parametersIn["lang"] != null)
                            {
                                try
                                {
                                    int iLangIndex = Convert.ToInt32(parametersIn["lang"].ToString());
                                    if (iLangIndex <= UserDeviceLangs.Length)
                                    {
                                        strCulture = UserDeviceLangs[iLangIndex - 1];
                                    }
                                }
                                catch
                                { }


                            }

                            string strCulturePrefix = strCulture.ToLower().Substring(0, 2);

                            rt = oThirdPartyFine.EysaQueryFinePaymentQuantity(strFineNumber, dtinstDateTime, strCulturePrefix, oUser, oInstallation, iWSTimeout, ref parametersOut);
                            parametersOut["r"] = Convert.ToInt32(rt).ToString();
                            if (parametersOut.ContainsKey("fnumber") && parametersOut["fnumber"] != null)
                                strFineNumber = parametersOut["fnumber"].ToString();

                            if (rt != ResultType.Result_OK)
                            {
                                /*xmlOut = GenerateXMLOuput(parametersOut);
                                Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;*/
                            }
                            else
                            {
                                if (parametersOut.ContainsKey("sector"))
                                {
                                    CultureInfo ci = new CultureInfo(strCulture);
                                    Thread.CurrentThread.CurrentUICulture = ci;
                                    Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);
                                    integraMobile.WS.Properties.Resource.Culture = ci;


                                    parametersOut["zone"] = ResourceExtension.GetLiteral("Zone_" + parametersOut["sector"].ToString());
                                    parametersOut["sector"] = ResourceExtension.GetLiteral("Sector_" + parametersOut["sector"].ToString());

                                }
                                else
                                {
                                    parametersOut["zone"] = "----";
                                    parametersOut["sector"] = "----";
                                }




                            }



                        }
                        break;
                    case FineWSSignatureType.fst_madidplatform:
                        {
                            rt = oThirdPartyFine.MadridPlatformQueryFinePaymentQuantity(strFineNumber, strPlate, dtinstDateTime, oUser, oInstallation, iWSTimeout, ref parametersOut);
                            parametersOut["r"] = Convert.ToInt32(rt).ToString();
                            if (parametersOut.ContainsKey("fnumber") && parametersOut["fnumber"] != null)
                                strFineNumberOut = parametersOut["fnumber"].ToString();
                        }
                        break;

                    case FineWSSignatureType.fst_madrid2platform:
                        {
                            rt = oThirdPartyFine.Madrid2PlatformQueryFinePaymentQuantity(strFineNumber, strPlate, dtinstDateTime, oUser, oInstallation, iWSTimeout, ref parametersOut);
                            parametersOut["r"] = Convert.ToInt32(rt).ToString();
                            if (parametersOut.ContainsKey("fnumber") && parametersOut["fnumber"] != null)
                                strFineNumberOut = parametersOut["fnumber"].ToString();
                        }
                        break;

                    case FineWSSignatureType.fst_santboi:
                        {
                            rt = oThirdPartyFine.SantBoiQueryFinePaymentQuantity(strFineNumber, dtinstDateTime, oUser, oInstallation, ref parametersOut);
                            parametersOut["r"] = Convert.ToInt32(rt).ToString();
                        }
                        break;

                    case FineWSSignatureType.fst_valoriza:
                        {
                            rt = oThirdPartyFine.ValorizaQueryFinePaymentQuantity(strFineNumber, dtinstDateTime, oUser, oInstallation, iWSTimeout, ref parametersOut);
                            parametersOut["r"] = Convert.ToInt32(rt).ToString();
                        }
                        break;
                    case FineWSSignatureType.fst_mifas:
                        {
                            rt = oThirdPartyFine.MifasQueryFinePaymentQuantity(strFineNumber, dtinstDateTime, oUser, oInstallation, iWSTimeout, ref parametersOut);
                            parametersOut["r"] = Convert.ToInt32(rt).ToString();
                        }
                        break;
                    case FineWSSignatureType.fst_bsm:
                        {
                            rt = oThirdPartyFine.BSMQueryFinePaymentQuantity(oInstallation, strFineNumber, dtinstDateTime, iWSTimeout, ref parametersOut);
                            parametersOut["r"] = Convert.ToInt32(rt).ToString();
                            if (parametersOut.ContainsKey("fnumber") && parametersOut["fnumber"] != null)
                                strFineNumberOut = parametersOut["fnumber"].ToString();
                        }
                        break;
                    case FineWSSignatureType.fst_emisalba:
                        {
                            if (parametersIn["lang"] != null)
                            {
                                try
                                {
                                    int iLangIndex = Convert.ToInt32(parametersIn["lang"].ToString());
                                    if (iLangIndex <= UserDeviceLangs.Length)
                                    {
                                        strCulture = UserDeviceLangs[iLangIndex - 1];
                                    }
                                }
                                catch
                                { }


                            }

                            string strCulturePrefix = strCulture.ToLower().Substring(0, 2);

                            rt = oThirdPartyFine.EmisalbaQueryFinePaymentQuantity(strFineNumber, dtinstDateTime, oUser, oInstallation, iWSTimeout, ref parametersOut);
                            if (parametersOut.ContainsKey("fnumber") && parametersOut["fnumber"] != null)
                                strFineNumber = parametersOut["fnumber"].ToString();

                            if (rt == ResultType.Result_OK)
                            {
                                if (parametersOut.ContainsKey("dta"))
                                {
                                    CultureInfo ci = new CultureInfo(strCulture);
                                    Thread.CurrentThread.CurrentUICulture = ci;
                                    Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);
                                    integraMobile.WS.Properties.Resource.Culture = ci;


                                    string sLiteral = ResourceExtension.GetLiteral("Emisalba_TicketDescription");
                                    if (!string.IsNullOrEmpty(sLiteral))
                                    {
                                        try
                                        {
                                            var oItems = parametersOut["dta"].ToString().Split('~');
                                            parametersOut["dta"] = string.Format(sLiteral, oItems[0], oItems[1], oItems[2], oItems[3], oItems[4], oItems[5]);
                                        }
                                        catch { }
                                    }
                                }
                            }

                        }
                        break;

                    case FineWSSignatureType.fst_internal:
                        parametersOut["r"] = Convert.ToInt32(ResultType.Result_Error_Generic).ToString();
                        rt = (ResultType)Convert.ToInt32(parametersOut["r"].ToString());
                        break;
                    case FineWSSignatureType.fst_test:
                        switch (parametersIn["f"].ToString().Substring(parametersIn["f"].ToString().Length - 1, 1))
                        {

                            case "0":
                                parametersOut["r"] = (int)ResultType.Result_OK;
                                parametersOut["q"] = 100;
                                parametersOut["lp"] = oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).First().USRP_PLATE;
                                parametersOut["d"] = dtinstDateTime.Subtract(new TimeSpan(0, 30, 0)).ToString("HHmmssddMMyy");
                                parametersOut["df"] = dtinstDateTime.Add(new TimeSpan(2, 30, 0)).ToString("HHmmssddMMyy");
                                parametersOut["ta"] = "0.5.2";
                                parametersOut["dta"] = "Test Article Description";
                                parametersOut["cur"] = oInstallation.CURRENCy.CUR_ISO_CODE;

                                break;
                            case "1":
                                parametersOut["r"] = (int)ResultType.Result_OK;
                                parametersOut["q"] = 200;
                                parametersOut["lp"] = oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).First().USRP_PLATE;
                                parametersOut["d"] = dtinstDateTime.Subtract(new TimeSpan(0, 30, 0)).ToString("HHmmssddMMyy");
                                parametersOut["df"] = dtinstDateTime.Add(new TimeSpan(2, 30, 0)).ToString("HHmmssddMMyy");
                                parametersOut["ta"] = "0.5.2";
                                parametersOut["dta"] = "Test Article Description";
                                parametersOut["cur"] = oInstallation.CURRENCy.CUR_ISO_CODE;

                                break;
                            case "2":
                                parametersOut["r"] = (int)ResultType.Result_OK;
                                parametersOut["q"] = 300;
                                parametersOut["lp"] = oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).First().USRP_PLATE;
                                parametersOut["d"] = dtinstDateTime.Subtract(new TimeSpan(0, 30, 0)).ToString("HHmmssddMMyy");
                                parametersOut["df"] = dtinstDateTime.Add(new TimeSpan(2, 30, 0)).ToString("HHmmssddMMyy");
                                parametersOut["ta"] = "0.5.2";
                                parametersOut["dta"] = "Test Article Description";
                                parametersOut["cur"] = oInstallation.CURRENCy.CUR_ISO_CODE;

                                break;
                            case "3":
                                parametersOut["r"] = (int)ResultType.Result_OK;
                                parametersOut["q"] = 400;
                                parametersOut["lp"] = oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).First().USRP_PLATE;
                                parametersOut["d"] = dtinstDateTime.Subtract(new TimeSpan(0, 30, 0)).ToString("HHmmssddMMyy");
                                parametersOut["df"] = dtinstDateTime.Add(new TimeSpan(2, 30, 0)).ToString("HHmmssddMMyy");
                                parametersOut["ta"] = "0.5.2";
                                parametersOut["dta"] = "Test Article Description";
                                parametersOut["cur"] = oInstallation.CURRENCy.CUR_ISO_CODE;

                                break;
                            case "4":
                                parametersOut["r"] = (int)ResultType.Result_OK;
                                parametersOut["q"] = 500;
                                parametersOut["lp"] = oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).First().USRP_PLATE;
                                parametersOut["d"] = dtinstDateTime.Subtract(new TimeSpan(0, 30, 0)).ToString("HHmmssddMMyy");
                                parametersOut["df"] = dtinstDateTime.Add(new TimeSpan(2, 30, 0)).ToString("HHmmssddMMyy");
                                parametersOut["ta"] = "0.5.2";
                                parametersOut["dta"] = "Test Article Description";
                                parametersOut["cur"] = oInstallation.CURRENCy.CUR_ISO_CODE;

                                break;
                            case "5":
                                parametersOut["r"] = (int)ResultType.Result_OK;
                                parametersOut["q"] = 600;
                                parametersOut["lp"] = oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).First().USRP_PLATE;
                                parametersOut["d"] = dtinstDateTime.Subtract(new TimeSpan(0, 30, 0)).ToString("HHmmssddMMyy");
                                parametersOut["df"] = dtinstDateTime.Add(new TimeSpan(2, 30, 0)).ToString("HHmmssddMMyy");
                                parametersOut["ta"] = "0.5.2";
                                parametersOut["dta"] = "Test Article Description";
                                parametersOut["cur"] = oInstallation.CURRENCy.CUR_ISO_CODE;

                                break;
                            case "6":
                                parametersOut["r"] = (int)ResultType.Result_Error_Fine_Number_Not_Found;
                                break;
                            case "7":
                                parametersOut["r"] = (int)ResultType.Result_Error_Fine_Type_Not_Payable;
                                break;
                            case "8":
                                parametersOut["r"] = (int)ResultType.Result_Error_Fine_Payment_Period_Expired;
                                break;
                            case "9":
                                parametersOut["r"] = (int)ResultType.Result_Error_Fine_Number_Already_Paid;
                                break;
                            default:
                                parametersOut["r"] = (int)ResultType.Result_OK;
                                parametersOut["q"] = 100;
                                parametersOut["lp"] = oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).First().USRP_PLATE;
                                parametersOut["d"] = dtinstDateTime.Subtract(new TimeSpan(0, 30, 0));
                                parametersOut["df"] = dtinstDateTime.Add(new TimeSpan(2, 30, 0));
                                parametersOut["ta"] = "0.5.2";
                                parametersOut["dta"] = "Test Article Description";
                                parametersOut["cur"] = oInstallation.CURRENCy.CUR_ISO_CODE;

                                break;

                        }
                        rt = (ResultType)Convert.ToInt32(parametersOut["r"].ToString());
                        break;
                    case FineWSSignatureType.fst_bilbao_integration:
                        {
                            if (parametersIn["lang"] != null)
                            {
                                try
                                {
                                    int iLangIndex = Convert.ToInt32(parametersIn["lang"].ToString());
                                    if (iLangIndex <= UserDeviceLangs.Length)
                                    {
                                        strCulture = UserDeviceLangs[iLangIndex - 1];
                                    }
                                }
                                catch
                                { }


                            }

                            string strCulturePrefix = strCulture.ToLower().Substring(0, 2);
                            rt = oThirdPartyFine.BilbaoIntegrationQueryFinePaymentQuantity(strFineNumber, dtinstDateTime, oUser, oInstallation, strCulturePrefix, iWSTimeout, ref parametersOut);
                            parametersOut["r"] = Convert.ToInt32(rt).ToString();
                            if (parametersOut.ContainsKey("fnumber") && parametersOut["fnumber"] != null)
                                strFineNumberOut = parametersOut["fnumber"].ToString();

                            /*if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLOuput(parametersOut);
                                Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }*/
                        }
                        break;
                    default:
                        parametersOut["r"] = Convert.ToInt32(ResultType.Result_Error_Generic).ToString();
                        break;

                }
            }

            return rt;
        }

        /*private CUSTOMER_PAYMENT_MEAN GetUserPaymentMean(ref USER oUser, INSTALLATION oInstallation)
        {
            bool bInvalidated = false;
            return GetUserPaymentMean(ref oUser, oInstallation, out bInvalidated);
        }
        private CUSTOMER_PAYMENT_MEAN GetUserPaymentMean(ref USER oUser, INSTALLATION oInstallation, out bool bInvalidated)
        {
            CUSTOMER_PAYMENT_MEAN oRet = oUser.CUSTOMER_PAYMENT_MEAN;
            bInvalidated = false;

            if (oUser.CUSTOMER_PAYMENT_MEAN != null)
            {
                if (oInstallation != null && oInstallation.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG != null)
                {
                    if (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID != oInstallation.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_PAT_ID ||
                        oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG == null)
                        oRet = null;
                    else if (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_CPTGC_ID != oInstallation.INS_CPTGC_ID)
                    {
                        if (oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_CTG_ID != oInstallation.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_CTG_ID)
                            oRet = null;
                        else
                        {
                            oRet.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG = oInstallation.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG;
                            oRet.CUSPM_CPTGC_ID = oInstallation.INS_CPTGC_ID;
                            oRet.CURRENCy = oInstallation.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CURRENCy;
                            oRet.CUSPM_CUR_ID = oInstallation.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_CUR_ID;
                        }
                    }
                }
                else if (oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG != null)
                {
                    int iPatId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                    var oGatewayConfig = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs.Where(t => t.CPTGC_PAT_ID == iPatId &&
                                                                                                           t.CPTGC_ENABLED != 0 &&
                                                                                                           t.CPTGC_IS_INTERNAL != 0)
                                                                                               .FirstOrDefault();
                    if (oGatewayConfig != null)
                    {
                        if (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_CPTGC_ID != oGatewayConfig.CPTGC_ID)
                        {
                            if (oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_CTG_ID != oGatewayConfig.CPTGC_CTG_ID)
                                oRet = null;
                            else
                            {
                                oRet.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG = oGatewayConfig;
                                oRet.CUSPM_CPTGC_ID = oGatewayConfig.CPTGC_ID;
                                oRet.CURRENCy = oGatewayConfig.CURRENCy;
                                oRet.CUSPM_CUR_ID = oGatewayConfig.CPTGC_CUR_ID;
                            }
                        }
                    }
                }
                if (oRet == null)
                    bInvalidated = true;
            }

            return oRet;
        }*/

        private integraMobile.WS.integraCommonService CommonService()
        {
            return new integraMobile.WS.integraCommonService(customersRepository, infraestructureRepository, geograficAndTariffsRepository);
        }

        private static void Logger_AddLogMessage(string msg, LogLevels nLevel)
        {
            if (msg.Length > 400000)
            {
                StringBuilder sb = new StringBuilder(msg, 0, 400000, 401000);
                sb.Append("\r\n...");
                sb.Append("\r\n---------------------------------------------------------------------------");
                sb.Append("\r\n...");
                m_Log.LogMessage(nLevel, sb.ToString());
            }
            else
            {
                m_Log.LogMessage(nLevel, msg);
            }
        }

        private static void Logger_AddLogException(Exception ex, string msg, LogLevels nLevel)
        {
            m_Log.LogMessage(nLevel, msg, ex);
        }

        static string PrettyXml(string xml)
        {

            try
            {
                var stringBuilder = new StringBuilder();

                var element = XElement.Parse(xml);

                var settings = new XmlWriterSettings();
                settings.OmitXmlDeclaration = true;
                settings.Indent = true;
                settings.NewLineOnAttributes = true;

                using (var xmlWriter = XmlWriter.Create(stringBuilder, settings))
                {
                    element.Save(xmlWriter);
                }

                return "\r\n\t" + stringBuilder.ToString().Replace("\r\n", "\r\n\t") + "\r\n";
            }
            catch
            {
                return "\r\n\t" + xml + "\r\n";
            }
        }

        static string PrettyJSON(string json)
        {

            try
            {
                dynamic parsedJson = JsonConvert.DeserializeObject(json);
                string strRes = JsonConvert.SerializeObject(parsedJson, Newtonsoft.Json.Formatting.Indented);
                return "\r\n\t" + strRes.Replace("\r\n", "\r\n\t") + "\r\n";
            }
            catch
            {
                return "\r\n\t" + json + "\r\n";
            }
        }

        private bool CheckVersionFormat(string sVersion)
        {
            bool bRet = false;

            try
            {
                int[] oArrVersion = sVersion.Split('.').Select(item => Convert.ToInt32(item)).ToArray();
                bRet = (oArrVersion.Length > 0);
            }
            catch (Exception ex)
            {
                bRet = false;
                Logger_AddLogException(ex, string.Format("CheckVersionFormat::Exception"), LogLevels.logERROR);
            }

            return bRet;
        }

        private bool VersionCompare(string sVersion1, string sVersion2, out string sComp)
        {
            bool bRet = false;
            sComp = "";

            try
            {
                int[] oArrVersion1 = sVersion1.Split('.').Select(item => Convert.ToInt32(item)).ToArray();
                int[] oArrVersion2 = sVersion2.Split('.').Select(item => Convert.ToInt32(item)).ToArray();

                for (int i = 0; i < Math.Min(oArrVersion1.Length, oArrVersion2.Length); i++)
                {
                    if (oArrVersion1[i] == oArrVersion2[i])
                        sComp = "==";
                    else if (oArrVersion1[i] < oArrVersion2[i])
                        sComp = "<";
                    else
                        sComp = ">";
                    if (sComp != "==") break;
                }
                bRet = true;
            }
            catch (Exception)
            {
                bRet = false;
            }

            return bRet;
        }

        private bool VersionGreatherEqual(string sVersion1, string sVersion2)
        {
            bool bRet = false;
            string sComp = "";
            if (VersionCompare(sVersion1, sVersion2, out sComp))
            {
                bRet = (sComp == "==" || sComp == ">");
            }
            return bRet;
        }

        private bool VersionMinor(string sVersion1, string sVersion2)
        {
            bool bRet = false;
            string sComp = "";
            if (VersionCompare(sVersion1, sVersion2, out sComp))
            {
                bRet = (sComp == "<");
            }
            return bRet;
        }

        private string NormalizePlate(string strPlate)
        {
            string strResPlate = "";
            strResPlate = strPlate.Trim().Replace(" ", "").ToUpper();
            strResPlate = new string(strResPlate.Where(c => char.IsLetterOrDigit(c)).ToArray());
            return strResPlate;
        }

        private string XmlEscape(string sXml)
        {
            if (!string.IsNullOrEmpty(sXml))
            {
                return sXml.Replace("&", "&amp;").Replace("\"", "&quot;").Replace("'", "&apos;").Replace("<", "&lt;").Replace(">", "&gt;");
            }
            else
            {
                return "";
            }
        }

        private string GenerateOxxoCodeBar(decimal dUserId, int iQuantity)
        {
            string sRet = "";

            try
            {
                sRet = string.Format("{0:00}", Convert.ToInt32(ConfigurationManager.AppSettings["Oxxo_RechargeCodePrefix"] ?? "0"));

                sRet += string.Format("{0:00000000000000}", dUserId);
                sRet += DateTime.Now.AddYears(1).ToString("yyyyMMdd");
                sRet += string.Format("{0:0000000}", iQuantity);

                sRet += OxxoCodeBarControlDigit(sRet);
            }
            catch (Exception ex)
            {
                Logger_AddLogException(ex, string.Format("GenerateOxxoCodeBar::Error UserId={0}, iQuantity={1}", dUserId, iQuantity), LogLevels.logERROR);
            }

            return sRet;
        }

        private string OxxoCodeBarControlDigit(string sCode)
        {
            int iRet = 0;

            bool bFact = true;
            int iFact = 2;
            int iCalc = 0;
            string sCalc = "";

            for (int i = sCode.Length - 1; i >= 0; i--)
            {
                iFact = (bFact ? 2 : 1);
                bFact = !bFact;

                iCalc = Convert.ToInt32(sCode.Substring(i, 1)) * iFact;
                if (iCalc.ToString().Length > 1)
                {
                    sCalc = iCalc.ToString();
                    iCalc = 0;
                    for (int j = 0; j < sCalc.Length; j++)
                        iCalc += Convert.ToInt32(sCalc.Substring(j, 1));
                }

                iRet += iCalc;
            }

            iRet = iRet % 10;

            if (iRet != 0)
                iRet = 10 - iRet;

            return iRet.ToString();
        }

        private string CalculateCryptResult(string strInput, string strHashSeed)
        {
            string strRes = "";
            try
            {

                byte[] _normKey = null;

                int iKeyLength = 32;

                byte[] keyBytes = System.Text.Encoding.UTF8.GetBytes(strHashSeed);
                _normKey = new byte[iKeyLength];
                int iSum = 0;

                for (int i = 0; i < iKeyLength; i++)
                {
                    if (i < keyBytes.Length)
                    {
                        iSum += keyBytes[i];
                    }
                    else
                    {
                        iSum += i;
                    }
                    _normKey[i] = Convert.ToByte((iSum * BIG_PRIME_NUMBER) % (Byte.MaxValue + 1));

                }


                byte[] _iv = null;

                int iIVLength = 16;

                byte[] ivBytes = System.Text.Encoding.UTF8.GetBytes(strHashSeed);
                _iv = new byte[iIVLength];
                iSum = 0;

                for (int i = 0; i < iIVLength; i++)
                {
                    if (i < ivBytes.Length)
                    {
                        iSum += ivBytes[i];
                    }
                    else
                    {
                        iSum += i;
                    }
                    _iv[i] = Convert.ToByte((iSum * BIG_PRIME_NUMBER2) % (Byte.MaxValue + 1));

                }

                strRes = ByteArrayToString(EncryptStringToBytes_Aes(strInput, _normKey, _iv));



            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "CalculateHash::Exception", LogLevels.logERROR);

            }


            return strRes;
        }

        private string DecryptCryptResult(string strHexByteArray, string strHashSeed)
        {
            string strRes = "";
            try
            {

                byte[] _normKey = null;

                int iKeyLength = 32;

                byte[] keyBytes = System.Text.Encoding.UTF8.GetBytes(strHashSeed);
                _normKey = new byte[iKeyLength];
                int iSum = 0;

                for (int i = 0; i < iKeyLength; i++)
                {
                    if (i < keyBytes.Length)
                    {
                        iSum += keyBytes[i];
                    }
                    else
                    {
                        iSum += i;
                    }
                    _normKey[i] = Convert.ToByte((iSum * BIG_PRIME_NUMBER) % (Byte.MaxValue + 1));

                }


                byte[] _iv = null;

                int iIVLength = 16;

                byte[] ivBytes = System.Text.Encoding.UTF8.GetBytes(strHashSeed);
                _iv = new byte[iIVLength];
                iSum = 0;

                for (int i = 0; i < iIVLength; i++)
                {
                    if (i < ivBytes.Length)
                    {
                        iSum += ivBytes[i];
                    }
                    else
                    {
                        iSum += i;
                    }
                    _iv[i] = Convert.ToByte((iSum * BIG_PRIME_NUMBER2) % (Byte.MaxValue + 1));

                }

                strRes = DecryptStringFromBytes_Aes(StringToByteArray(strHexByteArray), _normKey, _iv);



            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "CalculateHash::Exception", LogLevels.logERROR);

            }


            return strRes;
        }

        static byte[] EncryptStringToBytes_Aes(string plainText, byte[] Key, byte[] IV)
        {
            // Check arguments.
            if (plainText == null || plainText.Length <= 0)
                throw new ArgumentNullException("plainText");
            if (Key == null || Key.Length <= 0)
                throw new ArgumentNullException("Key");
            if (IV == null || IV.Length <= 0)
                throw new ArgumentNullException("IV");
            byte[] encrypted;
            // Create an AesManaged object
            // with the specified key and IV.
            using (AesManaged aesAlg = new AesManaged())
            {
                aesAlg.Key = Key;
                aesAlg.IV = IV;

                // Create a decrytor to perform the stream transform.
                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);

                // Create the streams used for encryption.
                using (MemoryStream msEncrypt = new MemoryStream())
                {
                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                    {
                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                        {

                            //Write all data to the stream.
                            swEncrypt.Write(plainText);
                        }
                        encrypted = msEncrypt.ToArray();
                    }
                }
            }


            // Return the encrypted bytes from the memory stream.
            return encrypted;

        }

        static string DecryptStringFromBytes_Aes(byte[] cipherText, byte[] Key, byte[] IV)
        {
            // Check arguments.
            if (cipherText == null || cipherText.Length <= 0)
                throw new ArgumentNullException("cipherText");
            if (Key == null || Key.Length <= 0)
                throw new ArgumentNullException("Key");
            if (IV == null || IV.Length <= 0)
                throw new ArgumentNullException("IV");

            // Declare the string used to hold
            // the decrypted text.
            string plaintext = null;

            // Create an AesManaged object
            // with the specified key and IV.
            using (AesManaged aesAlg = new AesManaged())
            {
                aesAlg.Key = Key;
                aesAlg.IV = IV;

                // Create a decrytor to perform the stream transform.
                ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);

                // Create the streams used for decryption.
                using (MemoryStream msDecrypt = new MemoryStream(cipherText))
                {
                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                    {
                        using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                        {

                            // Read the decrypted bytes from the decrypting stream
                            // and place them in a string.
                            plaintext = srDecrypt.ReadToEnd();
                        }
                    }
                }

            }

            return plaintext;

        }

        private decimal? ConvertDiscountCampaignToBonifications(decimal? campDiscount)
        {
            decimal? dCampDiscount = null;
            if (campDiscount.HasValue)
            {
                try
                {
                    dCampDiscount = ((100 - campDiscount.Value) / 100);
                }
                catch (Exception ex)
                {
                    Logger_AddLogException(ex, string.Format("Error::ConvertDiscountCampaignToBonifications:: campDiscount={0} - Exception={1}", campDiscount, ex.Message), LogLevels.logERROR);
                }
            }
            return dCampDiscount;
        }

        private string ConvertToDecimalToStringDiscountCampaign(decimal campDiscount)
        {
            string sCampDiscount = string.Empty;
            try
            {
                //campDiscount = Math.Abs(campDiscount / 100);
                string mascara = "{0:0.##}";
                sCampDiscount = String.Format(mascara, campDiscount);
            }
            catch (Exception ex)
            {
                Logger_AddLogException(ex, string.Format("Error::ConvertToDecimalToStringDiscountCampaign:: campDiscount={0} - Exception={1}", campDiscount, ex.Message), LogLevels.logERROR);
            }
            return sCampDiscount;
        }
        //private bool SendEmailCampaingSchemaFour(decimal campId, USER user, decimal campDiscount)
        //{
        //    bool bRes = true;
        //    try
        //    {
        //        //TO DO: ASIGNAR AQUI EL EMAIL CORRESPONDIENTE
        //        string strEmailSubject = string.Empty;
        //        string strEmailBody = string.Empty;
        //        string sCampDiscount = ConvertToDecimalToStringDiscountCampaign(campDiscount);

        //        try
        //        {
        //            strEmailSubject = ResourceExtension.GetLiteral(string.Format("CampaingSchemaFour_EmailHeader_{0}", campId));
        //        }
        //        catch { }

        //        try
        //        {
        //            strEmailBody = ResourceExtension.GetLiteral(string.Format("CampaingSchemaFour_EmailBody_{0}", campId));

        //        }
        //        catch { }

        //        SendEmail(ref user, strEmailSubject, string.Format(strEmailBody, sCampDiscount));
        //    }
        //    catch(Exception e)
        //    {
        //        Logger_AddLogException(e, string.Format("SendEmailCampaingSchemaFour::Error: "), LogLevels.logERROR);
        //        bRes = false;
        //    }
        //    return bRes;
        //}

        private static string ByteArrayToString(byte[] ba)
        {
            StringBuilder hex = new StringBuilder(ba.Length * 2);
            foreach (byte b in ba)
                hex.AppendFormat("{0:X2}", b);
            return hex.ToString();
        }

        private static byte[] StringToByteArray(String hex)
        {
            int NumberChars = hex.Length;
            byte[] bytes = new byte[NumberChars / 2];
            for (int i = 0; i < NumberChars; i += 2)
                bytes[i / 2] = Convert.ToByte(hex.Substring(i, 2), 16);
            return bytes;
        }

        private ResultType ModifyOperationPlatesExtern(int iWS, OPERATION oOperation, string sPlate, List<string> oAdditionalPlates, int? iWSTimeout, out bool bExecuted, out long lEllapsedTime)
        {
            ResultType rt = ResultType.Result_OK;
            bExecuted = false;

            var oThirdPartyOperation = new ThirdPartyOperation();
            lEllapsedTime = 0;

            ConfirmParkWSSignatureType eSignatureType = ConfirmParkWSSignatureType.cpst_nocall;
            if (iWS == 1)
                eSignatureType = (ConfirmParkWSSignatureType)oOperation.INSTALLATION.INS_PARK_CONFIRM_WS_SIGNATURE_TYPE;
            else if (iWS == 2 && oOperation.INSTALLATION.INS_PARK_CONFIRM_WS2_SIGNATURE_TYPE.HasValue)
                eSignatureType = (ConfirmParkWSSignatureType)oOperation.INSTALLATION.INS_PARK_CONFIRM_WS2_SIGNATURE_TYPE.Value;
            else if (iWS == 3 && oOperation.INSTALLATION.INS_PARK_CONFIRM_WS3_SIGNATURE_TYPE.HasValue)
                eSignatureType = (ConfirmParkWSSignatureType)oOperation.INSTALLATION.INS_PARK_CONFIRM_WS3_SIGNATURE_TYPE.Value;

            switch (eSignatureType)
            {
                case ConfirmParkWSSignatureType.cpst_nocall:
                    break;
                case ConfirmParkWSSignatureType.cpst_test:
                    break;

                case ConfirmParkWSSignatureType.cpst_eysa:
                    break;

                case ConfirmParkWSSignatureType.cpst_internal:
                    break;

                case ConfirmParkWSSignatureType.cpst_standard:
                    {
                        bExecuted = true;
                        rt = oThirdPartyOperation.StandardModifyOperationPlates(iWS, oOperation, sPlate, oAdditionalPlates, iWSTimeout, out lEllapsedTime);
                    }
                    break;

                case ConfirmParkWSSignatureType.cpst_gtechna:
                    break;

                case ConfirmParkWSSignatureType.cpst_standardmadrid:
                    break;

                case ConfirmParkWSSignatureType.cpst_madridplatform:
                    break;

                default:
                    rt = ResultType.Result_Error_Generic;
                    break;
            }

            return rt;
        }

        private COUNTRIES_REDIRECTION FindCountriesRedirections(int city_id, int country_id)
        {
            COUNTRIES_REDIRECTION oCountriesRedirection = null;
            if (city_id != -1)
            {
                oCountriesRedirection = infraestructureRepository.GetCountriesRedirectionsByCityId(city_id);
            }

            if (country_id != -1)
            {
                oCountriesRedirection = infraestructureRepository.GetCountriesRedirectionsByCountryId(Convert.ToDecimal(country_id));
            }

            return oCountriesRedirection;
        }

        private bool ValidServerExternal(string xmlIn, ref decimal cou_id)
        {
            bool bValid = false;
            if (xmlIn.Contains(TAG_SIGNUP_GUID))
            {
                string sSignupGuid = FindNodeXMLValue(xmlIn, TAG_SIGNUP_GUID); ;
                SIGNUP_GUID_COUNTRIES_REDIRECTION oSignUpGuidCountriesRedirections = infraestructureRepository.GetSignUpGuidCountriesRedirections(sSignupGuid);

                if (oSignUpGuidCountriesRedirections != null)
                {
                    cou_id = oSignUpGuidCountriesRedirections.SGCR_COU_ID;
                    bValid = true;
                }
            }
            return bValid;
        }

        private string AddNodeXML(string sXml, string sXmlTag, string sInnerText)
        {
            XmlDocument doc = new XmlDocument();
            doc.LoadXml(sXml);
            XmlNode root = doc.DocumentElement;

            //Create a new node
            XmlElement elem = doc.CreateElement(sXmlTag);
            elem.InnerText = sInnerText;

            //Add the node to the document.
            root.AppendChild(elem);


            return doc.OuterXml;
        }

        private string RemoveNodeXML(string sXml, string sXmlTag)
        {

            XmlDocument doc = new XmlDocument();
            doc.LoadXml(sXml);

            XmlNodeList nodes = doc.GetElementsByTagName(sXmlTag);
            XmlNode node = nodes[0];
            node.ParentNode.RemoveChild(node);

            return doc.OuterXml;
        }

        private string FindNodeXMLValue(string sXml, string sXmlTag)
        {
            string sResult = string.Empty;
            XElement doc = XElement.Parse(sXml);
            sResult = doc.Descendants(sXmlTag).First().Value;
            return sResult;
        }

        private ExternalIntegraMobileWS.integraMobileWS StarExternalIntegraMobileWS(COUNTRIES_REDIRECTION countriesRedirections)
        {
            integraMobile.WS.ExternalIntegraMobileWS.integraMobileWS oExternalIntegraMobileWS = null;
            if (!string.IsNullOrEmpty(countriesRedirections.COURE_COUNTRY_REDIRECTION_HTTP_USER) && !string.IsNullOrEmpty(countriesRedirections.COURE_COUNTRY_REDIRECTION_PASSWORD))
            {
                oExternalIntegraMobileWS = new ExternalIntegraMobileWS.integraMobileWS();
                int iwsurl = countriesRedirections.COURE_COUNTRY_REDIRECTION_WS_URL.IndexOf('/', countriesRedirections.COURE_COUNTRY_REDIRECTION_WS_URL.Length - 1);
                string ws_url = string.Empty;
                if (iwsurl != -1)
                {
                    ws_url = countriesRedirections.COURE_COUNTRY_REDIRECTION_WS_URL.Remove(countriesRedirections.COURE_COUNTRY_REDIRECTION_WS_URL.Length - 1, 1);
                }
                else
                {
                    ws_url = countriesRedirections.COURE_COUNTRY_REDIRECTION_WS_URL;
                }
                oExternalIntegraMobileWS.Url = ws_url;//countriesRedirections.COURE_COUNTRY_REDIRECTION_WS_URL;
                oExternalIntegraMobileWS.Credentials = new System.Net.NetworkCredential(countriesRedirections.COURE_COUNTRY_REDIRECTION_HTTP_USER, countriesRedirections.COURE_COUNTRY_REDIRECTION_PASSWORD);
            }
            return oExternalIntegraMobileWS;
        }
        private ExternalIntegraMobileWS.integraMobileWS StarExternalIntegraMobileWS2(COUNTRIES_REDIRECTION countriesRedirections)
        {
            integraMobile.WS.ExternalIntegraMobileWS.integraMobileWS oExternalIntegraMobileWS = null;
            if (!string.IsNullOrEmpty(countriesRedirections.COURE_COUNTRY_REDIRECTION_WS_URL))
            {
                oExternalIntegraMobileWS = new ExternalIntegraMobileWS.integraMobileWS();
                int iwsurl = countriesRedirections.COURE_COUNTRY_REDIRECTION_WS_URL.IndexOf('/', countriesRedirections.COURE_COUNTRY_REDIRECTION_WS_URL.Length - 1);
                string ws_url = string.Empty;
                if (iwsurl != -1)
                {
                    ws_url = countriesRedirections.COURE_COUNTRY_REDIRECTION_WS_URL.Remove(countriesRedirections.COURE_COUNTRY_REDIRECTION_WS_URL.Length - 1, 1);
                }
                else
                {
                    ws_url = countriesRedirections.COURE_COUNTRY_REDIRECTION_WS_URL;
                }
                oExternalIntegraMobileWS.Url = ws_url;//countriesRedirections.COURE_COUNTRY_REDIRECTION_WS_URL;
                if (!string.IsNullOrEmpty(countriesRedirections.COURE_COUNTRY_REDIRECTION_HTTP_USER) && !string.IsNullOrEmpty(countriesRedirections.COURE_COUNTRY_REDIRECTION_PASSWORD))
                    oExternalIntegraMobileWS.Credentials = new System.Net.NetworkCredential(countriesRedirections.COURE_COUNTRY_REDIRECTION_HTTP_USER, countriesRedirections.COURE_COUNTRY_REDIRECTION_PASSWORD);
            }
            return oExternalIntegraMobileWS;
        }

        private string CallToServerSignUpStep2(string xmlIn, string xmlOut, COUNTRIES_REDIRECTION countriesRedirections)
        {
            integraMobile.WS.ExternalIntegraMobileWS.integraMobileWS oExternalIntegraMobileWS = StarExternalIntegraMobileWS(countriesRedirections);
            if (oExternalIntegraMobileWS != null)
            {
                try
                {
                    xmlOut = oExternalIntegraMobileWS.SignUpStep2(xmlIn);
                }
                catch (Exception)
                {
                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                    Logger_AddLogMessage(string.Format("CallToServerSignUpStep2::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
            }
            return xmlOut;
        }

        private string SignUpStep2Interno(string xmlIn, SortedList parametersIn, string xmlOut, int? iCountry, SortedList parametersOut)
        {

            decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();
            if (parametersIn["appcode"] != null)
            {
                try
                {
                    string strAppCode = parametersIn["appcode"].ToString();
                    dSourceApp = geograficAndTariffsRepository.GetSourceApp(strAppCode);
                }
                catch { }
            }

            bool bSendEmail = true;
            if (parametersIn["sendemail"] != null)
            {
                try
                {
                    bSendEmail = (Convert.ToInt32(parametersIn["sendemail"].ToString()) == 1);                    
                }
                catch { }
            }


            try
            {

                string json = DecryptCryptResult(parametersIn["bin"].ToString(), ConfigurationManager.AppSettings["CryptKey"]);

                dynamic oResponse = JsonConvert.DeserializeObject(json);

                parametersIn["email"] = oResponse["email"].ToString();
                try
                {
                    parametersIn["ccodephone"] = Convert.ToDecimal(oResponse["ccodephone"].ToString());
                    parametersIn["phone"] = oResponse["phone"].ToString();
                }
                catch { }
                parametersIn["signup_guid"] = oResponse["signup_guid"].ToString();
                parametersIn["utcdate"] = oResponse["utcdate"].ToString();
                parametersIn["lang"] = oResponse["lang"].ToString();
                if (oResponse["appid"] != null)
                {
                    try
                    {
                        dSourceApp = Convert.ToInt32(oResponse["appid"].ToString());
                    }
                    catch{}
                }

            }
            catch
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogMessage(string.Format("SignUpStep2::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                return xmlOut;
            }


            string strCulture = "";

            if (parametersIn["lang"] != null)
            {
                try
                {
                    int iLangIndex = Convert.ToInt32(parametersIn["lang"].ToString());
                    if (iLangIndex <= UserDeviceLangs.Length)
                    {
                        strCulture = UserDeviceLangs[iLangIndex - 1];
                    }
                }
                catch
                {
                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                    Logger_AddLogMessage(string.Format("SignUpStep2::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    return xmlOut;
                }


            }

            int iOSID = (int)MobileOS.Web;

            if (parametersIn["OSID"] != null)
            {
                try
                {
                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                }
                catch { }
            }




            string sAppVersion = "";
            try
            {
                if (parametersIn["appvers"] != null)
                    sAppVersion = parametersIn["appvers"].ToString();
                else
                    sAppVersion = "1.0";
            }
            catch
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogMessage(string.Format("SignUpStep2::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                return xmlOut;
            }
            if (!CheckVersionFormat(sAppVersion))
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogMessage(string.Format("SignUpStep2::Error: Invalid app version format: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                return xmlOut;
            }



            if (customersRepository.ExistEmail(parametersIn["email"].ToString()))
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Email_Already_Exist);
                Logger_AddLogMessage(string.Format("SignUpStep2::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                return xmlOut;
            }

            ulong ulAppVersion = AppUtilities.AppVersion(sAppVersion);

            string strSignUpGuid = parametersIn["signup_guid"].ToString();


            string strUserMustBeActivated = infraestructureRepository.GetParameterValue("UserMustBeActivated");
            bool bUserMustBeActivated = false;
            int iNumMaxMinutesForActivation = Int32.MaxValue;

            if (!string.IsNullOrEmpty(strUserMustBeActivated))
            {
                bUserMustBeActivated = (strUserMustBeActivated == "1");
            }

            if (bUserMustBeActivated)
            {
                bool bDeleteMembership = false;
                string strNumMaxMinutesForActivation = infraestructureRepository.GetParameterValue("NonActivatedUserUnBlockingTime");
                try
                {
                    iNumMaxMinutesForActivation = Convert.ToInt32(strNumMaxMinutesForActivation);
                }
                catch
                { }

                customersRepository.DeleteNonActivatedUser(parametersIn["email"].ToString().ToLower().Trim(), iNumMaxMinutesForActivation, out  bDeleteMembership);


                if (bDeleteMembership)
                {
                    FormAuthMemberShip.MembershipService.DeleteUser(parametersIn["email"].ToString().ToLower().Trim());
                }
            }


            PaymentSuscryptionType? suscriptionType = null;
            string sSuscriptionType = "";
            RefundBalanceType eRefundBalType = RefundBalanceType.rbtAmount;


            USER_IMPORT_CONFIGURATION oImportConfig = null;
            string strEmail = parametersIn["email"].ToString().ToLower().Trim();
            decimal dImportId = -1;
            customersRepository.GetImportUserConfiguration(ref strEmail, out dImportId, out oImportConfig);

            decimal? dCouId = null;
            decimal? dCurId = null;
            int iBalance = 0;
            bool bImportUser = false;

            if (oImportConfig != null)
            {
                ThirdPartyUser oThirtPartyUser = new ThirdPartyUser();
                ResultType rtTemp = ResultType.Result_OK;


                switch ((UserImportGetBalanceSignature)oImportConfig.UICON_GET_BALANCE_WS_SIGNATURE_TYPE.Value)
                {
                    case UserImportGetBalanceSignature.AparcApp:
                        {

                            rtTemp = oThirtPartyUser.AparcAppGetBalance(oImportConfig.UICON_GET_BALANCE_WS_URL, strEmail, out iBalance, out dCurId, out dCouId);

                        }
                        break;
                    default:
                        break;

                }

                if (rtTemp == ResultType.Result_OK)
                {
                    if (iBalance < 0)
                    {
                        Logger_AddLogMessage(string.Format("SignUpStep2 Balance Imported={0} ; Set to 0 ", iBalance), LogLevels.logINFO);
                        iBalance = 0;
                    }


                    customersRepository.SetBalanceToImportUser(dImportId, iBalance, dCurId.Value, dCouId.Value);
                    iCountry = (int)dCouId.Value;
                    bImportUser = true;
                }

            }


            decimal? dPhoneCountryId = null;
            if (parametersIn["ccodephone"] != null)
                dPhoneCountryId = Convert.ToDecimal(parametersIn["ccodephone"].ToString());
            string sPhone = "";
            if (parametersIn["phone"] != null)
                sPhone = parametersIn["phone"].ToString();

            infraestructureRepository.GetCountryPossibleSuscriptionTypes(iCountry.Value, out sSuscriptionType, out eRefundBalType);

            if (((int)PaymentSuscryptionType.pstPrepay).ToString() == sSuscriptionType)
            {
                suscriptionType = PaymentSuscryptionType.pstPrepay;
            }
            else if (((int)PaymentSuscryptionType.pstPerTransaction).ToString() == sSuscriptionType)
            {
                suscriptionType = PaymentSuscryptionType.pstPerTransaction;
            }


            USER oUser = new USER
            {

                CUSTOMER = new CUSTOMER
                {
                    CUS_TYPE = (int)CustomerType.Individual,
                    CUS_COU_ID = iCountry.Value,
                    CUS_DOC_ID = "",
                    CUS_DOC_ID_TYPE = 0,//Undefined for now
                    CUS_NAME = "",
                    CUS_FIRST_NAME = "",
                    CUS_SURNAME1 = "",
                    CUS_SURNAME2 = "",
                    CUS_STREET = "",
                    CUS_STREE_NUMBER = 0,
                    CUS_LEVEL_NUM = null,
                    CUS_DOOR = "",
                    CUS_LETTER = "",
                    CUS_STAIR = "",
                    CUS_CITY = "",
                    CUS_STATE = "",
                    CUS_ZIPCODE = "",
                    CUS_ENABLED = 1,
                    CUS_INSERT_UTC_DATE = DateTime.UtcNow
                },

                USR_COU_ID = iCountry.Value,
                USR_EMAIL = parametersIn["email"].ToString().ToLower().Trim(),
                USR_MAIN_TEL_COUNTRY = dPhoneCountryId,
                USR_MAIN_TEL = sPhone,
                USR_SECUND_TEL_COUNTRY = null,
                USR_SECUND_TEL = "",
                USR_USERNAME = parametersIn["email"].ToString().ToLower().Trim(),
                USR_BALANCE = iBalance,
                USR_CUR_ID = (ulAppVersion < _VERSION_2_0) ? infraestructureRepository.GetCountryCurrency(MEXICO_COUNTRY_ID) : infraestructureRepository.GetCountryCurrency(iCountry.Value),
                USR_CULTURE_LANG = strCulture,
                USR_ENABLED = 1,
                USR_INSERT_UTC_DATE = DateTime.UtcNow,
                USR_SUSCRIPTION_TYPE = (int?)suscriptionType,
                USR_REFUND_BALANCE_TYPE = (int)eRefundBalType,
                USR_UTC_OFFSET = 0,
                USR_PAYMETH = (int)PaymentMeanTypeStatus.pmsWithoutPaymentMean,
                USR_SIGNUP_OS = iOSID,
                USR_SIGNUP_GUID = strSignUpGuid,
                USR_ACTIVATED = bUserMustBeActivated ? 0 : 1,
                USR_SIGNUP_SOAPP_ID = dSourceApp,
                USR_LAST_SOAPP_ID = dSourceApp,
                USR_IS_ANONYMOUS = 0,
            };



            string password = parametersIn["pass"].ToString();
            FormAuthMemberShip.MembershipService.DeleteUser(oUser.USR_USERNAME);

            MembershipCreateStatus createStatus = FormAuthMemberShip.MembershipService.CreateUser(oUser.USR_USERNAME, password, oUser.USR_EMAIL);
            if (createStatus != MembershipCreateStatus.Success)
            {
                FormAuthMemberShip.MembershipService.DeleteUser(oUser.USR_USERNAME);
                createStatus = FormAuthMemberShip.MembershipService.CreateUser(oUser.USR_USERNAME, password, oUser.USR_EMAIL);
            }

            if (createStatus != MembershipCreateStatus.Success)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogMessage(string.Format("SignUpStep2::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                return xmlOut;
            }
            else
            {
                if (!customersRepository.AddUser(ref oUser, null))
                {
                    FormAuthMemberShip.MembershipService.DeleteUser(oUser.USR_USERNAME);
                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                    Logger_AddLogMessage(string.Format("SignUpStep2::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    return xmlOut;
                }

            }

            if (AppUtilities.AppVersion(sAppVersion) >= _VERSION_2_8)
            {
                List<stVersionsLiterals> ostVersionsLiteralsList = new List<stVersionsLiterals>();
                for (Int32 i = 0; i <= parametersIn.Count; i++)
                {
                    if (parametersIn.ContainsKey("questions_question_" + i + "_idversion"))
                    {
                        stVersionsLiterals ostVersionsLiterals = new stVersionsLiterals();
                        ostVersionsLiterals.IdUser = oUser.USR_ID;
                        ostVersionsLiterals.IdVersion = Convert.ToDecimal(parametersIn["questions_question_" + i + "_idversion"]); ;
                        ostVersionsLiterals.Approved = Convert.ToDecimal(parametersIn["questions_question_" + i + "_value"]); ;
                        ostVersionsLiteralsList.Add(ostVersionsLiterals);
                    }
                }
                if (ostVersionsLiteralsList.Count > 0)
                {
                    foreach (stVersionsLiterals oVL in ostVersionsLiteralsList)
                    {
                        if (!customersRepository.UpdateUserQuestions(oVL))
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                            Logger_AddLogMessage(string.Format("UpdateUserQuestions::Error updating user license terms: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            return xmlOut;
                        }
                    }
                }
            }

            if (bSendEmail)
            {
                SendSignupEmails(ref oUser, strCulture, bUserMustBeActivated, dSourceApp);
            }

            customersRepository.AssignPendingInvitationsToAccept(ref oUser);

            //GROUP oGroup = null;
            decimal? dLat = null;
            decimal? dLon = null;
            GetLatLon(parametersIn, out dLat, out dLon);
            int iOSType = 0;
            if (parametersIn["OSID"] != null && parametersIn["OSID"].ToString() != "")
                iOSType = Convert.ToInt32(parametersIn["OSID"]);
            // xmlOut = Campaing(oUser, dLat, dLon, iOSType, null, null, oGroup, xmlIn, xmlOut, true);

            oUser = null;

            parametersOut = new SortedList();
            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
            parametersOut["signup_guid"] = strSignUpGuid;
            parametersOut["accountnotactive"] = bUserMustBeActivated ? 1 : 0;
            parametersOut["email"] = parametersIn["email"].ToString().ToLower().Trim();
            parametersOut["username"] = parametersIn["email"].ToString().ToLower().Trim();

            if (!GetSubPayOptions(iCountry.Value, ulAppVersion, strCulture, dSourceApp, ref  parametersOut))
            {
                Logger_AddLogMessage(string.Format("GetSubPayOptions::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            if ((oImportConfig != null) && (bImportUser))
            {
                customersRepository.SetUserImportStatus(dImportId, UserImportStatus.Imported);
            }

            xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "subscription_type", "payment_method" });

            return xmlOut;
        }

        /// <summary>
        /// Método para convertir una Objeto en Json
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        private String ToJsonRequest(Object request)
        {
            String sjson = Newtonsoft.Json.JsonConvert.SerializeObject(request);
            Newtonsoft.Json.Linq.JObject json = Newtonsoft.Json.Linq.JObject.Parse(sjson);
            String hashSource = concatValues(json);

            String hash = CalculateHash(hashSource, string.Empty);
            json.Add("ah", hash);

            Newtonsoft.Json.Linq.JObject root = new Newtonsoft.Json.Linq.JObject();
            root.Add("ipark_in", json);

            return root.ToString();
        }

        private String concatValues(Newtonsoft.Json.Linq.JObject json)
        {
            StringBuilder builder = new StringBuilder();
            foreach (var item in json)
            {
                if (item.Value.Children().Count() > 0)
                {
                    foreach (JToken item2 in item.Value.Children())
                    {
                        if (item2.GetType().Name.Equals("JObject"))
                        {
                            builder.Append(concatValues((JObject)item2));
                        }
                        else if (item2.Children().Count() > 0)
                        {
                            builder.Append(concatValues(new JObject(item2)));
                        }
                        else
                        {


                        }
                    }
                }
                else
                {
                    builder.Append(item.Value);
                }
            }
            return builder.ToString();
        }

        /// <summary>
        /// Método para eliminar los TAG del Json de 
        /// </summary>
        /// <param name="strOut"></param>
        /// <returns></returns>
        private string RemeveTagIparkOut(string strOut)
        {
            strOut = strOut.Replace(TEXT_I_PARK_OUT, "");
            strOut = strOut.Remove(strOut.Length - 1, 1);
            return strOut;
        }

        /// <summary>
        /// Método para verificar que el email existe
        /// </summary>
        /// <param name="email"></param>
        /// <returns></returns>
        private bool ExistUserInTheMainServer(string email)
        {
            USER oUser = null;
            return customersRepository.GetUserData(ref oUser, email);
        }


        private List<SERVICES_USER_PLATE> ExistServiceType2(USER user, string strPlate, decimal cityId, DateTime? dtUtc)
        {
            List<USER_PLATE> oUserPlateList = (List<USER_PLATE>)user.USER_PLATEs.Where(x => x.USRP_ENABLED == 1).ToList();

            List<SERVICES_USER_PLATE> oServiceplateList = customersRepository.GetServicePlateOfUser(user, strPlate, cityId).ToList();

            return oServiceplateList;
        }

        private TypeTypeServicesEnum ExistServiceType(USER user, string strPlate, decimal cityId, DateTime? dtUtc, ref bool bServicePlateDUM, ref bool bServicePlatePMR, string xmlIn, ref string xmlOut)
        {
            TypeTypeServicesEnum oTypeTypeServicesEnum = TypeTypeServicesEnum.None;

            try
            {
                List<USER_PLATE> oUserPlateList = (List<USER_PLATE>)user.USER_PLATEs.Where(x => x.USRP_ENABLED == 1).ToList();
                USER_PLATE oUserPlate = null;

                List<SERVICES_USER_PLATE> oServiceplateList = null;
                SERVICES_USER_PLATE oServiceplate = null;

                if (oUserPlateList.Count > 0 && !string.IsNullOrEmpty(strPlate))
                {
                    oUserPlate = (USER_PLATE)user.USER_PLATEs.FirstOrDefault(x => x.USRP_PLATE.ToUpper().Equals(strPlate.ToUpper()));
                }
                else if (oUserPlateList.Count > 0)
                {
                    foreach (USER_PLATE user_plate in oUserPlateList)
                    {
                        foreach (SERVICES_USER_PLATE services_user_plate in user_plate.SERVICES_USER_PLATEs)
                        {
                            if (services_user_plate.SERUP_ENABLED == 1)
                            {
                                if (oServiceplateList == null)
                                {
                                    oServiceplateList = new List<SERVICES_USER_PLATE>();
                                }
                                oServiceplateList.Add(services_user_plate);
                            }
                        }
                    }
                }


                if (oUserPlate != null)
                {
                    oServiceplate = oUserPlate.SERVICES_USER_PLATEs.FirstOrDefault(x => x.SERUP_USRP_ID.Equals(oUserPlate.USRP_ID) && x.SERUP_ENABLED == 1);
                    if (oServiceplateList == null)
                    {
                        oServiceplateList = new List<SERVICES_USER_PLATE>();
                    }
                    oServiceplateList.Add(oServiceplate);
                }

                if (oServiceplate == null && (oServiceplateList != null && oServiceplateList.Count > 0))
                {
                    bServicePlateDUM = oServiceplateList.Any(x => x.SERUP_ENABLED == 1 && (!string.IsNullOrEmpty(x.SERUP_COMPANY_NAME) && !string.IsNullOrEmpty(x.SERUP_CIF_NIF_COMPANY)));
                    bServicePlatePMR = oServiceplateList.Any(x => x.SERUP_ENABLED == 1 && (!string.IsNullOrEmpty(x.SERUP_FIRST_NAME) && !string.IsNullOrEmpty(x.SERUP_LAST_NAME) && !string.IsNullOrEmpty(x.SERUP_CARD_REDUCED_MOVILITY)));
                }
                if (oServiceplate != null)
                {
                    oTypeTypeServicesEnum = ServicesUserPlatesEntity.GetTypeTypeServicesEnum(oServiceplate);
                }
                if (oServiceplateList != null && oServiceplateList.Count > 0 && oTypeTypeServicesEnum != TypeTypeServicesEnum.None)
                {
                    List<SERVICES_TYPE> oServiceTypeList = customersRepository.GetServiceTypeList(cityId, oTypeTypeServicesEnum, (dtUtc.HasValue ? dtUtc.Value : DateTime.UtcNow)).ToList();
                    if (oServiceTypeList != null)
                    {
                        if (oTypeTypeServicesEnum == TypeTypeServicesEnum.DUM && bServicePlateDUM)
                        {
                            bServicePlateDUM = oServiceTypeList.Any(x => x.SERTYP_TYPE_TYPESERVICE_ID.Equals((int)oTypeTypeServicesEnum));
                        }

                        if (oTypeTypeServicesEnum == TypeTypeServicesEnum.PMR && bServicePlatePMR)
                        {
                            bServicePlatePMR = oServiceTypeList.Any(x => x.SERTYP_TYPE_TYPESERVICE_ID.Equals((int)oTypeTypeServicesEnum));
                        }
                    }
                }
            }
            catch (Exception)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogMessage(string.Format("ExistServiceType::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return oTypeTypeServicesEnum;
        }

        private string GetNumDaysColourList()
        {
            string sNumDaysColourList = string.Empty;
            string strTodayColour = infraestructureRepository.GetParameterValue("ParkingScreenTodayColour");
            string strTomorrowColour = infraestructureRepository.GetParameterValue("ParkingScreenTomorrowColour");
            string strMoreThanTomorrowColour = infraestructureRepository.GetParameterValue("ParkingScreenMoreThanTomorrowColour");

            if (!string.IsNullOrEmpty(strTodayColour) && !string.IsNullOrEmpty(strTomorrowColour) && !string.IsNullOrEmpty(strMoreThanTomorrowColour))
            {
                sNumDaysColourList += "<colours xmlns:json='http://james.newtonking.com/projects/json' >";
                sNumDaysColourList += string.Format("<num_days>0</num_days><colour>{0}</colour>", strTodayColour);
                sNumDaysColourList += "</colours>";

                sNumDaysColourList += "<colours xmlns:json='http://james.newtonking.com/projects/json' >";
                sNumDaysColourList += string.Format("<num_days>1</num_days><colour>{0}</colour>", strTomorrowColour);
                sNumDaysColourList += "</colours>";

                sNumDaysColourList += "<colours xmlns:json='http://james.newtonking.com/projects/json' >";
                sNumDaysColourList += string.Format("<num_days>2</num_days><colour>{0}</colour>", strMoreThanTomorrowColour);
                sNumDaysColourList += "</colours>";

            }



            //StringBuilder sb = new StringBuilder();
            //strXmlVersionLiterals = "";

            //if (versionsLiterals.Count() > 0)
            //{
            //    foreach (stVersionsLiterals vl in versionsLiterals.OrderBy(r => r.IdVersion))
            //    {
            //        sb.Append("<colours json:Array='true'>");
            //        sb.AppendFormat("<idversion>{0}</idversion>", vl.IdVersion);
            //        sb.AppendFormat("<literal>{0}</literal>", vl.strLiteral);
            //        sb.AppendFormat("<mandatory>{0}</mandatory>", vl.Mandatory);
            //        //if (vl.liststUrlLiteral.Count > 0)
            //        //{
            //        //    sb.Append("<urls xmlns:json='http://james.newtonking.com/projects/json'>");
            //        //    foreach (stUrlLiteral sUl in vl.liststUrlLiteral)
            //        //    {
            //        //        sb.AppendFormat("<url json:Array='true'>{0}</url>", sUl.URL);
            //        //    }
            //        //    sb.Append("</urls>");
            //        //}
            //        //sb.Append("</question>"); ;
            //    }
            //}
            //strXmlVersionLiterals = sb.ToString();
            return sNumDaysColourList;

        }


        private string GetEmailSourceAppEmailPrefix(decimal dSourceApp)
        {
            string strRes="";

            decimal dDefaultSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();
            if (dSourceApp != dDefaultSourceApp)
            {
                strRes = geograficAndTariffsRepository.GetSourceAppCode(dSourceApp) + "_";
            }

            return strRes;
        }

        private decimal? GetLangIdFromCulture(string strCulture)
        {
            decimal? dlang = null;

            try
            {

                int iLangIndex = 1;
                foreach (string str in UserDeviceLangs)
                {
                    if (str.ToUpper() == strCulture.ToUpper())
                    {
                        dlang = iLangIndex;
                        break;
                    }
                    iLangIndex++;
                }


            }
            catch
            { }

            if (!dlang.HasValue)
            {

                try
                {
                    int iLangIndex = 1;
                    foreach (string str in UserDeviceLangs)
                    {
                        if (str.ToUpper() == "EN-US")
                        {
                            dlang = iLangIndex;
                            break;
                        }
                        iLangIndex++;
                    }


                }
                catch
                { }

            }

            return dlang;

        }

        private string GetCultureFromLangID(decimal? dLang)
        {
            string strCulture = "en-US";


            if (dLang.HasValue)
            {
                try
                {
                    int iLangIndex = Convert.ToInt32(dLang.Value);
                    if (iLangIndex <= UserDeviceLangs.Length)
                    {
                        strCulture = UserDeviceLangs[iLangIndex - 1];
                    }
                }
                catch
                { }


            }

            return strCulture;

        }


        #region Methods Zendesk
        private string CallToServerTokenZendesk(string xmlIn, string xmlOut, COUNTRIES_REDIRECTION countriesRedirections)
        {
            integraMobile.WS.ExternalIntegraMobileWS.integraMobileWS oExternalIntegraMobileWS = StarExternalIntegraMobileWS(countriesRedirections);
            if (oExternalIntegraMobileWS != null)
            {
                try
                {
                    //xmlOut = oExternalIntegraMobileWS.QueryTokenZendeskServerExternal(xmlIn);
                }
                catch (Exception)
                {
                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                    Logger_AddLogMessage(string.Format("CallToServerSignUpStep2::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
            }
            return xmlOut;
        }

        private SortedList CreateParameterOutZendesk(SortedList parametersOut, Dictionary<string, object> payload, string strXmlZendesk)
        {
            string strXmlZendeskTags = string.Empty;

            Logger_AddLogMessage(string.Format("QueryTokenZendesk::CreateParameterOutZendesk"), LogLevels.logINFO);


            foreach (System.Collections.Generic.KeyValuePair<string, object> oKeyValuePair in payload)
            {

                Logger_AddLogMessage(string.Format("QueryTokenZendesk::CreateParameterOutZendesk {0}->{1}", oKeyValuePair.Key, oKeyValuePair.Value), LogLevels.logINFO);

                if (oKeyValuePair.Key.Contains("name"))
                {
                    if (!string.IsNullOrEmpty(oKeyValuePair.Value.ToString()))
                    {
                        parametersOut["name"] = oKeyValuePair.Value;
                    }
                }

                if (oKeyValuePair.Key.Contains("email"))
                {
                    if (!string.IsNullOrEmpty(oKeyValuePair.Value.ToString()))
                    {
                        parametersOut["email"] = oKeyValuePair.Value;
                    }
                }

                if (oKeyValuePair.Key.Contains("external_id"))
                {
                    if (!string.IsNullOrEmpty(oKeyValuePair.Value.ToString()))
                    {
                        parametersOut["external_id"] = oKeyValuePair.Value;
                    }
                }

                if (oKeyValuePair.Key.Contains("alias"))
                {
                    if (!string.IsNullOrEmpty(oKeyValuePair.Value.ToString()))
                    {
                        parametersOut["alias"] = oKeyValuePair.Value;
                    }
                }

                if (oKeyValuePair.Key.Contains("phone"))
                {
                    if (!string.IsNullOrEmpty(oKeyValuePair.Value.ToString()))
                    {
                        parametersOut["phone"] = oKeyValuePair.Value;
                    }
                }

                if (oKeyValuePair.Key.Contains("tags"))
                {
                    SortedList Tags = new SortedList();
                    //JObject json = JObject.Parse(oKeyValuePair.Value.JsonSerializeToString());
                    //foreach (string sTag in (string[])oKeyValuePair.Value)
                    //{
                    //    //if (!string.IsNullOrEmpty(sTag))
                    //    //{
                    //    //    //sb.Append(sTag);
                    //    //    Tags.Add(sTag);
                    //    //    //sXmlvalue += string.Format("{0},", sTag);
                    //    //}
                    //}
                    parametersOut["tags"] = oKeyValuePair.Value.JsonSerializeToString().ToString();
                }

                if (oKeyValuePair.Key.Contains("role"))
                {
                    if (!string.IsNullOrEmpty(oKeyValuePair.Value.ToString()))
                    {
                        parametersOut["role"] = oKeyValuePair.Value;
                    }
                }

                if (oKeyValuePair.Key.Contains("user_fields"))
                {
                    if (GenerateXMLZendeskUserFields((Dictionary<string, string>)oKeyValuePair.Value, ref strXmlZendesk))
                    {
                        parametersOut["user_fields"] = strXmlZendesk;
                    }
                }
            }
            return parametersOut;
        }

        private bool GenerateXMLZendeskUserFields(Dictionary<string, string> userDataDict, ref string strXmlZendesk)
        {

            bool bRes = true;
            try
            {
                StringBuilder sb = new StringBuilder();
                if (userDataDict != null && userDataDict.Count > 0)
                {

                    foreach (KeyValuePair<string, string> oKeyValuePairUserFields in userDataDict)
                    {
                        if (oKeyValuePairUserFields.Key.Contains("telfono_fijo"))
                        {
                            if (!string.IsNullOrEmpty(oKeyValuePairUserFields.Value))
                            {
                                sb.AppendFormat("<telfono_fijo>{0}</telfono_fijo>", oKeyValuePairUserFields.Value);
                            }
                        }

                        if (oKeyValuePairUserFields.Key.Contains("dni_pasaporte"))
                        {
                            if (!string.IsNullOrEmpty(oKeyValuePairUserFields.Value))
                            {
                                sb.AppendFormat("<dni_pasaporte>{0}</dni_pasaporte>", oKeyValuePairUserFields.Value);
                            }
                        }

                        if (oKeyValuePairUserFields.Key.Contains("provincia"))
                        {
                            if (!string.IsNullOrEmpty(oKeyValuePairUserFields.Value))
                            {
                                sb.AppendFormat("<provincia>{0}</provincia>", oKeyValuePairUserFields.Value);
                            }
                        }

                        if (oKeyValuePairUserFields.Key.Contains("ciudad"))
                        {
                            if (!string.IsNullOrEmpty(oKeyValuePairUserFields.Value))
                            {
                                sb.AppendFormat("<ciudad>{0}</ciudad>", oKeyValuePairUserFields.Value);
                            }
                        }

                        if (oKeyValuePairUserFields.Key.Contains("matriculas"))
                        {
                            if (!string.IsNullOrEmpty(oKeyValuePairUserFields.Value))
                            {
                                sb.AppendFormat("<matriculas>{0}</matriculas>", oKeyValuePairUserFields.Value);
                            }
                        }

                        if (oKeyValuePairUserFields.Key.Contains("alta"))
                        {
                            if (!string.IsNullOrEmpty(oKeyValuePairUserFields.Value))
                            {
                                sb.AppendFormat("<alta>{0}</alta>", oKeyValuePairUserFields.Value);
                            }
                        }

                        if (oKeyValuePairUserFields.Key.Contains("tipo_de_suscripcion"))
                        {
                            if (!string.IsNullOrEmpty(oKeyValuePairUserFields.Value))
                            {
                                sb.AppendFormat("<tipo_de_suscripcion>{0}</tipo_de_suscripcion>", oKeyValuePairUserFields.Value);
                            }
                        }

                        if (oKeyValuePairUserFields.Key.Contains("saldo_actual"))
                        {
                            if (!string.IsNullOrEmpty(oKeyValuePairUserFields.Value))
                            {
                                sb.AppendFormat("<saldo_actual>{0}</saldo_actual>", oKeyValuePairUserFields.Value);
                            }
                        }

                        if (oKeyValuePairUserFields.Key.Contains("version"))
                        {
                            if (!string.IsNullOrEmpty(oKeyValuePairUserFields.Value))
                            {
                                sb.AppendFormat("<version>{0}</version>", oKeyValuePairUserFields.Value);
                            }
                        }

                        if (oKeyValuePairUserFields.Key.Contains("sistema_operativo"))
                        {
                            if (!string.IsNullOrEmpty(oKeyValuePairUserFields.Value))
                            {
                                sb.AppendFormat("<sistema_operativo>{0}</sistema_operativo>", oKeyValuePairUserFields.Value);
                            }
                        }

                        if (oKeyValuePairUserFields.Key.Contains("modelo_dispositvo"))
                        {
                            if (!string.IsNullOrEmpty(oKeyValuePairUserFields.Value))
                            {
                                sb.AppendFormat("<modelo_dispositvo>{0}</modelo_dispositvo>", oKeyValuePairUserFields.Value);
                            }
                        }

                        if (oKeyValuePairUserFields.Key.Contains("numero_serie_dispositivo"))
                        {
                            if (!string.IsNullOrEmpty(oKeyValuePairUserFields.Value))
                            {
                                sb.AppendFormat("<numero_serie_dispositivo>{0}</numero_serie_dispositivo>", oKeyValuePairUserFields.Value);
                            }
                        }

                        if (oKeyValuePairUserFields.Key.Contains("estado"))
                        {
                            if (!string.IsNullOrEmpty(oKeyValuePairUserFields.Value))
                            {
                                sb.AppendFormat("<estado>{0}</estado>", oKeyValuePairUserFields.Value);
                            }
                        }
                    }
                }
                strXmlZendesk = sb.ToString();
            }
            catch (Exception ex)
            {
                bRes = false;
                Logger_AddLogException(ex, string.Format("GenerateXMLZendesk::Error: "), LogLevels.logERROR);
            }
            return bRes;
        }

        private bool GenerateXMLZendeskTags(string[] userDataDict, ref string strXmlZendesk)
        {

            bool bRes = true;
            string sXmlvalue = string.Empty;
            StringBuilder sb = new StringBuilder();
            try
            {
                if (userDataDict != null && userDataDict.Length > 0)
                {
                    foreach (string sTag in userDataDict)
                    {
                        if (!string.IsNullOrEmpty(sTag))
                        {
                            sb.Append(sTag);
                        }
                    }
                    //sXmlvalue = sXmlvalue.Remove(sXmlvalue.Length - 1);
                }
                //strXmlZendesk = sXmlvalue;
                strXmlZendesk = sb.ToString();
            }
            catch (Exception ex)
            {
                bRes = false;
                Logger_AddLogException(ex, string.Format("GenerateXMLZendeskTags::Error: "), LogLevels.logERROR);
            }
            return bRes;
        }

        private List<stTariff> IntersectTariff(List<stTariff> tariff, List<stTariff> tariffServices)
        {

            List<stTariff> tariffIntersect = new List<stTariff>();
            if (tariffServices.Count() == 0 && tariff.Count != 0)
            {
                tariffIntersect = tariff;
            }
            else if (tariffServices.Count() != 0 && tariff.Count == 0)
            {
                tariffIntersect = tariffServices;
            }
            else
            {
                foreach (stTariff tempA in tariff)
                {
                    if (!tariffIntersect.Contains(tempA))
                    {
                        tariffIntersect.Add(tempA);
                    }
                }
                foreach (stTariff tempB in tariffServices)
                {
                    if (!tariffIntersect.Contains(tempB))
                    {
                        tariffIntersect.Add(tempB);
                    }
                }

            }


            return tariffIntersect;
        }
        #endregion

        #region Campaign Methods    
        private string Campaing(USER oUser, decimal? dLat, decimal? dLon, int iOSType, decimal? dIdOperation, decimal? dTicketPayment, GROUP oGroup, string xmlIn, string xmlOut, decimal dSourceApp)
        {
            if ((dIdOperation.HasValue && dIdOperation.Value != 0) || dTicketPayment.HasValue && dTicketPayment.Value != 0)
            {
                xmlOut = RunCampaign(oUser, dLat, dLon, iOSType, dIdOperation, dTicketPayment, oGroup, xmlIn, xmlOut, dSourceApp);
            }
            else if (!dIdOperation.HasValue && !dTicketPayment.HasValue)
            {
                xmlOut = RunCampaign(oUser, dLat, dLon, iOSType, null, null, oGroup, xmlIn, xmlOut,dSourceApp);
            }
            return xmlOut;
        }

        private string RunCampaign(USER oUser, decimal? dLat, decimal? dLon, int iOSType, decimal? dIdOperation, decimal? dTicketPayment, GROUP oGroup, string xmlIn, string xmlOut, decimal dSourceApp)
        {
            //Verify that  invited has not assigned an amount to the user previously
            USERS_FRIEND oUserFriends = null;
            if (customersRepository.GetUserFriend(oUser, ref oUserFriends))
            {
                if (oUserFriends != null)
                {
                    //Verify that the guest has not assigned an amount to the user previously
                    if (customersRepository.FriendHasAssignedAmount(ref oUserFriends))
                    {
                        if (oUserFriends != null)
                        {
                            DateTime? dtInstallationTime = null;
                            DateTime? dtUTCInstallation = null;
                            if (oGroup != null)
                            {
                                dtInstallationTime = geograficAndTariffsRepository.getInstallationDateTime(oGroup.GRP_INS_ID);
                                dtUTCInstallation = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oGroup.GRP_INS_ID, dtInstallationTime.Value);
                            }
                            else if (oUser.INSTALLATION != null)
                            {
                                dtInstallationTime = geograficAndTariffsRepository.getInstallationDateTime(oUser.INSTALLATION.INS_ID);
                                dtUTCInstallation = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oUser.INSTALLATION.INS_ID, dtInstallationTime.Value);
                            }
                            else
                            {
                                dtInstallationTime = DateTime.Now;
                                dtUTCInstallation = DateTime.UtcNow;
                            }

                            List<CAMPAING> oCampaingList = null;
                            CAMPAING_USER_ASSIGNATION oCampaingUserAssignations = null;
                            USER oUserOrigin = null;

                            //Is Campaign By User Assigned 
                            //(CAMP_STATUS!=Closed y y INITIAL_DELIVERY_DATE >= COUNTRY_DATE_NOW y COUNTRY_DATE_NOW < END_DELIVERY_DATE
                            if (customersRepository.IsCampaignByUserAssigned(oUserFriends, dtInstallationTime.Value, dSourceApp, ref oCampaingUserAssignations, ref oCampaingList, ref oUserOrigin))
                            {
                                if (oCampaingUserAssignations != null && oCampaingUserAssignations.CAUS_STATUS != (Int32)CampaingUserAssignationStatus.Used && oCampaingList.Count > 0)
                                {
                                    foreach (CAMPAING oCampaing in oCampaingList)
                                    {
                                        if (oCampaing.CAMP_STATUS != (int)CampaingStatus.Closed)
                                        {
                                            switch ((CampaingShema)oCampaing.CAMP_SCHEMA)
                                            {
                                                //Campaing Shema 1: Invite Friends
                                                case CampaingShema.CampaignInviteFriendToXCountry:
                                                    if (oCampaingUserAssignations.CAUS_CAMP_ID.Equals(oCampaing.CAMP_ID))
                                                    {
                                                        xmlOut = CampaingSchemaOne(oCampaingUserAssignations, dtUTCInstallation, dtInstallationTime, oCampaing, dLat, dLon, oUserOrigin, dIdOperation, dTicketPayment, oUserFriends, xmlIn, xmlOut, dSourceApp);
                                                    }
                                                    break;
                                                //Campaing Shema 2: Campaing x currency Invited and x currency Inviter
                                                case CampaingShema.CampaignXCurrencyInvitedAndXCurrencyInviter:
                                                    if (oCampaingUserAssignations.CAUS_CAMP_ID.Equals(oCampaing.CAMP_ID))
                                                    {
                                                        xmlOut = CampaingSchemaTwo(oCampaingUserAssignations, dtUTCInstallation, dtInstallationTime, oCampaing, dLat, dLon, iOSType, oUserOrigin, dIdOperation, dTicketPayment, oUserFriends, xmlIn, xmlOut, dSourceApp);
                                                    }
                                                    break;
                                            }
                                        }
                                    }
                                }

                            }
                            else
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ConfirmParkingOperation::IsCampaignByUserAssigned::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                        }
                    }
                    else
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                        Logger_AddLogMessage(string.Format("ConfirmParkingOperation::FriendHasAssignedAmount::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                }
            }
            else
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogMessage(string.Format("ConfirmParkingOperation::GetUserFriend::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }
            return xmlOut;
        }

        private string CampaingSchemaOne(CAMPAING_USER_ASSIGNATION oCampaingUserAssignations, DateTime? dtUTCInstallation, DateTime? dtInstallationTime, CAMPAING oCampaing, decimal? dLat, decimal? dLon,
                                        USER oUserOrigin, decimal? dIdOperation, decimal? dTicketPayment, USERS_FRIEND oUserFriends, string xmlIn, string xmlOut, decimal dSourceApp)
        {
            //Change Status In User Assignation
            if (customersRepository.ChangeStatusInUserAssignation(oCampaingUserAssignations, dtUTCInstallation.Value))
            {
                RECHARGE_COUPON oRechargeCoupon = null;
                //Insert Recharge Coupon by user
                if (customersRepository.InsertRechargeCoupon(oCampaing.CAMP_USER_DELIVER_AMOUNT, oCampaing.COUNTRy.COU_CUR_ID.Value, dtInstallationTime.Value, dtInstallationTime.Value.AddDays(1), RechargeCouponsType.AutoGenerated, out oRechargeCoupon))
                {
                    if (oRechargeCoupon != null)
                    {
                        CUSTOMER_PAYMENT_MEANS_RECHARGE oCustomerPaymentMeansRecharge = null;

                        string strApp = null;
                        var oSession = oUserOrigin.MOBILE_SESSIONs.Where(r => r.MOSE_USR_ID == oUserOrigin.USR_ID).OrderByDescending(y => y.MOSE_CREATION_TIME).First();

                        //Recharge User Balance With Coupon
                        if (customersRepository.RechargeUserBalanceWithCoupon(ref oUserOrigin,
                                                                                oSession.MOSE_OS.Value,
                                                                                Convert.ToInt32(oRechargeCoupon.RCOUP_VALUE),
                                                                                oCampaing.COUNTRy.COU_CUR_ID.Value,
                                                                                oRechargeCoupon.RCOUP_ID.ToString(),
                                                                                ref oRechargeCoupon,
                                                                                dLat, dLon, strApp,dSourceApp,
                                                                                out oCustomerPaymentMeansRecharge))
                        {
                            decimal? dIdCuspmr = null;
                            if (oCustomerPaymentMeansRecharge != null)
                            {
                                dIdCuspmr = oCustomerPaymentMeansRecharge.CUSPMR_ID;
                            }
                            if ((dIdOperation.HasValue && dIdCuspmr.HasValue) || (dTicketPayment.HasValue && dIdCuspmr.HasValue))
                            {
                                if (customersRepository.AddCampaingUserUse(oCampaingUserAssignations, dIdOperation, dTicketPayment, dIdCuspmr.Value, dtInstallationTime.Value, dtUTCInstallation.Value, oUserFriends.USRF_USR_ID))
                                {
                                    //Send Email--> CONFIRM CAMPAIGN USER USE
                                    string strEmailSubject = ResourceExtension.GetLiteral(string.Format("ConfirmCampaignUserUse_EmailHeader_{0}", oCampaing.CAMP_ID));
                                    string strEmailBody = ResourceExtension.GetLiteral(string.Format("ConfirmCampaignUserUse_EmailBody_{0}", oCampaing.CAMP_ID));
                                    SendEmail(ref oUserOrigin, strEmailSubject, string.Format(strEmailBody, oUserFriends.USRF_FRIEND_EMAIL), dSourceApp);


                                    //Verification of the limit of user use by Campaign
                                    if (!customersRepository.VerifyLimitOfUseCampaing(oCampaingUserAssignations, dtUTCInstallation.Value))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("ConfirmParkingOperation::VerifyLimitOfUseCampaing::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    }

                                    //Actualizamos en la tabla campaña el monto por los usuarios
                                    if (!customersRepository.UpdateTotalDiscountDelivereCampaign(oCampaingUserAssignations, dtInstallationTime.Value))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("ConfirmParkingOperation::UpdateTotalDiscountDelivereCampaign::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    }
                                    else
                                    {
                                        //Verificamos si se debe cerrar la campaña
                                        if (!customersRepository.VerifyCloseCampaignForAmount(oCampaingUserAssignations.CAUS_CAMP_ID, dtInstallationTime.Value))
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("ConfirmParkingOperation::VerifyCloseCampaignForAmount::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        }
                                    }
                                }
                                else
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::AddCampaingUserUse::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }
                            }
                        }
                        else
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                            Logger_AddLogMessage(string.Format("ConfirmParkingOperation::RechargeUserBalanceWithCoupon::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::InsertRechargeCoupon::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
            }
            else
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogMessage(string.Format("ConfirmParkingOperation::IsCampaignByUserAssigned::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }
            return xmlOut;
        }

        private string CampaingSchemaTwo(CAMPAING_USER_ASSIGNATION oCampaingUserAssignations, DateTime? dtUTCInstallation, DateTime? dtInstallationTime, CAMPAING oCampaing, decimal? dLat, decimal? dLon, int iOSType,
         USER oUserOrigin, decimal? dIdOperation, decimal? dTicketPayment, USERS_FRIEND oUserFriends, string xmlIn, string xmlOut , decimal dSourceApp)
        {
            //Change Status In User Assignation
            if (customersRepository.ChangeStatusInUserAssignation(oCampaingUserAssignations, dtUTCInstallation.Value))
            {
                RECHARGE_COUPON oRechargeCoupon = null;
                //Insert Recharge Coupon by user
                if (customersRepository.InsertRechargeCoupon(oCampaing.CAMP_USER_DELIVER_AMOUNT, oCampaing.COUNTRy.COU_CUR_ID.Value, dtInstallationTime.Value, dtInstallationTime.Value.AddDays(1), RechargeCouponsType.AutoGenerated, out oRechargeCoupon))
                {
                    if (oRechargeCoupon != null)
                    {
                        CUSTOMER_PAYMENT_MEANS_RECHARGE oCustomerPaymentMeansRecharge = null;

                        string strApp = null;
                        var oSession = oUserOrigin.MOBILE_SESSIONs.Where(r => r.MOSE_USR_ID == oUserOrigin.USR_ID).OrderByDescending(y => y.MOSE_CREATION_TIME).First();

                        //Recharge User Balance With Coupon
                        if (customersRepository.RechargeUserBalanceWithCoupon(ref oUserOrigin,
                                                                                oSession.MOSE_OS.Value,
                                                                                Convert.ToInt32(oRechargeCoupon.RCOUP_VALUE),
                                                                                oCampaing.COUNTRy.COU_CUR_ID.Value,
                                                                                oRechargeCoupon.RCOUP_ID.ToString(),
                                                                                ref oRechargeCoupon,
                                                                                dLat, dLon, strApp,dSourceApp,
                                                                                out oCustomerPaymentMeansRecharge))
                        {
                            decimal? dIdCuspmr = null;
                            if (oCustomerPaymentMeansRecharge != null)
                            {
                                dIdCuspmr = oCustomerPaymentMeansRecharge.CUSPMR_ID;
                            }

                            if (customersRepository.AddCampaingUserUse(oCampaingUserAssignations, dIdOperation, dTicketPayment, dIdCuspmr.Value, dtInstallationTime.Value, dtUTCInstallation.Value, oUserOrigin.USR_ID))
                            {

                                //Send Email--> CONFIRM CAMPAIGN USER USE
                                string strEmailSubject = ResourceExtension.GetLiteral(string.Format("InvitedAFriendCongratInviter_EmailHeader_{0}", oCampaing.CAMP_ID));
                                string strEmailBody = ResourceExtension.GetLiteral(string.Format("InvitedAFriendCongratInviter_EmailBody_{0}", oCampaing.CAMP_ID));
                                //Send Email UserOrigin
                                SendEmail(ref oUserOrigin, strEmailSubject, string.Format(strEmailBody, oUserFriends.USRF_FRIEND_EMAIL), dSourceApp);


                                //Verification of the limit of user use by Campaign
                                if (!customersRepository.VerifyLimitOfUseCampaing(oCampaingUserAssignations, dtUTCInstallation.Value))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::VerifyLimitOfUseCampaing::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }

                                //Actualizamos en la tabla campaña el monto por los usuarios
                                if (!customersRepository.UpdateTotalDiscountDelivereCampaign(oCampaingUserAssignations, dtInstallationTime.Value))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::UpdateTotalDiscountDelivereCampaign::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }
                                else
                                {
                                    //Verificamos si se debe cerrar la campaña
                                    if (!customersRepository.VerifyCloseCampaignForAmount(oCampaingUserAssignations.CAUS_CAMP_ID, dtInstallationTime.Value))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("ConfirmParkingOperation::VerifyCloseCampaignForAmount::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    }
                                }
                            }
                            else
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ConfirmParkingOperation::AddCampaingUserUse::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }

                        }
                        else
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                            Logger_AddLogMessage(string.Format("ConfirmParkingOperation::RechargeUserBalanceWithCoupon::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::InsertRechargeCoupon::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
            }
            else
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogMessage(string.Format("ConfirmParkingOperation::IsCampaignByUserAssigned::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            //User Friends
            RECHARGE_COUPON oRechargeCouponFriends = null;
            //Insert Recharge Coupon by user
            if (customersRepository.InsertRechargeCoupon(oCampaing.CAMP_USER_DELIVER_AMOUNT, oCampaing.COUNTRy.COU_CUR_ID.Value, dtInstallationTime.Value, dtInstallationTime.Value.AddDays(1), RechargeCouponsType.AutoGenerated, out oRechargeCouponFriends))
            {
                if (oRechargeCouponFriends != null)
                {
                    CUSTOMER_PAYMENT_MEANS_RECHARGE oCustomerPaymentMeansRechargeFriends = null;

                    string strApp = null;
                    USER oUserFriendsNew = null;
                    if (customersRepository.GetUserDataByEmail(ref oUserFriendsNew, oUserFriends.USRF_FRIEND_EMAIL))
                    {


                        //Recharge User Balance With Coupon
                        if (customersRepository.RechargeUserBalanceWithCoupon(ref oUserFriendsNew,
                                                                                iOSType,
                            //Convert.ToInt32(parametersIn["OSID"]),
                                                                                Convert.ToInt32(oRechargeCouponFriends.RCOUP_VALUE),
                                                                                oCampaing.COUNTRy.COU_CUR_ID.Value,
                                                                                oRechargeCouponFriends.RCOUP_ID.ToString(),
                                                                                ref oRechargeCouponFriends,
                                                                                dLat, dLon, strApp,dSourceApp, 
                                                                                out oCustomerPaymentMeansRechargeFriends))
                        {
                            decimal? dIdCuspmrFriends = null;
                            if (oCustomerPaymentMeansRechargeFriends != null)
                            {
                                dIdCuspmrFriends = oCustomerPaymentMeansRechargeFriends.CUSPMR_ID;
                            }

                            if (customersRepository.AddCampaingUserUse(oCampaingUserAssignations, dIdOperation, dTicketPayment, dIdCuspmrFriends.Value, dtInstallationTime.Value, dtUTCInstallation.Value, oUserFriendsNew.USR_ID))
                            {
                                //Send Email--> CONFIRM CAMPAIGN USER USE
                                string strEmailSubject = ResourceExtension.GetLiteral(string.Format("InvitedAFriendCongratInvited_EmailHeader_{0}", oCampaing.CAMP_ID));
                                string strEmailBody = ResourceExtension.GetLiteral(string.Format("InvitedAFriendCongratInvited_EmailBody_{0}", oCampaing.CAMP_ID));
                                //Send Email UserFriends 
                                SendEmail(ref oUserFriendsNew, strEmailSubject, string.Format(strEmailBody, oUserOrigin.USR_EMAIL), dSourceApp);


                                //Actualizamos en la tabla campaña el monto por los usuarios
                                if (!customersRepository.VerifyLimitOfUseCampaing(oCampaingUserAssignations, dtUTCInstallation.Value))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::UpdateTotalDiscountDelivereCampaign::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }
                                else
                                {
                                    //Verificamos si se debe cerrar la campaña
                                    if (!customersRepository.VerifyCloseCampaignForAmount(oCampaingUserAssignations.CAUS_CAMP_ID, dtInstallationTime.Value))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("ConfirmParkingOperation::VerifyCloseCampaignForAmount::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    }
                                }

                                //Verify if the users have reached the maximum amount of the campaign
                                if (!customersRepository.UpdateTotalDiscountDelivereCampaign(oCampaingUserAssignations, dtInstallationTime.Value))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::VerifyMaximumAmountCampaign::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }
                            }
                            else
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ConfirmParkingOperation::AddCampaingUserUse::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }

                        }
                        else
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                            Logger_AddLogMessage(string.Format("ConfirmParkingOperation::RechargeUserBalanceWithCoupon::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                    }

                }
            }
            else
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogMessage(string.Format("ConfirmParkingOperation::InsertRechargeCoupon::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }


            return xmlOut;
        }

        private void CampaingSchemaSeven(USER oUser, INSTALLATION oInstallation, decimal? dLat, decimal? dLon, SortedList parametersIn)
        {


            int iOSID = (int)MobileOS.None;
            string strIMEI = "";
            string strSerialNumber = "";
            decimal dSourceApp = geograficAndTariffsRepository.GetDefaultSourceApp();
            if (parametersIn["appcode"] != null)
            {
                try
                {
                    string strAppCode = parametersIn["appcode"].ToString();
                    dSourceApp = geograficAndTariffsRepository.GetSourceApp(strAppCode);
                }
                catch { }
            }

            if (parametersIn["OSID"] != null)
            {
                iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
            }
            if (parametersIn["IMEI"] != null)
            {
                strIMEI = parametersIn["IMEI"].ToString();
            }
            if (parametersIn["cserialnumber"] != null)
            {
                strSerialNumber = parametersIn["cserialnumber"].ToString();
                if (strSerialNumber == "unknown")
                    strSerialNumber = "";
            }
        

            bool bCampaignApplied = false;
            IEnumerable<CAMPAING> oCAMPAINGs = new List<CAMPAING>();

            if (oInstallation != null)
            {

                DateTime? dt = null;
                DateTime dtUTC = DateTime.UtcNow;

                //Verificar que el usuario no tiene ninguna operación
                if (!customersRepository.HasUserMakeAnyOperation(oUser))
                {
                    dt = geograficAndTariffsRepository.getInstallationDateTime(oInstallation.INS_ID);

                    if (customersRepository.VerifyCampaign((int)CampaingShema.CampaingCouponOnSignupInInstallation, dSourceApp, ref oCAMPAINGs))
                    {

                        foreach (var oCampaing in oCAMPAINGs)
                        {
                            DateTime? dtUserInsertionDateTime = geograficAndTariffsRepository.ConvertUTCToInstallationDateTime(oInstallation.INS_ID, oUser.USR_INSERT_UTC_DATE);
                            if ((oCampaing.CAMP_COU_ID == oUser.USR_COU_ID) && (dtUserInsertionDateTime > oCampaing.CAMP_INITIAL_DELIVERY_DATE))
                            {
                                if (customersRepository.CheckBetweenDates(oCampaing.CAMP_ID, dt.Value))
                                {
                                    bool bEnjoyed = false;
                                    customersRepository.TheUserHaveEnjoyedACampaign(oUser, oCampaing, ref bEnjoyed);

                                    if (!bEnjoyed)
                                    {
                                        foreach (var oCampaingInstallation in oCampaing.CAMPAINGS_INSTALLATIONs)
                                        {
                                            if (oCampaingInstallation.CAMP_INS_INS_ID == oInstallation.INS_ID)
                                            {

                                                int oMobilesSessions = 0;
                                                if ((!string.IsNullOrEmpty(strIMEI)) || (!string.IsNullOrEmpty(strSerialNumber)))
                                                {

                                                    customersRepository.GetAllTheUsersOfAnIMEI(oCampaing.CAMP_ID, strIMEI,
                                                                                               strSerialNumber,
                                                                                               ref oMobilesSessions);
                                                }

                                                if (oMobilesSessions == 0)
                                                {

                                                    RECHARGE_COUPON oRechargeCoupon = null;
                                                    //Insert Recharge Coupon by user
                                                    if (customersRepository.InsertRechargeCoupon(oCampaing.CAMP_USER_DELIVER_AMOUNT, oCampaing.COUNTRy.COU_CUR_ID.Value, dt.Value, dt.Value.AddDays(1), RechargeCouponsType.AutoGenerated, out oRechargeCoupon))
                                                    {
                                                        if (oRechargeCoupon != null)
                                                        {
                                                            CUSTOMER_PAYMENT_MEANS_RECHARGE oCustomerPaymentMeansRecharge = null;

                                                            string strApp = null;

                                                            //Recharge User Balance With Coupon
                                                            if (customersRepository.RechargeUserBalanceWithCoupon(ref oUser,
                                                                                                                    iOSID,
                                                                                                                    Convert.ToInt32(oRechargeCoupon.RCOUP_VALUE),
                                                                                                                    oCampaing.COUNTRy.COU_CUR_ID.Value,
                                                                                                                    oRechargeCoupon.RCOUP_ID.ToString(),
                                                                                                                    ref oRechargeCoupon,
                                                                                                                    dLat, dLon, strApp, dSourceApp,
                                                                                                                    out oCustomerPaymentMeansRecharge))
                                                            {
                                                                decimal? dIdCuspmr = null;
                                                                if (oCustomerPaymentMeansRecharge != null)
                                                                {
                                                                    dIdCuspmr = oCustomerPaymentMeansRecharge.CUSPMR_ID;

                                                                    if (!customersRepository.AddCampaingUserUse(dIdCuspmr.Value, dt.Value, dtUTC, oUser.USR_ID, oCampaing, strIMEI, oCampaing.CAMP_USER_DELIVER_AMOUNT))
                                                                    {

                                                                    }

                                                                    if (!customersRepository.UpdateCampaignTotalDiscountDelivered(oCampaing.CAMP_ID, oCampaing.CAMP_USER_DELIVER_AMOUNT))
                                                                    {
                                                                    }


                                                                    if (!customersRepository.VerifyCloseCampaignForAmount(oCampaing.CAMP_ID, dt.Value))
                                                                    {
                                                                    }

                                                                }
                                                                bCampaignApplied = true;
                                                                break;

                                                            }
                                                            else
                                                            {

                                                            }
                                                        }
                                                    }

                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (bCampaignApplied)
                                break;

                        }
                    }

                }
            }
           
        }


        private ResultType ApplyCampaingSchemaThree(string strCoupon, DateTime dt, USER oUser, MOBILE_SESSION session, CAMPAING oCampaing)
        {
            ResultType rtRes = ResultType.Result_OK;

            if (customersRepository.CheckBetweenDates(oCampaing.CAMP_ID, dt))
            {
                //Verificar que el usuario no tiene ninguna operación
                if (!customersRepository.HasUserMakeAnyOperation(oUser))
                {
                    //Si el IMEI lo tiene mas usuarios. En caso de no tener IMEI se usa el Serial Number
                    int oMobilesSessions = 0;

                    string strIMEI = !string.IsNullOrEmpty(session.MOSE_CELL_IMEI) ? session.MOSE_CELL_IMEI : string.Empty;
                    string strSerialNumber = !string.IsNullOrEmpty(session.MOSE_CELL_SERIALNUMBER) ? session.MOSE_CELL_SERIALNUMBER : string.Empty;

                    if (strSerialNumber == "unknown")
                        strSerialNumber = "";


                    if ((!string.IsNullOrEmpty(strIMEI)) || (!string.IsNullOrEmpty(strSerialNumber)))
                    {

                        customersRepository.GetAllTheUsersOfAnIMEI(oCampaing.CAMP_ID, strIMEI,
                                                                    strSerialNumber,
                                                                    ref oMobilesSessions);
                    }

                    if (oMobilesSessions == 0)
                    {
                        //Si el usuario ya disfruto de la campaña
                        Boolean bEnjoyed = false;
                        if (customersRepository.TheUserHaveEnjoyedACampaign(oUser, oCampaing, ref bEnjoyed))
                        {
                            if (bEnjoyed)
                            {
                                //Ya ha usado el cupon
                                rtRes = ResultType.Result_Error_TheCouponHasAlreadyBeenUsed;
                                Logger_AddLogMessage(string.Format("QueryRecharge::VerifyCampaign::bEnjoye=true ::Error: coupon={0}, campaing={1}, error={2}", strCoupon, oCampaing.CAMP_DESCRIPTION, rtRes), LogLevels.logERROR);
                            }
                        }
                        else
                        {
                            //Ya ha usado el cupon
                            rtRes = ResultType.Result_Error_TheCouponHasAlreadyBeenUsed;
                            Logger_AddLogMessage(string.Format("QueryRecharge::VerifyCampaign::TheUserHaveEnjoyedACampaign=false Error: coupon={0}, , campaing={1}, error={2}", strCoupon, oCampaing.CAMP_DESCRIPTION, rtRes), LogLevels.logERROR);

                        }
                    }
                    else
                    {
                        //Ya ha usado el cupon
                        rtRes = ResultType.Result_Error_TheCouponHasAlreadyBeenUsed;
                        Logger_AddLogMessage(string.Format("QueryRecharge::VerifyCampaign::oMobileSessions>0::Error: coupon={0}, , campaing={1}, error={2}", strCoupon, oCampaing.CAMP_DESCRIPTION, rtRes), LogLevels.logERROR);

                    }

                }
                else
                {
                    // el usuario ya tiene operacion
                    rtRes = ResultType.Result_Error_CouponCanNotBeUsedByExistingUsers;
                    Logger_AddLogMessage(string.Format("QueryRecharge::VerifyCampaign:operation=null::Error: coupon={0}, , campaing={1}, error={2}", strCoupon, oCampaing.CAMP_DESCRIPTION, rtRes), LogLevels.logERROR);

                }
            }
            else
            {
                //Campaign is closed
                rtRes = ResultType.Result_Error_CloseCampaign;
                Logger_AddLogMessage(string.Format("QueryRecharge::VerifyCampaign::oMobileSessions>0::Error: coupon={0}, , campaing={1}, error={2}", strCoupon, oCampaing.CAMP_DESCRIPTION, rtRes), LogLevels.logERROR);

            }



            return rtRes;
        }





        private bool SaveCampaingSchemaThree(CAMPAING campaign, USER user, MOBILE_SESSION session, CUSTOMER_PAYMENT_MEANS_RECHARGE oCustomerPaymentMeansRecharge, RECHARGE_COUPON oRechargeCoupon, DateTime dt, DateTime dtUTC)
        {
            bool bRes = true;


            string strIMEI = !string.IsNullOrEmpty(session.MOSE_CELL_IMEI) ? session.MOSE_CELL_IMEI : session.MOSE_CELL_SERIALNUMBER;

            if (string.IsNullOrEmpty(strIMEI))
                strIMEI = "";

            if (strIMEI == "unknown")
                strIMEI = "";

            if (customersRepository.AddCampaingUserUse(oCustomerPaymentMeansRecharge.CUSPMR_ID, dt, dtUTC, user.USR_ID, campaign, strIMEI, oCustomerPaymentMeansRecharge.CUSPMR_AMOUNT))
            {
                //Se actualiza el precio del cupon en la tabla de 
                if (!customersRepository.UpdateCampaignTotalDiscountDelivered(campaign.CAMP_ID, oCustomerPaymentMeansRecharge.CUSPMR_AMOUNT))
                {
                    bRes = false;
                    Logger_AddLogMessage(string.Format("SaveCampaingSchemaThree::UpdateCampaignTotalDiscountDelivered::Error: coupon={0}, campaign={1}", oRechargeCoupon.RCOUP_CODE, campaign.CAMP_DESCRIPTION), LogLevels.logERROR);
                }
            }
            else
            {
                bRes = false;
                Logger_AddLogMessage(string.Format("SaveCampaingSchemaThree::AddCampaingUserUse::Error: coupon={0}, campaign={1}", oRechargeCoupon.RCOUP_CODE, campaign.CAMP_DESCRIPTION), LogLevels.logERROR);
            }


            return bRes;
        }




        private bool ApplyCampaingSchemaFour(DateTime dt, USER user, GROUP oGroup, decimal dSourceApp, ref decimal? dApplyCampaingDiscount, ref CAMPAING oCampaing, ref int? oIndex)
        {
            bool bApply = false;
            /**************************************************************************/
            /**               SI HAY CAMPAÑA ESQUEMA 4 SI ESTA ACTIVA                **/
            /**************************************************************************/
            //Verificar si existe una campaña esquema 4 y si esta activa
            IEnumerable<CAMPAING> oCAMPAINGs = null;
            if (customersRepository.VerifyCampaign((int)CampaingShema.DiscountCampaignByZone,dSourceApp, ref oCAMPAINGs))
            {
                foreach (CAMPAING campaing in oCAMPAINGs)
                {
                    /******************************************************************************/
                    /** SI LA FECHA DE LA OPERACION SE ENCUENTRA ENTRE LAS FECHAS DE LA CAMPAÑA  **/
                    /******************************************************************************/
                    if (customersRepository.CheckBetweenDates(campaing.CAMP_ID, dt))
                    {
                        /**************************************************************************/
                        /**                SI LA ZONA PERTENECE A LA CAMPAÑA                     **/
                        /**************************************************************************/
                        if (customersRepository.VerifyGroupBelongsCampaign(oGroup.GRP_ID, campaing.CAMP_ID))
                        {
                            /**************************************************************************/
                            /**                 SI LA OPERACION SE DEBE APLICAR                       */
                            /**************************************************************************/
                            String sApply = campaing.CAMP_NUMBER_BONIFYED_PARKING.Replace("{", "").Replace("}", "");
                            String[] strListApply = sApply.Split(',');

                            /**************************************************************************/
                            /**   buscar si hay operacions de este usuario                            */
                            /**************************************************************************/
                            List<CAMPAING_OPERATION> oCampaingOperation = customersRepository.GetUserCampaignOperations(user.USR_ID, campaing.CAMP_ID);

                            if (oCampaingOperation.Count >= campaing.CAMP_PARKING_NUMBER)
                            {

                                if (!customersRepository.DeleteAllCampaignOperationByUserAndCamp(user.USR_ID, campaing.CAMP_ID))
                                {
                                    Logger_AddLogMessage(string.Format("CampaingSchemaFour::DeleteAllCampaignOperationByUserAndCamp::Error: USR_ID={0}, CAMP_ID={1}", user.USR_ID, oCampaing.CAMP_ID), LogLevels.logERROR);
                                }
                            }
                            /**************************************************************************/
                            /**   Resolver si aplica o no                                             */
                            /**************************************************************************/
                            oIndex = oCampaingOperation.Count;
                            oIndex++;
                            if (oIndex <= campaing.CAMP_PARKING_NUMBER)
                            {
                                if (strListApply.Contains(Convert.ToString(oIndex)))
                                {
                                    bApply = true;
                                    dApplyCampaingDiscount = ConvertDiscountCampaignToBonifications(campaing.CAMP_DISCOUNT);
                                }
                                oCampaing = campaing;
                                break;
                            }
                        }
                    }
                }//FIN Forech de las campañas

            }
            return bApply;
        }


        private bool SaveCampaingSchemaFour(USER user, GROUP oGroup, decimal dIdOperation, DateTime dtSavedInstallationTime, decimal amountDiscount, CAMPAING oCampaing, int indexCampaing, ref string xmlOut)
        {
            bool bApply = (amountDiscount > 0);

            /**************************************************************************/
            /**   Guardar en CAMPAING_OPERATIONS                                      */
            /**************************************************************************/
            if (oCampaing != null)
            {
                CAMPAING_OPERATION oNewCampaignOperation = new CAMPAING_OPERATION();
                oNewCampaignOperation.CAMP_OPE_OPE_ID = dIdOperation;
                oNewCampaignOperation.CAMP_OPE_GRP_ID = oGroup.GRP_ID;
                oNewCampaignOperation.CAMP_OPE_USR_ID = user.USR_ID;
                oNewCampaignOperation.CAMP_OPE_NUM_BON_PARK = indexCampaing;
                oNewCampaignOperation.CAMP_OPE_CAMP_ID = oCampaing.CAMP_ID;
                if (bApply)
                {
                    oNewCampaignOperation.CAMP_OPE_APPLY_DISCOUNT = 1;
                }
                if (!customersRepository.AddCampaignOperation(oNewCampaignOperation))
                {
                    /*xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);*/
                    Logger_AddLogMessage(string.Format("CampaingSchemaFour::SaveCampaingSchemaFour::Error: IdOperation={0}, GRP_ID={1}, USR_ID={2}, CAMP_ID={3}", dIdOperation, oGroup.GRP_ID, user.USR_ID, oCampaing.CAMP_ID), LogLevels.logERROR);
                }
                else
                {
                    Logger_AddLogMessage(string.Format("SaveCampaingSchemaFour:: IdOperation={0} - GroupId={1} - UserId={2} - NumberSecuence={3} - CampId={4} - ApplyDiscount={5} - Discount={6}", dIdOperation, oGroup.GRP_ID, user.USR_ID, indexCampaing, oCampaing.CAMP_ID, bApply, oCampaing.CAMP_DISCOUNT), LogLevels.logINFO);
                    if (bApply)
                    {
                        if (!customersRepository.UpdateCampaignTotalDiscountDelivered(oCampaing.CAMP_ID, amountDiscount))
                        {
                            /*xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);*/
                            Logger_AddLogMessage(string.Format("CampaingSchemaFour::UpdateCampaignTotalDiscountDelivered::Error: CAMP_ID={0} , amountDiscount={1}", oCampaing.CAMP_ID, amountDiscount), LogLevels.logERROR);
                        }
                        else
                        {
                            Logger_AddLogMessage(string.Format("SaveCampaingSchemaFour::UpdateCampaignTotalDiscountDelivered::  CAMP_ID={0} , amountDiscount={1}", oCampaing.CAMP_ID, amountDiscount), LogLevels.logINFO);
                        }
                    }

                    if (indexCampaing >= oCampaing.CAMP_PARKING_NUMBER)
                    {

                        if (!customersRepository.DeleteAllCampaignOperationByUserAndCamp(user.USR_ID, oCampaing.CAMP_ID))
                        {
                            Logger_AddLogMessage(string.Format("CampaingSchemaFour::DeleteAllCampaignOperationByUserAndCamp::Error: USR_ID={0}, CAMP_ID={1}", user.USR_ID, oCampaing.CAMP_ID), LogLevels.logERROR);
                        }
                    }


                }

                //if (bApply)
                //{
                //    SendEmailCampaingSchemaFour(oCampaing.CAMP_ID, user, oCampaing.CAMP_DISCOUNT.Value);
                //}
                /**************************************************************************/
                /**   Verificar todos los descuentos aplicados en las operaciones         */
                /**   para comprobar si llega al monto máximo de la campaña y cerrarla    */
                /**************************************************************************/
                if (!customersRepository.VerifyCloseCampaignForAmount(oCampaing.CAMP_ID, dtSavedInstallationTime))
                {
                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                    Logger_AddLogMessage(string.Format("CampaingSchemaFour::VerifyCloseCampaignSchemeFourForAmount::Error: IdOperation={0}, GRP_ID={1}, USR_ID={2}, CAMP_ID={3}", dIdOperation, oGroup.GRP_ID, user.USR_ID, oCampaing.CAMP_ID), LogLevels.logERROR);
                }


            }

            return bApply;
        }



        private ResultType ApplyCampaingSchemaFive(RECHARGE_COUPON oCoupon, decimal dInstallationId, DateTime dt, USER oUser, CAMPAING oCampaing)
        {
            ResultType rtRes = ResultType.Result_OK;

            if (customersRepository.CheckBetweenDates(oCampaing.CAMP_ID, dt))
            {

                DateTime? dtUTC = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(dInstallationId, dt);
                int iPeriodTotalUsedCoupons = 0;
                int iPeriodDifferentUsedCoupons = 0;


                DateTime dtEnd = dtUTC.Value;
                DateTime dtIni = dtUTC.Value.AddDays(-1);
                int iPeriodMaxCouponsCoupons = int.MaxValue;
                int iPeriodRemaningCoupons;
                int iPeriodMinDifferentCoupons = 0;
                int iPeriodMinimumNumberOfNewDifferentCoupons;

                customersRepository.GetPeriodUserUseSchemaFive(oCoupon, oCampaing, oUser, dtIni, dtEnd, out iPeriodTotalUsedCoupons, out iPeriodDifferentUsedCoupons);

                Logger_AddLogMessage(string.Format("ApplyCampaingSchemaFive::DayStatistics  coupon={0} iTotalUsedCoupons{1}, iDifferentUsedCoupons={2}", oCoupon.RCOUP_CODE, iPeriodTotalUsedCoupons, iPeriodDifferentUsedCoupons), LogLevels.logINFO);


                if (oCampaing.CAMP_MAX_NUM_DAILY_COUPONS.HasValue && oCampaing.CAMP_MAX_NUM_DAILY_COUPONS.Value > 0)
                {
                    iPeriodMaxCouponsCoupons = oCampaing.CAMP_MAX_NUM_DAILY_COUPONS.Value;
                }

                iPeriodRemaningCoupons = iPeriodMaxCouponsCoupons - iPeriodTotalUsedCoupons;


                if (iPeriodRemaningCoupons <= 0)
                {
                    rtRes = ResultType.Result_Error_CouponMaximumDailyUseReached;
                    Logger_AddLogMessage(string.Format("ApplyCampaingSchemaFive::MaximumDailyUseReached: coupon={0}, campaing={1}, error={2}", oCoupon, oCampaing.CAMP_DESCRIPTION, rtRes), LogLevels.logERROR);
                    return rtRes;

                }

                if (oCampaing.CAMP_MIN_NUM_DAILY_COUPONS.HasValue && oCampaing.CAMP_MIN_NUM_DAILY_COUPONS.Value > 0)
                {
                    iPeriodMinDifferentCoupons = oCampaing.CAMP_MIN_NUM_DAILY_COUPONS.Value;
                }

                iPeriodMinimumNumberOfNewDifferentCoupons = iPeriodMinDifferentCoupons - iPeriodDifferentUsedCoupons;

                if (iPeriodRemaningCoupons <= iPeriodMinimumNumberOfNewDifferentCoupons)
                {
                    rtRes = ResultType.Result_Error_CouponMinimumDailyDistintQRsNotReached;
                    Logger_AddLogMessage(string.Format("ApplyCampaingSchemaFive::MinimumDailyDistintQRsNotReached: coupon={0}, campaing={1}, error={2}", oCoupon, oCampaing.CAMP_DESCRIPTION, rtRes), LogLevels.logERROR);
                    return rtRes;
                }



                dtEnd = dtUTC.Value;
                dtIni = dtUTC.Value.AddDays(-7);
                iPeriodMaxCouponsCoupons = int.MaxValue;
                iPeriodMinDifferentCoupons = 0;

                customersRepository.GetPeriodUserUseSchemaFive(oCoupon, oCampaing, oUser, dtIni, dtEnd, out iPeriodTotalUsedCoupons, out iPeriodDifferentUsedCoupons);

                Logger_AddLogMessage(string.Format("ApplyCampaingSchemaFive::WeekStatistics  coupon={0} iTotalUsedCoupons{1}, iDifferentUsedCoupons={2}", oCoupon.RCOUP_CODE, iPeriodTotalUsedCoupons, iPeriodDifferentUsedCoupons), LogLevels.logINFO);


                if (oCampaing.CAMP_MAX_NUM_WEEKLY_COUPONS.HasValue && oCampaing.CAMP_MAX_NUM_WEEKLY_COUPONS.Value > 0)
                {
                    iPeriodMaxCouponsCoupons = oCampaing.CAMP_MAX_NUM_WEEKLY_COUPONS.Value;
                }

                iPeriodRemaningCoupons = iPeriodMaxCouponsCoupons - iPeriodTotalUsedCoupons;


                if (iPeriodRemaningCoupons <= 0)
                {
                    rtRes = ResultType.Result_Error_CouponMaximumWeeklyUseReached;
                    Logger_AddLogMessage(string.Format("ApplyCampaingSchemaFive::MaximumWeekUseReached: coupon={0}, campaing={1}, error={2}", oCoupon, oCampaing.CAMP_DESCRIPTION, rtRes), LogLevels.logERROR);
                    return rtRes;

                }

                if (oCampaing.CAMP_MIN_NUM_WEEKLY_COUPONS.HasValue && oCampaing.CAMP_MIN_NUM_WEEKLY_COUPONS.Value > 0)
                {
                    iPeriodMinDifferentCoupons = oCampaing.CAMP_MIN_NUM_WEEKLY_COUPONS.Value;
                }

                iPeriodMinimumNumberOfNewDifferentCoupons = iPeriodMinDifferentCoupons - iPeriodDifferentUsedCoupons;

                if (iPeriodRemaningCoupons <= iPeriodMinimumNumberOfNewDifferentCoupons)
                {
                    rtRes = ResultType.Result_Error_CouponMinimumWeeklyDistintQRsNotReached;
                    Logger_AddLogMessage(string.Format("ApplyCampaingSchemaFive::MinimumWeekDistintQRsNotReached: coupon={0}, campaing={1}, error={2}", oCoupon, oCampaing.CAMP_DESCRIPTION, rtRes), LogLevels.logERROR);
                    return rtRes;
                }

                dtEnd = dtUTC.Value;
                dtIni = dtUTC.Value.AddMonths(-1);
                iPeriodMaxCouponsCoupons = int.MaxValue;
                iPeriodMinDifferentCoupons = 0;

                customersRepository.GetPeriodUserUseSchemaFive(oCoupon, oCampaing, oUser, dtIni, dtEnd, out iPeriodTotalUsedCoupons, out iPeriodDifferentUsedCoupons);

                Logger_AddLogMessage(string.Format("ApplyCampaingSchemaFive::MonthStatistics  coupon={0} iTotalUsedCoupons{1}, iDifferentUsedCoupons={2}", oCoupon.RCOUP_CODE, iPeriodTotalUsedCoupons, iPeriodDifferentUsedCoupons), LogLevels.logINFO);


                if (oCampaing.CAMP_MAX_NUM_MONTHLY_COUPONS.HasValue && oCampaing.CAMP_MAX_NUM_MONTHLY_COUPONS.Value > 0)
                {
                    iPeriodMaxCouponsCoupons = oCampaing.CAMP_MAX_NUM_MONTHLY_COUPONS.Value;
                }

                iPeriodRemaningCoupons = iPeriodMaxCouponsCoupons - iPeriodTotalUsedCoupons;


                if (iPeriodRemaningCoupons <= 0)
                {
                    rtRes = ResultType.Result_Error_CouponMaximumMonthlyUseReached;
                    Logger_AddLogMessage(string.Format("ApplyCampaingSchemaFive::MaximumMonthUseReached: coupon={0}, campaing={1}, error={2}", oCoupon, oCampaing.CAMP_DESCRIPTION, rtRes), LogLevels.logERROR);
                    return rtRes;

                }

                if (oCampaing.CAMP_MIN_NUM_MONTHLY_COUPONS.HasValue && oCampaing.CAMP_MIN_NUM_MONTHLY_COUPONS.Value > 0)
                {
                    iPeriodMinDifferentCoupons = oCampaing.CAMP_MIN_NUM_MONTHLY_COUPONS.Value;
                }

                iPeriodMinimumNumberOfNewDifferentCoupons = iPeriodMinDifferentCoupons - iPeriodDifferentUsedCoupons;

                if (iPeriodRemaningCoupons <= iPeriodMinimumNumberOfNewDifferentCoupons)
                {
                    rtRes = ResultType.Result_Error_CouponMinimumMonthlyDistintQRsNotReached;
                    Logger_AddLogMessage(string.Format("ApplyCampaingSchemaFive::MinimumWeekMonthQRsNotReached: coupon={0}, campaing={1}, error={2}", oCoupon, oCampaing.CAMP_DESCRIPTION, rtRes), LogLevels.logERROR);
                }

            }
            else
            {
                //Campaign is closed
                rtRes = ResultType.Result_Error_CloseCampaign;
                Logger_AddLogMessage(string.Format("QueryRecharge::VerifyCampaign::oMobileSessions>0::Error: coupon={0}, , campaing={1}, error={2}", oCoupon.RCOUP_CODE, oCampaing.CAMP_DESCRIPTION, rtRes), LogLevels.logERROR);
            }

            return rtRes;
        }



        private bool SaveCampaingSchemaFive(CAMPAING campaign, USER user, MOBILE_SESSION session, CUSTOMER_PAYMENT_MEANS_RECHARGE oCustomerPaymentMeansRecharge, RECHARGE_COUPON oRechargeCoupon, DateTime dt, DateTime dtUTC)
        {
            bool bRes = true;


            string strIMEI = !string.IsNullOrEmpty(session.MOSE_CELL_IMEI) ? session.MOSE_CELL_IMEI : session.MOSE_CELL_SERIALNUMBER;

            if (string.IsNullOrEmpty(strIMEI))
                strIMEI = "";

            if (strIMEI == "unknown")
                strIMEI = "";

            if (customersRepository.AddCampaingUserUse(oCustomerPaymentMeansRecharge.CUSPMR_ID, dt, dtUTC, user.USR_ID, campaign, strIMEI, oCustomerPaymentMeansRecharge.CUSPMR_AMOUNT))
            {
                //Se actualiza el precio del cupon en la tabla de 
                if (!customersRepository.UpdateCampaignTotalDiscountDelivered(campaign.CAMP_ID, oCustomerPaymentMeansRecharge.CUSPMR_AMOUNT))
                {
                    bRes = false;
                    Logger_AddLogMessage(string.Format("SaveCampaingSchemaThree::UpdateCampaignTotalDiscountDelivered::Error: coupon={0}, campaign={1}", oRechargeCoupon.RCOUP_CODE, campaign.CAMP_DESCRIPTION), LogLevels.logERROR);
                }
            }
            else
            {
                bRes = false;
                Logger_AddLogMessage(string.Format("SaveCampaingSchemaThree::AddCampaingUserUse::Error: coupon={0}, campaign={1}", oRechargeCoupon.RCOUP_CODE, campaign.CAMP_DESCRIPTION), LogLevels.logERROR);
            }


            return bRes;
        }



        private bool ApplyCampaingSchemaSix(DateTime dt, USER user, GROUP oGroup, MOBILE_SESSION session, decimal dSourceApp, ref decimal? dApplyCampaingDiscount, ref CAMPAING oCampaing)
        {
            bool bApply = false;
            /**************************************************************************/
            /**               SI HAY CAMPAÑA ESQUEMA 6 SI ESTA ACTIVA                **/
            /**************************************************************************/
            //Verificar si existe una campaña esquema 6 y si esta activa
            IEnumerable<CAMPAING> oCAMPAINGs = null;
            if (customersRepository.VerifyCampaign((int)CampaingShema.DiscountCampaignByZoneForFirstParking, dSourceApp, ref oCAMPAINGs))
            {
                foreach (CAMPAING campaing in oCAMPAINGs)
                {
                    /******************************************************************************/
                    /** SI LA FECHA DE LA OPERACION SE ENCUENTRA ENTRE LAS FECHAS DE LA CAMPAÑA  **/
                    /******************************************************************************/
                    if (customersRepository.CheckBetweenDates(campaing.CAMP_ID, dt))
                    {
                        /**************************************************************************/
                        /**                SI LA ZONA PERTENECE A LA CAMPAÑA                     **/
                        /**************************************************************************/
                        if (customersRepository.VerifyGroupBelongsCampaign(oGroup.GRP_ID, campaing.CAMP_ID))
                        {
                            //Verificar que el usuario no tiene ninguna operación
                            if (!customersRepository.HasUserMakeAnyOperation(user))
                            {
                                //Si el IMEI lo tiene mas usuarios. En caso de no tener IMEI se usa el Serial Number
                                int oMobilesSessions = 0;

                                string strIMEI = !string.IsNullOrEmpty(session.MOSE_CELL_IMEI) ? session.MOSE_CELL_IMEI : string.Empty;
                                string strSerialNumber = !string.IsNullOrEmpty(session.MOSE_CELL_SERIALNUMBER) ? session.MOSE_CELL_SERIALNUMBER : string.Empty;

                                if (strSerialNumber == "unknown")
                                    strSerialNumber = "";


                                if ((!string.IsNullOrEmpty(strIMEI)) || (!string.IsNullOrEmpty(strSerialNumber)))
                                {

                                    customersRepository.GetAllTheUsersOfAnIMEI(campaing.CAMP_ID, strIMEI,
                                                                               strSerialNumber,
                                                                               ref oMobilesSessions);
                                }

                                if (oMobilesSessions == 0)
                                {
                                    bApply = true;
                                    dApplyCampaingDiscount = ConvertDiscountCampaignToBonifications(campaing.CAMP_DISCOUNT);
                                    oCampaing = campaing;
                                    break;
                                }

                            }

                        }
                    }
                }//FIN Forech de las campañas

            }
            return bApply;
        }

        private bool SaveCampaingSchemaSix(USER user, GROUP oGroup, MOBILE_SESSION oSession, decimal dIdOperation, DateTime dtSavedInstallationTime, DateTime dtSavedUTCTime, decimal amountDiscount, CAMPAING oCampaing, ref string xmlOut)
        {
            bool bRes = true;

            if (oCampaing != null)
            {

                string strIMEI = !string.IsNullOrEmpty(oSession.MOSE_CELL_IMEI) ? oSession.MOSE_CELL_IMEI : oSession.MOSE_CELL_SERIALNUMBER;

                if (string.IsNullOrEmpty(strIMEI))
                    strIMEI = "";

                if (strIMEI == "unknown")
                    strIMEI = "";

                if (!customersRepository.AddCampaingUserUse(oCampaing, dIdOperation, strIMEI, dtSavedInstallationTime, dtSavedUTCTime))
                {
                    /*xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);*/
                    Logger_AddLogMessage(string.Format("SaveCampaingSchemaSix::Error: IdOperation={0}, GRP_ID={1}, USR_ID={2}, CAMP_ID={3}", dIdOperation, oGroup.GRP_ID, user.USR_ID, oCampaing.CAMP_ID), LogLevels.logERROR);
                }
                else
                {
                    Logger_AddLogMessage(string.Format("SaveCampaingSchemaSix:: IdOperation={0} - GroupId={1} - UserId={2} - CampId={3} - Discount={4}", dIdOperation, oGroup.GRP_ID, user.USR_ID, oCampaing.CAMP_ID, oCampaing.CAMP_DISCOUNT), LogLevels.logINFO);

                    if (!customersRepository.UpdateCampaignTotalDiscountDelivered(oCampaing.CAMP_ID, amountDiscount))
                    {
                        /*xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);*/
                        Logger_AddLogMessage(string.Format("SaveCampaingSchemaSix::UpdateCampaignTotalDiscountDelivered::Error: CAMP_ID={0} , amountDiscount={1}", oCampaing.CAMP_ID, amountDiscount), LogLevels.logERROR);
                    }
                    else
                    {
                        Logger_AddLogMessage(string.Format("SaveCampaingSchemaSix::UpdateCampaignTotalDiscountDelivered::  CAMP_ID={0} , amountDiscount={1}", oCampaing.CAMP_ID, amountDiscount), LogLevels.logINFO);
                    }

                }
                /**************************************************************************/
                /**   Verificar todos los descuentos aplicados en las operaciones         */
                /**   para comprobar si llega al monto máximo de la campaña y cerrarla    */
                /**************************************************************************/
                if (!customersRepository.VerifyCloseCampaignForAmount(oCampaing.CAMP_ID, dtSavedInstallationTime))
                {
                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                    Logger_AddLogMessage(string.Format("SaveCampaingSchemaSix::VerifyCloseCampaignSchemeFourForAmount::Error: IdOperation={0}, GRP_ID={1}, USR_ID={2}, CAMP_ID={3}", dIdOperation, oGroup.GRP_ID, user.USR_ID, oCampaing.CAMP_ID), LogLevels.logERROR);
                }


            }
            return bRes;

        }


        private bool ApplyCampaingSchemaEight(DateTime dt, USER user, GROUP oGroup, string strPlate, MOBILE_SESSION session, decimal dSourceApp, 
                                              ref int? iFreeMinutes, ref int? iMinimumTimeToApply, ref CAMPAING oCampaing)
        {
            bool bApply = false;
            /**************************************************************************/
            /**               SI HAY CAMPAÑA ESQUEMA 8 SI ESTA ACTIVA                **/
            /**************************************************************************/
            //Verificar si existe una campaña esquema 8 y si esta activa
            IEnumerable<CAMPAING> oCAMPAINGs = null;
            if (customersRepository.VerifyCampaign((int)CampaingShema.DiscountCampaignByZoneForDailyFirstParkingWithTimeMoreThanX, dSourceApp, ref oCAMPAINGs))
            {
                foreach (CAMPAING campaing in oCAMPAINGs)
                {
                    /******************************************************************************/
                    /** SI LA FECHA DE LA OPERACION SE ENCUENTRA ENTRE LAS FECHAS DE LA CAMPAÑA  **/
                    /******************************************************************************/
                    if (customersRepository.CheckBetweenDates(campaing.CAMP_ID, dt))
                    {
                        /**************************************************************************/
                        /**                SI LA ZONA PERTENECE A LA CAMPAÑA                     **/
                        /**************************************************************************/
                        if (customersRepository.VerifyGroupBelongsCampaign(oGroup.GRP_ID, campaing.CAMP_ID))
                        {

                            //Verificar que el usuario no ha alcanzado el maximo número de usos diarios
                            if (customersRepository.NumberTodayCampaingOperation(user.USR_ID, strPlate, campaing.CAMP_ID, dt)< campaing.CAMP_USER_MAX_USES)
                            {
                                //Si el IMEI lo tiene mas usuarios. En caso de no tener IMEI se usa el Serial Number
                                /*int oMobilesSessions = 0;

                                string strIMEI = !string.IsNullOrEmpty(session.MOSE_CELL_IMEI) ? session.MOSE_CELL_IMEI : string.Empty;
                                string strSerialNumber = !string.IsNullOrEmpty(session.MOSE_CELL_SERIALNUMBER) ? session.MOSE_CELL_SERIALNUMBER : string.Empty;

                                if (strSerialNumber == "unknown")
                                    strSerialNumber = "";


                                if ((!string.IsNullOrEmpty(strIMEI)) || (!string.IsNullOrEmpty(strSerialNumber)))
                                {

                                    customersRepository.GetAllTheUsersOfAnIMEI(campaing.CAMP_ID, strIMEI,
                                                                               strSerialNumber,
                                                                               ref oMobilesSessions);
                                }

                                if (oMobilesSessions == 0)
                                {*/
                                    bApply = true;
                                    iFreeMinutes = campaing.CAMP_FREE_MINUTES;
                                    iMinimumTimeToApply = campaing.CAMP_MIN_PARKING_MINUTES;
                                    oCampaing = campaing;
                                    break;
                                //}

                            }
                        }
                    }
                }//FIN Forech de las campañas

            }
            return bApply;
        }



        private bool SaveCampaingSchemaEight(USER user, GROUP oGroup, MOBILE_SESSION oSession, decimal dIdOperation, DateTime dtSavedInstallationTime, DateTime dtSavedUTCTime, int iTime, int? iCampaignAmountToSubstract, CAMPAING oCampaing, ref string xmlOut)
        {
            bool bRes = false;

            if (oCampaing != null)
            {

                if (iTime >= oCampaing.CAMP_MIN_PARKING_MINUTES)
                {
                    bRes = true;
                    string strIMEI = !string.IsNullOrEmpty(oSession.MOSE_CELL_IMEI) ? oSession.MOSE_CELL_IMEI : oSession.MOSE_CELL_SERIALNUMBER;

                    if (string.IsNullOrEmpty(strIMEI))
                        strIMEI = "";

                    if (strIMEI == "unknown")
                        strIMEI = "";

                    if (!customersRepository.AddCampaingUserUse(oCampaing, dIdOperation, strIMEI, dtSavedInstallationTime, dtSavedUTCTime))
                    {
                        /*xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);*/
                        Logger_AddLogMessage(string.Format("SaveCampaingSchemaEight::Error: IdOperation={0}, GRP_ID={1}, USR_ID={2}, CAMP_ID={3}", dIdOperation, oGroup.GRP_ID, user.USR_ID, oCampaing.CAMP_ID), LogLevels.logERROR);
                    }
                    else
                    {
                        Logger_AddLogMessage(string.Format("SaveCampaingSchemaEight:: IdOperation={0} - GroupId={1} - UserId={2} - CampId={3} - Discount={4}", dIdOperation, oGroup.GRP_ID, user.USR_ID, oCampaing.CAMP_ID, oCampaing.CAMP_DISCOUNT), LogLevels.logINFO);

                        if (!customersRepository.UpdateCampaignTotalDiscountDelivered(oCampaing.CAMP_ID, iCampaignAmountToSubstract.Value))
                        {
                            /*xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);*/
                            Logger_AddLogMessage(string.Format("SaveCampaingSchemaEight::UpdateCampaignTotalDiscountDelivered::Error: CAMP_ID={0} , amountDiscount={1}", oCampaing.CAMP_ID, oCampaing.CAMP_USER_DELIVER_AMOUNT), LogLevels.logERROR);
                        }
                        else
                        {
                            Logger_AddLogMessage(string.Format("SaveCampaingSchemaEight::UpdateCampaignTotalDiscountDelivered::  CAMP_ID={0} , amountDiscount={1}", oCampaing.CAMP_ID, oCampaing.CAMP_USER_DELIVER_AMOUNT), LogLevels.logINFO);
                        }

                    }
                    /**************************************************************************/
                    /**   Verificar todos los descuentos aplicados en las operaciones         */
                    /**   para comprobar si llega al monto máximo de la campaña y cerrarla    */
                    /**************************************************************************/
                    if (!customersRepository.VerifyCloseCampaignForAmount(oCampaing.CAMP_ID, dtSavedInstallationTime))
                    {
                        bRes = false;
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                        Logger_AddLogMessage(string.Format("SaveCampaingSchemaSix::VerifyCloseCampaignSchemeFourForAmount::Error: IdOperation={0}, GRP_ID={1}, USR_ID={2}, CAMP_ID={3}", dIdOperation, oGroup.GRP_ID, user.USR_ID, oCampaing.CAMP_ID), LogLevels.logERROR);
                    }
                }


            }
            return bRes;

        }

        #endregion
        #endregion

        #region Random

        private static readonly Random getrandom = new Random();
        private static readonly object syncLock = new object();
        private static int GetRandomNumber(int min, int max)
        {
            lock (syncLock)
            { // synchronize
                return getrandom.Next(min, max);
            }
        }

        private string GenerateNewGuid()
        {
            return GenerateId() + GenerateId() + GenerateId();
        }

        private string GenerateId()
        {
            long i = 1;
            foreach (byte b in Guid.NewGuid().ToByteArray())
            {
                i *= ((int)b + 1);
            }

            return string.Format("{0:x}", i - getrandom.Next(1, Convert.ToInt32(DateTime.UtcNow.Ticks % Int32.MaxValue)));
        }
        #endregion
    }
}
