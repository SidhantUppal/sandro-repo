#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CurrencyChanger.WS.Domain.Concrete
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="iCurrencyChange")]
	public partial class iCurrencyChangeDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCURRENCy(CurrencyChanger.WS.Domain.CURRENCy instance);
    partial void UpdateCURRENCy(CurrencyChanger.WS.Domain.CURRENCy instance);
    partial void DeleteCURRENCy(CurrencyChanger.WS.Domain.CURRENCy instance);
    partial void InsertPARAMETER(CurrencyChanger.WS.Domain.PARAMETER instance);
    partial void UpdatePARAMETER(CurrencyChanger.WS.Domain.PARAMETER instance);
    partial void DeletePARAMETER(CurrencyChanger.WS.Domain.PARAMETER instance);
    partial void InsertCURRENCY_CHANGE(CurrencyChanger.WS.Domain.CURRENCY_CHANGE instance);
    partial void UpdateCURRENCY_CHANGE(CurrencyChanger.WS.Domain.CURRENCY_CHANGE instance);
    partial void DeleteCURRENCY_CHANGE(CurrencyChanger.WS.Domain.CURRENCY_CHANGE instance);
    partial void InsertCURRENCY_CHANGES_HI(CurrencyChanger.WS.Domain.CURRENCY_CHANGES_HI instance);
    partial void UpdateCURRENCY_CHANGES_HI(CurrencyChanger.WS.Domain.CURRENCY_CHANGES_HI instance);
    partial void DeleteCURRENCY_CHANGES_HI(CurrencyChanger.WS.Domain.CURRENCY_CHANGES_HI instance);
    #endregion
		
		public iCurrencyChangeDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["iCurrencyChangeConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public iCurrencyChangeDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public iCurrencyChangeDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public iCurrencyChangeDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public iCurrencyChangeDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CurrencyChanger.WS.Domain.CURRENCy> CURRENCies
		{
			get
			{
				return this.GetTable<CurrencyChanger.WS.Domain.CURRENCy>();
			}
		}
		
		public System.Data.Linq.Table<CurrencyChanger.WS.Domain.PARAMETER> PARAMETERs
		{
			get
			{
				return this.GetTable<CurrencyChanger.WS.Domain.PARAMETER>();
			}
		}
		
		public System.Data.Linq.Table<CurrencyChanger.WS.Domain.CURRENCY_CHANGE> CURRENCY_CHANGEs
		{
			get
			{
				return this.GetTable<CurrencyChanger.WS.Domain.CURRENCY_CHANGE>();
			}
		}
		
		public System.Data.Linq.Table<CurrencyChanger.WS.Domain.CURRENCY_CHANGES_HI> CURRENCY_CHANGES_HIs
		{
			get
			{
				return this.GetTable<CurrencyChanger.WS.Domain.CURRENCY_CHANGES_HI>();
			}
		}
	}
}
namespace CurrencyChanger.WS.Domain
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CURRENCIES")]
	public partial class CURRENCy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _CUR_ID;
		
		private string _CUR_NAME;
		
		private string _CUR_ISO_CODE;
		
		private string _CUR_ISO_CODE_NUM;
		
		private int _CUR_MINOR_UNIT;
		
		private string _CUR_SYMBOL;
		
		private System.Nullable<double> _CUR_FACT;
		
		private EntitySet<CURRENCY_CHANGE> _CURRENCY_CHANGEs;
		
		private EntitySet<CURRENCY_CHANGE> _CURRENCY_CHANGEs1;
		
		private EntitySet<CURRENCY_CHANGES_HI> _CURRENCY_CHANGES_HIs;
		
		private EntitySet<CURRENCY_CHANGES_HI> _CURRENCY_CHANGES_HIs1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCUR_IDChanging(decimal value);
    partial void OnCUR_IDChanged();
    partial void OnCUR_NAMEChanging(string value);
    partial void OnCUR_NAMEChanged();
    partial void OnCUR_ISO_CODEChanging(string value);
    partial void OnCUR_ISO_CODEChanged();
    partial void OnCUR_ISO_CODE_NUMChanging(string value);
    partial void OnCUR_ISO_CODE_NUMChanged();
    partial void OnCUR_MINOR_UNITChanging(int value);
    partial void OnCUR_MINOR_UNITChanged();
    partial void OnCUR_SYMBOLChanging(string value);
    partial void OnCUR_SYMBOLChanged();
    partial void OnCUR_FACTChanging(System.Nullable<double> value);
    partial void OnCUR_FACTChanged();
    #endregion
		
		public CURRENCy()
		{
			this._CURRENCY_CHANGEs = new EntitySet<CURRENCY_CHANGE>(new Action<CURRENCY_CHANGE>(this.attach_CURRENCY_CHANGEs), new Action<CURRENCY_CHANGE>(this.detach_CURRENCY_CHANGEs));
			this._CURRENCY_CHANGEs1 = new EntitySet<CURRENCY_CHANGE>(new Action<CURRENCY_CHANGE>(this.attach_CURRENCY_CHANGEs1), new Action<CURRENCY_CHANGE>(this.detach_CURRENCY_CHANGEs1));
			this._CURRENCY_CHANGES_HIs = new EntitySet<CURRENCY_CHANGES_HI>(new Action<CURRENCY_CHANGES_HI>(this.attach_CURRENCY_CHANGES_HIs), new Action<CURRENCY_CHANGES_HI>(this.detach_CURRENCY_CHANGES_HIs));
			this._CURRENCY_CHANGES_HIs1 = new EntitySet<CURRENCY_CHANGES_HI>(new Action<CURRENCY_CHANGES_HI>(this.attach_CURRENCY_CHANGES_HIs1), new Action<CURRENCY_CHANGES_HI>(this.detach_CURRENCY_CHANGES_HIs1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUR_ID", DbType="Decimal(18,0) NOT NULL", IsPrimaryKey=true)]
		public decimal CUR_ID
		{
			get
			{
				return this._CUR_ID;
			}
			set
			{
				if ((this._CUR_ID != value))
				{
					this.OnCUR_IDChanging(value);
					this.SendPropertyChanging();
					this._CUR_ID = value;
					this.SendPropertyChanged("CUR_ID");
					this.OnCUR_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUR_NAME", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CUR_NAME
		{
			get
			{
				return this._CUR_NAME;
			}
			set
			{
				if ((this._CUR_NAME != value))
				{
					this.OnCUR_NAMEChanging(value);
					this.SendPropertyChanging();
					this._CUR_NAME = value;
					this.SendPropertyChanged("CUR_NAME");
					this.OnCUR_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUR_ISO_CODE", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string CUR_ISO_CODE
		{
			get
			{
				return this._CUR_ISO_CODE;
			}
			set
			{
				if ((this._CUR_ISO_CODE != value))
				{
					this.OnCUR_ISO_CODEChanging(value);
					this.SendPropertyChanging();
					this._CUR_ISO_CODE = value;
					this.SendPropertyChanged("CUR_ISO_CODE");
					this.OnCUR_ISO_CODEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUR_ISO_CODE_NUM", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string CUR_ISO_CODE_NUM
		{
			get
			{
				return this._CUR_ISO_CODE_NUM;
			}
			set
			{
				if ((this._CUR_ISO_CODE_NUM != value))
				{
					this.OnCUR_ISO_CODE_NUMChanging(value);
					this.SendPropertyChanging();
					this._CUR_ISO_CODE_NUM = value;
					this.SendPropertyChanged("CUR_ISO_CODE_NUM");
					this.OnCUR_ISO_CODE_NUMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUR_MINOR_UNIT", DbType="Int NOT NULL")]
		public int CUR_MINOR_UNIT
		{
			get
			{
				return this._CUR_MINOR_UNIT;
			}
			set
			{
				if ((this._CUR_MINOR_UNIT != value))
				{
					this.OnCUR_MINOR_UNITChanging(value);
					this.SendPropertyChanging();
					this._CUR_MINOR_UNIT = value;
					this.SendPropertyChanged("CUR_MINOR_UNIT");
					this.OnCUR_MINOR_UNITChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUR_SYMBOL", DbType="NChar(10)")]
		public string CUR_SYMBOL
		{
			get
			{
				return this._CUR_SYMBOL;
			}
			set
			{
				if ((this._CUR_SYMBOL != value))
				{
					this.OnCUR_SYMBOLChanging(value);
					this.SendPropertyChanging();
					this._CUR_SYMBOL = value;
					this.SendPropertyChanged("CUR_SYMBOL");
					this.OnCUR_SYMBOLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUR_FACT", DbType="Float")]
		public System.Nullable<double> CUR_FACT
		{
			get
			{
				return this._CUR_FACT;
			}
			set
			{
				if ((this._CUR_FACT != value))
				{
					this.OnCUR_FACTChanging(value);
					this.SendPropertyChanging();
					this._CUR_FACT = value;
					this.SendPropertyChanged("CUR_FACT");
					this.OnCUR_FACTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CURRENCy_CURRENCY_CHANGE", Storage="_CURRENCY_CHANGEs", ThisKey="CUR_ID", OtherKey="CUCH_DST_CUR_ID")]
		public EntitySet<CURRENCY_CHANGE> CURRENCY_CHANGEs
		{
			get
			{
				return this._CURRENCY_CHANGEs;
			}
			set
			{
				this._CURRENCY_CHANGEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CURRENCy_CURRENCY_CHANGE1", Storage="_CURRENCY_CHANGEs1", ThisKey="CUR_ID", OtherKey="CUCH_SRC_CUR_ID")]
		public EntitySet<CURRENCY_CHANGE> CURRENCY_CHANGEs1
		{
			get
			{
				return this._CURRENCY_CHANGEs1;
			}
			set
			{
				this._CURRENCY_CHANGEs1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CURRENCy_CURRENCY_CHANGES_HI", Storage="_CURRENCY_CHANGES_HIs", ThisKey="CUR_ID", OtherKey="CUCHH_DST_CUR_ID")]
		public EntitySet<CURRENCY_CHANGES_HI> CURRENCY_CHANGES_HIs
		{
			get
			{
				return this._CURRENCY_CHANGES_HIs;
			}
			set
			{
				this._CURRENCY_CHANGES_HIs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CURRENCy_CURRENCY_CHANGES_HI1", Storage="_CURRENCY_CHANGES_HIs1", ThisKey="CUR_ID", OtherKey="CUCHH_SRC_CUR_ID")]
		public EntitySet<CURRENCY_CHANGES_HI> CURRENCY_CHANGES_HIs1
		{
			get
			{
				return this._CURRENCY_CHANGES_HIs1;
			}
			set
			{
				this._CURRENCY_CHANGES_HIs1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CURRENCY_CHANGEs(CURRENCY_CHANGE entity)
		{
			this.SendPropertyChanging();
			entity.CURRENCy = this;
		}
		
		private void detach_CURRENCY_CHANGEs(CURRENCY_CHANGE entity)
		{
			this.SendPropertyChanging();
			entity.CURRENCy = null;
		}
		
		private void attach_CURRENCY_CHANGEs1(CURRENCY_CHANGE entity)
		{
			this.SendPropertyChanging();
			entity.CURRENCy1 = this;
		}
		
		private void detach_CURRENCY_CHANGEs1(CURRENCY_CHANGE entity)
		{
			this.SendPropertyChanging();
			entity.CURRENCy1 = null;
		}
		
		private void attach_CURRENCY_CHANGES_HIs(CURRENCY_CHANGES_HI entity)
		{
			this.SendPropertyChanging();
			entity.CURRENCy = this;
		}
		
		private void detach_CURRENCY_CHANGES_HIs(CURRENCY_CHANGES_HI entity)
		{
			this.SendPropertyChanging();
			entity.CURRENCy = null;
		}
		
		private void attach_CURRENCY_CHANGES_HIs1(CURRENCY_CHANGES_HI entity)
		{
			this.SendPropertyChanging();
			entity.CURRENCy1 = this;
		}
		
		private void detach_CURRENCY_CHANGES_HIs1(CURRENCY_CHANGES_HI entity)
		{
			this.SendPropertyChanging();
			entity.CURRENCy1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PARAMETERS")]
	public partial class PARAMETER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _PAR_ID;
		
		private string _PAR_NAME;
		
		private string _PAR_VALUE;
		
		private string _PAR_DESCRIPTION;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPAR_IDChanging(decimal value);
    partial void OnPAR_IDChanged();
    partial void OnPAR_NAMEChanging(string value);
    partial void OnPAR_NAMEChanged();
    partial void OnPAR_VALUEChanging(string value);
    partial void OnPAR_VALUEChanged();
    partial void OnPAR_DESCRIPTIONChanging(string value);
    partial void OnPAR_DESCRIPTIONChanged();
    #endregion
		
		public PARAMETER()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PAR_ID", DbType="Decimal(18,0) NOT NULL", IsPrimaryKey=true)]
		public decimal PAR_ID
		{
			get
			{
				return this._PAR_ID;
			}
			set
			{
				if ((this._PAR_ID != value))
				{
					this.OnPAR_IDChanging(value);
					this.SendPropertyChanging();
					this._PAR_ID = value;
					this.SendPropertyChanged("PAR_ID");
					this.OnPAR_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PAR_NAME", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string PAR_NAME
		{
			get
			{
				return this._PAR_NAME;
			}
			set
			{
				if ((this._PAR_NAME != value))
				{
					this.OnPAR_NAMEChanging(value);
					this.SendPropertyChanging();
					this._PAR_NAME = value;
					this.SendPropertyChanged("PAR_NAME");
					this.OnPAR_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PAR_VALUE", DbType="VarChar(1024)")]
		public string PAR_VALUE
		{
			get
			{
				return this._PAR_VALUE;
			}
			set
			{
				if ((this._PAR_VALUE != value))
				{
					this.OnPAR_VALUEChanging(value);
					this.SendPropertyChanging();
					this._PAR_VALUE = value;
					this.SendPropertyChanged("PAR_VALUE");
					this.OnPAR_VALUEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PAR_DESCRIPTION", DbType="VarChar(1024)")]
		public string PAR_DESCRIPTION
		{
			get
			{
				return this._PAR_DESCRIPTION;
			}
			set
			{
				if ((this._PAR_DESCRIPTION != value))
				{
					this.OnPAR_DESCRIPTIONChanging(value);
					this.SendPropertyChanging();
					this._PAR_DESCRIPTION = value;
					this.SendPropertyChanged("PAR_DESCRIPTION");
					this.OnPAR_DESCRIPTIONChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CURRENCY_CHANGES")]
	public partial class CURRENCY_CHANGE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _CUCH_ID;
		
		private decimal _CUCH_SRC_CUR_ID;
		
		private decimal _CUCH_DST_CUR_ID;
		
		private decimal _CUCH_CHANGE;
		
		private System.DateTime _CUCH_CHANGE_UTC_DATE;
		
		private EntityRef<CURRENCy> _CURRENCy;
		
		private EntityRef<CURRENCy> _CURRENCy1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCUCH_IDChanging(decimal value);
    partial void OnCUCH_IDChanged();
    partial void OnCUCH_SRC_CUR_IDChanging(decimal value);
    partial void OnCUCH_SRC_CUR_IDChanged();
    partial void OnCUCH_DST_CUR_IDChanging(decimal value);
    partial void OnCUCH_DST_CUR_IDChanged();
    partial void OnCUCH_CHANGEChanging(decimal value);
    partial void OnCUCH_CHANGEChanged();
    partial void OnCUCH_CHANGE_UTC_DATEChanging(System.DateTime value);
    partial void OnCUCH_CHANGE_UTC_DATEChanged();
    #endregion
		
		public CURRENCY_CHANGE()
		{
			this._CURRENCy = default(EntityRef<CURRENCy>);
			this._CURRENCy1 = default(EntityRef<CURRENCy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUCH_ID", AutoSync=AutoSync.OnInsert, DbType="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal CUCH_ID
		{
			get
			{
				return this._CUCH_ID;
			}
			set
			{
				if ((this._CUCH_ID != value))
				{
					this.OnCUCH_IDChanging(value);
					this.SendPropertyChanging();
					this._CUCH_ID = value;
					this.SendPropertyChanged("CUCH_ID");
					this.OnCUCH_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUCH_SRC_CUR_ID", DbType="Decimal(18,0) NOT NULL")]
		public decimal CUCH_SRC_CUR_ID
		{
			get
			{
				return this._CUCH_SRC_CUR_ID;
			}
			set
			{
				if ((this._CUCH_SRC_CUR_ID != value))
				{
					if (this._CURRENCy1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCUCH_SRC_CUR_IDChanging(value);
					this.SendPropertyChanging();
					this._CUCH_SRC_CUR_ID = value;
					this.SendPropertyChanged("CUCH_SRC_CUR_ID");
					this.OnCUCH_SRC_CUR_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUCH_DST_CUR_ID", DbType="Decimal(18,0) NOT NULL")]
		public decimal CUCH_DST_CUR_ID
		{
			get
			{
				return this._CUCH_DST_CUR_ID;
			}
			set
			{
				if ((this._CUCH_DST_CUR_ID != value))
				{
					if (this._CURRENCy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCUCH_DST_CUR_IDChanging(value);
					this.SendPropertyChanging();
					this._CUCH_DST_CUR_ID = value;
					this.SendPropertyChanged("CUCH_DST_CUR_ID");
					this.OnCUCH_DST_CUR_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUCH_CHANGE", DbType="Decimal(18,6) NOT NULL")]
		public decimal CUCH_CHANGE
		{
			get
			{
				return this._CUCH_CHANGE;
			}
			set
			{
				if ((this._CUCH_CHANGE != value))
				{
					this.OnCUCH_CHANGEChanging(value);
					this.SendPropertyChanging();
					this._CUCH_CHANGE = value;
					this.SendPropertyChanged("CUCH_CHANGE");
					this.OnCUCH_CHANGEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUCH_CHANGE_UTC_DATE", DbType="DateTime NOT NULL")]
		public System.DateTime CUCH_CHANGE_UTC_DATE
		{
			get
			{
				return this._CUCH_CHANGE_UTC_DATE;
			}
			set
			{
				if ((this._CUCH_CHANGE_UTC_DATE != value))
				{
					this.OnCUCH_CHANGE_UTC_DATEChanging(value);
					this.SendPropertyChanging();
					this._CUCH_CHANGE_UTC_DATE = value;
					this.SendPropertyChanged("CUCH_CHANGE_UTC_DATE");
					this.OnCUCH_CHANGE_UTC_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CURRENCy_CURRENCY_CHANGE", Storage="_CURRENCy", ThisKey="CUCH_DST_CUR_ID", OtherKey="CUR_ID", IsForeignKey=true)]
		public CURRENCy CURRENCy
		{
			get
			{
				return this._CURRENCy.Entity;
			}
			set
			{
				CURRENCy previousValue = this._CURRENCy.Entity;
				if (((previousValue != value) 
							|| (this._CURRENCy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CURRENCy.Entity = null;
						previousValue.CURRENCY_CHANGEs.Remove(this);
					}
					this._CURRENCy.Entity = value;
					if ((value != null))
					{
						value.CURRENCY_CHANGEs.Add(this);
						this._CUCH_DST_CUR_ID = value.CUR_ID;
					}
					else
					{
						this._CUCH_DST_CUR_ID = default(decimal);
					}
					this.SendPropertyChanged("CURRENCy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CURRENCy_CURRENCY_CHANGE1", Storage="_CURRENCy1", ThisKey="CUCH_SRC_CUR_ID", OtherKey="CUR_ID", IsForeignKey=true)]
		public CURRENCy CURRENCy1
		{
			get
			{
				return this._CURRENCy1.Entity;
			}
			set
			{
				CURRENCy previousValue = this._CURRENCy1.Entity;
				if (((previousValue != value) 
							|| (this._CURRENCy1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CURRENCy1.Entity = null;
						previousValue.CURRENCY_CHANGEs1.Remove(this);
					}
					this._CURRENCy1.Entity = value;
					if ((value != null))
					{
						value.CURRENCY_CHANGEs1.Add(this);
						this._CUCH_SRC_CUR_ID = value.CUR_ID;
					}
					else
					{
						this._CUCH_SRC_CUR_ID = default(decimal);
					}
					this.SendPropertyChanged("CURRENCy1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CURRENCY_CHANGES_HIS")]
	public partial class CURRENCY_CHANGES_HI : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _CUCHH_ID;
		
		private decimal _CUCHH_SRC_CUR_ID;
		
		private decimal _CUCHH_DST_CUR_ID;
		
		private decimal _CUCHH_CHANGE;
		
		private System.DateTime _CUCHH_CHANGE_UTC_INIDATE;
		
		private System.DateTime _CUCHH_CHANGE_UTC_ENDDATE;
		
		private EntityRef<CURRENCy> _CURRENCy;
		
		private EntityRef<CURRENCy> _CURRENCy1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCUCHH_IDChanging(decimal value);
    partial void OnCUCHH_IDChanged();
    partial void OnCUCHH_SRC_CUR_IDChanging(decimal value);
    partial void OnCUCHH_SRC_CUR_IDChanged();
    partial void OnCUCHH_DST_CUR_IDChanging(decimal value);
    partial void OnCUCHH_DST_CUR_IDChanged();
    partial void OnCUCHH_CHANGEChanging(decimal value);
    partial void OnCUCHH_CHANGEChanged();
    partial void OnCUCHH_CHANGE_UTC_INIDATEChanging(System.DateTime value);
    partial void OnCUCHH_CHANGE_UTC_INIDATEChanged();
    partial void OnCUCHH_CHANGE_UTC_ENDDATEChanging(System.DateTime value);
    partial void OnCUCHH_CHANGE_UTC_ENDDATEChanged();
    #endregion
		
		public CURRENCY_CHANGES_HI()
		{
			this._CURRENCy = default(EntityRef<CURRENCy>);
			this._CURRENCy1 = default(EntityRef<CURRENCy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUCHH_ID", AutoSync=AutoSync.OnInsert, DbType="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal CUCHH_ID
		{
			get
			{
				return this._CUCHH_ID;
			}
			set
			{
				if ((this._CUCHH_ID != value))
				{
					this.OnCUCHH_IDChanging(value);
					this.SendPropertyChanging();
					this._CUCHH_ID = value;
					this.SendPropertyChanged("CUCHH_ID");
					this.OnCUCHH_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUCHH_SRC_CUR_ID", DbType="Decimal(18,0) NOT NULL")]
		public decimal CUCHH_SRC_CUR_ID
		{
			get
			{
				return this._CUCHH_SRC_CUR_ID;
			}
			set
			{
				if ((this._CUCHH_SRC_CUR_ID != value))
				{
					if (this._CURRENCy1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCUCHH_SRC_CUR_IDChanging(value);
					this.SendPropertyChanging();
					this._CUCHH_SRC_CUR_ID = value;
					this.SendPropertyChanged("CUCHH_SRC_CUR_ID");
					this.OnCUCHH_SRC_CUR_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUCHH_DST_CUR_ID", DbType="Decimal(18,0) NOT NULL")]
		public decimal CUCHH_DST_CUR_ID
		{
			get
			{
				return this._CUCHH_DST_CUR_ID;
			}
			set
			{
				if ((this._CUCHH_DST_CUR_ID != value))
				{
					if (this._CURRENCy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCUCHH_DST_CUR_IDChanging(value);
					this.SendPropertyChanging();
					this._CUCHH_DST_CUR_ID = value;
					this.SendPropertyChanged("CUCHH_DST_CUR_ID");
					this.OnCUCHH_DST_CUR_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUCHH_CHANGE", DbType="Decimal(18,6) NOT NULL")]
		public decimal CUCHH_CHANGE
		{
			get
			{
				return this._CUCHH_CHANGE;
			}
			set
			{
				if ((this._CUCHH_CHANGE != value))
				{
					this.OnCUCHH_CHANGEChanging(value);
					this.SendPropertyChanging();
					this._CUCHH_CHANGE = value;
					this.SendPropertyChanged("CUCHH_CHANGE");
					this.OnCUCHH_CHANGEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUCHH_CHANGE_UTC_INIDATE", DbType="DateTime NOT NULL")]
		public System.DateTime CUCHH_CHANGE_UTC_INIDATE
		{
			get
			{
				return this._CUCHH_CHANGE_UTC_INIDATE;
			}
			set
			{
				if ((this._CUCHH_CHANGE_UTC_INIDATE != value))
				{
					this.OnCUCHH_CHANGE_UTC_INIDATEChanging(value);
					this.SendPropertyChanging();
					this._CUCHH_CHANGE_UTC_INIDATE = value;
					this.SendPropertyChanged("CUCHH_CHANGE_UTC_INIDATE");
					this.OnCUCHH_CHANGE_UTC_INIDATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUCHH_CHANGE_UTC_ENDDATE", DbType="DateTime NOT NULL")]
		public System.DateTime CUCHH_CHANGE_UTC_ENDDATE
		{
			get
			{
				return this._CUCHH_CHANGE_UTC_ENDDATE;
			}
			set
			{
				if ((this._CUCHH_CHANGE_UTC_ENDDATE != value))
				{
					this.OnCUCHH_CHANGE_UTC_ENDDATEChanging(value);
					this.SendPropertyChanging();
					this._CUCHH_CHANGE_UTC_ENDDATE = value;
					this.SendPropertyChanged("CUCHH_CHANGE_UTC_ENDDATE");
					this.OnCUCHH_CHANGE_UTC_ENDDATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CURRENCy_CURRENCY_CHANGES_HI", Storage="_CURRENCy", ThisKey="CUCHH_DST_CUR_ID", OtherKey="CUR_ID", IsForeignKey=true)]
		public CURRENCy CURRENCy
		{
			get
			{
				return this._CURRENCy.Entity;
			}
			set
			{
				CURRENCy previousValue = this._CURRENCy.Entity;
				if (((previousValue != value) 
							|| (this._CURRENCy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CURRENCy.Entity = null;
						previousValue.CURRENCY_CHANGES_HIs.Remove(this);
					}
					this._CURRENCy.Entity = value;
					if ((value != null))
					{
						value.CURRENCY_CHANGES_HIs.Add(this);
						this._CUCHH_DST_CUR_ID = value.CUR_ID;
					}
					else
					{
						this._CUCHH_DST_CUR_ID = default(decimal);
					}
					this.SendPropertyChanged("CURRENCy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CURRENCy_CURRENCY_CHANGES_HI1", Storage="_CURRENCy1", ThisKey="CUCHH_SRC_CUR_ID", OtherKey="CUR_ID", IsForeignKey=true)]
		public CURRENCy CURRENCy1
		{
			get
			{
				return this._CURRENCy1.Entity;
			}
			set
			{
				CURRENCy previousValue = this._CURRENCy1.Entity;
				if (((previousValue != value) 
							|| (this._CURRENCy1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CURRENCy1.Entity = null;
						previousValue.CURRENCY_CHANGES_HIs1.Remove(this);
					}
					this._CURRENCy1.Entity = value;
					if ((value != null))
					{
						value.CURRENCY_CHANGES_HIs1.Add(this);
						this._CUCHH_SRC_CUR_ID = value.CUR_ID;
					}
					else
					{
						this._CUCHH_SRC_CUR_ID = default(decimal);
					}
					this.SendPropertyChanged("CURRENCy1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
